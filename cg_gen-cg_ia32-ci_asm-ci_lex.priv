----------------------------------------------------------------------------------------------------
module private ci_lex =
-- P©eklada‡ Flexu.
-- Roz¨¡©en¡ lexik ln¡ho analyz toru pro inline assembler.
----------------------------------------------------------------------------------------------------
-- Ondra : 05.04.2002 : Vytvo©il
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure search_asm =
-- Roz¨¡©en¡ lexik ln¡ anal˜zy.
----------------------------------------------------------------------------------------------------
var
  zac              : t_unsigned;
  stred            : t_unsigned;
  kon              : t_unsigned;    

begin
  lex:=lex_nul;

  -- mohla by to b˜t instrukce
  zac:=iinstr:first:ord;
  kon:=iinstr:last:ord;
  loop
    stred:=(zac+kon) div 2;
    if txt>iinstrtxt[iinstr(stred)]
      then zac:=stred+1;
      else kon:=stred;
      end if;
    until zac>=kon;
  -- nalezeno
  if txt=iinstrtxt[iinstr(zac)] then
    lex:=lex_asm_instr;
    val.code:=zac;
    return;
    end if;

  -- mohl by to b˜t prefix
  zac:=iprefix:first:ord;
  while zac<=iprefix:last:ord and then iprefixtxt[iprefix(zac)]<>txt loop succ zac; end loop;
  -- nalezeno
  if zac<=iprefix:last:ord then
    lex:=lex_asm_prefix;
    val.code:=zac;
    return;
    end if;

  -- mohl by to b˜t registr
  zac:=(succ ir_none):ord;
  while (zac<=ireg:last:ord) and (iregtxt[ireg(zac)]<>txt) loop succ zac; end loop;
  -- nalezeno
  if zac<=ireg:last:ord then
    lex:=lex_asm_reg;
    val.code:=zac;
    return;
    end if;

  -- mohla by to b˜t direktiva
  end search_asm;



end ci_lex;