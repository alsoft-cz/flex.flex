----------------------------------------------------------------------------------------------------
module private cc_def =
-- P©eklada‡ Flexu.
-- Z kladn¡ deklaracc_var.ce^.
----------------------------------------------------------------------------------------------------

with
  standard.console,
  standard.conversions;

----------------------------------------------------------------------------------------------------
#separate private cc_lexsym;
-- Definice lexik ln¡ch symbol–.
----------------------------------------------------------------------------------------------------
#separate private cc_errors;
-- Seznam chybov˜ch hl ¨en¡.
----------------------------------------------------------------------------------------------------
#separate private cc_env;
-- #environment promˆnn‚.
----------------------------------------------------------------------------------------------------
#separate private cc_entity;
-- Definice tabulky symbol–.
----------------------------------------------------------------------------------------------------
#separate private cc_tree;
-- Spole‡n‚ deklarace pro rozklad v˜razu a bloku.
----------------------------------------------------------------------------------------------------
#separate private cc_files;
-- Seznam soubor–.
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure entityident_to_string =
-- P©evede identifik tor na ©etˆzec.
----------------------------------------------------------------------------------------------------
var
  i                : ident:range:type;

begin
  for i in ident:range loop
    result & t_char32(ident[i]);
    end loop;
  end entityident_to_string;



----------------------------------------------------------------------------------------------------
procedure verify =
-- Je-li COND=False zp–sob¡ intern¡ chybu CODE.
----------------------------------------------------------------------------------------------------
begin
  if cond then
    --write('verify '); write_line(unsigned_to_string(code));
    cc_var.ce^.seterror({CCERR=}000160,cc_codes.ce_internal);
    cc_var.ce^.setparam(unsigned_to_string(code));
    cc_var.ce^.loadtextpos;
    cc_var.ce^.raiseerror;
    end if;
  end verify;



----------------------------------------------------------------------------------------------------
procedure verifyx =
-- Je-li COND=False zp–sob¡ intern¡ chybu CODE.
----------------------------------------------------------------------------------------------------
begin
  if cond then
    --write('verifyx '); write_line(unsigned_to_string(code));
    cc_var.ce^.seterror({CCERR=}000160,cc_codes.ce_internal);
    cc_var.ce^.setparam(unsigned_to_string(code));
    cc_var.ce^.setpos(pos);
    cc_var.ce^.raiseerror;
    end if;
  end verifyx;



----------------------------------------------------------------------------------------------------
procedure unimplemented =
-- Zp–sob¡ chybu Neimplementov no.
----------------------------------------------------------------------------------------------------
begin
  --write_line('unimplemented');
  cc_var.ce^.seterror({CCERR=}000161,cc_codes.ce_unimplemented);
  cc_var.ce^.setparam(unsigned_to_string(code));
  cc_var.ce^.loadtextpos;
  cc_var.ce^.raiseerror;
  end unimplemented;



----------------------------------------------------------------------------------------------------
procedure unimplementedx =
-- Zp–sob¡ chybu Neimplementov no.
----------------------------------------------------------------------------------------------------
begin
  --write_line('unimplementedx');
  cc_var.ce^.seterror({CCERR=}000161,cc_codes.ce_unimplemented);
  cc_var.ce^.setparam(unsigned_to_string(code));
  cc_var.ce^.setpos(pos);
  cc_var.ce^.raiseerror;
  end unimplementedx;

end cc_def;
