----------------------------------------------------------------------------------------------------
module public address_space =
-- Flex Run-time Library
-- Address space operations
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

type
  -- allocated region type
  t_rtl_memory_type = enum
      trmt_free;                                 -- free area
      trmt_heap;                                 -- standard heap
      trmt_large;                                -- single allocated large area
      trmt_stack;                                -- stack
      trmt_flex;                                 -- stack for Flex                                  
      trmt_code;                                 -- code segment                                    
      trmt_data;                                 -- data segment                                    
      end enum;

----------------------------------------------------------------------------------------------------
procedure rtl_as_reserve (
    num            : in t_rtl_unsigned32;        -- allocation ID
    mtype          : in t_rtl_memory_type;       -- type of allocated area
    orgaddr        : in t_rtl_pointer;           -- address of existing region
    size           : in t_rtl_unsigned32)        -- size of allocated region
    return t_rtl_pointer;        
-- reserves a region of pages in the virtual address space of the calling process
-- return NIL when failed
----------------------------------------------------------------------------------------------------
procedure rtl_as_commit (
    num            : in t_rtl_unsigned32;        -- allocation ID
    mtype          : in t_rtl_memory_type;       -- type of allocated area
    orgaddr        : in t_rtl_pointer;           -- address of existing region
    size           : in t_rtl_unsigned32)        -- size of allocated region
    return t_rtl_pointer;        
-- commit a region of pages in the virtual address space of the calling process
-- return NIL when failed
----------------------------------------------------------------------------------------------------
procedure rtl_as_decommit (
    num            : in t_rtl_unsigned32;        -- allocation ID
    orgaddr        : in t_rtl_pointer;           -- address of region
    size           : in t_rtl_unsigned32)        -- size of allocated region
    return t_rtl_logical32;        
-- decommit a region of pages in the virtual address space of the calling process
-- return TRUE when success else FALSE
----------------------------------------------------------------------------------------------------
procedure rtl_as_release (
    num            : in t_rtl_unsigned32;        -- allocation ID
    orgaddr        : in t_rtl_pointer;           -- address of region
    size           : in t_rtl_unsigned32)        -- size of allocated region
    return t_rtl_logical32;        
-- release a region of pages in the virtual address space of the calling process
-- return TRUE when success else FALSE
----------------------------------------------------------------------------------------------------
procedure rtl_as_register_region (
    num            : in t_rtl_unsigned32;        -- register ID
    mtype          : in t_rtl_memory_type;       -- type of registered region
    addr           : in t_rtl_pointer);          -- pointer to registered region
-- register selected region allocated by operating system
----------------------------------------------------------------------------------------------------
procedure rtl_as_unregister_region (
    num            : in t_rtl_unsigned32;        -- register ID
    addr           : in t_rtl_pointer);          -- pointer to registered region
-- unregister selected region allocated by operating system
----------------------------------------------------------------------------------------------------
procedure rtl_as_register_this_stack (
    num            : in t_rtl_unsigned32);       -- register ID
-- register stack of this process
----------------------------------------------------------------------------------------------------
procedure rtl_as_unregister_this_stack (
    num            : in t_rtl_unsigned32);       -- register ID
-- unregister stack of this process
----------------------------------------------------------------------------------------------------
procedure rtl_as_query_memory_type (
    index          : in t_rtl_unsigned32;
    mtype          : out t_rtl_memory_type);
-- get type of memory block
-- index = address mod memory_gran_size
----------------------------------------------------------------------------------------------------
procedure rtl_as_lock (
    num            : in t_rtl_unsigned32;        -- lock ID
    addr           : in t_rtl_pointer;           -- address of region
    size           : in t_rtl_unsigned32;        -- size of region
    error          : out t_rtl_logical32);       -- error detected
-- lock region in fyzical memory
----------------------------------------------------------------------------------------------------
procedure rtl_as_unlock (
    num            : in t_rtl_unsigned32;        -- lock ID
    addr           : in t_rtl_pointer;           -- address of region
    size           : in t_rtl_unsigned32;        -- size of region
    error          : out t_rtl_logical32);       -- error detected
-- unlock region in fyzical memory
----------------------------------------------------------------------------------------------------

end address_space;