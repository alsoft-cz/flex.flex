type
  -- language defined data types
{%%TODO(RTL) Zve©ejnit, zakomentov no, abychom to omylem nepou‘¡vali.
  char             = character 32;
  boolean          = logical 8;
  integer          = signed #environment target_machine_bits;;
  natural          = unsigned #environment target_machine_bits;;
  real             = digits 15;
}
  exception        = message;

const
  -- language defined constants
  false            = 0<>0;
  true             = 0 =0;

message
  -- language defined messages
  program_error        : exception;              -- defined by language reference
  task_abort           : exception;              -- defined by language reference

  -- general messages
  memory_error         extend program_error;     -- defined by language reference
  memory_alloc_error   extend memory_error;      -- not enought memory
  memory_corrupt_error extend memory_error;      -- memory structure corrupted
  tasking_error        extend program_error;     -- defined by language reference
  tasking_threadvar_error extend tasking_error;  
  numeric_error        extend program_error;     -- defined by language reference
  constraint_error     extend program_error;     -- defined by language reference
  implementation_error extend program_error;     -- defined by language reference
  generic_error        extend program_error;     -- defined by language reference

#if #environment compiler_version;='4.0.2' then;
  -- float-point arithmetic messages
  fp_numeric_error     extend numeric_error;     -- implementation defined
  fp_invalid_operand   extend fp_numeric_error;  -- implementation defined
  fp_denormal_operand  extend fp_numeric_error;  -- implementation defined
  fp_divide_by_zero    extend fp_numeric_error;  -- implementation defined
  fp_numeric_overflow  extend fp_numeric_error;  -- implementation defined
  fp_numeric_underflow extend fp_numeric_error;  -- implementation defined
  fp_inexact_result    extend fp_numeric_error;  -- implementation defined

{%%TEMP}  -- temporary code              
{%%TEMP}  {
{%%TEMP}  type
{%%TEMP}    t_single         = float 32;                   -- single precision float point number
{%%TEMP}    t_double         = float 64;                   -- double precision float point number
{%%TEMP}    t_extended       = float 80;                   -- extended double precision float point number
{%%TEMP}  }
{%%TEMP}  
{%%TEMP}  type
{%%TEMP}    t_single         = array 0..3 of unsigned 8;   -- single precision float point number
{%%TEMP}    t_double         = array 0..7 of unsigned 8;   -- double precision float point number
{%%TEMP}    t_extended       = array 0..9 of unsigned 8;   -- extended double precision float point number
#end if;



----------------------------------------------------------------------------------------------------
-- Floating-point constants
----------------------------------------------------------------------------------------------------
const
  -- øídící slovo procesoru
                                                 --   Exception masks                           
  fp_cw_invalid    = 2$0000_0000_0000_0001;      -- Invalid operation                           
  fp_cw_denormal   = 2$0000_0000_0000_0010;      -- Denormalized operand                        
  fp_cw_zerodivide = 2$0000_0000_0000_0100;      -- Zero divide                                 
  fp_cw_overflow   = 2$0000_0000_0000_1000;      -- Overflow                                    
  fp_cw_underflow  = 2$0000_0000_0001_0000;      -- Underflow                                   
  fp_cw_inexact    = 2$0000_0000_0010_0000;      -- Precision (Inexact result)                  

                                                 --   Rounding Control                          
  fp_cw_chop       = 2$0000_1100_0000_0000;      -- chop                                        
  fp_cw_up         = 2$0000_1000_0000_0000;      -- up                                          
  fp_cw_down       = 2$0000_0100_0000_0000;      -- down                                        
  fp_cw_near       = 2$0000_0000_0000_0000;      -- near                                        

                                                 --   Precision Control                         
  fp_cw_24         = 2$0000_0000_0000_0000;      -- 24 bits                                     
  fp_cw_53         = 2$0000_0010_0000_0000;      -- 53 bits                                     
  fp_cw_64         = 2$0000_0011_0000_0000;      -- 64 bits                                     


  -- stavové slovo procesoru
                                                 --   Exception flags
  fp_sw_invalid    = 2$0000_0000_0000_0001;      -- Invalid operation                           
  fp_sw_denormal   = 2$0000_0000_0000_0010;      -- Denormalized operand                        
  fp_sw_zerodivide = 2$0000_0000_0000_0100;      -- Zero divide                                 
  fp_sw_overflow   = 2$0000_0000_0000_1000;      -- Overflow                                    
  fp_sw_underflow  = 2$0000_0000_0001_0000;      -- Underflow                                   
  fp_sw_inexact    = 2$0000_0000_0010_0000;      -- Precision (Inexact result)                  

  fp_sw_ir         = 2$0000_0000_1000_0000;      -- Interrupt Request

                                                 --   Condition Code 
  fp_sw_C0         = 2$0000_0001_0000_0000;      -- C0
  fp_sw_C1         = 2$0000_0010_0000_0000;      -- C1
  fp_sw_C2         = 2$0000_0100_0000_0000;      -- C2
  fp_sw_C3         = 2$0100_0000_0000_0000;      -- C3

  fp_sw_st         = 2$0011_1000_0000_0000;      -- Stack top pointer




----------------------------------------------------------------------------------------------------
module flex =
-- Flex Run-time Library
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------


#if #environment compiler_version;='4.0.2' then;
{%%TEMP}  -- temporary code
{%%TEMP}  #separate floating_point;      
#end if;

private

{!!}
type
  char             = character 32;
  boolean          = logical 8;
  integer          = signed #environment target_machine_bits;;
  natural          = unsigned #environment target_machine_bits;;
{
  real             = digits 15;
}
#if not #declared rtl_debug; then;
const
  -- runtime-time library debugging mode
  rtl_debug        = false{true};
#end if;

const
  -- operating system selection (to ease conditional compilation)
  os_win32         = #environment target_os_family;='WIN32';
  os_linux         = #environment target_os_family;='UNIX' and then #environment target_os_type;='LINUX';

  -- subsystem
  sub_console      = #environment target_os_subsystem_type;='CONSOLE';
  sub_gui          = #environment target_os_subsystem_type;='GUI';

#if rtl_debug then;
  #display 'Run-time Library debugging mode';
  #if os_win32 then;
    #display 'Platform: Win32';
  #elsif os_linux then;
    #display 'Platform: Linux';
  #else;
    #error 'RTL Internal Error: Unrecognized operating system 1';
  #end if;
#end if;

type
  -- common data types
  t_rtl_signed8    = signed 8;
  t_rtl_signed16   = signed 16;
  t_rtl_signed32   = signed 32;
  t_rtl_unsigned8  = unsigned 8;
  t_rtl_unsigned16 = unsigned 16;
  t_rtl_unsigned32 = unsigned 32;
  t_rtl_logical32  = logical 32;
  t_rtl_logical8   = logical 8;
  t_rtl_pointer    = ^unchecked for machine_pointer use true;
  t_rtl_unsigned8array = array of t_rtl_unsigned8;
  p_rtl_unsigned32 = ^t_rtl_unsigned32;
  t_rtl_tag        = tag;
  t_rtl_native_unsigned = unsigned #environment target_machine_bits;;

#if os_win32 then;
  t_syschar        = character 16;
  t_sysbool        = logical 8;
#elsif os_linux then;
  t_syschar        = character 8;
  t_sysbool        = logical 8;
#else;
  #error 'RTL Internal Error: Unrecognized operating system 2';
#end if;
  t_syscharustr    = string of t_syschar;


----------------------------------------------------------------------------------------------------
procedure rtl_error_write (
    msgz           : in t_syscharustr) =         -- \0 terminated string
-- Displays a fatal error message.
----------------------------------------------------------------------------------------------------
#if os_win32 then;
  #if sub_console then;
    var
      written            : t_rtl_unsigned32;

    const
      STD_INPUT_HANDLE   : t_rtl_unsigned32 = $FFFFFFF6; { ((DWORD)-10) }
      STD_OUTPUT_HANDLE  : t_rtl_unsigned32 = $FFFFFFF5; { ((DWORD)-11) }
      STD_ERROR_HANDLE   : t_rtl_unsigned32 = $FFFFFFF4; { ((DWORD)-12) }

    ------------------------------------------------------------------------------------------------
    procedure GetStdHandle (
        nStdHandle                 : in t_rtl_unsigned32)
        return t_rtl_unsigned32;
    #pragma convention(GetStdHandle,system);
    #pragma import(GetStdHandle,'GetStdHandle','KERNEL32.DLL');
    ------------------------------------------------------------------------------------------------
    procedure WriteConsole (
        hConsoleOutput             : in t_rtl_unsigned32;
        lpBuffer                   : in unchecked;
        nNumberOfCharsToWrite      : in t_rtl_unsigned32;
        lpNumberOfCharsWritten     : out t_rtl_unsigned32;
        lpReserved                 : in t_rtl_pointer)
        return t_sysbool;
    #pragma convention(WriteConsole,system);
    #pragma import(WriteConsole,'WriteConsoleW','KERNEL32.DLL');
    ------------------------------------------------------------------------------------------------
  #elsif sub_gui then;
    var
      title    : static const array 1..22 of t_syschar := 'Flex Run-time Library'\0;

    ------------------------------------------------------------------------------------------------
    procedure messagebox (handle : t_rtl_unsigned32; lpText: in unchecked; lpCaption: in unchecked {char16array}; uType: t_rtl_unsigned32) return t_sysbool;
    #pragma convention(messagebox,system);
    #pragma import(messagebox,'MessageBoxW','USER32.DLL');
    ------------------------------------------------------------------------------------------------
  #else;
    #error 'RTL Internal Error: Unrecognized subsystem';
  #end if;
#elsif os_linux then;
  const
    nr_sys_write   =     4; {#syscallnr(nr_sys_write,           4 ,      4 ,      4 ,      4 ); -- write to a object descriptor}

  const
    sys_stderr     = 2;        -- standard error output
#else;
  #error 'RTL Internal Error: Unrecognized operating system 3';
#end if;

begin
#if os_win32 then;
  #if sub_console then;
    if writeconsole(getstdhandle(std_error_handle),msgz[1],msgz:length,written,nil) then
      -- ignore errors
      end if;
  #elsif sub_gui then;
    if messagebox(0,msgz[1],title,0) then
      -- ignore errors
      end if;
  #else;
    #error 'RTL Internal Error: Unrecognized subsystem';
  #end if;
#elsif os_linux then;
  #syntax asm;
    mov  eax,msgz              -- address of MSGZ
    mov  edx,[eax]             -- number of bytes to write
    dec  edx                   -- (\0 terminated)
    lea  ecx,[eax+4]           -- MSGZ
    mov  ebx,sys_stderr        -- file/object descriptor
    mov  eax,nr_sys_write      -- syst‚mov  slu‘ba "write"
    int  $80                   -- volat kernel
    -- ignore errors
    #end asm;
#else;
  #error 'RTL Internal Error: Unrecognized operating system 4';
#end if;
  end rtl_error_write;



----------------------------------------------------------------------------------------------------
procedure rtl_terminate (
    code           : in t_rtl_unsigned32) =      -- process exit code passed to the OS
-- Terminates the program with exit-code CODE.
----------------------------------------------------------------------------------------------------

#if os_win32 then;
  --------------------------------------------------------------------------------------------------
  procedure exitprocess (code : t_rtl_unsigned32);
  #pragma convention(exitprocess,system);
  #pragma import(exitprocess,'ExitProcess','KERNEL32.DLL');
  --------------------------------------------------------------------------------------------------
#elsif os_linux then;
  const
    nr_sys_exit    =     1; {#syscallnr(nr_sys_exit,            1 ,      1 ,      1 ,      1 ); -- terminate the calling process}                                          
#else;
  #error 'RTL Internal Error: Unrecognized operating system 5';
#end if;

begin
#if os_win32 then;
  exitprocess(code);
#elsif os_linux then;
  #syntax asm;
    mov   ebx,code                               -- exit status of the calling process
    mov   eax,nr_sys_exit                        -- kernel syscall "terminate the calling process"
    int   $80                                    -- call to kernel
    #end asm;
#else;
  #error 'RTL Internal Error: Unrecognized operating system 6';
#end if;
  end rtl_terminate;



----------------------------------------------------------------------------------------------------
procedure rtl_terminate0 =
-- Terminates the program with exit-code 0.
----------------------------------------------------------------------------------------------------
begin
  rtl_terminate(0);
  end rtl_terminate0;



----------------------------------------------------------------------------------------------------
#separate public synchronization;
#separate private synchronization;
-- Synchronization manager.
----------------------------------------------------------------------------------------------------
#separate public thread;
#separate private thread;
-- Threads
----------------------------------------------------------------------------------------------------
#separate public memory;
#separate private memory;
-- Memory manager.
----------------------------------------------------------------------------------------------------
#separate public messages;
#separate private messages;
-- Messages.
----------------------------------------------------------------------------------------------------
#separate public exceptions;
#separate private exceptions;
-- Exceptions (asynchronous messages).
----------------------------------------------------------------------------------------------------
#separate public tags;
#separate private tags;
-- Tags.
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
exit =
-- Normal program termination.
----------------------------------------------------------------------------------------------------
begin
  -- terminate (and do not stay resident)

  -- HYNEK 23/06/2003 - compiler sam vi, kdy volat rtl_terminate
  -- rtl_terminate(0);
  end exit;



---- Compiler magic --------------------------------------------------------------------------------
#pragma assign(terminate,flex.rtl_terminate0);
----------------------------------------------------------------------------------------------------

end flex;


#if #environment compiler_version;='4.0.2' then;
{%%TEMP}  -- temporary code
{%%TEMP}  overload + :   -- binární operátor
{%%TEMP}                 flex.floating_point.fp_add_xx, 
{%%TEMP}                 flex.floating_point.fp_add_xd, 
{%%TEMP}                 flex.floating_point.fp_add_xs, 
{%%TEMP}                 flex.floating_point.fp_add_dx, 
{%%TEMP}                 flex.floating_point.fp_add_dd, 
{%%TEMP}                 flex.floating_point.fp_add_ds, 
{%%TEMP}                 flex.floating_point.fp_add_sx, 
{%%TEMP}                 flex.floating_point.fp_add_sd, 
{%%TEMP}                 flex.floating_point.fp_add_ss,
{%%TEMP}                 -- binární pøiøazovací operátor
{%%TEMP}                 flex.floating_point.fp_add_assign_xx, 
{%%TEMP}                 flex.floating_point.fp_add_assign_xd, 
{%%TEMP}                 flex.floating_point.fp_add_assign_xs, 
{%%TEMP}                 flex.floating_point.fp_add_assign_dx, 
{%%TEMP}                 flex.floating_point.fp_add_assign_dd, 
{%%TEMP}                 flex.floating_point.fp_add_assign_ds, 
{%%TEMP}                 flex.floating_point.fp_add_assign_sx, 
{%%TEMP}                 flex.floating_point.fp_add_assign_sd, 
{%%TEMP}                 flex.floating_point.fp_add_assign_ss,
{%%TEMP}                 -- unární operátor
{%%TEMP}                 flex.floating_point.fp_plus_x, 
{%%TEMP}                 flex.floating_point.fp_plus_d, 
{%%TEMP}                 flex.floating_point.fp_plus_s,
{%%TEMP}                 -- unární pøiøazovací operátor
{%%TEMP}                 flex.floating_point.fp_plus_assign_x, 
{%%TEMP}                 flex.floating_point.fp_plus_assign_d, 
{%%TEMP}                 flex.floating_point.fp_plus_assign_s;
{%%TEMP}                 
{%%TEMP}  overload - :   -- binární operátor
{%%TEMP}                 flex.floating_point.fp_sub_xx, 
{%%TEMP}                 flex.floating_point.fp_sub_xd, 
{%%TEMP}                 flex.floating_point.fp_sub_xs, 
{%%TEMP}                 flex.floating_point.fp_sub_dx, 
{%%TEMP}                 flex.floating_point.fp_sub_dd, 
{%%TEMP}                 flex.floating_point.fp_sub_ds, 
{%%TEMP}                 flex.floating_point.fp_sub_sx, 
{%%TEMP}                 flex.floating_point.fp_sub_sd, 
{%%TEMP}                 flex.floating_point.fp_sub_ss,
{%%TEMP}                 -- binární pøiøazovací operátor
{%%TEMP}                 flex.floating_point.fp_sub_assign_xx, 
{%%TEMP}                 flex.floating_point.fp_sub_assign_xd, 
{%%TEMP}                 flex.floating_point.fp_sub_assign_xs, 
{%%TEMP}                 flex.floating_point.fp_sub_assign_dx, 
{%%TEMP}                 flex.floating_point.fp_sub_assign_dd, 
{%%TEMP}                 flex.floating_point.fp_sub_assign_ds, 
{%%TEMP}                 flex.floating_point.fp_sub_assign_sx, 
{%%TEMP}                 flex.floating_point.fp_sub_assign_sd, 
{%%TEMP}                 flex.floating_point.fp_sub_assign_ss,
{%%TEMP}                 -- unární operátor
{%%TEMP}                 flex.floating_point.fp_minus_x, 
{%%TEMP}                 flex.floating_point.fp_minus_d, 
{%%TEMP}                 flex.floating_point.fp_minus_s,
{%%TEMP}                 -- unární pøiøazovací operátor
{%%TEMP}                 flex.floating_point.fp_minus_assign_x, 
{%%TEMP}                 flex.floating_point.fp_minus_assign_d, 
{%%TEMP}                 flex.floating_point.fp_minus_assign_s;
{%%TEMP}                 
{%%TEMP}  overload * :   -- binární operátor
{%%TEMP}                 flex.floating_point.fp_mul_xx, 
{%%TEMP}                 flex.floating_point.fp_mul_xd, 
{%%TEMP}                 flex.floating_point.fp_mul_xs, 
{%%TEMP}                 flex.floating_point.fp_mul_dx, 
{%%TEMP}                 flex.floating_point.fp_mul_dd, 
{%%TEMP}                 flex.floating_point.fp_mul_ds, 
{%%TEMP}                 flex.floating_point.fp_mul_sx, 
{%%TEMP}                 flex.floating_point.fp_mul_sd, 
{%%TEMP}                 flex.floating_point.fp_mul_ss,
{%%TEMP}                 -- binární pøiøazovací operátor
{%%TEMP}                 flex.floating_point.fp_mul_assign_xx, 
{%%TEMP}                 flex.floating_point.fp_mul_assign_xd, 
{%%TEMP}                 flex.floating_point.fp_mul_assign_xs, 
{%%TEMP}                 flex.floating_point.fp_mul_assign_dx, 
{%%TEMP}                 flex.floating_point.fp_mul_assign_dd, 
{%%TEMP}                 flex.floating_point.fp_mul_assign_ds, 
{%%TEMP}                 flex.floating_point.fp_mul_assign_sx, 
{%%TEMP}                 flex.floating_point.fp_mul_assign_sd, 
{%%TEMP}                 flex.floating_point.fp_mul_assign_ss;
{%%TEMP}                 
{%%TEMP}  overload / :   -- binární operátor
{%%TEMP}                 flex.floating_point.fp_div_xx, 
{%%TEMP}                 flex.floating_point.fp_div_xd, 
{%%TEMP}                 flex.floating_point.fp_div_xs, 
{%%TEMP}                 flex.floating_point.fp_div_dx, 
{%%TEMP}                 flex.floating_point.fp_div_dd, 
{%%TEMP}                 flex.floating_point.fp_div_ds, 
{%%TEMP}                 flex.floating_point.fp_div_sx, 
{%%TEMP}                 flex.floating_point.fp_div_sd, 
{%%TEMP}                 flex.floating_point.fp_div_ss,
{%%TEMP}                 -- binární pøiøazovací operátor
{%%TEMP}                 flex.floating_point.fp_div_assign_xx, 
{%%TEMP}                 flex.floating_point.fp_div_assign_xd, 
{%%TEMP}                 flex.floating_point.fp_div_assign_xs, 
{%%TEMP}                 flex.floating_point.fp_div_assign_dx, 
{%%TEMP}                 flex.floating_point.fp_div_assign_dd, 
{%%TEMP}                 flex.floating_point.fp_div_assign_ds, 
{%%TEMP}                 flex.floating_point.fp_div_assign_sx, 
{%%TEMP}                 flex.floating_point.fp_div_assign_sd, 
{%%TEMP}                 flex.floating_point.fp_div_assign_ss;
{%%TEMP}                 
{%%TEMP}  overload := :  flex.floating_point.fp_assign_xx, 
{%%TEMP}                 flex.floating_point.fp_assign_xd, 
{%%TEMP}                 flex.floating_point.fp_assign_xs,
{%%TEMP}                 flex.floating_point.fp_assign_dx, 
{%%TEMP}                 flex.floating_point.fp_assign_dd, 
{%%TEMP}                 flex.floating_point.fp_assign_ds,
{%%TEMP}                 flex.floating_point.fp_assign_sx, 
{%%TEMP}                 flex.floating_point.fp_assign_sd, 
{%%TEMP}                 flex.floating_point.fp_assign_ss;
{%%TEMP}                 
{%%TEMP}  overload = :   flex.floating_point.fp_comp_eq_xx, 
{%%TEMP}                 flex.floating_point.fp_comp_eq_xd, 
{%%TEMP}                 flex.floating_point.fp_comp_eq_xs,
{%%TEMP}                 flex.floating_point.fp_comp_eq_dx, 
{%%TEMP}                 flex.floating_point.fp_comp_eq_dd, 
{%%TEMP}                 flex.floating_point.fp_comp_eq_ds,
{%%TEMP}                 flex.floating_point.fp_comp_eq_sx, 
{%%TEMP}                 flex.floating_point.fp_comp_eq_sd, 
{%%TEMP}                 flex.floating_point.fp_comp_eq_ss;
{%%TEMP}                 
{%%TEMP}  overload <> :  flex.floating_point.fp_comp_ne_xx, 
{%%TEMP}                 flex.floating_point.fp_comp_ne_xd, 
{%%TEMP}                 flex.floating_point.fp_comp_ne_xs,
{%%TEMP}                 flex.floating_point.fp_comp_ne_dx, 
{%%TEMP}                 flex.floating_point.fp_comp_ne_dd, 
{%%TEMP}                 flex.floating_point.fp_comp_ne_ds,
{%%TEMP}                 flex.floating_point.fp_comp_ne_sx, 
{%%TEMP}                 flex.floating_point.fp_comp_ne_sd, 
{%%TEMP}                 flex.floating_point.fp_comp_ne_ss;
{%%TEMP}                 
{%%TEMP}  overload > :   flex.floating_point.fp_comp_g_xx, 
{%%TEMP}                 flex.floating_point.fp_comp_g_xd, 
{%%TEMP}                 flex.floating_point.fp_comp_g_xs,
{%%TEMP}                 flex.floating_point.fp_comp_g_dx, 
{%%TEMP}                 flex.floating_point.fp_comp_g_dd, 
{%%TEMP}                 flex.floating_point.fp_comp_g_ds,
{%%TEMP}                 flex.floating_point.fp_comp_g_sx, 
{%%TEMP}                 flex.floating_point.fp_comp_g_sd, 
{%%TEMP}                 flex.floating_point.fp_comp_g_ss;
{%%TEMP}                 
{%%TEMP}  overload >= :  flex.floating_point.fp_comp_ge_xx, 
{%%TEMP}                 flex.floating_point.fp_comp_ge_xd, 
{%%TEMP}                 flex.floating_point.fp_comp_ge_xs,
{%%TEMP}                 flex.floating_point.fp_comp_ge_dx, 
{%%TEMP}                 flex.floating_point.fp_comp_ge_dd, 
{%%TEMP}                 flex.floating_point.fp_comp_ge_ds,
{%%TEMP}                 flex.floating_point.fp_comp_ge_sx, 
{%%TEMP}                 flex.floating_point.fp_comp_ge_sd, 
{%%TEMP}                 flex.floating_point.fp_comp_ge_ss;
{%%TEMP}                 
{%%TEMP}  overload < :   flex.floating_point.fp_comp_l_xx, 
{%%TEMP}                 flex.floating_point.fp_comp_l_xd, 
{%%TEMP}                 flex.floating_point.fp_comp_l_xs,
{%%TEMP}                 flex.floating_point.fp_comp_l_dx, 
{%%TEMP}                 flex.floating_point.fp_comp_l_dd, 
{%%TEMP}                 flex.floating_point.fp_comp_l_ds,
{%%TEMP}                 flex.floating_point.fp_comp_l_sx, 
{%%TEMP}                 flex.floating_point.fp_comp_l_sd, 
{%%TEMP}                 flex.floating_point.fp_comp_l_ss;
{%%TEMP}                 
{%%TEMP}  overload <= :  flex.floating_point.fp_comp_le_xx, 
{%%TEMP}                 flex.floating_point.fp_comp_le_xd, 
{%%TEMP}                 flex.floating_point.fp_comp_le_xs,
{%%TEMP}                 flex.floating_point.fp_comp_le_dx, 
{%%TEMP}                 flex.floating_point.fp_comp_le_dd, 
{%%TEMP}                 flex.floating_point.fp_comp_le_ds,
{%%TEMP}                 flex.floating_point.fp_comp_le_sx, 
{%%TEMP}                 flex.floating_point.fp_comp_le_sd, 
{%%TEMP}                 flex.floating_point.fp_comp_le_ss;
{%%TEMP}  
{%%TEMP}  overload abs : -- unární operátor 
{%%TEMP}                 flex.floating_point.fp_abs_x, 
{%%TEMP}                 flex.floating_point.fp_abs_d, 
{%%TEMP}                 flex.floating_point.fp_abs_s,
{%%TEMP}                 -- unární pøiøazovací operátor
{%%TEMP}                 flex.floating_point.fp_abs_assign_x,
{%%TEMP}                 flex.floating_point.fp_abs_assign_d,
{%%TEMP}                 flex.floating_point.fp_abs_assign_s;
#end if;