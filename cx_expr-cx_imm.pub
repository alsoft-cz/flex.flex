----------------------------------------------------------------------------------------------------
module public cx_imm =
-- P©eklada‡ Flexu.
-- Operace s p©¡mou hodnotou.
----------------------------------------------------------------------------------------------------
-- Ondra : 24.07.2001 : Vytvo©il.
----------------------------------------------------------------------------------------------------

with
  cc_def.cc_lexsym;

----------------------------------------------------------------------------------------------------
procedure store_ordinal (
    imm            : out timm_value;             -- p©¡m  hodnota
    ui             : in tuniint);                -- univerz ln¡ integer
-- Ulo‘¡ do p©¡m‚ hodnoty univerz ln¡ integer.
----------------------------------------------------------------------------------------------------
procedure store_real (
    imm            : out timm_value;             -- p©¡m  hodnota
    ur             : in tunireal);               -- univerz ln¡ real
-- Ulo‘¡ do p©¡m‚ hodnoty univerz ln¡ real.
----------------------------------------------------------------------------------------------------
procedure store_nil (
    imm            : out timm_value);            -- p©¡m  hodnota
-- Ulo‘¡ do p©¡m‚ hodnoty NIL.
----------------------------------------------------------------------------------------------------
procedure store_string (
    imm            : out timm_value;             -- p©¡m  hodnota
    str            : in plexaggregate);          -- znakov˜ agreg t
-- Ulo‘¡ do p©¡m‚ hodnoty znakov˜ agreg t.
-- (Nealokuje pamˆŸ, jen p©evezme pointer).
----------------------------------------------------------------------------------------------------
procedure store_sysstr (
    imm            : out timm_value;             -- p©¡m  hodnota
    s              : in t_char32ustr);           --©etˆzec
-- Ulo‘¡ do p©¡m‚ hodnoty syst‚mov˜ ©etˆzec.
----------------------------------------------------------------------------------------------------
procedure store_imm (
    imm            : out timm_value;             -- p©¡m  hodnota
    from           : in timm_value);             -- zdrojov  p©¡m  hodnota
-- Zkop¡ruje do p©¡m‚ hodnoty jinou p©¡mou hodnotu.
-- (vytv ©¡ fyzickou kopii).
----------------------------------------------------------------------------------------------------
procedure store_array (
    imm            : out timm_value;             -- p©¡m  hodnota
    items          : in t_unsigned);             -- p©edalokovan˜ po‡et polo‘ek
-- Vytvo©¡ p©¡mou hodnotu typu agreg t pole.
----------------------------------------------------------------------------------------------------
procedure store_array_item (
    context        : in tcontext;                   -- aktu ln¡ kontext
    imm            : in out timm_value;          -- p©¡m  hodnota
    val            : in tuniint;                 -- index
    item           : in timm_value);             -- hodnota polo‘ky
-- Ulo‘¡ do p©¡m‚ hodnoty (agreg tu pole) hodnotu polo‘ek v ur‡it‚m rozsahu.
----------------------------------------------------------------------------------------------------
procedure store_array_items_range (
    imm            : in out timm_value;          -- p©¡m  hodnota
    lval           : in tuniint;                 -- doln¡ mez
    hval           : in tuniint;                 -- horn¡ mez
    item           : in timm_value);             -- hodnota polo‘ky
-- Ulo‘¡ do p©¡m‚ hodnoty (agreg tu pole) hodnotu polo‘ek v ur‡it‚m rozsahu.
----------------------------------------------------------------------------------------------------
procedure store_array_others (
    imm            : in out timm_value;          -- p©¡m  hodnota
    item           : in timm_value);             -- hodnota polo‘ky
-- Ulo‘¡ do p©¡m‚ hodnoty (agreg tu pole) hodnotu OTHERS.
----------------------------------------------------------------------------------------------------
procedure store_record (
    imm            : out timm_value);            -- p©¡m  hodnota
-- Vytvo©¡ p©¡mou hodnotu typu agreg t ©etˆzce.
----------------------------------------------------------------------------------------------------
procedure store_record_item (
    imm            : in out timm_value;          -- p©¡m  hodnota
    pitem          : in pentity_var;             -- souvisej¡c¡ polo‘ka
    item           : in timm_value);             -- hodnota polo‘ky
-- Ulo‘¡ do p©¡m‚ hodnoty (agreg tu recordu) hodnotu jedn‚ polo‘ky.
----------------------------------------------------------------------------------------------------
procedure store_record_others (
    imm            : in out timm_value;          -- p©¡m  hodnota
    item           : in timm_value);             -- hodnota polo‘ky
-- Ulo‘¡ do p©¡m‚ hodnoty (agreg tu recordu) hodnotu OTHERS.
----------------------------------------------------------------------------------------------------
procedure store_set (
    imm            : out timm_value);            -- p©¡m  hodnota
-- Vytvo©¡ p©¡mou hodnotu typu agreg t mno‘iny.
----------------------------------------------------------------------------------------------------
procedure store_set_item (
    context        : in tcontext;                   -- aktu ln¡ kontext
    imm            : in out timm_value;          -- p©¡m  hodnota
    val            : in tuniint);                -- ukl dan  hodnota
-- Ulo‘¡ do p©¡m‚ hodnoty (agreg tu mno‘iny) polo‘ku.
----------------------------------------------------------------------------------------------------
procedure store_set_items_range (
    imm            : in out timm_value;          -- p©¡m  hodnota
    lval           : in tuniint;                 -- doln¡ mez
    hval           : in tuniint);                -- horn¡ mez
-- Ulo‘¡ do p©¡m‚ hodnoty (agreg tu mno‘iny) polo‘ky v ur‡it‚m rozsahu.
----------------------------------------------------------------------------------------------------
procedure load_uniint (
    imm            : in timm_value;              -- p©¡m  hodnota
    ui             : out tuniint);               -- cel‚ ‡¡slo
-- Z p©¡m‚ hodnoty na‡te univerz ln¡ cel‚ ‡¡slo.
----------------------------------------------------------------------------------------------------
procedure load_unireal (
    imm            : in timm_value;              -- p©¡m  hodnota
    ur             : out tunireal);              -- re ln‚ ‡¡slo
-- Z p©¡m‚ hodnoty na‡te univerz ln¡ re ln‚ ‡¡slo
----------------------------------------------------------------------------------------------------
procedure load_unilogical (
    imm            : in timm_value;              -- p©¡m  hodnota
    ul             : out tunilogical);           -- cel‚ ‡¡slo
-- Z p©¡m‚ hodnoty na‡te univerz ln¡ logickou hodnotu.
----------------------------------------------------------------------------------------------------
procedure load_sysstr (
    imm            : in timm_value;              -- p©¡m  hodnota
    s              : out t_char32ustr);          --©etˆzec
-- Z p©¡m‚ hodnoty na‡te syst‚mov˜ ©etˆzec.
----------------------------------------------------------------------------------------------------
procedure load_image (
    imm            : in timm_value;              -- p©¡m  hodnota
    t              : in typeview;                -- typ pro form tov n¡
    s              : out t_char32ustr);          -- v˜sledn˜ ©etˆzec
-- Z p©¡m‚ hodnoty na‡te jej¡ textovou reprezentaci.
----------------------------------------------------------------------------------------------------
procedure imm_settype (
    curr           : in tcontext;                -- p©ekl dan˜ prvek
    imm            : in out timm_value;          -- p©¡m  hodnota
    oldtype        : in typeview;                -- p–vodn¡ typ
    newtype        : in typeview;                -- nov˜ typ
    change         : out t_logical);             -- T-zmˆnila se intern¡ reprezentace
-- Konvertuje p©¡mou hodnotu star‚ho typu na nov˜ typ.
----------------------------------------------------------------------------------------------------
procedure imm_check (
    curr           : in tcontext;                -- p©ekl dan˜ prvek
    imm            : in timm_value;              -- p©¡m  hodnota
    t              : in typeview);               -- typ hodnoty
-- Kontrola spr vnosti p©¡m‚ hodnoty.
----------------------------------------------------------------------------------------------------
procedure imm_get_length (
    imm            : in timm_value;              -- p©¡m  hodnota
    length         : out tuniint);               -- d‚lka znakov‚ho agreg tu
-- D‚lka znakov‚ho agreg tu.
----------------------------------------------------------------------------------------------------
procedure imm_isnil (
    imm            : in timm_value)              -- p©¡m  hodnota
                   return t_logical;             -- T-kongruentn¡ s NIL
-- True, je-li p©¡m  hodnota NIL nebo NIL-ekvivalentn¡.
----------------------------------------------------------------------------------------------------
procedure imm_isfullset (
    imm            : in timm_value;              -- p©¡m  hodnota
    ptyp           : in pentity_type)            -- typ mno‘iny
                   return t_logical;             -- T-kongruentn¡ s NIL
-- True, je-li p©¡m  hodnota ekvivalentn¡ £pln‚ mno‘inˆ.
----------------------------------------------------------------------------------------------------
procedure imm_union (
    context        : in tcontext;                   -- aktu ln¡ kontext
    A              : in out timm_value;          -- mno‘ina na lev‚ stranˆ
    B              : in timm_value);             -- mno‘ina na prav‚ stranˆ
-- Sjednocen¡ dvou mno‘in.
----------------------------------------------------------------------------------------------------
procedure imm_diff (
    A              : in out timm_value;          -- mno‘ina na lev‚ stranˆ
    B              : in timm_value);             -- mno‘ina na prav‚ stranˆ
-- Rozd¡l dvou mno‘in.
----------------------------------------------------------------------------------------------------
procedure imm_cmp (
    imm1           : in timm_value;              -- lev˜ operand
    imm2           : in timm_value;              -- prav˜ operand
    oper           : in tcmpoper;                -- typ porovn n¡
    cmp            : out t_logical);             -- v˜sledek porovn n¡
-- Porovn n¡ dvou p©¡m˜ch hodnot.
----------------------------------------------------------------------------------------------------

end cx_imm;