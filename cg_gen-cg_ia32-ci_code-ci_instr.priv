----------------------------------------------------------------------------------------------------
module private ci_instr =
-- P©eklada‡ Flexu.
-- Generov n¡ instrukc¡.
----------------------------------------------------------------------------------------------------
-- Ondra : 05.04.2002 : Vytvo©il
----------------------------------------------------------------------------------------------------

with
  cc_def.cc_codes,
  cc_def.cc_var,
  cc_base,
  cc_base.cc_debug,
  cc_base.cc_rtl,
  ci_oper,
  ci_relo;

const
  -- adresy ukl dan‚ do pole Displacement
  ets_disp         = tentitytypeset:[et_var,et_procedure,et_static,et_virtual,et_override,et_program,et_special];

----------------------------------------------------------------------------------------------------
procedure adjust_c (
    inst           : in out icodeinst) =
----------------------------------------------------------------------------------------------------
var
  c                : inst.c:type;

begin
  if inst.c=nil then 
    new inst.c range icodeinit;
  elsif inst.c^:length+iimaxsize>inst.c^:last then
    --%%TODO(ADJUST) adjust inst.c range inst.c^:last+icodedelta;
    new c range inst.c^:last*2{+icodedelta};
    c^:=inst.c^;
    discard inst.c;
    inst.c:=c;
    end if;
  end adjust_c;



----------------------------------------------------------------------------------------------------
procedure addip =
-- P©id  prefix.
----------------------------------------------------------------------------------------------------
begin
  ----- (re)alokovat pamˆŸ -----
  adjust_c(inst);

  ----- p©idat prefix -----
  inst.c^ & iprefixcode[prefix];

#if dump then;
  if opt_dump_code in info.compv.opts then 
    debug_dump(entityident_to_string(iprefixtxt[prefix])); 
    end if;
#end if;
  end addip;



----------------------------------------------------------------------------------------------------
procedure addjump =
-- P©id  (ne)podm¡nˆn˜ relativn¡ skok dan˜ absolutn¡ c¡lovou adresou.
----------------------------------------------------------------------------------------------------
var
  op1              : ioper;                      -- operand

begin
  -- p©ipravit operand
  nullop(op1,io_rel);
  op1.disptarget:=target;

  -- upravit velikost operandu
  adjustoprel(inst,info,cond,op1);

  -- p©idat instrukci
  addii(inst,info,icondinstr[cond,iic_jmp],op1,op0,op0);
  end addjump;



----------------------------------------------------------------------------------------------------
procedure addbytes =
-- P©id  sekvenci byt–.
----------------------------------------------------------------------------------------------------
begin
  ----- (re)alokovat pamˆŸ -----
  adjust_c(inst);

  ----- p©idat sekvenci byt– -----
  inst.c^ & bytes;
  end addbytes;



----------------------------------------------------------------------------------------------------
procedure addloop =
-- P©id  LOOP na danou absolutn¡ c¡lovou adresou.
----------------------------------------------------------------------------------------------------
var
  op1              : ioper;                      -- operand

begin
  -- p©ipravit operand
  nullop(op1,io_rel);
  op1.disptarget:=target;

  -- upravit velikost operandu
  adjustoprel(inst,info,ic_ucond,op1);

  -- p©idat instrukci
  addii(inst,info,ii_loop,op1,op0,op0);
  end addloop;



----------------------------------------------------------------------------------------------------
procedure addcall =
-- P©id  vol n¡ podprogramu.
----------------------------------------------------------------------------------------------------
var
  op1              : ioper;                      -- operand

begin
  -- p©ipravit operand
  nullop(op1,io_rel);
  op1.size:=lprg32;
  op1.rtype:=irt_symbol;
  op1.psym:=psym;

  -- p©idat instrukci
  addii(inst,info,ii_call,op1,op0,op0);
  end addcall;



----------------------------------------------------------------------------------------------------
procedure addcallrtl =
-- P©id  vol n¡ intern¡ho podprogramu.
----------------------------------------------------------------------------------------------------
var
  pproc            : pentity_procedure;
  pid              : pentityident;

begin
  rtl_get_proc(rtl,pproc);
  if pproc=nil then
    ce^.seterror({CCERR=}000380,ce_int_intproc);
    rtl_get_procid(rtl,pid);
    ce^.setparam(entityident_to_string(pid^));
    ce^.raiseerror;
    end if;
  addcall(inst,info,pproc);
  end addcallrtl;



------------------------------------------------------------------------------------------------------
--procedure addpushud =
---- P©id  PUSH UD.
------------------------------------------------------------------------------------------------------
--var
--  op1              : ioper;                      -- operand
--
--begin
--  -- p©ipravit operand
--  nullop(op1,io_imm);
--  op1.imm:=unidata_to_imm32(ud);
--  op1.size:=4;
--
--  -- p©idat instrukci
--  addii(inst,info,ii_push,op1,op0,op0);
--  end addpushud;



----------------------------------------------------------------------------------------------------
procedure addpushofs =
-- P©id  LEA EAX,[EBP+ofs]; PUSH EAX.
----------------------------------------------------------------------------------------------------
var
  op1              : ioper;                      -- operandy
  op2              : ioper;                      -- operandy

begin
  -- p©ipravit lev˜ operand
  newopreg(inst,info,context,op1,4,irm_addr,op0);

  -- p©ipravit prav˜ operand
  nullop(op2,io_mem);
  op2.base.reg:=ir_ebp;
  op2.disp:=ofs;
  op2.size:=4;

  -- LEA EAX,[EBP+ofs]
  addii(inst,info,ii_lea,op1,op2,op0);

  -- PUSH EAX
  addii(inst,info,ii_push,op1,op0,op0);

  -- uvolnit prvn¡ operand
  --%%OLD freeop(info,op1);
  end addpushofs;



----------------------------------------------------------------------------------------------------
procedure addmovaddr =
-- P©id  MOV [EBP+ofs],<adresa n vˆ¨t¡ address>
----------------------------------------------------------------------------------------------------
var
  op1              : ioper;                      -- operandy
  op2              : ioper;                      -- operandy

begin
  -- p©ipravit lev˜ operand
  nullop(op1,io_mem);
  op1.base.reg:=ir_ebp;
  op1.disp:=ofs;
  op1.size:=4;

  -- p©ipravit prav˜ operand
  nullop(op2,io_imm);
  op2.size:=4;

  -- p©idat instrukci
  addii(inst,info,ii_mov,op1,op2,op0);

  -- lok ln¡ relokace: absolutn¡ adresa n vˆ¨t¡
  addunres(info,target,inst.c^:length,getfieldaddr(info,iif_imm1),4,true);
  end addmovaddr;



----------------------------------------------------------------------------------------------------
procedure addopimm =
-- P©id  <ii> <op>,<value>.
----------------------------------------------------------------------------------------------------
var
  opvalue          : ioper;

begin
  -- p©ipravit operand
  nullop(opvalue,io_imm);
  opvalue.imm:=unsigned_to_imm32(value);

  -- p©idat instrukci
  addii(inst,info,ii,op,opvalue,op0);
  end addopimm;



----------------------------------------------------------------------------------------------------
procedure addsubimm =
-- P©id  SUB <op>,<value>.
----------------------------------------------------------------------------------------------------
begin
  -- ne¨la by nˆjak  optimalizace ?
  if value=1

    -- ¨la, DEC
    then addii(inst,info,ii_dec,op,op0,op0)

    -- ne¨la, mus¡me SUB
    else addopimm(inst,info,ii_sub,op,value);
    end if;
  end addsubimm;



----------------------------------------------------------------------------------------------------
procedure addaddimm =
-- P©id  ADD <op>,<value>.
-- Pokud je VALUE=1, pou‘ije se instrukce INC.
----------------------------------------------------------------------------------------------------
begin
  -- ne¨la by nˆjak  optimalizace ?
  if value=1

    -- ¨la, INC
    then addii(inst,info,ii_inc,op,op0,op0)

    -- ne¨la, mus¡me SUB
    else addopimm(inst,info,ii_add,op,value);
    end if;
  end addaddimm;



----------------------------------------------------------------------------------------------------
procedure addopreg =
-- P©id  <ii> <reg>,<op>.
----------------------------------------------------------------------------------------------------
var
  opreg            : ioper;

begin
  -- p©ipravit operand
  nullop(opreg,io_reg);
  opreg.reg.reg:=reg;
  opreg.size:=iregsize[reg];

  -- p©idat instrukci
  addii(inst,info,ii,opreg,op,op0);
  end addopreg;



----------------------------------------------------------------------------------------------------
procedure addset =
-- SETcc se spr vnou specifikac¡ reprezentace p©¡padn˜m roz¨¡©en¡m v˜sledku.
----------------------------------------------------------------------------------------------------
var
  op2              : ioper;

begin
  -- p©ipravit operand pro SETcc
  op2:=op1;
  op2.size:=1;

  -- SETcc
  addii(inst,info,icondinstr[cc,iic_set],op2,op0,op0);

  -- v p©¡padˆ pot©eby roz¨¡©it na 16/32 bit–
  if op1.size>1 then addii(inst,info,ii_and,op1,op_1,op0); end if;
  end addset;



----------------------------------------------------------------------------------------------------
procedure addcmov =
-- Podm¡nˆn˜ MOV (CMOVcc) OP1:=OP2 pokud NEN‹ splnˆna podm¡nka CC.
----------------------------------------------------------------------------------------------------
var
  tg_temp          : itarget;                    -- n vˆ¨t¡ pro p©esko‡en¡ MOV

begin
  -- CMOVcc funguje jen pro 16 a 32bitov‚ argumenty
  if (op1.size=2 or op1.size=4 {%%TODO(SET) in [2,4]}) and (op2.size=2 or op2.size=4 {%%TODO(SET) in [2,4]})
                                                                                             
    -- Kamil, Ondra 15.5.2002 : Doplnˆno CMOV
    then addii(inst,info,icondinstr[icondneg[cc],iic_cmov],op1,op2,op0)

    -- pro 8bitov‚ argumenty postaru
    else
      -- alokovat n vˆ¨t¡
      newtarget(info,tg_temp);

      -- podm¡nka
      addjump(inst,info,cc,tg_temp);

      -- p©i©azen¡
      addii(inst,info,ii_mov,op1,op2,op0);

      -- c¡l ckoku
      settarget(info,tg_temp,getaddr(inst));
      end if;
  end addcmov;



----------------------------------------------------------------------------------------------------
procedure shoda (
    mode           : iopmode; 
    op             : in ioper) 
    return t_logical =
-- Porovn  m¢d s operandem.
----------------------------------------------------------------------------------------------------
begin
  case mode
    when op_null     do result:=op.optype=io_none;
    when op_r8       do result:=(op.optype=io_reg) and (op.reg.reg in ir_r8);
    when op_r16      do result:=(op.optype=io_reg) and (op.reg.reg in ir_r16);
    when op_r32      do result:=(op.optype=io_reg) and (op.reg.reg in ir_r32);
    when op_imm8     do result:=(op.optype=io_imm) and ((op.size=1) or ((op.size=0)
                         and imm32_signed_ge(op.imm,-128) and imm32_signed_le(op.imm,255)));
                       --and (op.imm>=-128) and (op.imm<=255)));
    when op_imm16    do result:=(op.optype=io_imm) and ((op.size=2) or ((op.size=0)
                         and imm32_signed_ge(op.imm,-32768) and imm32_signed_le(op.imm,65535)));
                       --and (op.imm>=-32768) and (op.imm<=65535)));
    when op_imm32    do result:=(op.optype=io_imm) and ((op.size=4) or (op.size=0));
    when op_imm8s    do result:=(op.optype=io_imm) and ((op.size=1) or ((op.size=0)
                         and (op.rtype=irt_none){(op.psym=nil)})) 
                         and imm32_signed_ge(op.imm,-128) and imm32_signed_le(op.imm,127);
                       --and (op.psym=nil))) and (op.imm>=-128) and (op.imm<=127);
    when op_rm8      do result:=(op.optype in ioptypeset:[io_reg,io_mem]) and (op.size=1);
    when op_rm16     do result:=(op.optype in ioptypeset:[io_reg,io_mem]) and (op.size=2);
    when op_rm32     do result:=(op.optype in ioptypeset:[io_reg,io_mem]) and (op.size=4);
    when op_rm64     do result:=(op.optype in ioptypeset:[io_reg,io_mem]) and (op.size=8);
    when op_m        do result:=(op.optype=io_mem);
    when op_m2byte   do result:=(op.optype=io_mem) and (op.size=2);
    when op_m8       do result:=(op.optype=io_mem) and (op.size=1);
    when op_m16      do result:=(op.optype=io_mem) and (op.size=2);
    when op_m32      do result:=(op.optype=io_mem) and (op.size=4);
    when op_moffs8   do result:=(op.optype=io_mem) and (op.base.reg=ir_none) and (op.index.reg=ir_none) and (op.size=1);
    when op_moffs16  do result:=(op.optype=io_mem) and (op.base.reg=ir_none) and (op.index.reg=ir_none) and (op.size=2);
    when op_moffs32  do result:=(op.optype=io_mem) and (op.base.reg=ir_none) and (op.index.reg=ir_none) and (op.size=4);
    when op_AL       do result:=(op.optype=io_reg) and (op.reg.reg=ir_al);
    when op_AX       do result:=(op.optype=io_reg) and (op.reg.reg=ir_ax);
    when op_EAX      do result:=(op.optype=io_reg) and (op.reg.reg=ir_eax);
    when op_CL       do result:=(op.optype=io_reg) and (op.reg.reg=ir_cl);
    when op_DX       do result:=(op.optype=io_reg) and (op.reg.reg=ir_dx);
    when op_i1       do result:=(op.optype=io_imm) and op.imm=timm32(1);
    when op_i3       do result:=(op.optype=io_imm) and op.imm=timm32(3);
    when op_rel8     do result:=(op.optype=io_rel) and (op.size=0 or op.size=1);
    when op_rel16    do result:=(op.optype=io_rel) and (op.size=0 or op.size=2);
    when op_rel32    do result:=(op.optype=io_rel) and (op.size=0 or op.size=4);
    when op_ptr16_16 do result:=false;--(op.optype=io_mem) and (op.size=4);
    when op_ptr16_32 do result:=false;--(op.optype=io_mem) and (op.size=6);
    when op_m16_16   do result:=false;--(op.optype=io_mem) and (op.size=4);
    when op_m16_32   do result:=false;--(op.optype=io_mem) and (op.size=6);
    when op_m16a32   do result:=(op.optype=io_mem) and (op.size=6);
    when op_m16a16   do result:=(op.optype=io_mem) and (op.size=4);
    when op_m32a32   do result:=(op.optype=io_mem) and (op.size=8);
    when op_sreg     do result:=(op.optype=io_seg);
    when op_CRi      do result:=(op.optype=io_cri);
    when op_DRi      do result:=(op.optype=io_dri);
    when op_CS       do result:=(op.optype=io_seg) and (op.reg.reg=ir_cs);
    when op_DS       do result:=(op.optype=io_seg) and (op.reg.reg=ir_ds);
    when op_ES       do result:=(op.optype=io_seg) and (op.reg.reg=ir_es);
    when op_SS       do result:=(op.optype=io_seg) and (op.reg.reg=ir_ss);
    when op_FS       do result:=(op.optype=io_seg) and (op.reg.reg=ir_fs);
    when op_GS       do result:=(op.optype=io_seg) and (op.reg.reg=ir_gs);
    when op_m32fp    do result:=(op.optype=io_mem) and (op.size=4);  --%%X Dodˆlat kontrolu na FP (?)
    when op_m64fp    do result:=(op.optype=io_mem) and (op.size=8);  --%%X Dodˆlat kontrolu na FP (?)
    when op_m80fp    do result:=(op.optype=io_mem) and (op.size=10); --%%X Dodˆlat kontrolu na FP (?)
    when op_m16int   do result:=(op.optype=io_mem) and (op.size=2);  --%%X Dodˆlat kontrolu na INT (?)
    when op_m32int   do result:=(op.optype=io_mem) and (op.size=4);  --%%X Dodˆlat kontrolu na INT (?)
    when op_st0      do result:=(op.optype=io_reg) and (op.reg.reg=ir_st0);
    when op_sti      do result:=(op.optype=io_reg) and (op.reg.reg in ir_sti);
    end case;
  end shoda;



#if dump then;{%OFF}
----------------------------------------------------------------------------------------------------
procedure optostr (
    op             : in ioper)
    return t_char32str =
----------------------------------------------------------------------------------------------------
with
  standard.conversions,
  standard.strings,
  cc_base.cc_sym;

var
  s                : t_char32str;
  s2               : t_char32str;

begin
  case op.optype
    when io_none do result:='';
    when io_imm do result:=unsigned_to_radix_string(imm32_to_unsigned(op.imm),16) 
                           & ' (' & unsigned_to_string(imm32_to_unsigned(op.imm)) & ")";
    when io_reg,io_seg,io_cri,io_dri do result:=str_to_lower(entityident_to_string(iregtxt[op.reg.reg]));
    when io_mem do
        if op.base.reg<>ir_none
          then s:=str_to_lower(entityident_to_string(iregtxt[op.base.reg]));
          else s:='';
          end if;
        if op.index.reg<>ir_none
          then
            s2:=str_to_lower(entityident_to_string(iregtxt[op.index.reg]));
            if op.scale<>1 then s2:=unsigned_to_string(op.scale) & "*" & s2; end if;
          else 
            s2:='';
            end if;
        if s2<>'' then
          if s<>''
            then s & "+" & s2;
            else s:=s2;
            end if;
          end if;
        if op.disp<>timm32(0) then s & signed_to_string(imm32_to_signed(op.disp),true); end if;
        if s<>'' then s:="[" & s & "]"; end if;
        case op.rtype
          when irt_none   do ;
          when irt_symbol do
              if pentity(op.psym)^.etype=et_type
                then s:='(tag) ' & s;
                else s:="[" & entityident_to_string(pentity(op.psym)^.id^) & "]" & s;
                end if;
          when irt_imm    do s:='(imm) ' & s;
          when others do verify(200,true);
          end case;
        result:="<" & unsigned_to_string(op.size) & '> ' & s;

    when io_rel do
        if op.disptarget<>iunknowntarget
          then result:='label ' & unsigned_to_string(op.disptarget)
          else
            case op.rtype
              when irt_none   do result:='offset ' & signed_to_string(imm32_to_signed(op.rel),true);
              when irt_symbol do
                  if pentity(op.psym)^.etype=et_type
                    then result:='offset tag ' & sym_get_qid(pentity(op.psym));
                    else result:='offset ' & sym_get_qid(pentity(op.psym));
                    end if;
              when irt_imm    do result:='offset imm ' & signed_to_string(imm32_to_signed(op.rel),true);
              when others do verify(201,true);
              end case;
            end if;
    end case;
  end optostr;
#end if;{%ON}



----------------------------------------------------------------------------------------------------
procedure addii =
-- P©id  instrukci.
----------------------------------------------------------------------------------------------------
with
  standard.strings;

var
  z                : iopcodemap:range;           -- za‡ tek instrukce
  k                : iopcodemap:range;           -- konec instrukce
  kod              : iopcodemap:range;           -- k¢d instrukce
  sh1              : t_logical;                  -- shoda operandu a adresn¡ho re‘imu 1
  sh2              : t_logical;                  -- shoda operandu a adresn¡ho re‘imu 2
  sh3              : t_logical;                  -- shoda operandu a adresn¡ho re‘imu 3
  modrm            : t_unsigned8;                -- ModR/M
  sib              : t_unsigned8;                -- SIB
  disp             : timm32;                     -- posunut¡
  imm1             : timm32;                     -- p©¡m  hodnota 1
  imm2             : timm32;                     -- p©¡m  hodnota 2
  usemodrm         : t_logical;                  -- hodnota ModR/M je platn 
  withib           : t_logical;                  -- hodnota SIB je platn 
  usedisp          : t_unsigned8;                -- velikost posunut¡
  useimm1          : t_unsigned8;                -- velikost p©¡m‚ hodnoty 1
  useimm2          : t_unsigned8;                -- velikost p©¡m‚ hodnoty 2
  newsize          : t_unsigned;
  chyba            : t_logical;
#if dump then;
  s                : t_char32str;
#end if;

    ------------------------------------------------------------------------------------------------
    procedure genop (
        op         : in ioper;
        mode       : in iopmode;
        ex         : in iocext;
        imm        : out timm32;
        useimm     : out t_unsigned8) =
    ------------------------------------------------------------------------------------------------
    var
      scale        : const array 0..8 of t_unsigned8 := [0,0,$40,0,$80,0,0,0,$C0];

    begin
      case op.optype
        when io_none do {nic};

        -- p©¡m  hodnota
        when io_imm     do 
            if mode not in op_implicit then
              imm:=op.imm;
              case mode
                when op_imm8,op_imm8s do useimm:=1;
                when op_imm16 do useimm:=2;
                when op_imm32 do useimm:=4;
                when others do verify(363,true);
                end case;
              end if;

        -- registr
        when io_reg,io_seg,io_cri,io_dri do
            -- do pol¡ Mode a R/M
            if mode in iopmodeset:[op_rm8,op_rm16,op_rm32] then
              modrm or $C0 or iregcode[op.reg.reg];
              usemodrm:=true;

            -- implicitn¡ registry
            elsif mode in op_implicit then
              -- nic nedˆlat

            -- do pole reg
            elsif ex=x_n then
              modrm or (iregcode[op.reg.reg] shl 3);
              usemodrm:=true;

            -- do pole reg, v˜jimka pro IMUL
            elsif ex=x_x then
              modrm or $C0 or (iregcode[op.reg.reg] shl 3) or iregcode[op.reg.reg];
              usemodrm:=true;

            -- registr se zapakoval do opera‡n¡ho k¢du
            elsif ex=x_r or ex=x_i then
              -- nic nedˆlat

            else
              verify(367,true)
              end if;

        -- pamˆŸ
        when io_mem do
            -- p©¡mo k¢dovan‚ relativn¡ adresy
            if mode in iopmodeset:[op_moffs8,op_moffs16,op_moffs32] then
              disp:=op.disp;
              usedisp:=4;
            -- adresy vy‘aduj¡c¡ ModR/M nebo SIB
            else
              -- b ze + index
              if (op.base.reg<>ir_none) and (op.index.reg<>ir_none) then
                modrm:=modrm or $04;
                usemodrm:=true;
                sib:=scale[op.scale] or (iregcode[op.index.reg] shl 3) or iregcode[op.base.reg];
                withib:=true;
                if op.disp<>timm32(0) or (op.rtype<>irt_none{op.psym<>nil}) or (op.base.reg=ir_ebp) then
                  modrm:=modrm or $80;
                  disp:=op.disp;
                  usedisp:=4;
                  end if;
              -- index
              elsif op.index.reg<>ir_none then
                modrm:=modrm or $04;
                usemodrm:=true;
                sib:=scale[op.scale] or (iregcode[op.index.reg] shl 3) or $05;
                withib:=true;
                if op.disp<>timm32(0) or (op.rtype<>irt_none{op.psym<>nil}) then
                  --modrm:=modrm or $80;
                  disp:=op.disp;
                  usedisp:=4;
                  end if;
              -- b ze
              elsif op.base.reg<>ir_none then
                if op.base.reg=ir_esp
                  then
                    modrm:=modrm or $04;
                    usemodrm:=true;
                    sib:=$24;
                    withib:=true;
                  else
                    modrm:=modrm or iregcode[op.base.reg];
                    usemodrm:=true;
                    end if;
                if op.disp<>timm32(0) or (op.rtype<>irt_none{op.psym<>nil}) or (op.base.reg=ir_ebp) then
                  modrm:=modrm or $80;
                  disp:=op.disp;
                  usedisp:=4;
                  end if;

              -- posunut¡
              else
                disp:=op.disp;
                usedisp:=4;
                modrm:=modrm or $05;
                usemodrm:=true;
                end if;
              end if;

        -- relativn¡ adresa
        when io_rel do
            disp:=op.rel;
            case mode
              when op_rel8  do usedisp:=1;
              when op_rel16 do usedisp:=2;
              when op_rel32 do usedisp:=4;
              when others do verify(365,true);
              end case;


        when others do verify(364,true);
        end case;
      end genop;



    ------------------------------------------------------------------------------------------------
    procedure append_value (
        _val       : in t_unsigned;
        _size      : in t_unsigned) =
    ------------------------------------------------------------------------------------------------
    var
      val          : t_unsigned;
      size         : t_unsigned;

    begin
      val:=_val;
      size:=_size;
      while size>0 loop
        inst.c^ & t_unsigned8(val and $FF);
        val shr 8;
        pred size;
        end loop;
      end append_value;

begin
  ----- (re)alokovat pamˆŸ -----
  adjust_c(inst);

  ----- naj¡t k¢dov n¡ instrukce -----
  z:=iopcodemapindex[ii].first;
  k:=iopcodemapindex[ii].last;

  -- up©esnit v˜bˆr instrukce podle operand–
  kod:=z;
  loop
    -- prvn¡ operand
    sh1:=shoda(iopcodemap[kod].op1,op1);
    -- druh˜ operand
    sh2:=shoda(iopcodemap[kod].op2,op2);
    -- t©et¡ operand
    sh3:=shoda(iopcodemap[kod].op3,op3);
    -- konec
    if sh1 and sh2 and sh3 then break; end if;
    -- dal¨¡ instrukce
    if kod=k then
      if opt_dump_code in info.compv.opts then
        debug_dump('Chybna instrukce: ' & 
          str_adjust(str_to_lower(entityident_to_string(iinstrtxt[ii])),10,t_str_end_set:[se_right]," ",st_no,t_str_end_set:[se_right]) &
          optostr(op1) & "," & optostr(op2));
        end if;
      verify(27,true);
      return;
      end if;
    succ kod;
    end loop;

#if dump then;
  -- zobrazit instrukci
  s:=str_adjust(str_to_lower(entityident_to_string(iinstrtxt[ii])),10,t_str_end_set:[se_right]," ",st_no,t_str_end_set:[se_right])
     & optostr(op1) & "," & optostr(op2) & "," & optostr(op3);
  while s:length>0 and then s[s:length]="," loop pred s:length; end loop;
  s:=str_adjust(s,40,t_str_end_set:[se_right]," ",st_no,t_str_end_set:[se_right]);
  if iopcodemap[kod].op1<>op_null then s & iopmodetxt[iopcodemap[kod].op1]; end if;
  if iopcodemap[kod].op2<>op_null then s & "," & iopmodetxt[iopcodemap[kod].op2]; end if;
  if iopcodemap[kod].op3<>op_null then s & "," & iopmodetxt[iopcodemap[kod].op3]; end if;
  if opt_dump_code in info.compv.opts then debug_dump('    ' & s); end if;
#end if;

  ----- p©idat instrukci -----
  -- poznamenat si adresu instrukce
  info.iip:=inst.c^:length{-1};

  -- pot©ebn‚ prefixy
  {%%X}
  -- zmˆna velikosti operandu
  if (iopcodemap[kod].p and $01)<>0 then
    inst.c^ & iprefixcode[ip_data];
    end if;

  -- z kladn¡ opera‡n¡ k¢d
  modrm:=$00; usemodrm:=false;
  sib:=$00; withib:=false;
  useimm1:=0; useimm2:=0; usedisp:=0;
  inst.c^ & iopcodemap[kod].oc;
  case iopcodemap[kod].ex
    when x_n do { nic nedˆlat };
    when x_r do
        if iopcodemap[kod].op1 in op_implicit
          then inst.c^[inst.c^:length] or iregcode[op2.reg.reg];
          else inst.c^[inst.c^:length] or iregcode[op1.reg.reg];
          end if;
    when x_i do 
         if iopcodemap[kod].op1=op_sti then inst.c^[inst.c^:length]+iregcode[op1.reg.reg]
         elsif iopcodemap[kod].op2=op_sti then inst.c^[inst.c^:length]+iregcode[op2.reg.reg]
         elsif iopcodemap[kod].op3=op_sti then inst.c^[inst.c^:length]+iregcode[op3.reg.reg]
         else verify(638,true);
         end if;
    when x_0..x_7 do
        modrm:=modrm or ((iopcodemap[kod].ex:ord-x_0:ord) shl 3);
        usemodrm:=true;
    end case;

  -- sestavit ModR/M a SIB
  genop(op1,iopcodemap[kod].op1,iopcodemap[kod].ex,imm1,useimm1);
  if useimm1=0
    then genop(op2,iopcodemap[kod].op2,iopcodemap[kod].ex,imm1,useimm1);
    else genop(op2,iopcodemap[kod].op2,iopcodemap[kod].ex,imm2,useimm2);
    end if;
  if op3.optype<>io_none then
    if useimm1=0
      then genop(op3,iopcodemap[kod].op3,iopcodemap[kod].ex,imm1,useimm1);
      else genop(op3,iopcodemap[kod].op3,iopcodemap[kod].ex,imm2,useimm2);
      end if;
    end if;

  -- ulo‘it dodate‡n‚ informace
  if usemodrm then
    inst.c^ & modrm;
    end if;
  if withib then
    inst.c^ & sib;
    end if;
  if usedisp>0 then
    info.idisp:=inst.c^:length-info.iip;
    append_value(disp,usedisp);
    end if;
  if useimm1>0 then
    info.iimm1:=inst.c^:length-info.iip;
    append_value(imm1,useimm1);
    end if;
  if useimm2>0 then
    info.iimm2:=inst.c^:length-info.iip;
    append_value(imm2,useimm2);
    end if;

  -- poznamenat si velikost instrukce
  info.isize:=inst.c^:length-info.iip;

  -- doplnit p©¡padnou glob ln¡ relokaci
  if op1.rtype<>irt_none{op1.psym<>nil} then
    if ((op1.rtype=irt_symbol) and (pentity(op1.psym)^.etype in ets_disp) and (op1.optype<>io_imm))
    or ((op1.rtype=irt_imm) and (op1.optype<>io_imm))
      then addrelo(inst,op1.rtype,op1.psym,op1.pexpr,inst.c^:length{-1},info.iip+info.idisp,op1.optype<>io_rel{op1.rtype=irt_imm})
      else addrelo(inst,op1.rtype,op1.psym,op1.pexpr,inst.c^:length{-1},info.iip+info.iimm1,op1.optype<>io_rel{op1.rtype=irt_imm});
      end if;
  else
    verify(631,op1.optype=io_mem and op1.base.reg=ir_none and op1.index.reg=ir_none);
    end if;
  if op2.rtype<>irt_none{op2.psym<>nil} then
    if ((op2.rtype=irt_symbol) and (pentity(op2.psym)^.etype in ets_disp) and (op2.optype<>io_imm))
    or ((op2.rtype=irt_imm) and (op2.optype<>io_imm))
      then addrelo(inst,op2.rtype,op2.psym,op2.pexpr,inst.c^:length{-1},info.iip+info.idisp,op2.optype<>io_rel{op2.rtype=irt_imm})
      else
        if useimm2>0
          then addrelo(inst,op2.rtype,op2.psym,op2.pexpr,inst.c^:length{-1},info.iip+info.iimm2,op2.optype<>io_rel{op2.rtype=irt_imm});
          else addrelo(inst,op2.rtype,op2.psym,op2.pexpr,inst.c^:length{-1},info.iip+info.iimm1,op2.optype<>io_rel{op2.rtype=irt_imm});
          end if;
        end if;
  else
    verify(632,op2.optype=io_mem and op2.base.reg=ir_none and op2.index.reg=ir_none);
    end if;

  -- doplnit p©¡padnou lok ln¡ relokaci
  if (op1.optype=io_rel) and (op1.target<>iunknowntarget) then
    addunres(info,op1.target,inst.c^:length{-1},info.iip+info.idisp,usedisp{op1.size},false);
  elsif op1.optype=io_imm and op1.abstarget<>iunknowntarget then 
    addunres(info,op1.abstarget,inst.c^:length,info.iip+info.iimm1,useimm1{op1.size},true);
  else
    verify(633,op1.optype=io_rel and op1.rtype=irt_none and op1.target=iunknowntarget and op1.disptarget=iunknowntarget and op1.rel=timm32(0));
    end if;
  if (op2.optype=io_rel) and (op2.target<>iunknowntarget) then
    addunres(info,op2.target,inst.c^:length{-1},info.iip+info.idisp,usedisp{op2.size},false);
  elsif (op2.optype=io_imm) and (op2.abstarget<>iunknowntarget) then
    if useimm2>0
      then addunres(info,op2.abstarget,inst.c^:length,info.iip+info.iimm2,useimm2{op2.size},true)
      else addunres(info,op2.abstarget,inst.c^:length,info.iip+info.iimm1,useimm1{op2.size},true);
      end if;
  else
    verify(634,op2.optype=io_rel and op2.rtype=irt_none and op2.target=iunknowntarget and op2.disptarget=iunknowntarget and op2.rel=timm32(0));
    end if;
  end addii;



----------------------------------------------------------------------------------------------------
procedure checkii =
-- Kontrola zpr vnosti instrukce.
----------------------------------------------------------------------------------------------------
with
  cc_def.cc_lexsym;

    ------------------------------------------------------------------------------------------------
    procedure setpos (
        oppos      : in lexposblock) =
    ------------------------------------------------------------------------------------------------
    begin
      if oppos.b.num<>0
        then ce^.setpos(oppos);
        else ce^.setpos(ipos);
        end if;
      end setpos;

var
  z                : iopcodemap:range;           -- za‡ tek instrukce
  k                : iopcodemap:range;           -- konec instrukce
  kod              : iopcodemap:range;           -- k¢d instrukce
  sh1              : t_logical;                  -- shoda operandu a adresn¡ho re‘imu 1
  sh2              : t_logical;                  -- shoda operandu a adresn¡ho re‘imu 2
  sh3              : t_logical;                  -- shoda operandu a adresn¡ho re‘imu 3

begin
  z:=iopcodemapindex[ii].first;
  k:=iopcodemapindex[ii].last;

  -- up©esnit v˜bˆr instrukce podle operand–
  kod:=z;
  loop
    -- prvn¡ operand
    sh1:=shoda(iopcodemap[kod].op1,op1);
    -- druh˜ operand
    sh2:=shoda(iopcodemap[kod].op2,op2);
    -- t©et¡ operand
    sh3:=shoda(iopcodemap[kod].op3,op3);
    -- konec
    if sh1 and sh2 and sh3 then break; end if;
    -- dal¨¡ instrukce
    if kod=k then
      ce^.seterror({CCERR=}000381,ce_g_invalid);
      if not sh1 then setpos(op1.spos)
      elsif not sh2 then ce^.setpos(op2.spos)
      elsif not sh3 then ce^.setpos(op3.spos); 
      end if;
      ce^.raiseerror;
      end if;
    succ kod;
    end loop;
  end checkii;



----------------------------------------------------------------------------------------------------
procedure getaddr =
-- Vr t¡ aktu ln¡ adresu.
----------------------------------------------------------------------------------------------------
begin
  if inst.c<>nil then
    result:=inst.c^:length;
    end if;
  end getaddr;



----------------------------------------------------------------------------------------------------
procedure getfieldaddr =
-- Vr t¡ adresu konkr‚tn¡ho pole v posledn¡ instrukci.
----------------------------------------------------------------------------------------------------
begin
  case field
    when iif_imm1 do result:=info.iip+info.iimm1;
    when iif_imm2 do result:=info.iip+info.iimm2;
    when iif_disp do result:=info.iip+info.idisp;
    when others do verify(302,true);
    end case;
  end getfieldaddr;



----------------------------------------------------------------------------------------------------
procedure setfield =
-- Do posledn¡ instrukce dopln¡ adresu.
-- (adresa se do c¡lov‚ho pole PžI€TE)
----------------------------------------------------------------------------------------------------
begin
  p_unsigned32(^inst.c^[disp+1]:unchecked)^+value;
  end setfield;


end ci_instr;