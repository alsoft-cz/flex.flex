----------------------------------------------------------------------------------------------------
procedure rtl_sstack_new(
    stack         : out ref t_rtl_sstack;
    waitable      : in t_rtl_logical8;
    freedata       : in p_rtl_list_free_data:=nil); -- userdata free procedure
-- Create new synchronized dynamic stack
----------------------------------------------------------------------------------------------------
procedure rtl_sstack_discard(
    stack   : in out ref t_rtl_sstack);
-- Discard synchronized dynamic stack
----------------------------------------------------------------------------------------------------
procedure rtl_sstack_reset(
    stack   : in out ref t_rtl_sstack);
-- clean stack
----------------------------------------------------------------------------------------------------
procedure rtl_sstack_move(
    fromstack      : in out ref t_rtl_sstack;
    tostack        : in out ref t_rtl_sstack);
-- move stack data, tostack must be empty, non-atomic
----------------------------------------------------------------------------------------------------
procedure rtl_sstack_push(
    stack          : in out ref t_rtl_sstack;
    data           : in t_rtl_pointer);
-- push data
----------------------------------------------------------------------------------------------------
procedure rtl_sstack_pop(
    stack          : in out ref t_rtl_sstack;
    data           : out t_rtl_pointer)
    return         t_rtl_logical8;
-- pop data
----------------------------------------------------------------------------------------------------
procedure rtl_sstack_try_pop(
    stack          : in out ref t_rtl_sstack;
    data           : out t_rtl_pointer;
    milisec        : in t_rtl_timeout)
    return         t_rtl_logical8;
-- try pop data
----------------------------------------------------------------------------------------------------

