---------------------------------------------------------------------------------------------------
module public tasks =
-- Flex Run-time Library
-- task variables
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------
with 
    references,exceptions;


message
  tasking_task_var_error      extend tasking_error;  -- error when working withn task variables
  tasking_task_not_running    extend tasking_error;  -- task is not running
  tasking_priority_set_failed extend tasking_error;  -- failed set task priority

type
    t_rtl_task_ref_local = private t_rtl_ref_local;
    p_rtl_task_ref_local = ^t_rtl_task_ref_local for machine_pointer use true;

    t_task_header;
    p_task_header = ^t_task_header for machine_pointer use true;

    -- priorita tasku
    t_task_priority = enum
      task_priority_idle;
      task_priority_lowest;
      task_priority_below_normal;
      task_priority_normal;
      task_priority_above_normal;
      task_priority_highest;
      task_priority_time_critical;
      end enum;

----------------------------------------------------------------------------------------------------
#separate public vars;
#separate public exceptions;
----------------------------------------------------------------------------------------------------

type
    -- pointer uzivatelske procedury ktera se ma spustit pri startu tasku
    t_rtl_task_entry = procedure (
    selfptr        : in t_rtl_pointer;
    userdata       : in p_rtl_unchecked);
    p_rtl_task_entry = ^t_rtl_task_entry;


----------------------------------------------------------------------------------------------------
procedure rtl_start_task(
    task_entry     : in p_rtl_task_entry;
    task_ref       : in p_rtl_task_ref_local;
    suspended      : in t_rtl_logical:=false;
    priority       : in t_task_priority:=task_priority_normal;
    selfptr        : in t_rtl_pointer:=nil;
    userdata       : in p_rtl_unchecked:=nil
    );
-- vytvori novy trhread
----------------------------------------------------------------------------------------------------
procedure rtl_start_pool_task(
    task_entry     : in p_rtl_task_entry;
    priority       : in t_task_priority:=task_priority_normal;
    selfptr        : in t_rtl_pointer:=nil;
    userdata       : in p_rtl_unchecked:=nil
    );
-- spusti ulohu pomoci tasku z poolu tasku
----------------------------------------------------------------------------------------------------
procedure rtl_register_task(
    topstackspace  : t_rtl_pointer);
--#pragma stackframe(rtl_register_task,stack_pointer_relative);
----------------------------------------------------------------------------------------------------
procedure rtl_register_task_dll(
    topstackspace  : t_rtl_pointer);
--#pragma stackframe(rtl_register_task,stack_pointer_relative);
----------------------------------------------------------------------------------------------------
procedure rtl_unregister_task;
--#pragma stackframe(rtl_unregister_task,stack_pointer_relative);
----------------------------------------------------------------------------------------------------
procedure rtl_kill_when_need_and_finish_task(
    task_ref       : in out ref t_rtl_task_ref_local);
-- posle tasku vyjimku a pocka na skonceni a uvolni prostredky
----------------------------------------------------------------------------------------------------
procedure rtl_wait_and_finish_task(
    task_ref       : in out ref t_rtl_task_ref_local);
-- pocka na skonceni provadeni tasku a uvolni prostredky
----------------------------------------------------------------------------------------------------
procedure rtl_wait_for_finish_task(
    task_ref       : in out ref t_rtl_task_ref_local);
-- pocka na dokonceni tasku    
----------------------------------------------------------------------------------------------------
procedure rtl_try_wait_for_finish_task(
    task_ref       : in out ref t_rtl_task_ref_local;
    milisec        : in t_rtl_timeout)
    return t_rtl_logical;
-- pocka na dokonceni tasku urceny pocet milisekund
----------------------------------------------------------------------------------------------------
procedure rtl_get_current_task_ref(
    task_ref       : in out ref t_rtl_task_ref_local);
-- vrati referenci na tento task
----------------------------------------------------------------------------------------------------
procedure rtl_terminate_task;
-- zastavi tento task
----------------------------------------------------------------------------------------------------
procedure rtl_get_current_task return p_task_header;
-- vrati interni rtl hlavicku tohoto tasku
----------------------------------------------------------------------------------------------------
procedure rtl_get_current_task_id return t_rtl_task_id;
-- vrati interni rtl hlavicku tohoto tasku
----------------------------------------------------------------------------------------------------

supervised

----------------------------------------------------------------------------------------------------
procedure rtl_task_exception_initialize(
    taskheader     : in p_task_header;
    sys_eh         : in p_rtl_exceptions_handler);
----------------------------------------------------------------------------------------------------
procedure rtl_task_exception_finalize(
    taskheader     : in p_task_header);
----------------------------------------------------------------------------------------------------
procedure rtl_early_tasks_initialize;
----------------------------------------------------------------------------------------------------
procedure rtl_late_tasks_finalize;
----------------------------------------------------------------------------------------------------



end tasks;