----------------------------------------------------------------------------------------------------
-- %%TODO(COMMENT)
-- Flex Run-time Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure rtl_event_new =
-- new event
----------------------------------------------------------------------------------------------------
begin 
  event_object:unchecked:=CreateEventW(nil,false,signaled,nil);
  if t_rtl_unsigned32(event_object:unchecked)=INVALID_HANDLE then 
    raise synchronization_error;
    end if;
  end rtl_event_new;



----------------------------------------------------------------------------------------------------
procedure rtl_event_lazy =
-- Create and initialize event object on demand.
----------------------------------------------------------------------------------------------------
var
  old_value        : t_rtl_event;
  new_value        : t_rtl_event;

begin
  result:=true;
  if event_object=rtl_nil_event then
    rtl_event_new(new_value,signaled);
    rtl_interlocked_compare_exchange(    ^t_rtl_native_signed(event_object),
                                          t_rtl_native_signed(new_value),
                                          t_rtl_native_signed(rtl_nil_semaphore),
                                          t_rtl_native_signed(old_value));
    if old_value<>rtl_nil_event then
      --nekdo mne predbehnul
      rtl_event_discard(new_value);
      result:=false;
      end if;
    end if;
  end rtl_event_lazy;



----------------------------------------------------------------------------------------------------
procedure rtl_event_discard =
-- discard event
----------------------------------------------------------------------------------------------------
begin 
  if CloseHandle(event_object)=0 then 
    raise synchronization_error;
    end if;
  t_rtl_unsigned32(event_object:unchecked):=INVALID_HANDLE;
  end rtl_event_discard;


----------------------------------------------------------------------------------------------------
procedure rtl_event_wait =
-- wait for event and reset event
----------------------------------------------------------------------------------------------------
begin 
  if not rtl_kernel_try(t_rtl_kernel_object(event_object),t_rtl_wait_infinite) then
    raise synchronization_error;
    end if;
  end rtl_event_wait;



----------------------------------------------------------------------------------------------------
procedure rtl_event_try_wait =
-- test if event is set & try grab it
----------------------------------------------------------------------------------------------------
begin 
  result:=rtl_kernel_try(t_rtl_kernel_object(event_object),milisec);
  end rtl_event_try_wait;



----------------------------------------------------------------------------------------------------
procedure rtl_event_set =
-- sets event
----------------------------------------------------------------------------------------------------
begin 
  if SetEvent(event_object)=0 then 
    raise synchronization_error;
    end if;
  end rtl_event_set;

----------------------------------------------------------------------------------------------------
procedure rtl_event_reset =
-- sets event
----------------------------------------------------------------------------------------------------
begin 
  if ResetEvent(event_object)=0 then 
    raise synchronization_error;
    end if;
  end rtl_event_reset;
