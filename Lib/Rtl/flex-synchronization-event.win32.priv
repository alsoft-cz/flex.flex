----------------------------------------------------------------------------------------------------
procedure rtl_event_new =
-- new event
----------------------------------------------------------------------------------------------------
begin 
  event_object:unchecked:=CreateEventA(nil,false,false,nil);
  if t_rtl_unsigned32(event_object:unchecked)=INVALID_HANDLE then 
    raise synchronization_error;
    end if;
  end rtl_event_new;


----------------------------------------------------------------------------------------------------
procedure rtl_event_discard =
-- discard event
----------------------------------------------------------------------------------------------------
begin 
  if CloseHandle(event_object)=0 then 
    raise synchronization_error;
    end if;
  t_rtl_unsigned32(event_object:unchecked):=INVALID_HANDLE;
  end rtl_event_discard;


----------------------------------------------------------------------------------------------------
procedure rtl_event_wait =
-- wait for event and reset event
----------------------------------------------------------------------------------------------------
begin 
  if not rtl_kernel_try(t_rtl_kernel_object(event_object),t_rtl_wait_infinite) then
    raise synchronization_error;
    end if;
  end rtl_event_wait;



----------------------------------------------------------------------------------------------------
procedure rtl_event_try =
-- test if event is set & try grab it
----------------------------------------------------------------------------------------------------
begin 
  result:=rtl_kernel_try(t_rtl_kernel_object(event_object),milisec);
  end rtl_event_try;



----------------------------------------------------------------------------------------------------
procedure rtl_event_set =
-- sets event
----------------------------------------------------------------------------------------------------
begin 
  if SetEvent(event_object)=0 then 
    raise synchronization_error;
    end if;
  end rtl_event_set;

----------------------------------------------------------------------------------------------------
procedure rtl_event_reset =
-- sets event
----------------------------------------------------------------------------------------------------
begin 
  if ResetEvent(event_object)=0 then 
    raise synchronization_error;
    end if;
  end rtl_event_reset;
