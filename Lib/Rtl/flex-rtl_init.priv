---------------------------------------------------------------------------------------------------
module private rtl_init =
-- Flex Run-time Library
-- RTL Init
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------
with
    os_api,hw_api;

----------------------------------------------------------------------------------------------------
procedure rtl_get_processor_count (count : out ref t_rtl_unsigned32) =
----------------------------------------------------------------------------------------------------
var
  ProcessCPUs      : DWORD;
  SystemCPUs       : DWORD;
    
begin
  count:=0;
  if GetProcessAffinityMask(GetCurrentProcess(),ProcessCPUs,SystemCPUs)<>0 then
    #syntax asm;
    mov         ebx,1
    mov         edx,0
    mov         ecx,count
    jmp         @0
@1:    
    --rotate bit
    shl         ebx,1
    test        ebx,ebx
    -- if bit is zero exit
    je          @9
    -- if bit is set inc result, else cycle
@0: mov         eax,SystemCPUs
    and         eax,ebx
    test        eax,eax
    je          @1
    --zvetsim count
    inc         edx
    jmp         @1
@9:
    mov         [ecx],edx
    #end asm;
  else
    raise tasking_error;
    end if;
  end rtl_get_processor_count;



----------------------------------------------------------------------------------------------------
procedure rtl_early_runtime_initialize =
----------------------------------------------------------------------------------------------------
with
    exceptions,
    supervised tasks,supervised memory;

var
    processor_count : t_rtl_unsigned32;
    taskheader     : aliased t_task_header;
    seh            : aliased t_rtl_exceptions_handler;
    etag           : t_rtl_tag;
    edata          : t_rtl_unsigned32;


begin
  -- inicializace tasku
  tasks.rtl_early_tasks_initialize;
  
  tasks.rtl_task_exception_initialize(^taskheader,^seh);

  begin

    -- inicializace pameti;
    memory.rtl_early_heap_initialize;

    -- inicializovat task pool
    #if rtl_advanced_tasks_pooled then;
    pool.rtl_init_task_pool;
    #end if;

    #if target_machine_processor_count_compiled then;
      rtl_get_processor_count(processor_count);
      if target_machine_processor_count<>processor_count then
        raise processor_count_error;
        end if;
    #else;
      rtl_get_processor_count(target_machine_processor_count);
    #end if;
  catch
    when others do
      rtl_get_exception(etag,edata);
      rtl_raise_unhandled_exception(etag,edata);
    end;

  tasks.rtl_task_exception_finalize(^taskheader);
  end rtl_early_runtime_initialize;



----------------------------------------------------------------------------------------------------
procedure rtl_late_runtime_finalize =
----------------------------------------------------------------------------------------------------
with
    exceptions,
    supervised tasks,supervised memory;

var
    taskheader     : aliased t_task_header;
    seh            : aliased t_rtl_exceptions_handler;
    etag           : t_rtl_tag;
    edata          : t_rtl_unsigned32;

begin
  tasks.rtl_task_exception_initialize(^taskheader,^seh);
  begin
    -- deinicializace pameti;
    memory.rtl_late_heap_finalize;

  catch
    when others do
      rtl_get_exception(etag,edata);
      rtl_raise_unhandled_exception(etag,edata);
    end;

  tasks.rtl_task_exception_finalize(^taskheader);
  
  -- deinicializace tasku
  tasks.rtl_late_tasks_finalize;
  end rtl_late_runtime_finalize;
end rtl_init;