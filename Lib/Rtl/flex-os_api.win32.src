----------------------------------------------------------------------------------------------------
module os_api =
-- Flex Run-time Library
-- WIN32 API
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

type
  THANDLE = t_rtl_unsigned32;
  PHANDLE = t_rtl_pointer;
  DWORD   = t_rtl_unsigned32;
  BOOL    = t_rtl_logical8;
  SIZE_T  = t_rtl_unsigned32;
  LVOID   = t_rtl_pointer;
  LPVOID  = t_rtl_pointer;
  LPCVOID = t_rtl_pointer;

const
  STACK_SIZE_PARAM_IS_A_RESERVATION  = $10000;
  MEM_COMMIT     : t_rtl_unsigned32  = $1000;
  MEM_DECOMMIT   : t_rtl_unsigned32  = $4000;
  MEM_RELEASE    : t_rtl_unsigned32  = $8000;
  MEM_TOP_DOWN   : t_rtl_unsigned32  = $100000;
  PAGE_READWRITE : t_rtl_unsigned32  = $4;
  INFINITE       : t_rtl_unsigned32  = $FFFFFFFF;
  INVALID_HANDLE : t_rtl_unsigned32  = $FFFFFFFF;
  winnt_exception_maximum_parameters = 15;
  winnt_size_of_80387_registers      = 80;
  winnt_maximum_supported_extension  = 512;
  winnt_exception_noncontinuable     = 1;

  WAIT_FAILED        : t_rtl_unsigned32 = $FFFFFFFF;
  WAIT_OBJECT_0      : t_rtl_unsigned32 = $00000000;
  WAIT_TIMEOUT       : t_rtl_unsigned32 = $00000102;
  WAIT_ABANDONED     : t_rtl_unsigned32 = $00000080;
  WAIT_IO_COMPLETION : t_rtl_unsigned32 = $000000C0;

  winnt_CONTEXT_i386 : t_rtl_unsigned32               = $00010000;   -- this assumes that i386 and
  winnt_CONTEXT_i486 : t_rtl_unsigned32               = $00010000;   -- i486 have identical context records
  winnt_CONTEXT_CONTROL : t_rtl_unsigned32            = $00000001; -- SS:SP, CS:IP, FLAGS, BP
  winnt_CONTEXT_INTEGER : t_rtl_unsigned32            = $00000002; -- AX, BX, CX, DX, SI, DI
  winnt_CONTEXT_SEGMENTS : t_rtl_unsigned32           = $00000004; -- DS, ES, FS, GS
  winnt_CONTEXT_FLOATING_POINT : t_rtl_unsigned32     = $00000008; -- 387 state
  winnt_CONTEXT_DEBUG_REGISTERS : t_rtl_unsigned32    = $00000010; -- DB 0-3,6,7
  winnt_CONTEXT_EXTENDED_REGISTERS : t_rtl_unsigned32 = $00000020; -- cpu specific extensions
  winnt_CONTEXT_FULL : t_rtl_unsigned32               = winnt_CONTEXT_i486 + winnt_CONTEXT_CONTROL + winnt_CONTEXT_INTEGER +  winnt_CONTEXT_SEGMENTS;

--#define THREAD_GET_CONTEXT               (0x0008)  
--#define THREAD_SET_CONTEXT               (0x0010)  
--#define SYNCHRONIZE                      (0x00100000L)
--#define STANDARD_RIGHTS_REQUIRED         (0x000F0000L)
--#define THREAD_ALL_ACCESS                (STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | 0x3FF)
const
  DUPLICATE_SAME_ACCESS    : DWORD = $00000002;  -- (0x00000002)
  THREAD_ALL_ACCESS        : DWORD = 2032639;    --$0x001F03FF;
  THREAD_TERMINATE         : DWORD = $1;         -- (0x0001)  
  STANDARD_RIGHTS_REQUIRED : DWORD = $000F0000;  -- (0x000F0000L)
  SYNCHRONIZE              : DWORD = $00100000;  -- (0x00100000L)
  
  -- nt exception codes
  exception_access_violation         : t_rtl_unsigned32 = $C0000005; 
  exception_array_bounds_exceeded    : t_rtl_unsigned32 = $C000008C; 
  exception_breakpoint               : t_rtl_unsigned32 = $80000003; 
  exception_datatype_misalignment    : t_rtl_unsigned32 = $80000002; 
  exception_flt_denormal_operand     : t_rtl_unsigned32 = $C000008D; 
  exception_flt_divide_by_zero       : t_rtl_unsigned32 = $C000008E; 
  exception_flt_inexact_result       : t_rtl_unsigned32 = $C000008F; 
  exception_flt_invalid_operation    : t_rtl_unsigned32 = $C0000090; 
  exception_flt_overflow             : t_rtl_unsigned32 = $C0000091; 
  exception_flt_stack_check          : t_rtl_unsigned32 = $C0000092; 
  exception_flt_underflow            : t_rtl_unsigned32 = $C0000093; 
  exception_illegal_instruction      : t_rtl_unsigned32 = $C000001D; 
  exception_in_page_error            : t_rtl_unsigned32 = $C0000006; 
  exception_int_divide_by_zero       : t_rtl_unsigned32 = $C0000094; 
  exception_int_overflow             : t_rtl_unsigned32 = $C0000095; 
  exception_invalid_disposition      : t_rtl_unsigned32 = $C0000026; 
  exception_noncontinuable_exception : t_rtl_unsigned32 = $C0000025; 
  exception_priv_instruction         : t_rtl_unsigned32 = $C0000096; 
  exception_single_step              : t_rtl_unsigned32 = $80000004; 
  exception_stack_overflow           : t_rtl_unsigned32 = $C00000FD; 


----------------------------------------------------------------------------------------------------
-- Types
----------------------------------------------------------------------------------------------------
type
  t_winnt_critical_section = record
      DebugInfo      : t_rtl_pointer;
      LockCount      : t_rtl_unsigned32;
      RecursionCount : t_rtl_unsigned32;
      OwningThread   : THANDLE;
      LockSemaphore  : THANDLE;
      SpinCount      : t_rtl_unsigned32;
      end record;
  p_winnt_critical_section = ^t_winnt_critical_section;

  t_winnt_exception_disposition = enum 
      exceptioncontinueexecution;
      exceptioncontinuesearch;
      exceptionnestedexception;
      exceptioncollidedunwind;
      end enum for size use 4;

  t_winnt_exception_arguments = array 0..(winnt_exception_maximum_parameters-1) of t_rtl_unsigned32;
  p_winnt_exception_arguments = ^t_winnt_exception_arguments;

  t_winnt_exception_record;
  p_winnt_exception_record = ^t_winnt_exception_record  for machine_pointer use true;
  t_winnt_exception_record = record
      exceptioncode    : t_rtl_unsigned32;
      exceptionflags   : t_rtl_unsigned32;
      exception_record : p_winnt_exception_record;
      exceptionaddress : t_rtl_pointer;
      numberparameters : t_rtl_unsigned32;
      exceptioninfo    : t_winnt_exception_arguments;
      end record;

  t_winnt_floating_save_area = record
      controlword  : t_rtl_unsigned32;
      statusword   : t_rtl_unsigned32;
      tagword      : t_rtl_unsigned32;
      erroroffset  : t_rtl_unsigned32;
      errorselector: t_rtl_unsigned32;
      dataoffset   : t_rtl_unsigned32;
      dataselector : t_rtl_unsigned32;
      registerarea : array 0..winnt_size_of_80387_registers-1 of unsigned 8;
      cr0npxstate  : t_rtl_unsigned32;
      end record;
  
  t_winnt_context = record
      contextflags : t_rtl_unsigned32;
      dr0          : t_rtl_unsigned32;
      dr1          : t_rtl_unsigned32;
      dr2          : t_rtl_unsigned32;
      dr3          : t_rtl_unsigned32;
      dr6          : t_rtl_unsigned32;
      dr7          : t_rtl_unsigned32;
      floatsave    : t_winnt_floating_save_area;
      rseggs       : t_rtl_unsigned32;
      rsegfs       : t_rtl_unsigned32;
      rseges       : t_rtl_unsigned32;
      rsegds       : t_rtl_unsigned32;
      redi         : t_rtl_unsigned32;
      resi         : t_rtl_unsigned32;
      rebx         : t_rtl_unsigned32;
      redx         : t_rtl_unsigned32;
      recx         : t_rtl_unsigned32;
      reax         : t_rtl_unsigned32;
      rebp         : t_rtl_unsigned32;
      reip         : t_rtl_unsigned32;
      rsegcs       : t_rtl_unsigned32;
      reflags      : t_rtl_unsigned32;
      resp         : t_rtl_unsigned32;
      rsegss       : t_rtl_unsigned32;
      extendedregisters : array 0..winnt_maximum_supported_extension-1 of unsigned 8;
      end record;
  p_winnt_context = ^t_winnt_context;

  -- cdecl calling convention
  t_winnt_except_handler = procedure (
      exceptionrecord   : in p_winnt_exception_record;
      establisherframe  : in t_rtl_pointer;
      contextrecord     : in p_winnt_context;
      dispatchercontext : in t_rtl_pointer);
  p_winnt_except_handler = ^t_winnt_except_handler for machine_pointer use true;

  -- stdcall calling convention
  t_winnt_apc_callback = procedure (
      userdata     : in t_rtl_pointer);
  p_winnt_apc_callback = ^t_winnt_apc_callback for machine_pointer use true;
  --#pragma convention(t_winnt_apc_callback,system);

  t_winnt_exception_registration;
  p_winnt_exception_registration = ^t_winnt_exception_registration for machine_pointer use true;
  t_winnt_exception_registration = record
     prevreg     : p_winnt_exception_registration;
     handler     : p_winnt_except_handler;
     end record;


  t_rtl_thread_entry_win32 = procedure ( starter : t_rtl_pointer) return DWORD;
  p_rtl_thread_entry_win32 =^t_rtl_thread_entry_win32 for machine_pointer use true;

  t_winnt_tib;
  p_winnt_tib = ^t_winnt_tib;
  t_winnt_tib = record
      exceptionlist: p_winnt_exception_registration;   {$00,00}
      stackbase    : t_rtl_pointer;                    {$04,04}
      stacklimit   : t_rtl_pointer;                    {$08,08}
      subsystemtib : t_rtl_pointer;                    {$0C,12}
      fiberdata    : t_rtl_pointer;                    {$10,16}
      aruserpointer: t_rtl_pointer;{p_thread_header}   {$14,20}
      self         : p_winnt_tib;                      {$18,24}
      end record;

  t_system_ticks = mod unsigned 32;


----------------------------------------------------------------------------------------------------
-- Functions.
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure DuplicateHandle (
    hSourceProcessHandle  : in THANDLE;
    hSourceHandle         : in THANDLE;
    hTargetProcessHandle  : in THANDLE;
    lpTargetHandle        : in PHANDLE;
    dwDesiredAccess       : in DWORD;
    bInheritHandle        : in BOOL;
    dwOptions             : in DWORD)
                            return BOOL;
#pragma convention(DuplicateHandle,system);
#pragma import(DuplicateHandle,'DuplicateHandle','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure RaiseException(
    dwExceptionCode    : in t_rtl_unsigned32; 
    dwExceptionFlags   : in t_rtl_unsigned32; 
    nNumberOfArguments : in t_rtl_unsigned32; 
    lpArguments        : in p_winnt_exception_arguments);
#pragma convention(RaiseException,system);
#pragma import(RaiseException,'RaiseException','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure GetThreadContext(
    hThread         : in THANDLE; 
    lpContext       : in p_winnt_context)
                      return BOOL;
#pragma convention(GetThreadContext,system);
#pragma import(GetThreadContext,'GetThreadContext','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure SetThreadContext(
    hThread         : in THANDLE; 
    lpContext       : in p_winnt_context)
                      return BOOL;
#pragma convention(SetThreadContext,system);
#pragma import(SetThreadContext,'SetThreadContext','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure CreateMutexA(
    lpMutexAttributes : in t_rtl_pointer; 
    bInitialOwner   : in BOOL; 
    lpName          : in t_rtl_pointer)
                      return THANDLE;
#pragma convention(CreateMutexA,system);
#pragma import(CreateMutexA,'CreateMutexA','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure ReleaseMutex(
    hMutex          : in THANDLE)
                      return BOOL;
#pragma convention(ReleaseMutex,system);
#pragma import(ReleaseMutex,'ReleaseMutex','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure WaitForSingleObjectEx(
    hHandle         : in THANDLE; 
    dwMilliseconds  : in DWORD;
    bAlertable      : in BOOL)
                      return DWORD;
#pragma convention(WaitForSingleObjectEx,system);
#pragma import(WaitForSingleObjectEx,'WaitForSingleObjectEx','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure CreateEventA(
    lpEventAttributes : in t_rtl_pointer; 
    bManualReset    : in BOOL; 
    bInitialState   : in BOOL; 
    lpName          : in t_rtl_pointer)
                      return THANDLE;
#pragma convention(CreateEventA,system);
#pragma import(CreateEventA,'CreateEventA','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure SetEvent(
    hEvent          : in THANDLE)
                      return BOOL;
#pragma convention(SetEvent,system);
#pragma import(SetEvent,'SetEvent','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure ResetEvent(
    hEvent          : in THANDLE)
                      return BOOL;
#pragma convention(ResetEvent,system);
#pragma import(ResetEvent,'ResetEvent','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure CloseHandle(
    hObject         : in THANDLE)
                      return BOOL;
#pragma convention(CloseHandle,system);
#pragma import(CloseHandle,'CloseHandle','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure InitializeCriticalSection(
    lpCriticalSection : in p_winnt_critical_section);
#pragma convention(InitializeCriticalSection,system);
#pragma import(InitializeCriticalSection,'InitializeCriticalSection','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure EnterCriticalSection(
    lpCriticalSection : in p_winnt_critical_section);
#pragma convention(EnterCriticalSection,system);
#pragma import(EnterCriticalSection,'EnterCriticalSection','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure LeaveCriticalSection(
    lpCriticalSection : in p_winnt_critical_section);
#pragma convention(LeaveCriticalSection,system);
#pragma import(LeaveCriticalSection,'LeaveCriticalSection','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure DeleteCriticalSection(
    lpCriticalSection : in p_winnt_critical_section);
#pragma convention(DeleteCriticalSection,system);
#pragma import(DeleteCriticalSection,'DeleteCriticalSection','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure VirtualAlloc(
    lpAddress       : in LPVOID; 
    dwSize          : in SIZE_T; 
    flAllocationType : in DWORD; 
    flProtect       : in DWORD)
                      return LPVOID;
#pragma convention(VirtualAlloc,system);
#pragma import(VirtualAlloc,'VirtualAlloc','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure VirtualFree(
    lpAddress       : in LPVOID; 
    dwSize          : in SIZE_T; 
    dwFreeType      : in DWORD)
                      return BOOL;
#pragma convention(VirtualFree,system);
#pragma import(VirtualFree,'VirtualFree','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure HeapAlloc(
    hHeap           : in THANDLE; 
    dwFlags         : in DWORD; 
    dwBytes         : in SIZE_T)
                      return LPVOID;
#pragma convention(HeapAlloc,system);
#pragma import(HeapAlloc,'HeapAlloc','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure HeapReAlloc(
    hHeap           : in THANDLE; 
    dwFlags         : in DWORD; 
    lpMem           : in LPVOID; 
    dwBytes         : in SIZE_T)
                      return LPVOID;
#pragma convention(HeapReAlloc,system);
#pragma import(HeapReAlloc,'HeapReAlloc','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure HeapFree(
    hHeap           : in THANDLE; 
    dwFlags         : in DWORD; 
    lpMem           : in LPVOID)
                      return BOOL;
#pragma convention(HeapFree,system);
#pragma import(HeapFree,'HeapFree','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure HeapValidate(
    hHeap           : in THANDLE; 
    dwFlags         : in DWORD; 
    lpMem           : in LPCVOID)
                      return BOOL;
#pragma convention(HeapValidate,system);
#pragma import(HeapValidate,'HeapValidate','kernel32.dll');
----------------------------------------------------------------------------------------------------

{
----------------------------------------------------------------------------------------------------
procedure HeapSize(
    hHeap           : in THANDLE; 
    dwFlags         : in DWORD; 
    lpMem           : in LPCVOID)
                      return SIZE_T;
#pragma convention(HeapSize,system);
#pragma import(HeapSize,'HeapSize','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure HeapCompact(
    hHeap           : in THANDLE; 
    dwFlags         : in DWORD)
                      return SIZE_T;
#pragma convention(HeapCompact,system);
#pragma import(HeapCompact,'HeapCompact','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure HeapCreate(
    flOptions       : in DWORD; 
    dwInitialSize   : in SIZE_T; 
    dwMaximumSize   : in SIZE_T)
                      return THANDLE;
#pragma convention(HeapCreate,system);
#pragma import(HeapCreate,'HeapCreate','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure HeapDestroy(
    hHeap           : in out THANDLE)
                      return BOOL;
#pragma convention(HeapDestroy,system);
#pragma import(HeapDestroy,'HeapDestroy','kernel32.dll');
----------------------------------------------------------------------------------------------------
}
----------------------------------------------------------------------------------------------------
procedure GetLastError
                      return DWORD;
#pragma convention(GetLastError,system);
#pragma import(GetLastError,'GetLastError','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure GetProcessHeap
                      return THANDLE;
#pragma convention(GetProcessHeap,system);
#pragma import(GetProcessHeap,'GetProcessHeap','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure CreateThread(
    lpThreadAttributes : in t_rtl_pointer; 
    dwStackSize     : in SIZE_T; 
    lpStartAddress  : in p_rtl_thread_entry_win32; 
    lpParameter     : in t_rtl_pointer; 
    dwCreationFlags : in DWORD; 
    lpThreadId      : out t_rtl_unsigned32)
                      return THANDLE;
#pragma convention(CreateThread,system);
#pragma import(CreateThread,'CreateThread','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure SleepEx(
    dwMilliseconds  : in DWORD;
    bAlertable      : in BOOL)
                      return DWORD;
#pragma convention(SleepEx,system);
#pragma import(SleepEx,'SleepEx','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure GetTickCount
                      return t_system_ticks;
#pragma convention(GetTickCount,system);
#pragma import(GetTickCount,'GetTickCount','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure GetCurrentProcess
                      return THANDLE;
#pragma convention(GetCurrentProcess,system);
#pragma import(GetCurrentProcess,'GetCurrentProcess','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure GetCurrentThread
                      return THANDLE;
#pragma convention(GetCurrentThread,system);
#pragma import(GetCurrentThread,'GetCurrentThread','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure GetCurrentThreadId
                      return DWORD;
#pragma convention(GetCurrentThreadId,system);
#pragma import(GetCurrentThreadId,'GetCurrentThreadId','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure OpenThread(
    dwDesiredAccess : DWORD; 
    bInheritHandle  : BOOL; 
    dwThreadId      : DWORD)
                      return THANDLE;
#pragma convention(OpenThread,system);
#pragma import(OpenThread,'OpenThread','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure TlsAlloc
                      return DWORD;
#pragma convention(TlsAlloc,system);
#pragma import(TlsAlloc,'TlsAlloc','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure TlsFree(
    dwTlsIndex      : in DWORD)
                      return BOOL;
#pragma convention(TlsFree,system);
#pragma import(TlsFree,'TlsFree','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure TlsGetValue(
    dwTlsIndex      : in DWORD)
                      return LPVOID;
#pragma convention(TlsGetValue,system);
#pragma import(TlsGetValue,'TlsGetValue','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure TlsSetValue(
    dwTlsIndex      : in DWORD; 
    lpTlsValue      : in LPVOID)
                      return BOOL;
#pragma convention(TlsSetValue,system);
#pragma import(TlsSetValue,'TlsSetValue','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure ResumeThread(
    hThread         : in THANDLE)
                      return DWORD;
#pragma convention(ResumeThread,system);
#pragma import(ResumeThread,'ResumeThread','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure SuspendThread(
    hThread         : in THANDLE)
                      return DWORD;
#pragma convention(SuspendThread,system);
#pragma import(SuspendThread,'SuspendThread','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure TerminateThread(
    hThread         : in THANDLE; 
    dwExitCode      : in DWORD)
                      return BOOL;
#pragma convention(TerminateThread,system);
#pragma import(TerminateThread,'TerminateThread','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure ExitThread(
    dwExitCode      : in DWORD);
#pragma convention(ExitThread,system);
#pragma import(ExitThread,'ExitThread','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure ExitProcess (
    dwExitCode      : in DWORD);
#pragma convention(exitprocess,system);
#pragma import(exitprocess,'ExitProcess','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------
procedure QueueUserAPC(
    callback        : in p_winnt_apc_callback; 
    hThread         : in THANDLE;
    dwData          : in DWORD)
                      return DWORD;
#pragma convention(QueueUserAPC,system);
#pragma import(QueueUserAPC,'QueueUserAPC','kernel32.dll');
----------------------------------------------------------------------------------------------------

 

----------------------------------------------------------------------------------------------------
-- Windows Native API
-- Undocumented Windows NT Kernel API
----------------------------------------------------------------------------------------------------

type
  NTSTATUS = t_rtl_unsigned32;

const
  NTSTATUS_SUCCESS_L : NTSTATUS = $00000000;
  NTSTATUS_SUCCESS_H : NTSTATUS = $3FFFFFFF;
  NTSTATUS_INFO_L    : NTSTATUS = $40000000;
  NTSTATUS_INFO_H    : NTSTATUS = $7FFFFFFF;
  NTSTATUS_WARNING_L : NTSTATUS = $80000000;
  NTSTATUS_WARNING_H : NTSTATUS = $BFFFFFFF;
  NTSTATUS_ERROR_L   : NTSTATUS = $C0000000;
  NTSTATUS_ERROR_H   : NTSTATUS = $FFFFFFFF;

----------------------------------------------------------------------------------------------------
procedure NtAlertThread(
    hThread         : in THANDLE)
                      return NTSTATUS;
#pragma convention(NtAlertThread,system);
#pragma import(NtAlertThread,'NtAlertThread','ntdll.dll');
----------------------------------------------------------------------------------------------------
procedure NtAlertResumeThread(
    hThread         : in THANDLE;
    SuspendCount    : out DWORD)
                      return NTSTATUS;
#pragma convention(NtAlertResumeThread,system);
#pragma import(NtAlertResumeThread,'NtAlertResumeThread','ntdll.dll');
----------------------------------------------------------------------------------------------------
procedure NtContinue(
  ThreadContext    : in p_winnt_context;
  RaiseAlert       : in BOOL);
#pragma convention(NtContinue,system);
#pragma import(NtContinue,'NtContinue','ntdll.dll');
----------------------------------------------------------------------------------------------------

end os_api;
