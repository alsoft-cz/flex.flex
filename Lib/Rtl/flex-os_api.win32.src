----------------------------------------------------------------------------------------------------
module os_api =
-- Win32 API Binding.
-- Flex Run-time Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------

#option required_security(100);

type
  t_handle = t_rtl_unsigned32;
  p_handle = t_rtl_pointer;
  dword   = t_rtl_unsigned32;
  pdword  = ^t_rtl_unsigned32;
  inbool  = t_rtl_logical;
  bool    = t_rtl_unsigned32;
  byte    = t_rtl_unsigned8;
  word    = t_rtl_unsigned16;
  mword   = mod unsigned 16;
  size_t  = t_rtl_unsigned32;
  lvoid   = t_rtl_pointer;
  lpvoid  = t_rtl_pointer;
  lpcvoid = t_rtl_pointer;
  tprio   = t_rtl_signed32;
  ulonglong = t_rtl_unsigned64;

const
  stack_size_param_is_a_reservation  = $10000;
  mem_commit     : t_rtl_unsigned32  = $1000;
  mem_decommit   : t_rtl_unsigned32  = $4000;
  mem_release    : t_rtl_unsigned32  = $8000;
  mem_top_down   : t_rtl_unsigned32  = $100000;
  page_readwrite : t_rtl_unsigned32  = $4;
  infinite       : t_rtl_unsigned32  = $ffffffff;
  invalid_handle     : t_handle       = $ffffffff;
  std_input_handle   : t_handle       = $fffffff6;
  std_output_handle  : t_handle       = $fffffff5;
  std_error_handle   : t_handle       = $fffffff4;
  winnt_exception_maximum_parameters = 15;
  winnt_size_of_80387_registers      = 80;
  winnt_maximum_supported_extension  = 512;
  winnt_exception_noncontinuable     = 1;
  heap_zero_memory : t_rtl_unsigned32  = $8;

  wait_failed        : t_rtl_unsigned32 = $ffffffff;
  wait_object_0      : t_rtl_unsigned32 = $00000000;
  wait_object_63     : t_rtl_unsigned32 = $0000003f;
  wait_timeout       : t_rtl_unsigned32 = $00000102;
  wait_abandoned     : t_rtl_unsigned32 = $00000080;
  wait_io_completion : t_rtl_unsigned32 = $000000c0;

  winnt_context_i386 : t_rtl_unsigned32               = $00010000;   -- this assumes that i386 and
  winnt_context_i486 : t_rtl_unsigned32               = $00010000;   -- i486 have identical context records
  winnt_context_control : t_rtl_unsigned32            = $00000001; -- ss:sp, cs:ip, flags, bp
  winnt_context_integer : t_rtl_unsigned32            = $00000002; -- ax, bx, cx, dx, si, di
  winnt_context_segments : t_rtl_unsigned32           = $00000004; -- ds, es, fs, gs
  winnt_context_floating_point : t_rtl_unsigned32     = $00000008; -- 387 state
  winnt_context_debug_registers : t_rtl_unsigned32    = $00000010; -- db 0-3,6,7
  winnt_context_extended_registers : t_rtl_unsigned32 = $00000020; -- cpu specific extensions
  winnt_context_full : t_rtl_unsigned32               = winnt_context_i486 + winnt_context_control + winnt_context_integer +  winnt_context_segments;


  winnt_thread_priority_idle : tprio             =-15;
  winnt_thread_priority_lowest : tprio           =-2;
  winnt_thread_priority_below_normal : tprio     =-1;
  winnt_thread_priority_normal : tprio           =0;
  winnt_thread_priority_above_normal : tprio     =1;
  winnt_thread_priority_highest : tprio          =2;
  winnt_thread_priority_time_critical : tprio    =15;

  -- Heap
  winnt_process_heap_region                      : mword = $01;
  winnt_process_heap_uncommitted_range           : mword = $02;
  winnt_process_heap_entry_busy                  : mword = $04;
  winnt_process_heap_entry_moveable              : mword = $10;
  winnt_process_heap_entry_ddeshare              : mword = $20;



--#define thread_get_context               (0x0008)  
--#define thread_set_context               (0x0010)  
--#define synchronize                      (0x00100000l)
--#define standard_rights_required         (0x000f0000l)
--#define thread_all_access                (standard_rights_required | synchronize | 0x3ff)
const
  duplicate_same_access    : dword = $00000002;  -- (0x00000002)
  thread_all_access        : dword = 2032639;    --$0x001f03ff;
  thread_terminate         : dword = $1;         -- (0x0001)  
  standard_rights_required : dword = $000f0000;  -- (0x000f0000l)
  synchronize              : dword = $00100000;  -- (0x00100000l)

  
----------------------------------------------------------------------------------------------------

  -- nt exception codes
  exception_access_violation         : t_rtl_unsigned32 = $c0000005; 
  exception_array_bounds_exceeded    : t_rtl_unsigned32 = $c000008c; 
  exception_breakpoint               : t_rtl_unsigned32 = $80000003; 
  exception_datatype_misalignment    : t_rtl_unsigned32 = $80000002; 
  exception_flt_denormal_operand     : t_rtl_unsigned32 = $c000008d; 
  exception_flt_divide_by_zero       : t_rtl_unsigned32 = $c000008e; 
  exception_flt_inexact_result       : t_rtl_unsigned32 = $c000008f; 
  exception_flt_invalid_operation    : t_rtl_unsigned32 = $c0000090; 
  exception_flt_overflow             : t_rtl_unsigned32 = $c0000091; 
  exception_flt_stack_check          : t_rtl_unsigned32 = $c0000092; 
  exception_flt_underflow            : t_rtl_unsigned32 = $c0000093; 
  exception_illegal_instruction      : t_rtl_unsigned32 = $c000001d; 
  exception_in_page_error            : t_rtl_unsigned32 = $c0000006; 
  exception_int_divide_by_zero       : t_rtl_unsigned32 = $c0000094; 
  exception_int_overflow             : t_rtl_unsigned32 = $c0000095; 
  exception_invalid_disposition      : t_rtl_unsigned32 = $c0000026; 
  exception_noncontinuable_exception : t_rtl_unsigned32 = $c0000025; 
  exception_priv_instruction         : t_rtl_unsigned32 = $c0000096; 
  exception_single_step              : t_rtl_unsigned32 = $80000004; 
  exception_stack_overflow           : t_rtl_unsigned32 = $c00000fd; 
  exception_possible_deadlock        : t_rtl_unsigned32 = $c0000194;

  flag_exception_noncontinuable      : t_rtl_unsigned32 = $00000001;

  winnt_maximum_wait_objects         : t_rtl_unsigned32 = 64;
  winnt_file_type_char               : t_rtl_unsigned32 = 2;


----------------------------------------------------------------------------------------------------
-- Types
----------------------------------------------------------------------------------------------------
type
  t_winnt_critical_section = record
      debug_info           : t_rtl_pointer;
      lock_count           : t_rtl_native_signed;
      recursion_count      : t_rtl_native_signed;
      owning_thread        : dword;
      lock_semaphore       : t_handle;
      spin_count           : t_rtl_native_unsigned;
      end record;
  p_winnt_critical_section = ^t_winnt_critical_section;

  t_winnt_exception_disposition = enum 
      exceptioncontinueexecution;
      exceptioncontinuesearch;
      exceptionnestedexception;
      exceptioncollidedunwind;
      end enum for size use 4;

  t_winnt_exception_arguments = array 0..(winnt_exception_maximum_parameters-1) of t_rtl_unsigned32;
  p_winnt_exception_arguments = ^t_winnt_exception_arguments;

  t_winnt_exception_record;
  p_winnt_exception_record = ^t_winnt_exception_record  for machine_pointer use true;
  t_winnt_exception_record = record
      exceptioncode    : t_rtl_unsigned32;
      exceptionflags   : t_rtl_unsigned32;
      exception_record : p_winnt_exception_record;
      exceptionaddress : t_rtl_pointer;
      numberparameters : t_rtl_unsigned32;
      exceptioninfo    : t_winnt_exception_arguments;
      end record;

  t_winnt_floating_save_area = record
      controlword  : t_rtl_unsigned32;
      statusword   : t_rtl_unsigned32;
      tagword      : t_rtl_unsigned32;
      erroroffset  : t_rtl_unsigned32;
      errorselector: t_rtl_unsigned32;
      dataoffset   : t_rtl_unsigned32;
      dataselector : t_rtl_unsigned32;
      registerarea : array 0..winnt_size_of_80387_registers-1 of unsigned 8;
      cr0npxstate  : t_rtl_unsigned32;
      end record;
  
  t_winnt_context = record
      contextflags : t_rtl_unsigned32;
      dr0          : t_rtl_unsigned32;
      dr1          : t_rtl_unsigned32;
      dr2          : t_rtl_unsigned32;
      dr3          : t_rtl_unsigned32;
      dr6          : t_rtl_unsigned32;
      dr7          : t_rtl_unsigned32;
      floatsave    : t_winnt_floating_save_area;
      rseggs       : t_rtl_unsigned32;
      rsegfs       : t_rtl_unsigned32;
      rseges       : t_rtl_unsigned32;
      rsegds       : t_rtl_unsigned32;
      redi         : t_rtl_unsigned32;
      resi         : t_rtl_unsigned32;
      rebx         : t_rtl_unsigned32;
      redx         : t_rtl_unsigned32;
      recx         : t_rtl_unsigned32;
      reax         : t_rtl_unsigned32;
      rebp         : t_rtl_unsigned32;
      reip         : t_rtl_unsigned32;
      rsegcs       : t_rtl_unsigned32;
      reflags      : t_rtl_unsigned32;
      resp         : t_rtl_unsigned32;
      rsegss       : t_rtl_unsigned32;
      extendedregisters : array 0..winnt_maximum_supported_extension-1 of unsigned 8;
      end record;
  p_winnt_context = ^t_winnt_context;

  t_winnt_except_handler = procedure (
      exceptionrecord   : in p_winnt_exception_record;
      establisherframe  : in t_rtl_pointer;
      contextrecord     : in p_winnt_context;
      dispatchercontext : in t_rtl_pointer)
      return t_rtl_unsigned32;
  p_winnt_except_handler = ^t_winnt_except_handler for machine_pointer use true;
  #pragma convention(t_winnt_except_handler,cdecl);

  t_winnt_apc_callback = procedure (
      userdata     : in t_rtl_pointer);
  p_winnt_apc_callback = ^t_winnt_apc_callback for machine_pointer use true;
  #pragma convention(t_winnt_apc_callback,system);

  t_winnt_exception_registration;
  p_winnt_exception_registration = ^t_winnt_exception_registration for machine_pointer use true;
  t_winnt_exception_registration = record
     prevreg     : p_winnt_exception_registration;
     handler     : p_winnt_except_handler;
     end record;


  t_rtl_thread_entry_win32 = procedure ( starter : t_rtl_pointer) return dword;
  p_rtl_thread_entry_win32 =^t_rtl_thread_entry_win32 for machine_pointer use true;

  t_winnt_tib;
  p_winnt_tib = ^t_winnt_tib;
  t_winnt_tib = record
      exceptionlist: p_winnt_exception_registration;   {$00,00}
      stackbase    : t_rtl_pointer;                    {$04,04}
      stacklimit   : t_rtl_pointer;                    {$08,08}
      subsystemtib : t_rtl_pointer;                    {$0c,12}
      fiberdata    : t_rtl_pointer;                    {$10,16 getcurrentfiber}
      aruserpointer: t_rtl_pointer;{p_thread_header}   {$14,20 }
      self         : p_winnt_tib;                      {$18,24 getcurrentthreadid} 
      end record;

  t_system_ticks = mod unsigned 32;


  t_winnt_process_heap_entry = record
      lpdata       : t_rtl_pointer;
      cbdata       : t_rtl_native_unsigned;
      cboverhead   : byte;
      iregionindex : byte;
      wflags       : mword;
      t_004        : record
        block        : record
          hmem         : t_handle;
          dwreserved   : array 0..2 of dword;
          end record for position use 0;
        region            : record
          dwcommittedsize : dword;
          dwuncommittedsize : dword;
          lpfirstblock    : lpvoid;
          lplastblock     : lpvoid;
          end record for position use 0;
        end record;
      end record;

    p_winnt_process_heap_entry = ^t_winnt_process_heap_entry for machine_pointer use true;

    t_winnt_multiple_objects = array of t_handle;
    p_winnt_multiple_objects = ^t_winnt_multiple_objects  for machine_pointer use true;

type
  t_MEMORY_BASIC_INFORMATION = record
      BaseAddress     : lPVOID;
      AllocationBase  : lPVOID;
      AllocationProtect : DWORD;
      RegionSize      : SIZE_T;
      State           : DWORD;
      Protect         : DWORD;
      _Type           : DWORD;
      end record;

----------------------------------------------------------------------------------------------------
-- subsystems
----------------------------------------------------------------------------------------------------
#if sub_console then;
  --------------------------------------------------------------------------------------------------
  procedure GetStdHandle (
      nStdHandle                 : in t_handle)
      return t_handle;
  #pragma convention(GetStdHandle,system);
  #pragma import(GetStdHandle,'GetStdHandle','kernel32.dll');
  --------------------------------------------------------------------------------------------------
  procedure GetFileType(
      hFile                      : in t_handle)
      return t_rtl_unsigned32;
  #pragma convention(GetFileType,system);
  #pragma import(GetFileType,'GetFileType','kernel32.dll');
  --------------------------------------------------------------------------------------------------
  procedure WriteConsole (
      hConsoleOutput             : in t_handle;
      lpBuffer                   : in unchecked;
      nNumberOfCharsToWrite      : in t_rtl_unsigned32;
      lpNumberOfCharsWritten     : out t_rtl_unsigned32;
      lpReserved                 : in t_rtl_pointer)
      return bool;
  #pragma convention(WriteConsole,system);
  #pragma import(WriteConsole,'WriteConsoleW','kernel32.dll');
  --------------------------------------------------------------------------------------------------
  procedure WriteFile (
      hFile                      : in t_handle; 
      lpBuffer                   : in unchecked; 
      nNumberOfBytesToWrite      : in t_rtl_unsigned32; 
      lpNumberOfBytesWritten     : out t_rtl_unsigned32; 
      lpOverlapped               : in t_rtl_pointer)
      return bool;
  #pragma convention(WriteFile,system);
  #pragma import(WriteFile,'WriteFile','kernel32.dll');
  --------------------------------------------------------------------------------------------------


#elsif sub_gui then;
  ------------------------------------------------------------------------------------------------
  procedure MessageBox (
      handle                    : t_handle; 
      lpText                    : in unchecked; 
      lpCaption                 : in unchecked {char16array}; 
      uType                     : t_rtl_unsigned32) 
      return bool;
  #pragma convention(messagebox,system);
  #pragma import(messagebox,'MessageBoxW','user32.dll');
  --------------------------------------------------------------------------------------------------
#else;
  #error 'RTL Internal Error: Unrecognized subsystem';
#end if;
----------------------------------------------------------------------------------------------------





----------------------------------------------------------------------------------------------------
-- Functions.
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
procedure DuplicateHandle (
    hSourceProcessHandle  : in t_handle;
    hSourceHandle         : in t_handle;
    hTargetProcessHandle  : in t_handle;
    lpTarget_handle        : in p_handle;
    dwDesiredAccess       : in dword;
    bInherit_handle        : in inbool;
    dwOptions             : in dword)
                            return bool;
#pragma convention(DuplicateHandle,system);
#pragma import(DuplicateHandle,'DuplicateHandle','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure RaiseException(
    dwExceptionCode    : in t_rtl_unsigned32; 
    dwExceptionFlags   : in t_rtl_unsigned32; 
    nNumberOfArguments : in t_rtl_unsigned32; 
    lpArguments        : in p_winnt_exception_arguments);
#pragma convention(RaiseException,system);
#pragma import(RaiseException,'RaiseException','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure GetThreadContext(
    hThread         : in t_handle; 
    lpContext       : in p_winnt_context)
                      return bool;
#pragma convention(GetThreadContext,system);
#pragma import(GetThreadContext,'GetThreadContext','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure SetThreadContext(
    hThread         : in t_handle; 
    lpContext       : in p_winnt_context)
                      return bool;
#pragma convention(SetThreadContext,system);
#pragma import(SetThreadContext,'SetThreadContext','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure CreateMutexW(
    lpMutexAttributes : in t_rtl_pointer; 
    bInitialOwner   : in inbool; 
    lpName          : in t_rtl_pointer)
                      return t_handle;
#pragma convention(CreateMutexW,system);
#pragma import(CreateMutexW,'CreateMutexW','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure ReleaseMutex(
    hMutex          : in t_handle)
                      return bool;
#pragma convention(ReleaseMutex,system);
#pragma import(ReleaseMutex,'ReleaseMutex','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure CreateSemaphoreW(
    lpSemaphoreAttributes : in t_rtl_pointer; 
    lInitialCount   : in dword; 
    lMaximumCount   : in dword; 
    lpName          : in t_rtl_pointer)
                      return t_handle;
#pragma convention(CreateSemaphoreW,system);
#pragma import(CreateSemaphoreW,'CreateSemaphoreW','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure ReleaseSemaphore(
    hSemaphore      : in t_handle; 
    lReleaseCount   : in dword; 
    lpPreviousCount : in pdword)
                      return bool;
#pragma convention(ReleaseSemaphore,system);
#pragma import(ReleaseSemaphore,'ReleaseSemaphore','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure WaitForSingleObjectEx(
    hHandle         : in t_handle; 
    dwMilliseconds  : in t_rtl_timeout;
    bAlertable      : in inbool)
                      return dword;
#pragma convention(WaitForSingleObjectEx,system);
#pragma import(WaitForSingleObjectEx,'WaitForSingleObjectEx','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure WaitForMultipleObjectsEx(
    nCount          : in dword; 
    lpHandles       : in p_winnt_multiple_objects; 
    bWaitAll        : in inbool; 
    dwMilliseconds  : in t_rtl_timeout;
    bAlertable      : in inbool)
                      return dword;
#pragma convention(WaitForMultipleObjectsEx,system);
#pragma import(WaitForMultipleObjectsEx,'WaitForMultipleObjectsEx','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure CreateEventW(
    lpEventAttributes : in t_rtl_pointer; 
    bManualReset    : in inbool; 
    bInitialState   : in inbool; 
    lpName          : in t_rtl_pointer)
                      return t_handle;
#pragma convention(CreateEventW,system);
#pragma import(CreateEventW,'CreateEventW','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure SetEvent(
    hEvent          : in t_handle)
                      return bool;
#pragma convention(SetEvent,system);
#pragma import(SetEvent,'SetEvent','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure ResetEvent(
    hEvent          : in t_handle)
                      return bool;
#pragma convention(ResetEvent,system);
#pragma import(ResetEvent,'ResetEvent','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure CloseHandle(
    hObject         : in t_handle)
                      return bool;
#pragma convention(CloseHandle,system);
#pragma import(CloseHandle,'CloseHandle','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure InitializeCriticalSection(
    lpCriticalSection : in p_winnt_critical_section);
#pragma convention(InitializeCriticalSection,system);
#pragma import(InitializeCriticalSection,'InitializeCriticalSection','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure EnterCriticalSection(
    lpCriticalSection : in p_winnt_critical_section);
#pragma convention(EnterCriticalSection,system);
#pragma import(EnterCriticalSection,'EnterCriticalSection','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure TryEnterCriticalSection(
    lpCriticalSection : in p_winnt_critical_section)
                      return bool;
#pragma convention(TryEnterCriticalSection,system);
#pragma import(TryEnterCriticalSection,'TryEnterCriticalSection','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure LeaveCriticalSection(
    lpCriticalSection : in p_winnt_critical_section);
#pragma convention(LeaveCriticalSection,system);
#pragma import(LeaveCriticalSection,'LeaveCriticalSection','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure DeleteCriticalSection(
    lpCriticalSection : in p_winnt_critical_section);
#pragma convention(DeleteCriticalSection,system);
#pragma import(DeleteCriticalSection,'DeleteCriticalSection','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure VirtualAlloc(
    lpAddress       : in lpvoid; 
    dwSize          : in size_t; 
    flAllocationType : in dword; 
    flProtect       : in dword)
                      return lpvoid;
#pragma convention(VirtualAlloc,system);
#pragma import(VirtualAlloc,'VirtualAlloc','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure VirtualFree(
    lpAddress       : in lpvoid; 
    dwSize          : in size_t; 
    dwFreeType      : in dword)
                      return bool;
#pragma convention(VirtualFree,system);
#pragma import(VirtualFree,'VirtualFree','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure VirtualProtect(
    lpAddress       : in LPVOID; 
    dwSize          : in SIZE_T; 
    flNewProtect    : in DWORD; 
    lpflOldProtect  : out DWORD)
                      return BOOL;
#pragma convention(VirtualProtect,system);
#pragma import(VirtualProtect,'VirtualProtect','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure VirtualQuery(
    lpAddress       : in LPCVOID; 
    lpBuffer        : out t_MEMORY_BASIC_INFORMATION; 
    dwLength        : in SIZE_T)
                      return SIZE_T;
#pragma convention(VirtualQuery,system);
#pragma import(VirtualQuery,'VirtualQuery','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure HeapAlloc(
    hHeap           : in t_handle; 
    dwFlags         : in dword; 
    dwBytes         : in size_t)
                      return lpvoid;
#pragma convention(HeapAlloc,system);
#pragma import(HeapAlloc,'HeapAlloc','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure HeapReAlloc(
    hHeap           : in t_handle; 
    dwFlags         : in dword; 
    lpMem           : in lpvoid; 
    dwBytes         : in size_t)
                      return lpvoid;
#pragma convention(HeapReAlloc,system);
#pragma import(HeapReAlloc,'HeapReAlloc','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure HeapFree(
    hHeap           : in t_handle; 
    dwFlags         : in dword; 
    lpMem           : in lpvoid)
                      return bool;
#pragma convention(HeapFree,system);
#pragma import(HeapFree,'HeapFree','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure HeapValidate(
    hHeap           : in t_handle; 
    dwFlags         : in dword; 
    lpMem           : in lpcvoid)
                      return bool;
#pragma convention(HeapValidate,system);
#pragma import(HeapValidate,'HeapValidate','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure HeapWalk(
    hHeap           : in t_handle; 
    lpEntry         : in p_winnt_process_heap_entry)
                      return bool;
#pragma convention(HeapWalk,system);
#pragma import(HeapWalk,'HeapWalk','kernel32.dll');
----------------------------------------------------------------------------------------------------

{
----------------------------------------------------------------------------------------------------
procedure HeapSize(
    hHeap           : in t_handle; 
    dwFlags         : in dword; 
    lpMem           : in lpcvoid)
                      return size_t;
#pragma convention(HeapSize,system);
#pragma import(HeapSize,'HeapSize','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure HeapCompact(
    hHeap           : in t_handle; 
    dwFlags         : in dword)
                      return size_t;
#pragma convention(HeapCompact,system);
#pragma import(HeapCompact,'HeapCompact','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure HeapCreate(
    flOptions       : in dword; 
    dwInitialSize   : in size_t; 
    dwMaximumSize   : in size_t)
                      return t_handle;
#pragma convention(HeapCreate,system);
#pragma import(HeapCreate,'HeapCreate','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure HeapDestroy(
    hHeap           : in out t_handle)
                      return bool;
#pragma convention(HeapDestroy,system);
#pragma import(HeapDestroy,'HeapDestroy','kernel32.dll');
----------------------------------------------------------------------------------------------------
}
----------------------------------------------------------------------------------------------------
procedure GetLastError
                      return dword;
#pragma convention(GetLastError,system);
#pragma import(GetLastError,'GetLastError','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure GetProcessHeap
                      return t_handle;
#pragma convention(GetProcessHeap,system);
#pragma import(GetProcessHeap,'GetProcessHeap','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure CreateThread(
    lpThreadAttributes : in t_rtl_pointer; 
    dwStackSize     : in size_t; 
    lpStartAddress  : in p_rtl_thread_entry_win32; 
    lpParameter     : in t_rtl_pointer; 
    dwCreationFlags : in dword; 
    lpThreadId      : out t_rtl_unsigned32)
                      return t_handle;
#pragma convention(CreateThread,system);
#pragma import(CreateThread,'CreateThread','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure SetThreadPriority(
    hThread         : in t_handle; 
    nPriority       : in TPRIO)
                      return bool;
#pragma convention(SetThreadPriority,system);
#pragma import(SetThreadPriority,'SetThreadPriority','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure GetThreadPriority(
    hThread         : in t_handle)
                      return TPRIO;
#pragma convention(GetThreadPriority,system);
#pragma import(GetThreadPriority,'GetThreadPriority','kernel32.dll'); 
----------------------------------------------------------------------------------------------------
procedure SleepEx(
    dwMilliseconds  : in dword;
    bAlertable      : in inbool)
                      return dword;
#pragma convention(SleepEx,system);
#pragma import(SleepEx,'SleepEx','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure GetTickCount
                      return t_system_ticks;
#pragma convention(GetTickCount,system);
#pragma import(GetTickCount,'GetTickCount','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure GetCurrentProcess
                      return t_handle;
#pragma convention(GetCurrentProcess,system);
#pragma import(GetCurrentProcess,'GetCurrentProcess','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure GetCurrentThread
                      return t_handle;
#pragma convention(GetCurrentThread,system);
#pragma import(GetCurrentThread,'GetCurrentThread','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure GetCurrentThreadId
                      return dword;
#pragma convention(GetCurrentThreadId,system);
#pragma import(GetCurrentThreadId,'GetCurrentThreadId','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure OpenThread(
    dwDesiredAccess : dword; 
    bInherit_handle  : bool; 
    dwThreadId      : dword)
                      return t_handle;
#pragma convention(OpenThread,system);
#pragma import(OpenThread,'OpenThread','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure TlsAlloc
                      return dword;
#pragma convention(TlsAlloc,system);
#pragma import(TlsAlloc,'TlsAlloc','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure TlsFree(
    dwTlsIndex      : in dword)
                      return bool;
#pragma convention(TlsFree,system);
#pragma import(TlsFree,'TlsFree','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure TlsGetValue(
    dwTlsIndex      : in dword)
                      return lpvoid;
#pragma convention(TlsGetValue,system);
#pragma import(TlsGetValue,'TlsGetValue','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure TlsSetValue(
    dwTlsIndex      : in dword; 
    lpTlsValue      : in lpvoid)
                      return bool;
#pragma convention(TlsSetValue,system);
#pragma import(TlsSetValue,'TlsSetValue','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure ResumeThread(
    hThread         : in t_handle)
                      return dword;
#pragma convention(ResumeThread,system);
#pragma import(ResumeThread,'ResumeThread','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure SuspendThread(
    hThread         : in t_handle)
                      return dword;
#pragma convention(SuspendThread,system);
#pragma import(SuspendThread,'SuspendThread','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure TerminateThread(
    hThread         : in t_handle; 
    dwExitCode      : in dword)
                      return bool;
#pragma convention(TerminateThread,system);
#pragma import(TerminateThread,'TerminateThread','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure ExitThread(
    dwExitCode      : in dword);
#pragma convention(ExitThread,system);
#pragma import(ExitThread,'ExitThread','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure ExitProcess (
    dwExitCode      : in dword);
#pragma convention(exitprocess,system);
#pragma import(exitprocess,'ExitProcess','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure GetModuleHandle (
    lpModuleName    : in p_syscharustr)
                      return t_handle;
#pragma convention(GetModuleHandle,system);
#pragma import(GetModuleHandle,'GetModuleHandleW','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure QueueUserAPC(
    callback        : in p_winnt_apc_callback; 
    hThread         : in t_handle;
    dwData          : in dword)
                      return dword;
#pragma convention(QueueUserAPC,system);
#pragma import(QueueUserAPC,'QueueUserAPC','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure GetProcessAffinityMask(
    hProcess        : in t_handle; 
    lpProcessAffinityMask : in out ref dword ; 
    lpSystemAffinityMask : in out ref dword )
                      return bool;
#pragma convention(GetProcessAffinityMask,system);
#pragma import(GetProcessAffinityMask,'GetProcessAffinityMask','kernel32.dll');
----------------------------------------------------------------------------------------------------

{ 
----------------------------------------------------------------------------------------------------
-- Windows Native API
-- Undocumented Windows NT Kernel API
----------------------------------------------------------------------------------------------------

type
  NTSTATUS = t_rtl_unsigned32;

const
  NTSTATUS_SUCCESS_L : NTSTATUS = $00000000;
  NTSTATUS_SUCCESS_H : NTSTATUS = $3FFFFFFF;
  NTSTATUS_INFO_L    : NTSTATUS = $40000000;
  NTSTATUS_INFO_H    : NTSTATUS = $7FFFFFFF;
  NTSTATUS_WARNING_L : NTSTATUS = $80000000;
  NTSTATUS_WARNING_H : NTSTATUS = $BFFFFFFF;
  NTSTATUS_ERROR_L   : NTSTATUS = $C0000000;
  NTSTATUS_ERROR_H   : NTSTATUS = $FFFFFFFF;

----------------------------------------------------------------------------------------------------
procedure NtAlertThread(
    hThread         : in t_handle)
                      return NTSTATUS;
#pragma convention(NtAlertThread,system);
#pragma import(NtAlertThread,'NtAlertThread','ntdll.dll');
----------------------------------------------------------------------------------------------------
procedure NtAlertResumeThread(
    hThread         : in t_handle;
    SuspendCount    : out dword)
                      return NTSTATUS;
#pragma convention(NtAlertResumeThread,system);
#pragma import(NtAlertResumeThread,'NtAlertResumeThread','ntdll.dll');
----------------------------------------------------------------------------------------------------
procedure NtContinue(
  ThreadContext    : in p_winnt_context;
  RaiseAlert       : in inbool);
#pragma convention(NtContinue,system);
#pragma import(NtContinue,'NtContinue','ntdll.dll');
----------------------------------------------------------------------------------------------------
}

end os_api;
