---------------------------------------------------------------------------------------------------
module private structures =
-- Flex Run-time Library
-- Simple structures
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure rtl_singly_list_create =
----------------------------------------------------------------------------------------------------
begin
  list.first:=nil;
  end rtl_singly_list_create;



----------------------------------------------------------------------------------------------------
procedure rtl_singly_list_discard =
----------------------------------------------------------------------------------------------------
begin
  if list.first<>nil then
    -- nonempty
    raise program_error;
    end if;
  end rtl_singly_list_discard;



----------------------------------------------------------------------------------------------------
procedure rtl_singly_list_insert =
----------------------------------------------------------------------------------------------------
begin
  item^.next:unchecked:=list.first;
  list.first:=item;
  end rtl_singly_list_insert;



----------------------------------------------------------------------------------------------------
procedure rtl_singly_list_remove =
----------------------------------------------------------------------------------------------------
var
    node           : p_rtl_singly_item;
    prev           : p_rtl_singly_item;

begin
  node:=list.first;
  prev:=nil;
  while (node<>nil) loop
    if node=item then
      if prev=nil then
        list.first:unchecked:=node^.next;
      else
        prev^.next:=node^.next;
        end if;
      node^.next:=nil;
      return;
      end if;
    end loop;
  -- item not found
  raise program_error;
  end rtl_singly_list_remove;



----------------------------------------------------------------------------------------------------
procedure rtl_singly_list_remove_next =
----------------------------------------------------------------------------------------------------
var
    node           : p_rtl_singly_item;

begin
  if list.first=nil or (item<>nil and item^.next=nil) then
    raise program_error;
    end if;
  
  if item=nil then
    node:=list.first;
    list.first:unchecked:=node^.next;
  else
    node:unchecked:=item^.next;
    item^.next:=node^.next;
    end if;
  node^.next:=nil;
  end rtl_singly_list_remove_next;



----------------------------------------------------------------------------------------------------
procedure rtl_singly_list_first =
----------------------------------------------------------------------------------------------------
begin
  item:unchecked:=list.first;
  end rtl_singly_list_first;



----------------------------------------------------------------------------------------------------
procedure rtl_singly_list_next =
----------------------------------------------------------------------------------------------------
begin
  if item=nil then
    item:unchecked:=list.first;
  else
    item:unchecked:=item^.next;
    end if;
  end rtl_singly_list_next;



----------------------------------------------------------------------------------------------------
procedure rtl_doubly_list_create =
----------------------------------------------------------------------------------------------------
begin
  list.first:=nil;
  list.last:=nil;
  end rtl_doubly_list_create ;



----------------------------------------------------------------------------------------------------
procedure rtl_doubly_list_discard =
----------------------------------------------------------------------------------------------------
begin
  if list.first<>nil or list.last<>nil then
    -- nonempty
    raise program_error;
    end if;
  end rtl_doubly_list_discard;



----------------------------------------------------------------------------------------------------
procedure rtl_doubly_list_insert =
----------------------------------------------------------------------------------------------------
begin
  item^.prev:=nil;
  item^.next:unchecked:=list.first;
  if list.first=nil then
    list.last:unchecked:=item;
  else
    list.first^.prev:unchecked:=item;
    end if;
  list.first:unchecked:=item;
  end rtl_doubly_list_insert;



----------------------------------------------------------------------------------------------------
procedure rtl_doubly_list_append =
----------------------------------------------------------------------------------------------------
begin
  item^.next:=nil;
  item^.prev:unchecked:=list.last;
  if list.last=nil then
    list.first:unchecked:=item;
  else
    list.last^.next:unchecked:=item;
    end if;
  list.last:unchecked:=item;
  end rtl_doubly_list_append;



----------------------------------------------------------------------------------------------------
procedure rtl_doubly_list_remove =
----------------------------------------------------------------------------------------------------
begin
  if item^.next=nil then
    list.last:unchecked:=item^.prev;
  else
    p_rtl_doubly_item(item^.next:unchecked)^.prev:=item^.prev;
    end if;
  if item^.prev=nil then
    list.first:unchecked:=item^.next;
  else
    p_rtl_doubly_item(item^.prev:unchecked)^.next:=item^.next;
    end if;
  item^.next:=nil;
  item^.prev:=nil;
  end rtl_doubly_list_remove;



----------------------------------------------------------------------------------------------------
procedure rtl_doubly_list_first =
----------------------------------------------------------------------------------------------------
begin
  item:unchecked:=list.first;
  end rtl_doubly_list_first;



----------------------------------------------------------------------------------------------------
procedure rtl_doubly_list_next =
----------------------------------------------------------------------------------------------------
begin
  if item=nil then
    item:unchecked:=list.first;
  else
    item:unchecked:=item^.next;
    end if;
  end rtl_doubly_list_next;



----------------------------------------------------------------------------------------------------
procedure rtl_doubly_list_prev =
----------------------------------------------------------------------------------------------------
begin
  if item=nil then
    item:unchecked:=list.last;
  else
    item:unchecked:=item^.prev;
    end if;
  end rtl_doubly_list_prev;



----------------------------------------------------------------------------------------------------
procedure rtl_expr_discard =
----------------------------------------------------------------------------------------------------
begin
  case expression^.node_type
    when expr_and,expr_or,expr_xor do
      rtl_expr_discard(expression^.left);
      rtl_expr_discard(expression^.right);
    when expr_not do
      rtl_expr_discard(expression^.right);
    when others do
      raise implementation_error;
    end case;
  discard expression;
  end rtl_expr_discard;



----------------------------------------------------------------------------------------------------
procedure rtl_expr_evaluate =
----------------------------------------------------------------------------------------------------
begin
  case expression^.node_type
    when expr_nil do
      raise program_error;
    when expr_and do
      result:=rtl_expr_evaluate(expression^.left,userdata) and rtl_expr_evaluate(expression^.right,userdata);
    when expr_or do
      result:=rtl_expr_evaluate(expression^.left,userdata) or  rtl_expr_evaluate(expression^.right,userdata);
    when expr_xor do
      result:=rtl_expr_evaluate(expression^.left,userdata) xor rtl_expr_evaluate(expression^.right,userdata);
    when expr_not do
      result:=                                             not rtl_expr_evaluate(expression^.right,userdata);
    when expr_boolconst_leaf do
      result:=expression^.boolconst;
    when expr_boolref_leaf do
      result:=expression^.boolref^;
    when expr_callback_leaf do
      result:=expression^.callback^(userdata,expression^.nodedata);
    when others do
      raise implementation_error;
    end case;
  end rtl_expr_evaluate;



----------------------------------------------------------------------------------------------------
procedure rtl_expr_join =
----------------------------------------------------------------------------------------------------
begin
  case operator
    when expr_and,expr_or,expr_xor do
      if right=nil or left=nil then
        raise program_error;
        end if;
      new result;
      result^.node_type:=operator;
      result^.left:=left;
      result^.right:=right;
    when expr_not do
      if right=nil or left<>nil then
        raise program_error;
        end if;
      new result;
      result^.node_type:=operator;
      result^.right:=right;
    when others do
      raise implementation_error;
    end case;
  end rtl_expr_join;




----------------------------------------------------------------------------------------------------
procedure rtl_expr_decompose_to_addend =
----------------------------------------------------------------------------------------------------
begin
  end rtl_expr_decompose_to_addend;



----------------------------------------------------------------------------------------------------
procedure rtl_expr_boolconst =
----------------------------------------------------------------------------------------------------
begin
  new result;
  result^.node_type:=expr_boolref_leaf;
  result^.boolconst:=value;
  end rtl_expr_boolconst;



----------------------------------------------------------------------------------------------------
procedure rtl_expr_boolref =
----------------------------------------------------------------------------------------------------
begin
  new result;
  result^.node_type:=expr_boolref_leaf;
  result^.boolref:=value;
  end rtl_expr_boolref;



----------------------------------------------------------------------------------------------------
procedure rtl_expr_callback =
----------------------------------------------------------------------------------------------------
begin
  new result;
  result^.node_type:=expr_callback_leaf;
  result^.callback:=callback;
  result^.nodedata:=nodedata;
  end rtl_expr_callback;
end structures;