----------------------------------------------------------------------------------------------------
module private reference =
-- reference counting helpers
----------------------------------------------------------------------------------------------------

with
   hw_api;


const
    _softcount      : t_rtl_ref_counter           =[1,0];
    _hardcount      : t_rtl_ref_counter           =[0,1];
    _bothcount      : t_rtl_ref_counter           =[1,1];
    _newshareddec   : t_rtl_ref_counter           =[1,-1];

    
    _softbase      : t_rtl_half_native_signed    =$4000;
    _initcount     : t_rtl_ref_counter           =[0,_softbase];


----------------------------------------------------------------------------------------------------
procedure rtl_ref_inc_shared(
    source         : in out ref t_rtl_ref_shared;
    --target         : in out ref t_rtl_ref_soft;
    when_eq        : in out ref t_rtl_ref_snapshot;
    count          : in t_rtl_half_native_signed:=1)
    return t_rtl_logical8;
----------------------------------------------------------------------------------------------------
procedure rtl_ref_replace_shared(
    target         : in ref t_rtl_ref_shared;
    when_eq        : in ref t_rtl_ref_snapshot;
    source         : in out ref t_rtl_ref_shared;
    old_target     : out ref t_rtl_ref_shared)
    return t_rtl_logical8;
----------------------------------------------------------------------------------------------------
procedure rtl_ref_incref(
    node           : in out p_rtl_ref_node;
    count          : in t_rtl_ref_counter);
----------------------------------------------------------------------------------------------------
procedure rtl_ref_decref(
    node           : in out p_rtl_ref_node;
    count          : in t_rtl_ref_counter);
----------------------------------------------------------------------------------------------------
procedure rtl_ref_inc_aba(
    target         : in out ref t_rtl_ref_shared);
----------------------------------------------------------------------------------------------------




----------------------------------------------------------------------------------------------------
procedure rtl_ref_inc_aba =
----------------------------------------------------------------------------------------------------
const
  prime_smaller_than_16_bit_unsigned = 65521;

begin
  if target.node<>nil then
    target.abacount + 1;
    -- modularni podle prvocisla
    if target.abacount>=prime_smaller_than_16_bit_unsigned then
      target.abacount - prime_smaller_than_16_bit_unsigned;
      end if;
  else
    target.abacount:=prime_smaller_than_16_bit_unsigned;
    --target.abacount:=0;
    end if;
  end rtl_ref_inc_aba;



----------------------------------------------------------------------------------------------------
procedure rtl_ref_decref =
----------------------------------------------------------------------------------------------------
var 
  _count           : t_rtl_ref_counter;
  _newcount        : t_rtl_ref_counter;
  nextnode         : p_rtl_ref_node;

begin
  _count:=count;
  while (node<>nil)loop
    rtl_interlocked_exchange_add_new(^t_rtl_native_signed(node^.count:unchecked),
                                  -t_rtl_native_signed(_count:unchecked),
                                   t_rtl_native_signed(_newcount:unchecked));
    -- odalokovat data a next ?
    if _newcount.hardcount=0 and _newcount.softcount=_softbase then
      if node^.next.node<>nil then
        _count:=_hardcount;
        t_rtl_native_signed(_count:unchecked) - node^.next.softcount;
        nextnode:=node^.next.node;
      else
        nextnode:=nil;
        end if;
      node^.next:=nil;
      if node^.collector<>nil then
        node^.collector^(node^.data);
        end if;
      node^.data:=nil;
      discard node;
      node:=nextnode;
    else
      node:=nil;
      end if;
    end loop;
  end rtl_ref_decref;



----------------------------------------------------------------------------------------------------
procedure rtl_ref_incref =
----------------------------------------------------------------------------------------------------
var 
  _oldcount        : t_rtl_ref_counter;

begin
  if node<>nil then
    rtl_interlocked_exchange_add(^t_rtl_native_signed(node^.count:unchecked),
                                   t_rtl_native_signed(count:unchecked),
                                   t_rtl_native_signed(_oldcount:unchecked));
    end if;
  end rtl_ref_incref;




----------------------------------------------------------------------------------------------------
procedure rtl_ref_replace_shared =
----------------------------------------------------------------------------------------------------
var
    l_when_eq      : t_rtl_ref_shared;

begin
  l_when_eq.node:=when_eq.node;
  l_when_eq.abacount:=when_eq.abacount;
  loop
    l_when_eq.softcount:=target.softcount;
    rtl_interlocked_compare_exchange_double(^t_rtl_double_native_signed(target:unchecked),
                                             t_rtl_double_native_signed(source:unchecked),
                                             t_rtl_double_native_signed(l_when_eq:unchecked),
                                             t_rtl_double_native_signed(old_target:unchecked));
    
    result:=(old_target.node=l_when_eq.node and old_target.abacount=l_when_eq.abacount);
    if old_target.softcount=l_when_eq.softcount or not result then
      break;
      end if;
    --%%TODO pause_nop;
    end loop;
  end rtl_ref_replace_shared;


----------------------------------------------------------------------------------------------------
procedure rtl_ref_inc_shared =
----------------------------------------------------------------------------------------------------
const
  max_thread_locks_on_pointer        =  $1fff;

var
    old_source     : t_rtl_ref_shared;
    new_source     : t_rtl_ref_shared;
    l_when_eq      : t_rtl_ref_shared;
    mcount         : t_rtl_ref_counter;

begin
  if when_eq.node=nil then
    result:=true;
    return;
    end if;
  l_when_eq.node:=when_eq.node;
  l_when_eq.abacount:=when_eq.abacount;

  new_source:=l_when_eq;
  loop
    l_when_eq.softcount:=source.softcount;
    new_source.softcount:=l_when_eq.softcount + count;
    rtl_interlocked_compare_exchange_double(^t_rtl_double_native_signed(source:unchecked),
                                             t_rtl_double_native_signed(new_source:unchecked),
                                             t_rtl_double_native_signed(l_when_eq:unchecked),
                                             t_rtl_double_native_signed(old_source:unchecked));
    
    result:=(old_source.node=l_when_eq.node and old_source.abacount=l_when_eq.abacount);
    if old_source.softcount=l_when_eq.softcount or not result then
      break;
      end if;
    --%%TODO pause_nop;
    end loop;
  {
  rtl_ref_decref(target.node,_softcount);
  if result and count=1 then
    target.node:=new_source.node;
  else
    target.node:=nil;
    end if;
  }
  if result and new_source.softcount=max_thread_locks_on_pointer then
    -- uz je prilis mnoho napocitano v docasnem pocitadle na pointeru
    -- takze odeberu z pointeru vsechny krome posledni a presunu je na node
    mcount.hardcount:=0;
    mcount.softcount:=max_thread_locks_on_pointer-1;
    rtl_ref_incref(new_source.node,mcount);
    if not rtl_ref_inc_shared(source,when_eq,1-max_thread_locks_on_pointer) then
      rtl_ref_decref(new_source.node,mcount);
      end if;

    end if;



  end rtl_ref_inc_shared;


----------------------------------------------------------------------------------------------------
procedure rtl_ref_derefrence =
----------------------------------------------------------------------------------------------------
begin
  result:=localref.node^.data;
  end rtl_ref_derefrence;


----------------------------------------------------------------------------------------------------
procedure rtl_ref_create_local =
----------------------------------------------------------------------------------------------------
begin
  new localref.node;
  localref.node^.collector:=collector;
  localref.node^.data:=resource;
  localref.node^.count.hardcount:=1;
  localref.node^.count.softcount:=_softbase;
  end rtl_ref_create_local;



----------------------------------------------------------------------------------------------------
procedure rtl_ref_discard_local =
----------------------------------------------------------------------------------------------------
begin
  rtl_ref_decref(localref.node,_hardcount);
  end rtl_ref_discard_local;




----------------------------------------------------------------------------------------------------
procedure rtl_ref_discard_soft =
----------------------------------------------------------------------------------------------------
begin
  rtl_ref_decref(softref.node,_softcount);
  end rtl_ref_discard_soft;


----------------------------------------------------------------------------------------------------
procedure rtl_ref_local_to_local =
----------------------------------------------------------------------------------------------------
begin
  rtl_ref_incref(source.node,_hardcount);
  rtl_ref_decref(target.node,_hardcount);
  target:=source;
  end rtl_ref_local_to_local;



----------------------------------------------------------------------------------------------------
procedure rtl_ref_soft_to_local =
----------------------------------------------------------------------------------------------------
begin
  rtl_ref_incref(source.node,_hardcount);
  rtl_ref_decref(target.node,_hardcount);
  target.node:=source.node;
  end rtl_ref_soft_to_local;


----------------------------------------------------------------------------------------------------
procedure rtl_ref_local_to_soft =
----------------------------------------------------------------------------------------------------
begin
  rtl_ref_incref(source.node,_softcount);
  rtl_ref_decref(target.node,_softcount);
  target.node:=source.node;
  end rtl_ref_local_to_soft;


----------------------------------------------------------------------------------------------------
procedure rtl_ref_soft_to_soft =
----------------------------------------------------------------------------------------------------
begin
  rtl_ref_incref(source.node,_softcount);
  rtl_ref_decref(target.node,_softcount);
  target:=source;
  end rtl_ref_soft_to_soft;



----------------------------------------------------------------------------------------------------
procedure rtl_ref_shared_to_snapshot =
----------------------------------------------------------------------------------------------------
begin
  target.node:=source.node;
  target.abacount:=source.abacount;
  end rtl_ref_shared_to_snapshot;


----------------------------------------------------------------------------------------------------
procedure rtl_ref_discard_local_shared =
----------------------------------------------------------------------------------------------------
var
    count          : t_rtl_ref_counter;

begin
  count:=_hardcount;
  t_rtl_native_signed(count:unchecked) - sharedref.softcount;
  rtl_ref_decref(sharedref.node,count);
  sharedref.softcount:=0;
  sharedref.abacount:=0;
  end rtl_ref_discard_local_shared;



----------------------------------------------------------------------------------------------------
procedure rtl_ref_shared_to_soft =
----------------------------------------------------------------------------------------------------
begin
  result:=rtl_ref_inc_shared(source,when_sc_eq);
  rtl_ref_decref(target.node,_softcount);
  if result then
    target.node:=when_sc_eq.node;
  else
    target.node:=nil;
    end if;
  end rtl_ref_shared_to_soft;



----------------------------------------------------------------------------------------------------
procedure rtl_ref_shared_to_local =
----------------------------------------------------------------------------------------------------
var
    temp           : t_rtl_ref_soft;

begin
  result:=rtl_ref_shared_to_soft(source,temp,when_sc_eq);
  if result then
    rtl_ref_decref(temp.node,_newshareddec);
    rtl_ref_decref(target.node,_hardcount);
    target.node:=when_sc_eq.node;
  else
    rtl_ref_decref(target.node,_hardcount);
    end if;
  end rtl_ref_shared_to_local;



----------------------------------------------------------------------------------------------------
procedure rtl_ref_local_to_local_shared =
----------------------------------------------------------------------------------------------------
var
    count          : t_rtl_ref_counter;

begin
  rtl_ref_incref(source.node,_hardcount);
  count:=_hardcount;
  t_rtl_native_signed(count:unchecked) - target.softcount;
  rtl_ref_decref(target.node,count);
  target.node:=source.node;
  target.softcount:=0;
  rtl_ref_inc_aba(target);
  end rtl_ref_local_to_local_shared;


----------------------------------------------------------------------------------------------------
procedure rtl_ref_local_to_shared =
----------------------------------------------------------------------------------------------------
var
    src            : t_rtl_ref_shared;
    old            : t_rtl_ref_shared;
    count          : t_rtl_ref_counter;
    temp           : t_rtl_ref_local;
  

begin
  src.node:=source.node;
  src.abacount:=when_tg_eq.abacount;
  rtl_ref_inc_aba(src);
  rtl_ref_local_to_local(source,temp);

  result:=rtl_ref_replace_shared(target,when_tg_eq,src,old);
  if result then
    count:=_hardcount;
    t_rtl_native_signed(count:unchecked) - old.softcount;
    rtl_ref_decref(old.node,count);
    if tg_when_succ<>nil then
      tg_when_succ^.abacount:=src.abacount;
      tg_when_succ^.node:=src.node;
      end if;
  else
    rtl_ref_discard_local(temp);
    end if;

  end rtl_ref_local_to_shared;



----------------------------------------------------------------------------------------------------
procedure rtl_ref_shared_to_shared =
----------------------------------------------------------------------------------------------------
var
    temp           : t_rtl_ref_local;

begin
  result:=rtl_ref_shared_to_local(source,temp,when_sc_eq);
  if result then
    result:=rtl_ref_local_to_shared(temp,target,when_tg_eq);
    rtl_ref_discard_local(temp);
    end if;
  end rtl_ref_shared_to_shared;



----------------------------------------------------------------------------------------------------
procedure rtl_ref_local_shared_to_shared =
----------------------------------------------------------------------------------------------------
var
    temp           : t_rtl_ref_local;

begin
  --stejne jako rtl_ref_local_to_local(source,temp);
  rtl_ref_incref(source.node,_hardcount);
  temp.node:=source.node;

  result:=rtl_ref_local_to_shared(temp,target,when_tg_eq,tg_when_succ);
  rtl_ref_discard_local(temp);
  end rtl_ref_local_shared_to_shared;



----------------------------------------------------------------------------------------------------
procedure rtl_ref_shared_to_local_shared =
----------------------------------------------------------------------------------------------------
var
    count          : t_rtl_ref_counter;
    temp           : p_rtl_ref_node;

begin
  if not rtl_ref_inc_shared(source,when_sc_eq) then
    return;
    end if;
  
  result:=true;
  
  count:=_hardcount;
  t_rtl_native_signed(count:unchecked) - target.softcount;
  rtl_ref_decref(target.node,count);

  temp:=when_sc_eq.node;
  rtl_ref_decref(temp,_newshareddec);

  target.node:=when_sc_eq.node;
  target.softcount:=0;
  target.abacount:=when_sc_eq.abacount;
  end rtl_ref_shared_to_local_shared;



----------------------------------------------------------------------------------------------------
procedure rtl_ref_discard_shared =
----------------------------------------------------------------------------------------------------
var
    temp           : t_rtl_ref_local;

begin
  result:=rtl_ref_local_to_shared(temp,target,when_tg_eq);
  end rtl_ref_discard_shared;



----------------------------------------------------------------------------------------------------
procedure rtl_ref_local_shared_to_local_shared =
----------------------------------------------------------------------------------------------------
var
    count          : t_rtl_ref_counter;

begin
  rtl_ref_incref(source.node,_hardcount);
  count:=_hardcount;
  t_rtl_native_signed(count:unchecked) - target.softcount;
  rtl_ref_decref(target.node,count);
  target.node:=source.node;
  target.softcount:=0;
  target.abacount:=source.abacount;
  end rtl_ref_local_shared_to_local_shared;


end reference;
