---------------------------------------------------------------------------------------------------
module private memory =
-- Flex Run-time Library
-- Memory Manager
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------
with
  synchronization,
  tasks,
  structures;

#if not #declared rtl_memory_debug; then;
const
  rtl_memory_debug = false;
#else;
var
  msg_dump_leaks   : static const string 22 of t_syschar := 'Dumped memory leaks'\$0d\$0a\$0;
#end if;

var
  systemheap       : system_heap.p_rtl_systemmemheap;

#separate private blocks;
#separate private chains;
#separate private heap;
#separate private system_heap;
#separate private system_pages;

var
  -- %%TODO(TASK) task_var 
  actual_task_heap : p_rtl_memheap := nil;
  actual_task_chain: p_rtl_chain := nil;

var
  systempages      : system_pages.c_rtl_systemmempages;

const
  largeblocksize   : t_rtl_native_unsigned = 64*1024;

  -- frequency of the regular (sparse) heap validation
  rtl_sparse_heap_validation_frequency = 8192;

#if rtl_advanced_segregated_heap then;
var
  segregatedheap   : segregated_heap.p_rtl_segregatedmemheap;

----------------------------------------------------------------------------------------------------
#separate private segregated_heap;
----------------------------------------------------------------------------------------------------
#end if;

----------------------------------------------------------------------------------------------------
procedure rtl_alloc =
-- allocate memory
----------------------------------------------------------------------------------------------------
begin
  if size>=largeblocksize 
    then systempages.memmgr_alloc({num}0,addr,size,actual_task_chain);
    else
      if actual_task_heap=nil
        then systemheap^.memmgr_alloc({num}0,addr,size,actual_task_chain);
        else actual_task_heap^.memmgr_alloc({num}0,addr,size,actual_task_chain);
        end if;
      end if;
  end rtl_alloc;



----------------------------------------------------------------------------------------------------
procedure rtl_adjust =
-- allocate memory
----------------------------------------------------------------------------------------------------
var
  header           : p_rtl_memmgr_header;

begin
  if addr=nil then
    rtl_alloc({num,}addr,size);
  else
    header:=adr2hdr(addr);
    header^.dealocator^.memmgr_adjust({num}0,addr,size);
    end if;
{%%TODO catch
  when others do
    raise memory_corrupt_error;}
  end rtl_adjust;



----------------------------------------------------------------------------------------------------
procedure rtl_free =
-- free memory
----------------------------------------------------------------------------------------------------
var
  header           : p_rtl_memmgr_header;

begin
  if addr=nil then 
    return;
    end if;
  header:=adr2hdr(addr);
  header^.dealocator^.memmgr_free({num}0,addr,actual_task_chain);
  addr:=nil;
{%%TODO catch
  when others do
    raise memory_corrupt_error;}
  end rtl_free;



----------------------------------------------------------------------------------------------------
procedure rtl_size =
-- returns size of block
----------------------------------------------------------------------------------------------------
var
  header          : p_rtl_memmgr_header;

begin
  if addr=nil then 
    return;
    end if;
  header:=adr2hdr(addr);
  result:=header^.size;
  end rtl_size;



----------------------------------------------------------------------------------------------------
procedure rtl_validate_heap =
-- Validates the internal structures of the heap. A [memory_corrupt_error] is raised if the heap
-- is corrupted.
----------------------------------------------------------------------------------------------------
begin
  systemheap^.memmgr_validate;
  end rtl_validate_heap;



----------------------------------------------------------------------------------------------------
procedure rtl_sparse_heap_validate =
-- Validates the internal structures of the heap on a regular basis.
----------------------------------------------------------------------------------------------------
with
  flex.hw_api;

var
  counter          : static aliased t_rtl_native_signed;
  old_counter      : t_rtl_native_signed;

begin
  -- increment the counter
  rtl_interlocked_exchange_add(^counter,1,old_counter);

  -- validate the heap every N times
  if old_counter mod rtl_sparse_heap_validation_frequency=0 then 
    rtl_validate_heap;
    end if;
  end rtl_sparse_heap_validate;



----------------------------------------------------------------------------------------------------
procedure rtl_dump_heap =
----------------------------------------------------------------------------------------------------
var
  count            : t_rtl_native_unsigned;

begin
  systemheap^.memmgr_dump(count);
  end rtl_dump_heap;



----------------------------------------------------------------------------------------------------
procedure rtl_early_heap_initialize =
----------------------------------------------------------------------------------------------------
with 
  supervised system_heap;

begin
  system_heap.rtl_early_sysheap_init(systemheap);
  end rtl_early_heap_initialize;



----------------------------------------------------------------------------------------------------
procedure rtl_late_heap_finalize =
----------------------------------------------------------------------------------------------------
with 
  supervised system_heap;

begin
  system_heap.rtl_late_sysheap_deinit(systemheap);
  end rtl_late_heap_finalize;



#if rtl_advanced_segregated_heap or rtl_memory_debug then;
----------------------------------------------------------------------------------------------------
entry =
----------------------------------------------------------------------------------------------------
begin
  --#if rtl_memory_debug then;
  --new actual_task_chain;
  --#end if;

#if rtl_advanced_segregated_heap then;
  new segregatedheap;
  actual_task_heap:=p_rtl_memheap(segregatedheap:unchecked);
#end if;
  end entry;



----------------------------------------------------------------------------------------------------
exit =
----------------------------------------------------------------------------------------------------
begin
  --#if rtl_memory_debug then;
  --discard actual_task_chain;
  --#end if;

#if rtl_advanced_segregated_heap then;
  discard segregatedheap;
  actual_task_heap:=nil;
#end if;
  end exit;
#end if;



---- Compiler magic --------------------------------------------------------------------------------
#pragma assign(alloc        ,rtl_alloc);
#pragma assign(realloc      ,rtl_adjust);
#pragma assign(free         ,rtl_free);
#pragma assign(validate_heap,rtl_sparse_heap_validate);
----------------------------------------------------------------------------------------------------

end memory;