----------------------------------------------------------------------------------------------------
module public synchronization =
-- Flex Run-time Library
-- Synchronization Manager
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

type
  -- mutex object
  t_rtl_mutex;
  t_rtl_event;
  t_rtl_critical;

const
  t_rtl_wait_infinite  : t_rtl_native_signed   = -1;
  t_rtl_wait_immediate : t_rtl_native_signed   =  0;

----------------------------------------------------------------------------------------------------
procedure rtl_mutex_new (
    mutex_object   : in out t_rtl_mutex);
-- Create and initialize mutex object.
----------------------------------------------------------------------------------------------------
procedure rtl_mutex_discard (
    mutex_object   : in out t_rtl_mutex);
-- Discard mutex object.
----------------------------------------------------------------------------------------------------
procedure rtl_mutex_lock (
    mutex_object   : in out t_rtl_mutex);
-- Lock mutex.
----------------------------------------------------------------------------------------------------
procedure rtl_mutex_try_lock (
    mutex_object   : in out t_rtl_mutex;
    milisec        : in t_rtl_native_signed)
    return         t_rtl_logical8;
-- Try lock mutex.
----------------------------------------------------------------------------------------------------
procedure rtl_mutex_unlock (
    mutex_object   : in out t_rtl_mutex);
-- Unlock mutex.
----------------------------------------------------------------------------------------------------
procedure rtl_event_new (
    event_object   : in out t_rtl_event);
-- Create and initialize event object.
----------------------------------------------------------------------------------------------------
procedure rtl_event_discard (
    event_object   : in out t_rtl_event);
-- Discard event object.
----------------------------------------------------------------------------------------------------
procedure rtl_event_wait (
    event_object   : in out t_rtl_event);
-- Wait for event
----------------------------------------------------------------------------------------------------
procedure rtl_event_try (
    event_object   : in out t_rtl_event;
    milisec        : in t_rtl_native_signed)
    return         t_rtl_logical8;
-- test & lock event
----------------------------------------------------------------------------------------------------
procedure rtl_event_set (
    event_object   : in out t_rtl_event);
-- sets event.
----------------------------------------------------------------------------------------------------
procedure rtl_event_reset (
    event_object   : in out t_rtl_event);
-- resets event.
----------------------------------------------------------------------------------------------------
procedure rtl_critical_new (
    critical_object: in out ref t_rtl_critical);
-- Create and initialize critical section object.
----------------------------------------------------------------------------------------------------
procedure rtl_critical_discard (
    critical_object: in out ref t_rtl_critical);
-- Discard critical section object.
----------------------------------------------------------------------------------------------------
procedure rtl_critical_lock (
    critical_object: in out ref t_rtl_critical);
-- Lock critical section
----------------------------------------------------------------------------------------------------
procedure rtl_critical_try_lock (
    critical_object: in out ref t_rtl_critical;
    milisec        : in t_rtl_native_signed)
    return         t_rtl_logical8;
-- Try Lock critical section
----------------------------------------------------------------------------------------------------
procedure rtl_critical_unlock (
    critical_object: in out ref t_rtl_critical);
-- UnLock critical section
----------------------------------------------------------------------------------------------------
procedure rtl_sleep(
    milisec        : t_rtl_native_signed);
-- pause task
----------------------------------------------------------------------------------------------------

end synchronization;