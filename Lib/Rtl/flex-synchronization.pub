----------------------------------------------------------------------------------------------------
module public synchronization =
-- Flex Run-time Library
-- Synchronization Manager
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------
with 
    os_api,
    hw_api,
    structures
    ;

extend
  references;


message
  synchronization_error    extend tasking_error;  -- error in synchronization objects

type
  -- kernel mutex object
  t_rtl_mutex;
  p_rtl_mutex           = ^t_rtl_mutex           for machine_pointer use true;
  -- kernel semaphore object
  t_rtl_semaphore;
  p_rtl_semaphore       = ^t_rtl_semaphore       for machine_pointer use true;
  -- kernel event object
  t_rtl_event;
  p_rtl_event           = ^t_rtl_event           for machine_pointer use true;
  -- interlocked mutex object
  t_rtl_critical;
  p_rtl_critical        = ^t_rtl_critical        for machine_pointer use true;
  -- interlocked semaphore object
  t_rtl_critisem;
  p_rtl_critisem        = ^t_rtl_critisem        for machine_pointer use true;
  -- interlocked non-blocking stack (LIFO)
  t_rtl_sstack;
  p_rtl_stack           = ^t_rtl_sstack          for machine_pointer use true;
  -- interlocked non-blocking queue (FIFO)
  t_rtl_squeue;
  p_rtl_queue           = ^t_rtl_squeue          for machine_pointer use true;
  -- interlocked non-blocing singly linked list
  t_rtl_sset;
  t_rtl_sset_iterator;
  p_rtl_sset           = ^t_rtl_sset           for machine_pointer use true;
  p_rtl_sset_iterator = ^t_rtl_sset_iterator for machine_pointer use true;
  -- pointer uzivatelske procedury ktera se ma spustit pri uvolnovani uzivatelskych dat v seznamu
  t_rtl_list_free_data = procedure (
    data           : in out t_rtl_pointer);
  p_rtl_list_free_data = ^t_rtl_list_free_data;
  
  -- mostly interlocked single writer - multiple readers
  t_rtl_readers;

  -- structures concurency style
  t_rtl_concurency_style = enum
    rtl_cst_nonkernel;
    rtl_cst_nonblocking;
    rtl_cst_critical;
    rtl_cst_waitable;
    end enum;
  t_rtl_concurency_style_set = set of t_rtl_concurency_style;
  

----------------------------------------------------------------------------------------------------
#separate public sleep;
#separate public kernel;
#separate public mutex;
#separate public semaphore;
#separate public event;
#separate public critical;
#separate public critisem;
#separate public sstack;
#separate public squeue;
#separate public sset;
#separate public readers;
----------------------------------------------------------------------------------------------------

protected
----------------------------------------------------------------------------------------------------
#separate private structures;
----------------------------------------------------------------------------------------------------

end synchronization;