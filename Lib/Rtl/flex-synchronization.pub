----------------------------------------------------------------------------------------------------
module public synchronization =
-- Flex Run-time Library
-- Synchronization Manager
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------
with 
    os_api;

type
  -- kernel mutex object
  t_rtl_mutex;
  p_rtl_mutex           = ^t_rtl_mutex           for machine_pointer use true;
  -- kernel semaphore object
  t_rtl_semaphore;
  p_rtl_semaphore       = ^t_rtl_semaphore       for machine_pointer use true;
  -- kernel event object
  t_rtl_event;
  p_rtl_event           = ^t_rtl_event           for machine_pointer use true;
  -- interlocked mutex object
  t_rtl_critical;
  p_rtl_critical        = ^t_rtl_critical        for machine_pointer use true;
  -- interlocked semaphore object
  t_rtl_critisem;
  p_rtl_critisem        = ^t_rtl_critisem        for machine_pointer use true;
  -- interlocked non-blocking stack (LIFO)
  t_rtl_sstack;
  p_rtl_stack           = ^t_rtl_sstack          for machine_pointer use true;
  -- interlocked non-blocking queue (FIFO)
  t_rtl_squeue;
  p_rtl_queue           = ^t_rtl_squeue          for machine_pointer use true;
  -- interlocked non-blocing singly linked list
  t_rtl_sset;
  t_rtl_sset_iterrator;
  p_rtl_sset           = ^t_rtl_sset           for machine_pointer use true;
  p_rtl_sset_iterrator = ^t_rtl_sset_iterrator for machine_pointer use true;
  -- mostly interlocked single writer - multiple readers
  t_rtl_readers;

const
  -- waiting time duration contants
  t_rtl_wait_infinite  : t_rtl_native_signed   = -1;
  t_rtl_wait_immediate : t_rtl_native_signed   =  0;

----------------------------------------------------------------------------------------------------
#include 'flex-synchronization-primitives.pub';
#include 'flex-synchronization-sleep.pub';
#include 'flex-synchronization-mutex.pub';
#include 'flex-synchronization-semaphore.pub';
#include 'flex-synchronization-event.pub';
#include 'flex-synchronization-critical.pub';
#include 'flex-synchronization-critisem.pub';
#include 'flex-synchronization-stack.pub';
#include 'flex-synchronization-queue.pub';
#include 'flex-synchronization-set.pub';
#include 'flex-synchronization-readers.pub';
----------------------------------------------------------------------------------------------------

protected
----------------------------------------------------------------------------------------------------
--%%TODO flex !!! #separate protected synchronization;
#if os_win32 then;
  #include 'flex-synchronization-protected.win32.src';
#end if;
----------------------------------------------------------------------------------------------------

end synchronization;


----------------------------------------------------------------------------------------------------
-- pocet procesoru na cilovem stroji
const
    target_machine_processor_count_unknown       = 0;

{
--Navod:
--pokud znate pocet procesoru na cilove mashine definujte neco jako
const
    target_machine_processor_count = 1;
}


#if not #declared target_machine_processor_count; then;
-- default, unknown pri kompilaci 
var
    target_machine_processor_count : t_rtl_unsigned32 := target_machine_processor_count_unknown;
const
    target_machine_can_be_multiprocesor = true;
    target_machine_processor_count_compiled = false;
#else;
  #if (target_machine_processor_count=1) then;
const
    target_machine_can_be_multiprocesor = false;
  #else;
const
    target_machine_can_be_multiprocesor = true;
  #end if;
    target_machine_processor_count_compiled = true;
#end if;
