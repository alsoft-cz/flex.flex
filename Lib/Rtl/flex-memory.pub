----------------------------------------------------------------------------------------------------
module public memory =
-- Flex Run-time Library
-- Memory Manager
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------
with
  structures;

message
  memory_alloc_error      extend memory_error;   -- not enough memory
  memory_corrupt_error    extend memory_error;   -- memory structure corrupted

#separate public  blocks;
#separate public  chains;
#separate public  heap;
#separate public  system_heap;
#separate public  system_pages;
#if rtl_advanced_segregated_heap then;
  #separate public  segregated_heap;
#end if;

----------------------------------------------------------------------------------------------------
procedure rtl_alloc (
--  num            : in t_rtl_unsigned32;        -- allocation ID
    addr           : out t_rtl_pointer;          -- address
    size           : in  t_rtl_native_unsigned); -- requested size
-- allocate memory
----------------------------------------------------------------------------------------------------
procedure rtl_adjust (
--  num            : in t_rtl_unsigned32;        -- allocation ID
    addr           : out t_rtl_pointer;          -- address
    size           : in  t_rtl_native_unsigned); -- requested size
-- reallocate memory
----------------------------------------------------------------------------------------------------
procedure rtl_free (
  --num            : in t_rtl_unsigned32;        -- free ID
    addr           : in out t_rtl_pointer);      -- address
-- free memory
----------------------------------------------------------------------------------------------------
procedure rtl_size (
    addr           : in out t_rtl_pointer)       -- address
    return t_rtl_native_unsigned;
-- returns size of block
----------------------------------------------------------------------------------------------------
procedure rtl_validate_heap;
----------------------------------------------------------------------------------------------------
procedure rtl_dump_heap;
----------------------------------------------------------------------------------------------------

supervised

----------------------------------------------------------------------------------------------------
procedure rtl_early_heap_initialize;
----------------------------------------------------------------------------------------------------
procedure rtl_late_heap_finalize;
----------------------------------------------------------------------------------------------------

end memory;