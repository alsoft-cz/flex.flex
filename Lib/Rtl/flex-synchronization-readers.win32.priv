----------------------------------------------------------------------------------------------------
-- %%TODO(COMMENT)
-- Flex Run-time Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
-- The Single Writer/Multiple Reader Guard (SWMRG)
-- from ebook Programming Applications for Microsoft Windows / Jeffrey Richter
----------------------------------------------------------------------------------------------------
type
  t_rtl_readers_internal = record
    record_lock     : t_rtl_critical;            -- Guards all the other members so that manipulating them can be accomplished atomically
    waiting_readers : t_rtl_native_signed;       -- Indicates the number of reader tasks that want to access the resource. 
                                                 -- Initialized to 0 and is incremented every time a task calls WaitToRead while m_nActive is -1.
    waiting_writers : t_rtl_native_signed;       -- Indicates the number of writer tasks that want to access the resource. 
                                                 -- Initialized to 0 and is incremented every time a task calls WaitToWrite while m_nActive is greater than 0.
    active_readers  : t_rtl_native_signed;       -- Reflects the current state of the shared resource. If the value is 0, no task is accessing 
                                                 -- the resource. If the value is greater than 0, the value indicates the number of tasks that are currently 
                                                 -- reading from the resource. If the number is negative, a writer is writing to the resource. The only valid negative number is -1.
    active_writer   : t_rtl_task_id;             -- id of owning writer thread
    writer_recurs   : t_rtl_native_signed;       -- writer recursion count
    sem_writers     : t_rtl_semaphore;           -- When tasks call WaitToWrite but are denied access because m_nActive is greater than 0,
                                                 -- the writer tasks all wait on this semaphore. While a writer task is waiting, 
                                                 -- new reader tasks are denied access to the resource. This prevents reader tasks from monopolizing 
                                                 -- the resource. When the last reader task that currently has access to the resource calls Done, 
                                                 -- this semaphore is released with a count of 1, waking one waiting writer task.
    sem_readers     : t_rtl_semaphore;           -- When tasks call WaitToRead but are denied access because m_nActive is -1, the reader 
                                                 -- tasks all wait on this semaphore. When the last waiting writer task calls Done, 
                                                 -- this semaphore is released with a count of m_nWaitingReaders, waking all waiting reader tasks.
    end record;
  t_rtl_readers      = t_rtl_readers_internal;

----------------------------------------------------------------------------------------------------
procedure rtl_readers_new =
----------------------------------------------------------------------------------------------------
begin
  readers_object.waiting_readers:=0;
  readers_object.waiting_writers:=0;
  readers_object.active_readers:=0;
  readers_object.active_writer:=0;
  readers_object.writer_recurs:=0;
  rtl_critical_new(readers_object.record_lock);
  readers_object.sem_writers:=rtl_nil_semaphore;
  readers_object.sem_readers:=rtl_nil_semaphore;
  end rtl_readers_new;


----------------------------------------------------------------------------------------------------
procedure rtl_readers_discard =
----------------------------------------------------------------------------------------------------
begin
  rtl_critical_discard(readers_object.record_lock);
  if readers_object.sem_writers<>rtl_nil_semaphore then
    rtl_semaphore_discard(readers_object.sem_writers);
    end if;
  if readers_object.sem_readers<>rtl_nil_semaphore then
    rtl_semaphore_discard(readers_object.sem_readers);
    end if;
  end rtl_readers_discard;



----------------------------------------------------------------------------------------------------
procedure rtl_readers_try_read =
----------------------------------------------------------------------------------------------------
var
    need_wait      : t_rtl_logical;
#if rtl_debug_break_try_spin then;
  longloop         : t_rtl_native_signed;
#end if;

begin
  --result:=false;
  --need_wait:=false;

  -- Ensure exclusive access to the member variables
  rtl_critical_lock(readers_object.record_lock);
  
  -- is a writer writing?
  if readers_object.active_readers < 0 then
    -- test for subsequent writer->reader
    if readers_object.active_writer=rtl_get_current_task_id() then
      result:=true;
      succ readers_object.writer_recurs;
    else
      need_wait:=true;
      end if;
  -- Are there writers waiting
  elsif readers_object.waiting_writers<>0 then
    need_wait:=true;
    end if;

  if need_wait then
    -- This reader must wait, increment the count of waiting readers
    readers_object.waiting_readers + 1;
  else
    if not result then
      --This reader can read, increment the count of active readers
      readers_object.active_readers + 1;
      result:=true;
      end if;
    end if;

  -- Allow other tasks to attempt reading/writing
  rtl_critical_unlock(readers_object.record_lock);

  if (need_wait) then
    -- This task must wait
    if not rtl_semaphore_lazy(readers_object.sem_readers,rtl_max_semaphore,rtl_max_semaphore) then
      -- vytvoril nekdo jiny
      end if;
    result:=rtl_semaphore_try_lock(readers_object.sem_readers,milisec);
    -- if timeouted
    #if rtl_debug_break_try_spin then;
      longloop:=0;
    #end if;
    -- tato smycka resi problem vraceni slibeneho zamku, pouze v pripade timeoutu
    -- jde o to vyzrat pripadnou zvednutou vlajku na kernel semaforu 
    -- ktera byla urcena pro tento thread ale uz to nestihnula
    while not result loop
      -- Ensure exclusive access to the member variables
      rtl_critical_lock(readers_object.record_lock);
      if readers_object.waiting_readers>0 then
        readers_object.waiting_readers - 1;
        -- Allow other tasks to attempt reading/writing
        rtl_critical_unlock(readers_object.record_lock);
        return;
      else
        -- Allow other tasks to attempt reading/writing
        rtl_critical_unlock(readers_object.record_lock);
        result:=rtl_semaphore_try_lock(readers_object.sem_readers,milisec);
        #if rtl_debug_break_try_spin then;
          longloop + 1;
          if longloop>100 then
            rtl_debug_debugger_break;
            raise synchronization_error;
            end if;
        #end if;
        pause_nop;
        end if;
      end loop;
    end if;
  end rtl_readers_try_read;



----------------------------------------------------------------------------------------------------
procedure rtl_readers_try_write =
----------------------------------------------------------------------------------------------------
var
    need_wait      : t_rtl_logical;
#if rtl_debug_break_try_spin then;
  longloop         : t_rtl_native_signed;
#end if;

begin
  result:=false;
  -- Ensure exclusive access to the member variables
  rtl_critical_lock(readers_object.record_lock);

  if readers_object.active_readers<0 then
    -- writer is writing
    if readers_object.active_writer=rtl_get_current_task_id() then
      result:=true;
    else
      need_wait:=true;
      end if;
  elsif readers_object.active_readers>0 then
    -- reader are reading
    need_wait:=true;
    end if;
  
  if need_wait then
    -- This writer must wait, increment the count of waiting writers
    readers_object.waiting_writers + 1;
  else
    if not result then
      -- This writer can write, decrement the count of active writers
      readers_object.active_readers:= -1;
      result:=true;
      end if;
    end if;

  -- Allow other tasks to attempt reading/writing
  rtl_critical_unlock(readers_object.record_lock);

  if need_wait then
    -- This task must wait
    if not rtl_semaphore_lazy(readers_object.sem_writers,1,1) then
      -- vytvoril nekdo jiny
      end if;
    result:=rtl_semaphore_try_lock(readers_object.sem_writers,milisec);
    #if rtl_debug_break_try_spin then;
      longloop:=0;
    #end if;
    -- tato smycka resi problem vraceni slibeneho zamku, pouze v pripade timeoutu
    -- jde o to vyzrat pripadnou zvednutou vlajku na kernel semaforu 
    -- ktera byla urcena pro tento thread ale uz to nestihnula
    while not result loop
      -- Ensure exclusive access to the member variables
      rtl_critical_lock(readers_object.record_lock);
      if readers_object.waiting_writers>0 then
        readers_object.waiting_writers - 1;
        -- Allow other tasks to attempt reading/writing
        rtl_critical_unlock(readers_object.record_lock);
        return;
      else
        -- Allow other tasks to attempt reading/writing
        rtl_critical_unlock(readers_object.record_lock);
        result:=rtl_semaphore_try_lock(readers_object.sem_writers,milisec);
        #if rtl_debug_break_try_spin then;
          longloop + 1;
          if longloop>100 then
            rtl_debug_debugger_break;
            raise synchronization_error;
            end if;
        #end if;
        pause_nop;
        end if;
      end loop;
    end if;
  -- set active writer id
  if result and readers_object.writer_recurs=0 then
    rtl_critical_lock(readers_object.record_lock);
    succ readers_object.writer_recurs;
    readers_object.active_writer:=rtl_get_current_task_id();
    rtl_critical_unlock(readers_object.record_lock);
    end if;
  end rtl_readers_try_write;



----------------------------------------------------------------------------------------------------
procedure rtl_readers_read =
----------------------------------------------------------------------------------------------------
begin
  if not rtl_readers_try_read(readers_object,t_rtl_wait_infinite) then
    raise synchronization_error;
    end if;
  end rtl_readers_read;



----------------------------------------------------------------------------------------------------
procedure rtl_readers_write =
----------------------------------------------------------------------------------------------------
begin
  if not rtl_readers_try_write(readers_object,t_rtl_wait_infinite) then
    raise synchronization_error;
    end if;
  end rtl_readers_write;



----------------------------------------------------------------------------------------------------
procedure rtl_readers_done =
-- Unlock readers.
----------------------------------------------------------------------------------------------------
var
    sem            : t_rtl_semaphore;
    count          : t_rtl_native_signed;

begin
  -- Ensure exclusive access to the member variables
  rtl_critical_lock(readers_object.record_lock);

  if (readers_object.active_readers > 0) then
    -- Readers have control so a reader must be done
    readers_object.active_readers - 1;
  else 
    -- Writer have control 
    pred readers_object.writer_recurs;
    if readers_object.writer_recurs=0 then
      --so a writer must be done
      readers_object.active_readers + 1;
      readers_object.active_writer:=nil;
      end if;
    end if;

  -- Assume no tasks are waiting
  sem:=rtl_nil_semaphore;  
  -- Assume only 1 waiter wakes; always true for writers
  count:=1;     

  if readers_object.active_readers = 0 then
    -- No task has access, who should wake up?
    -- NOTE: It is possible that readers could never get access
    --       if there are always writers wanting to write

    if (readers_object.waiting_writers > 0) then
       -- Writers are waiting and they take priority over readers
       -- A writer will get access
       readers_object.active_readers:=-1;          
       -- One less writer will be waiting
       readers_object.waiting_writers - 1;
       -- Writers wait on this semaphore
       if not rtl_semaphore_lazy(readers_object.sem_writers,1,1) then
         -- vytvoril nekdo jiny
         end if;
       sem:=readers_object.sem_writers;    
       -- NOTE: The semaphore will release only 1 writer task

    elsif (readers_object.waiting_readers > 0) then
       -- Readers are waiting and no writers are waiting
       -- All readers will get access
       readers_object.active_readers:=readers_object.waiting_readers;
       -- No readers will be waiting
       readers_object.waiting_readers:=0;
       -- Readers wait on this semaphore
       if not rtl_semaphore_lazy(readers_object.sem_readers,rtl_max_semaphore,rtl_max_semaphore) then
          -- vytvoril nekdo jiny
         end if;
       sem:=readers_object.sem_readers;            
       -- Semaphore releases all readers
       count:=readers_object.active_readers;              
    --else
      -- There are no tasks waiting at all; no semaphore gets released
      end if;
    end if;

  if sem <> rtl_nil_semaphore then
    -- Some tasks are to be released
    rtl_semaphore_unlock_multi(sem,count);
    end if;

  -- Allow other tasks to attempt reading/writing
  rtl_critical_unlock(readers_object.record_lock);

  end rtl_readers_done;
