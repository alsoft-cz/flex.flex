---------------------------------------------------------------------------------------------------
module public thread =
-- Flex Run-time Library
-- Thread variables
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

type
    t_thread_id    = t_rtl_native_unsigned;

type
    t_thread_ref;
    p_thread_ref   = ^t_thread_ref;

type
    t_thread_header;
    p_thread_header = ^t_thread_header;

    -- retez referenci na thread
    t_thread_ref   = record
      threadheader : p_thread_header;
      next_ref     : p_thread_ref;
      prev_ref     : p_thread_ref;
      end record;

    -- priorita threadu
    t_thread_priority = enum
      thread_priority_idle;
      thread_priority_lowest;
      thread_priority_below_normal;
      thread_priority_normal;
      thread_priority_above_normal;
      thread_priority_highest;
      thread_priority_time_critical;
      end enum;

----------------------------------------------------------------------------------------------------
#separate public vars;
#separate public exceptions;
----------------------------------------------------------------------------------------------------

type
    -- pointer uzivatelske procedury ktera se ma spustit pri startu threadu
    t_rtl_thread_entry = procedure (
    userdata       : in t_rtl_pointer);
    p_rtl_thread_entry = ^t_rtl_thread_entry;


----------------------------------------------------------------------------------------------------
procedure rtl_start_thread(
    thread_ref     : in p_thread_ref;
    thread_entry   : in p_rtl_thread_entry;
    suspended      : in t_rtl_logical8:=false;
    priority       : in t_thread_priority:=thread_priority_normal;
    userdata       : in t_rtl_pointer:=nil
    );
-- vytvori novy trhread
----------------------------------------------------------------------------------------------------
procedure rtl_start_pool_task(
    thread_entry   : in p_rtl_thread_entry;
    priority       : in t_thread_priority:=thread_priority_normal;
    userdata       : in t_rtl_pointer:=nil
    );
-- spusti ulohu pomoci threadu z poolu threadu
----------------------------------------------------------------------------------------------------
#if #environment compiler_version;='4.0.3.3' then;
procedure rtl_register_task;
#else;
procedure rtl_register_task(
    topstackspace  : t_rtl_pointer);
#end if;
--#pragma stackframe(rtl_register_task,stack_pointer_relative);
----------------------------------------------------------------------------------------------------
procedure rtl_unregister_task;
--#pragma stackframe(rtl_unregister_task,stack_pointer_relative);
----------------------------------------------------------------------------------------------------
procedure rtl_kill_when_need_and_finish_thread(
    thread_ref     : in out ref t_thread_ref);
-- posle threadu vyjimku a pocka na skonceni a uvolni prostredky
----------------------------------------------------------------------------------------------------
procedure rtl_wait_and_finish_thread(
    thread_ref     : in out ref t_thread_ref);
-- pocka na skonceni provadeni threadu a uvolni prostredky
----------------------------------------------------------------------------------------------------
procedure rtl_wait_for_finish_thread(
    thread_ref     : in ref t_thread_ref);
-- pocka na dokonceni threadu    
----------------------------------------------------------------------------------------------------
procedure rtl_copy_thread_ref(
    inthread_ref   : in ref t_thread_ref;
    outthread_ref  : in out ref t_thread_ref);
-- zkopiruje referenci na thread
----------------------------------------------------------------------------------------------------
procedure rtl_discard_thread_ref(
    thread_ref  : in out ref t_thread_ref);
-- uvolni referenci na thread
----------------------------------------------------------------------------------------------------
procedure rtl_get_current_thread_ref(
    thread_ref  : out ref t_thread_ref);
-- vrati referenci na tento thread
----------------------------------------------------------------------------------------------------
procedure rtl_terminate_thread;
-- zastavi tento thread
----------------------------------------------------------------------------------------------------
procedure rtl_get_current_thread return p_thread_header;
-- vrati interni rtl hlavicku tohoto threadu
----------------------------------------------------------------------------------------------------

end thread;