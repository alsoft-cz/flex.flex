----------------------------------------------------------------------------------------------------
--module private chains =
-- Flex Run-time Library
-- Memory manager definitions
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

class private c_rtl_chain =
  var
    cslock         : t_rtl_critical;             --rychly zamek 

    ------------------------------------------------------------------------------------------------
    virtual freeitem =
    -- vola se pri clear all, tato implementace je prazdna
    ------------------------------------------------------------------------------------------------
    begin
      del_not_locked(hdr);
      end freeitem;
    
    ------------------------------------------------------------------------------------------------
    static create_subchain =
    ------------------------------------------------------------------------------------------------
    begin
      new subchain;
      subchain^.parentchain:=^this;
      rtl_critical_lock(cslock);
      rtl_doubly_list_insert(^subchain^.this_item,subchains);
      rtl_critical_unlock(cslock);
      end create_subchain;

    ------------------------------------------------------------------------------------------------
    static destroy_subchain =
    ------------------------------------------------------------------------------------------------
    begin
      if subchain^.parentchain<>^this then
        raise memory_error;
        end if;

      rtl_critical_lock(cslock);
      rtl_doubly_list_remove(^subchain^.this_item,subchains);
      rtl_critical_unlock(cslock);

      -- uvolnim vse co drzi on
      subchain^.cleanall(num);

      -- odalokuju
      discard subchain;
      end destroy_subchain;

    ------------------------------------------------------------------------------------------------
    static cleanall =
    ------------------------------------------------------------------------------------------------
    var
      subchain     : p_rtl_chain;

    begin
      rtl_critical_lock(cslock);
      -- uvolnim podretazy
      loop
        rtl_doubly_list_first(p_rtl_doubly_item(subchain:unchecked),subchains);
        if subchain<>nil then
          subchain:unchecked:=t_rtl_native_unsigned(subchain:unchecked)+this_item:position;
          destroy_subchain(num,subchain);
        else
          break;
          end if;
        end loop;
      -- uvolnim bloky
       while(blocks.first<>nil) loop
        freeitem(p_rtl_chain_item(blocks.first:unchecked),num);
        end loop;
      rtl_critical_unlock(cslock);
      end cleanall;

    ------------------------------------------------------------------------------------------------
    static del = 
    ------------------------------------------------------------------------------------------------
    begin
      rtl_critical_lock(cslock);
      rtl_doubly_list_remove(p_rtl_doubly_item(hdr:unchecked),blocks);
      rtl_critical_unlock(cslock);
      end del;

    ------------------------------------------------------------------------------------------------
    static add =
    ------------------------------------------------------------------------------------------------
    begin
      rtl_critical_lock(cslock);
      add_not_locked(hdr);
      rtl_critical_unlock(cslock);
      end add;

    ------------------------------------------------------------------------------------------------
    static del_not_locked = 
    ------------------------------------------------------------------------------------------------
    begin
      rtl_doubly_list_remove(p_rtl_doubly_item(hdr:unchecked),blocks);
      end del_not_locked;

    ------------------------------------------------------------------------------------------------
    static add_not_locked =
    ------------------------------------------------------------------------------------------------
    begin
      rtl_doubly_list_insert(p_rtl_doubly_item(hdr:unchecked),blocks);
      end add_not_locked;

    ------------------------------------------------------------------------------------------------
    static get_next_block =
    ------------------------------------------------------------------------------------------------
    begin
      rtl_critical_lock(cslock);
      get_next_block_not_locked(item);
      rtl_critical_unlock(cslock);
      end get_next_block;

    ------------------------------------------------------------------------------------------------
    static get_next_block_not_locked =
    ------------------------------------------------------------------------------------------------
    begin
      if item=nil then
        item:unchecked:=blocks.first;
      else
        item:unchecked:=item^.next;
        end if;
      end get_next_block_not_locked;

    ------------------------------------------------------------------------------------------------
    static lock =
    ------------------------------------------------------------------------------------------------
    begin
      rtl_critical_lock(cslock);
      end lock;

    ------------------------------------------------------------------------------------------------
    static unlock =
    ------------------------------------------------------------------------------------------------
    begin
      rtl_critical_unlock(cslock);
      end unlock;

    ------------------------------------------------------------------------------------------------
    entry =
    ------------------------------------------------------------------------------------------------
    begin
      parentchain:=nil;
      rtl_doubly_list_create(blocks);
      rtl_doubly_list_create(subchains);
      rtl_critical_new(cslock);
      end entry;

    ------------------------------------------------------------------------------------------------
    exit =
    ------------------------------------------------------------------------------------------------
    begin
      cleanall({mun}0);
      rtl_doubly_list_discard(blocks);
      rtl_doubly_list_discard(subchains);
      rtl_critical_discard(cslock);
      end exit;
    end c_rtl_chain;

class private c_rtl_memchain =
    ------------------------------------------------------------------------------------------------
    override freeitem =
    -- vola se pri clear all, tato implementace uvolnuje pamet
    ------------------------------------------------------------------------------------------------
    begin
      del_not_locked(hdr);
      p_rtl_memmgr_header(hdr:unchecked)^.dealocator^.memmgr_free(num,hdr2adr(p_rtl_memmgr_header(hdr:unchecked)),^this);
      end freeitem;
    end c_rtl_memchain;

--end chains;