----------------------------------------------------------------------------------------------------
module public hw_api =
-- Flex Run-time Library
-- WIN32 API
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_compare_exchange(
    locked_value   : in p_rtl_native_signed;
    new_value      : in t_rtl_native_signed;
    when_locked_eq : in t_rtl_native_signed;
    old_value      : out t_rtl_native_signed);
----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_compare_exchange_ptr(
    locked_value   : in p_rtl_pointer;
    new_value      : in t_rtl_pointer;
    when_locked_eq : in t_rtl_pointer;
    old_value      : out t_rtl_pointer);
----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_read_ptr(
    locked_value   : in p_rtl_pointer;
    value          : out t_rtl_pointer);
----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_compare_exchange_double(
    locked_value   : p_rtl_double_native_signed;
    new_value      : in t_rtl_double_native_signed;
    when_locked_eq : in t_rtl_double_native_signed;
    old_value      : out t_rtl_double_native_signed);
----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_exchange_add(
    locked_value   : p_rtl_native_signed;
    add_value      : in t_rtl_native_signed;
    old_value      : out t_rtl_native_signed);
----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_exchange(
    locked_value   : p_rtl_native_signed;
    new_value      : in t_rtl_native_signed;
    old_value      : out t_rtl_native_signed);
----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_exchange_add_new(
    locked_value   : p_rtl_native_signed;
    add_value      : in t_rtl_native_signed;
    new_value      : out t_rtl_native_signed);
----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_inc_out(
    locked_value   : p_rtl_native_signed;
    old_value      : out t_rtl_native_signed);
----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_dec_out(
    locked_value   : p_rtl_native_signed;
    old_value      : out t_rtl_native_signed);
----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_inc(
    locked_value   : p_rtl_native_signed);
----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_dec(
    locked_value   : p_rtl_native_signed);
----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_dec_if_greater_than(
    locked_value   : p_rtl_native_signed;
    sub_value      : in t_rtl_native_signed;
    when_locked_gt : in t_rtl_native_signed;
    old_value      : out t_rtl_native_signed);
----------------------------------------------------------------------------------------------------
procedure rtl_intelocked_increment_if_less_than(
    locked_value   : p_rtl_native_signed;
    add_value      : in t_rtl_native_signed;
    when_locked_lt : in t_rtl_native_signed;
    old_value      : out t_rtl_native_signed);
----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_inc_out_half(
    locked_value   : p_rtl_half_native_signed;
    old_value      : out t_rtl_half_native_signed);
----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_dec_out_half(
    locked_value   : p_rtl_half_native_signed;
    old_value      : out t_rtl_half_native_signed);
----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_exchange_add_half(
    locked_value   : p_rtl_half_native_signed;
    add_value      : in t_rtl_half_native_signed;
    old_value      : out t_rtl_half_native_signed);
----------------------------------------------------------------------------------------------------




----------------------------------------------------------------------------------------------------
-- pocet procesoru na cilovem stroji
const
    target_machine_processor_count_unknown       = 0;

{
--Navod:
--pokud znate pocet procesoru na cilove mashine definujte neco jako
const
    target_machine_processor_count = 1;
}


#if not #declared target_machine_processor_count; then;
-- default, unknown pri kompilaci 
var
    target_machine_processor_count : t_rtl_unsigned32 := target_machine_processor_count_unknown;
const
    target_machine_can_be_multiprocesor = true;
    target_machine_processor_count_compiled = false;
#else;
  #if (target_machine_processor_count=1) then;
const
    target_machine_can_be_multiprocesor = false;
  #else;
const
    target_machine_can_be_multiprocesor = true;
  #end if;
    target_machine_processor_count_compiled = true;
#end if;


#if not #declared rtl_debug_break_try_spin; then;
const
  rtl_debug_break_try_spin = 1=0;
#end if;

----------------------------------------------------------------------------------------------------
-- makra
----------------------------------------------------------------------------------------------------



#if #environment host_machine_architecture;='IA-32' then;

----------------------------------------------------------------------------------------------------
#template lockbus; 
----------------------------------------------------------------------------------------------------
  #if target_machine_can_be_multiprocesor then;
    lock 
  #else;
    -- intentionally left blank
    #end if;
  #end lockbus; 

----------------------------------------------------------------------------------------------------
#template pause_nop;
----------------------------------------------------------------------------------------------------
  #syntax asm;
    rdtsc
    xor  edx,eax;
    shr  eax,<t_rtl_unsigned8>16;
    xor  edx,eax
    mov  eax,7;
    and  eax,edx;
    jz   @0;
    cmp  eax,1;
    jz   @1;
    cmp  eax,2;
    jz   @2;
    cmp  eax,3;
    jz   @3;
    cmp  eax,4;
    jz   @4;
    cmp  eax,5;
    jz   @5;
    cmp  eax,6;
    jz   @6;
    pause;
    pause;
@6:
    pause;
@5:
    pause;
@4:
    pause;
@3:
    pause;
@2:
    pause;
@1:
    pause;
@0:
    pause;
    #end asm;
  #end pause_nop;



----------------------------------------------------------------------------------------------------
#template rtl_debuger_break;
----------------------------------------------------------------------------------------------------
  #syntax asm;
    int      3;
    #end asm;
  #end rtl_debuger_break;

#end if;


----------------------------------------------------------------------------------------------------
#template rtl_debug_debuger_break;
----------------------------------------------------------------------------------------------------
  #if rtl_debug then;
    rtl_debuger_break;
  #else;
    -- intentionally left blank
    #end if;
  #end rtl_debug_debuger_break;
end hw_api;