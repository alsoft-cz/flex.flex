----------------------------------------------------------------------------------------------------
module public exceptions =
-- Exceptions (asynchronous messages).
-- Flex Run-time Library
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------
with
  hw_api,synchronization;

const
  except_stack_size: t_rtl_unsigned32 = 16;

type
  -- Exception stack row = exception
  t_rtl_except_row = record
      etag         : t_rtl_tag;                  -- tag of pending exception
      edata        : t_rtl_unsigned32;           -- parameters of pending exception
      end record;
  p_rtl_except_row = ^t_rtl_except_row;

  t_rtl_except_stack_data = array 0..15 of aliased t_rtl_except_row;

  -- exception stack page
  t_rtl_exceptions_stack;
  p_rtl_exceptions_stack = ^t_rtl_exceptions_stack;
  t_rtl_exceptions_stack = record
      data         : t_rtl_except_stack_data; -- space for exception rows
      prevstack    : p_rtl_exceptions_stack;     -- pointer to prev stack
      rowmaxadr    : t_rtl_pointer;              -- helper, address of last exception in this page
      end record;

  -- Exception frame structure
  t_rtl_except_frame;
  p_rtl_except_frame = ^t_rtl_except_frame;
  t_rtl_except_frame = record
      handler      : t_rtl_unsigned32;           -- actual handler for exception
      uplink       : p_rtl_except_frame;         -- pointer to previous exception frame
      frame_esp    : t_rtl_unsigned32;           -- backup of esp register
      frame_ebp    : t_rtl_unsigned32;           -- backup of ebp register
      except_base  : t_rtl_pointer;              -- base address on exception stack valid in this frame
      end record;

  -- part of task info block located at [fs:[20]]
  t_rtl_exceptions_info = record
      xframe       : p_rtl_except_frame;         -- addr of last xframe
      stacktop     : p_rtl_except_row;           -- addr of exception stack top
      stackhead    : p_rtl_exceptions_stack;     -- addr of top exception stack page
      end record;
  p_rtl_exceptions_info = ^t_rtl_exceptions_info;

  t_rtl_exceptions_tasks = record
      issequential : t_rtl_logical;
      ispending    : t_rtl_logical;
      canwrite     : t_rtl_event;
      pending      : t_rtl_except_row;
      end record;

  t_rtl_exceptions = record
      info         : t_rtl_exceptions_info;
      tasks        : t_rtl_exceptions_tasks;
      firststack   : aliased t_rtl_exceptions_stack;
      end record;
  p_rtl_exceptions = ^t_rtl_exceptions;

  -- Windows SEH Handler registration structure
  t_rtl_exceptions_handler;
  p_rtl_exceptions_handler = ^t_rtl_exceptions_handler;
  t_rtl_exceptions_handler = record
      prev         : p_rtl_exceptions_handler;
      handler      : t_rtl_pointer;
      end record;

  t_unhandled_handler = procedure(
      etag         : in t_rtl_tag;
      edata        : in t_rtl_unsigned32); 
  p_unhandled_handler = ^ t_unhandled_handler for machine_pointer use true;

  t_external_handler = procedure;
  p_external_handler = ^t_external_handler for machine_pointer use true;


const
  exrowsize        : t_rtl_unsigned32 = t_rtl_except_row:size;

----------------------------------------------------------------------------------------------------
procedure rtl_init_task_exceptions(
    exceptions     : in p_rtl_exceptions);
-- Inicializuje privni stranku stacku vyjimek a stavovy record vyjimek pro aktualni task
----------------------------------------------------------------------------------------------------
procedure rtl_deinit_task_exceptions(
    exceptions     : in p_rtl_exceptions);
-- Inicializuje privni stranku stacku vyjimek a stavovy record vyjimek pro aktualni task
----------------------------------------------------------------------------------------------------
procedure rtl_raise_unhandled_exception : t_unhandled_handler;
#pragma no_return(rtl_raise_unhandled_exception);
----------------------------------------------------------------------------------------------------
procedure rtl_raise_exception(
    etag           : in t_rtl_tag;
    edata          : in t_rtl_unsigned32); 
#pragma stackframe(rtl_raise_exception,stack_pointer_relative);
#pragma no_return(rtl_raise_exception);
----------------------------------------------------------------------------------------------------
procedure rtl_set_exception(
    etag           : in t_rtl_tag;
    edata          : in t_rtl_unsigned32); 
#pragma stackframe(rtl_set_exception,stack_pointer_relative);
----------------------------------------------------------------------------------------------------
procedure rtl_external_exception_handler : t_external_handler;
#pragma no_return(rtl_external_exception_handler);
----------------------------------------------------------------------------------------------------
procedure rtl_begin_sequential;
----------------------------------------------------------------------------------------------------
procedure rtl_end_sequential;
----------------------------------------------------------------------------------------------------
procedure rtl_get_exception (
    etag           : out t_rtl_tag;
    edata          : out t_rtl_unsigned32);
----------------------------------------------------------------------------------------------------
procedure rtl_dump_exception(
    msgz           : in t_syscharustr;
    etag           : in t_rtl_tag;
    edata          : in t_rtl_unsigned32);
----------------------------------------------------------------------------------------------------
procedure rtl_init_xframe (
    frameptr       : in t_rtl_pointer);          -- pointer to expcetion frame
----------------------------------------------------------------------------------------------------
procedure rtl_end_topmost_xframe; 
----------------------------------------------------------------------------------------------------


#if rtl_debuger_break_on_exception then;
  ----------------------------------------------------------------------------------------------------
  #template rtl_debuger_break_exception;
  ----------------------------------------------------------------------------------------------------
    hw_api.rtl_debuger_break;
    #end rtl_debuger_break_exception;
#else;
  ----------------------------------------------------------------------------------------------------
  #template rtl_debuger_break_exception;
  ----------------------------------------------------------------------------------------------------
    -- intentionally left blank
    #end rtl_debuger_break_exception;
  #end if;

#if rtl_debug_dump_on_exception then;
  ----------------------------------------------------------------------------------------------------
  procedure rtl_debug_dump_exception(
      msgz           : in t_syscharustr);
  #pragma stackframe(rtl_debug_dump_exception,stack_pointer_relative);
  ----------------------------------------------------------------------------------------------------
#else;
  --------------------------------------------------------------------------------------------------
  #template rtl_debug_dump_exception(msg,etag,edata);
  ----------------------------------------------------------------------------------------------------
    -- intentionally left blank
    #end rtl_debug_dump_exception;
  #end if;


----------------------------------------------------------------------------------------------------
#separate public seh;
----------------------------------------------------------------------------------------------------

end exceptions;
