----------------------------------------------------------------------------------------------------
module public exceptions =
-- Exceptions (asynchronous messages).
-- Flex Run-time Library
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------
with
    synchronization;

const
  except_stack_size : t_rtl_unsigned32 = 16;

type


  -- Exception stack row = exception
  t_rtl_except_row = record
    etag           : t_rtl_unsigned32;           --tag of penging exception
    edata          : t_rtl_unsigned32;           --parameters of penging exception
    ecode          : t_rtl_unsigned32;           --code of penging exception
    end record;
  p_rtl_except_row = ^t_rtl_except_row;

  t_rtl_except_stack_data = array 0..15 of t_rtl_except_row;

  -- exception stack page
  t_rtl_exceptions_stack;
  p_rtl_exceptions_stack = ^t_rtl_exceptions_stack;
  t_rtl_exceptions_stack = record
    data           : t_rtl_except_stack_data;    -- space for exception rows
    prevstack      : p_rtl_exceptions_stack;     -- pointer to prev stack
    rowmaxadr      : t_rtl_pointer;              -- helper, address of last exception in this page
    end record;

  -- Exception frame structure
  t_rtl_except_frame;
  p_rtl_except_frame = ^t_rtl_except_frame;
  t_rtl_except_frame = record
    framesp        : t_rtl_unsigned32;           -- backup of esp register
    framebp        : t_rtl_unsigned32;           -- backup of ebp register
    obsolete1      : t_rtl_unsigned32;
    obsolete2      : t_rtl_unsigned32;
    exceptbase     : t_rtl_pointer;              -- base address on exception stack valid in this frame
    handler        : t_rtl_unsigned32;           -- actual handler for exception
    uplink         : p_rtl_except_frame;         -- pointer to previous exception frame
    end record;

  -- part of Thread info block located at [fs:[20]]
  t_rtl_exceptions_info = record
    xframe         : p_rtl_except_frame;         -- addr of last xframe
    stacktop       : p_rtl_except_row;           -- addr of exception stack top
    stackhead      : p_rtl_exceptions_stack;     -- addr of top exception stack page
    end record;
  p_rtl_exceptions_info = ^t_rtl_exceptions_info;

  t_rtl_exceptions_tasks = record
    issequential   : t_rtl_logical32;
    ispending      : t_rtl_logical32;
    canwrite       : t_rtl_event;
    pending        : t_rtl_except_row;
    end record;

  t_rtl_exceptions = record
    info           : t_rtl_exceptions_info;
    tasks          : t_rtl_exceptions_tasks;
    firststack     : t_rtl_exceptions_stack;
    end record;
  p_rtl_exceptions = ^t_rtl_exceptions;

  -- Windows SEH Handler registration structure
  t_rtl_exceptions_handler;
  p_rtl_exceptions_handler = ^t_rtl_exceptions_handler;
  t_rtl_exceptions_handler = record
    prev           : p_rtl_exceptions_handler;
    handler        : t_rtl_pointer;
    end record;

    t_unhandled_handler = procedure(
    ecode          : in t_rtl_unsigned32;
    etag           : in t_rtl_unsigned32;
    edata          : in t_rtl_unsigned32); 
  p_unhandled_handler = ^ t_unhandled_handler for machine_pointer use true;

  t_external_handler = procedure;
  p_external_handler = ^t_external_handler for machine_pointer use true;


const
  exrowsize        : t_rtl_unsigned32 = t_rtl_except_row:size;

----------------------------------------------------------------------------------------------------
procedure rtl_init_task_exceptions(
    exceptions     : in p_rtl_exceptions);
-- Inicializuje privni stranku stacku vyjimek a stavovy record vyjimek pro aktualni thread
----------------------------------------------------------------------------------------------------
procedure rtl_deinit_task_exceptions(
    exceptions     : in p_rtl_exceptions);
-- Inicializuje privni stranku stacku vyjimek a stavovy record vyjimek pro aktualni thread
----------------------------------------------------------------------------------------------------
procedure rtl_raise_unhandled_exception : t_unhandled_handler;
#pragma no_return(rtl_raise_unhandled_exception);
----------------------------------------------------------------------------------------------------
procedure rtl_raise_exception(
    ecode          : in t_rtl_unsigned32;
    etag           : in t_rtl_unsigned32;
    edata          : in t_rtl_unsigned32); 
#pragma stackframe(rtl_raise_exception,stack_pointer_relative);
#pragma no_return(rtl_raise_exception);
----------------------------------------------------------------------------------------------------
procedure rtl_set_exception(
    ecode          : in t_rtl_unsigned32;
    etag           : in t_rtl_unsigned32;
    edata          : in t_rtl_unsigned32); 
#pragma stackframe(rtl_set_exception,stack_pointer_relative);
----------------------------------------------------------------------------------------------------
procedure rtl_external_exception_handler : t_external_handler;
#pragma no_return(rtl_external_exception_handler);
----------------------------------------------------------------------------------------------------
procedure rtl_begin_sequential;
----------------------------------------------------------------------------------------------------
procedure rtl_end_sequential;
----------------------------------------------------------------------------------------------------
procedure rtl_get_exception(
    ecode          : out t_rtl_unsigned32;
    etag           : out t_rtl_unsigned32;
    edata          : out t_rtl_unsigned32);
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
#separate public seh;
----------------------------------------------------------------------------------------------------


end exceptions;
