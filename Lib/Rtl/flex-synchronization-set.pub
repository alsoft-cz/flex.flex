----------------------------------------------------------------------------------------------------
procedure rtl_sset_new(
    sset           : out ref t_rtl_sset;
    freedata       : in p_rtl_list_free_data:=nil); -- userdata free procedure
-- Create new synchronized dynamic set
----------------------------------------------------------------------------------------------------
procedure rtl_sset_discard(
    sset           : in out ref t_rtl_sset);
-- Discard synchronized dynamic set
----------------------------------------------------------------------------------------------------
procedure rtl_sset_reset(
    sset           : in out ref t_rtl_sset);
-- clean ssset
----------------------------------------------------------------------------------------------------
procedure rtl_sset_move(
    fromset        : in out ref t_rtl_sset;
    toset          : in out ref t_rtl_sset);
-- atomicaly move fromset data, toset must be empty
----------------------------------------------------------------------------------------------------
procedure rtl_sset_append(
    sset           : in out ref t_rtl_sset;
    data           : in t_rtl_pointer;
    iterator       : in p_rtl_sset_iterrator:=nil); --can be nil, thread private
-- insert item into set
----------------------------------------------------------------------------------------------------
procedure rtl_sset_remove(
    sset           : in out ref t_rtl_sset;
    iterator       : in out ref t_rtl_sset_iterrator; --thread private
    winner         : in p_rtl_logical8:=nil)
    return         t_rtl_logical8;
-- remove item, iterator to next item, or return false
----------------------------------------------------------------------------------------------------
procedure rtl_sset_start(
    sset           : in out ref t_rtl_sset;
    iterator       : out ref t_rtl_sset_iterrator); --thread private
-- create iterrator
----------------------------------------------------------------------------------------------------
procedure rtl_sset_next(
    sset           : in out ref t_rtl_sset;
    iterator       : in out ref t_rtl_sset_iterrator; --thread private
    data           : out t_rtl_pointer)
    return         t_rtl_logical8;
-- next item, or return false
----------------------------------------------------------------------------------------------------
procedure rtl_sset_stop(
    sset           : in out ref t_rtl_sset;
    iterator       : in out ref t_rtl_sset_iterrator); --thread private
-- discard iterrator
----------------------------------------------------------------------------------------------------
procedure rtl_sset_free_data_discard : t_rtl_list_free_data;
-- procedure implements freedata parameter, discarding data
----------------------------------------------------------------------------------------------------
