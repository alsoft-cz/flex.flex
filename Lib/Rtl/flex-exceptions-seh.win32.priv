----------------------------------------------------------------------------------------------------
module private seh =
-- exceptions (asynchronous messages).
-- Flex Run-time Library
-- copyright (c) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure winnt_except_handler : t_winnt_except_handler;
----------------------------------------------------------------------------------------------------


#if not #declared rtl_breakpoints_without_debuger; then;
const
  rtl_breakpoints_without_debuger = 1=0;
#end if;

#if not #declared rtl_debug_disable_seh_conversion; then;
const
  rtl_debug_disable_seh_conversion = 1=0;
#end if;



----------------------------------------------------------------------------------------------------
procedure rtl_init_task_exceptions_win32 =
----------------------------------------------------------------------------------------------------
var 
  handler          : p_winnt_except_handler;

begin
  #if not rtl_debug_disable_SEH_conversion then;
  handler:=^winnt_except_handler;
  #syntax asm;
    -- intstall handler
    mov    edx,handler_stack_space               -- get address on stack
    mov    eax,fs:[t_winnt_tib.exceptionlist]    -- get prev handler registration
    mov    [edx+t_winnt_exception_registration.prevreg],eax -- save prev handler registration
    --%%todo change to lea eax,winnt_except_handler
    mov    eax,handler                           -- get address of my handler
    mov    [edx+t_winnt_exception_registration.handler],eax -- save address of my handler
    mov    fs:[t_winnt_tib.exceptionlist],edx    -- save my handler registartion to tib
    #end asm;
  #end if;
  end rtl_init_task_exceptions_win32;



----------------------------------------------------------------------------------------------------
procedure rtl_deinit_task_exceptions_win32 =
----------------------------------------------------------------------------------------------------
begin
  #if not rtl_debug_disable_SEH_conversion then;
  #syntax asm;
    -- unintstall handler
    mov    edx,handler_stack_space               -- get address on stack
    mov    eax,[edx+t_winnt_exception_registration.prevreg]-- get prev handler registration
    mov    fs:[t_winnt_tib.exceptionlist],eax    -- return prev handler registartion to tib
    #end asm;
  #end if;
  end rtl_deinit_task_exceptions_win32;



----------------------------------------------------------------------------------------------------
procedure rtl_pop_task_exceptions_win32 =
----------------------------------------------------------------------------------------------------
begin
  #if not rtl_debug_disable_SEH_conversion then;
  #syntax asm;
    mov    edx,fs:[t_winnt_tib.exceptionlist]               -- get address of registration
    mov    eax,[edx+t_winnt_exception_registration.prevreg] -- get prev handler registration
    mov    fs:[t_winnt_tib.exceptionlist],eax    -- return prev handler registartion to tib
    #end asm;
  #end if;
  end rtl_pop_task_exceptions_win32;



----------------------------------------------------------------------------------------------------
procedure rtl_raise_system_exception =
-- raises an exception using windows SEH
----------------------------------------------------------------------------------------------------
with 
    tags;

var
    sysecode       : t_rtl_unsigned32;
    syseflags      : t_rtl_unsigned32;

begin
#if rtl_debug_dump_on_exception then;
  rtl_dump_exception(msg_raise_system,etag,edata);
  #end if;
  rtl_debuger_break_exception;
  
  --%%TODO doddelat parametry
  if not econtinue then
    syseflags:=FLAG_EXCEPTION_NONCONTINUABLE;
    end if;

    if rtl_tag_is_ancestor_or_equal(memory_error:tag,etag) then
      sysecode:=exception_access_violation;
    elsif rtl_tag_is_ancestor_or_equal(numeric_error:tag,etag) then
      sysecode:=exception_int_divide_by_zero;
    elsif rtl_tag_is_ancestor_or_equal(constraint_error:tag,etag) then
      sysecode:=exception_array_bounds_exceeded;
    elsif rtl_tag_is_ancestor_or_equal(tasking_error:tag,etag) then
      sysecode:=exception_possible_deadlock;
    else
      syseflags:=FLAG_EXCEPTION_NONCONTINUABLE;
      sysecode:=exception_noncontinuable_exception;
      end if;
  
  RaiseException(sysecode,syseflags,0,nil);
  -- never run
  rtl_set_task_exitcode(sysecode);
  rtl_terminate_task;
  end rtl_raise_system_exception;

  
  
----------------------------------------------------------------------------------------------------
procedure winnt_except_handler = 
----------------------------------------------------------------------------------------------------
var
  etag             : t_rtl_tag;
  edata            : t_rtl_pointer;

begin
  result:=1;{exceptioncontinuesearch}
  if exceptionrecord^.exceptionflags=winnt_exception_noncontinuable then
    return
    end if;

  case exceptionrecord^.exceptioncode
    when exception_access_violation do
        edata:=t_rtl_pointer(exceptionrecord^.exceptioninfo[1]:unchecked);
        etag:=memory_error:tag;
        #if rtl_debug_dump_on_exception then;
        rtl_dump_exception(msg_memory,etag,t_rtl_unsigned32(edata:unchecked));
        #end if;

    when exception_noncontinuable_exception do
        etag:=t_rtl_tag(exceptionrecord^.exceptioncode:unchecked);
        edata:=t_rtl_pointer(exceptionrecord^.exceptioninfo[1]:unchecked);
        #if rtl_debug_dump_on_exception then;
        rtl_dump_exception(msg_noncont_system,etag,t_rtl_unsigned32(edata:unchecked));
        #end if;
        result:=1;
        return;

    when exception_breakpoint do
        #if rtl_breakpoints_without_debuger then;
        result:=1;
        return;
        #else;
        contextrecord^.reip + 1;
        result:=0;
        return;
        #end if;

    when exception_array_bounds_exceeded do
        etag:=constraint_error:tag;
        #if rtl_debug_dump_on_exception then;
        rtl_dump_exception(msg_pending_system,etag,t_rtl_unsigned32(edata:unchecked));
        #end if;

    when exception_stack_overflow do
        etag:=memory_error:tag;
        #if rtl_debug_dump_on_exception then;
        rtl_dump_exception(msg_pending_system,etag,t_rtl_unsigned32(edata:unchecked));
        #end if;

    when exception_datatype_misalignment do
        etag:=constraint_error:tag;
        #if rtl_debug_dump_on_exception then;
        rtl_dump_exception(msg_pending_system,etag,t_rtl_unsigned32(edata:unchecked));
        #end if;
{
    when exception_flt_denormal_operand do
      etag:=fp_denormal_operand:tag;
    when exception_flt_divide_by_zero do
      etag:=fp_divide_by_zero:tag;
    when exception_flt_inexact_result do
      etag:=fp_inexact_result:tag;
    when exception_flt_invalid_operation do
      etag:=fp_invalid_operand:tag;
    when exception_flt_overflow do
      etag:=fp_numeric_overflow:tag;
    when exception_flt_stack_check do
      etag:=fp_numeric_error:tag;
    when exception_flt_underflow do
      etag:=fp_numeric_underflow:tag;
}
    when exception_illegal_instruction do
        etag:=implementation_error:tag;
        #if rtl_debug_dump_on_exception then;
        rtl_dump_exception(msg_pending_system,etag,t_rtl_unsigned32(edata:unchecked));
        #end if;

    when exception_in_page_error do
        etag:=memory_error:tag;
        #if rtl_debug_dump_on_exception then;
        rtl_dump_exception(msg_pending_system,etag,t_rtl_unsigned32(edata:unchecked));
        #end if;

    when exception_int_divide_by_zero do
        etag:=numeric_error:tag;
        #if rtl_debug_dump_on_exception then;
        rtl_dump_exception(msg_pending_system,etag,t_rtl_unsigned32(edata:unchecked));
        #end if;

    when exception_int_overflow do
        etag:=numeric_error:tag;
        #if rtl_debug_dump_on_exception then;
        rtl_dump_exception(msg_pending_system,etag,t_rtl_unsigned32(edata:unchecked));
        #end if;

    when exception_invalid_disposition do
        etag:=implementation_error:tag;
        #if rtl_debug_dump_on_exception then;
        rtl_dump_exception(msg_pending_system,etag,t_rtl_unsigned32(edata:unchecked));
        #end if;

    when exception_priv_instruction do
        etag:=implementation_error:tag;
        #if rtl_debug_dump_on_exception then;
        rtl_dump_exception(msg_pending_system,etag,t_rtl_unsigned32(edata:unchecked));
        #end if;

    when exception_single_step do
        etag:=implementation_error:tag;
        #if rtl_debug_dump_on_exception then;
        rtl_dump_exception(msg_pending_system,etag,t_rtl_unsigned32(edata:unchecked));
        #end if;

    when others do
        edata:=t_rtl_pointer(exceptionrecord^.exceptioninfo[1]:unchecked);
        etag:=program_error:tag;
        #if rtl_debug_dump_on_exception then;
        rtl_dump_exception(msg_pending_system,etag,t_rtl_unsigned32(edata:unchecked));
        #end if;
    end case;


  #syntax asm;
    get_stacktop
    alloc_estackrow

    -- get tib & xframe & estack top
    get_xframe_stacktop
    set_erow_data

    test   eax,eax                               -- test na zero
    jz     @6
    mov    ebx,contextrecord
    mov    ecx,[eax+t_rtl_except_frame.handler]
    test   ecx,ecx                               -- test na zero
    jz     @6
    mov    [ebx+t_winnt_context.reip],ecx
    mov    ecx,[eax+t_rtl_except_frame.frame_ebp]
    mov    [ebx+t_winnt_context.rebp],ecx
    mov    ecx,[eax+t_rtl_except_frame.frame_esp]
    mov    [ebx+t_winnt_context.resp],ecx
    mov    result,0;{exceptioncontinueexecution}
@6:
    #end asm;
  end winnt_except_handler;



----------------------------------------------------------------------------------------------------
-- Compiler magic
----------------------------------------------------------------------------------------------------
#option stack_reserve(8);
----------------------------------------------------------------------------------------------------

end seh;