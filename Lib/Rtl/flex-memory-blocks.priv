----------------------------------------------------------------------------------------------------
--module private blocks =
-- Flex Run-time Library
-- Memory manager definitions
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------


var
  memory_blocks_conter : t_rtl_native_unsigned; -- block age helper
  msg_block        : static const string 10 of t_syschar := 'Block at '\0;
  msg_size         : static const string 7 of t_syschar := ' Size '\0;
  msg_type         : static const string 7 of t_syschar := ' Type '\0;

type
  --%%TODO fill of unchecked array 
  -- fuj
  t_rtl_unsigned8array_not_unchecked = array 0..$FFFF_FFFF of t_rtl_unsigned8;
  p_rtl_unsigned8array_not_unchecked = ^t_rtl_unsigned8array_not_unchecked;
  -- /fuj


------------------------------------------------------------------------------------------------
procedure addheader =
------------------------------------------------------------------------------------------------
begin
  result:=size + mem_headersize + mem_footersize;
  end addheader;



------------------------------------------------------------------------------------------------
procedure adr2hdr =
------------------------------------------------------------------------------------------------
begin
  result:unchecked := t_rtl_native_unsigned(addr:unchecked) - (mem_headersize);
  end adr2hdr;



------------------------------------------------------------------------------------------------
procedure hdr2adr =
------------------------------------------------------------------------------------------------
begin
  result:unchecked := t_rtl_native_unsigned(hdr:unchecked) + (mem_headersize);
  end hdr2adr;



------------------------------------------------------------------------------------------------
procedure hdr2ftr =
------------------------------------------------------------------------------------------------
begin
  result:unchecked:=t_rtl_native_unsigned(hdr:unchecked) + (mem_headersize) + size;
  end hdr2ftr;



------------------------------------------------------------------------------------------------
#template hdr_checksum (hdr);
------------------------------------------------------------------------------------------------
  (    t_rtl_native_mod_unsigned((hdr)^.dealocator:unchecked) 
   xor t_rtl_native_mod_unsigned((hdr)^.num)
   xor t_rtl_native_mod_unsigned((hdr)^.size) 
   xor t_rtl_native_mod_unsigned((hdr)^.age))
  #end hdr_checksum;



-----------------------------------------------------------------------------------------------
procedure set_header_alloc =
------------------------------------------------------------------------------------------------
var
  ftr          : p_rtl_memmgr_footer;
begin 
  -- vyradit z retezu
  if delchainroot<>nil then
    delchainroot^.del(p_rtl_chain_item(hdr:unchecked));
    end if;

  hdr^.dealocator:=dealocator;
  hdr^.size:=size;
  hdr^.lenght:=0;
  hdr^.num:=num;

  -- %%TODO zamykat ? zatim asi neni treba, je to spis orientacni hodnota
  -- interlock increment ?
  -- PavelS
  memory_blocks_conter + 1;
  hdr^.age:=memory_blocks_conter;
  hdr^.task_id:=rtl_get_current_task_id;
  -- hdr^.hints:=0; --%%TODO ?

  -- zaradit do retezu
  if addchainroot<>nil then
    addchainroot^.add(p_rtl_chain_item(hdr:unchecked));
  else
    hdr^.next:=nil;
    hdr^.prev:=nil;
    end if;

  if dofillzero and size>0 then
    --%%TODO fillz of unchecked array 
    -- fuj
    for i in mem_headersize..(size-1+mem_headersize) loop
      p_rtl_unsigned8array_not_unchecked(hdr:unchecked)^[i]:=0;
      end loop;
    -- /fuj
    end if;

  ftr:=hdr2ftr(hdr,size);
  ftr^.checksum:=hdr_checksum(hdr);
  end set_header_alloc;



------------------------------------------------------------------------------------------------
procedure set_header_free =
------------------------------------------------------------------------------------------------
var
  ftr          : p_rtl_memmgr_footer;
begin 
  -- vyradit z retezu
  if delchainroot<>nil then
    delchainroot^.del(p_rtl_chain_item(hdr:unchecked));
    end if;

  hdr^.num:=num;

  -- zaradit do retezu
  if addchainroot<>nil then
    addchainroot^.add(p_rtl_chain_item(hdr:unchecked));
    end if;
  
  if dofillzero then
    --%%TODO fill $fd of unchecked array 
    -- fuj
    for i in mem_headersize..(hdr^.size-1+mem_headersize) loop
      p_rtl_unsigned8array_not_unchecked(hdr:unchecked)^[i]:=$FD;
      end loop;
    -- /fuj
    end if;
  
  ftr:=hdr2ftr(hdr,hdr^.size);
  ftr^.checksum:=hdr_checksum(hdr);
  end set_header_free;



------------------------------------------------------------------------------------------------
procedure check_free_header =
------------------------------------------------------------------------------------------------
var
  ftr              : p_rtl_memmgr_footer;

begin
  ftr:=hdr2ftr(hdr,hdr^.size);
  if ftr^.checksum <> hdr_checksum(hdr) then
    raise memory_corrupt_error;
    end if;
{%%TODO catch
  when others do
    raise memory_corrupt_error;}
  end check_free_header;



------------------------------------------------------------------------------------------------
procedure check_allocated_header =
------------------------------------------------------------------------------------------------
var
  ftr              : p_rtl_memmgr_footer;

begin
  ftr:=hdr2ftr(hdr,hdr^.size);
  if ftr^.checksum <> hdr_checksum(hdr) then
    raise memory_corrupt_error;
    end if;
{%%TODO catch
  when others do
    raise memory_corrupt_error;}
  end check_allocated_header;



#if rtl_memory_debug then;
------------------------------------------------------------------------------------------------
procedure dump_header =
------------------------------------------------------------------------------------------------
with 
    error
    ,tags
    ,tags.types
    ;

type
  t_dump_row    =  array 0..15 of t_rtl_unsigned8;
  t_dump_table  =  array of t_dump_row;
  p_dump_table  =  ^t_dump_table;

var
   data         : p_rtl_unsigned32_array;
   desc         : p_desc_entity;
   table        : p_dump_table;
   rows         : t_rtl_unsigned32; 

begin
  data:=p_rtl_unsigned32_array(hdr2adr(hdr));
  table:=p_dump_table(data:unchecked);
  rtl_error_write(msg_block);
  rtl_error_write_unsigned_hex(t_rtl_native_unsigned(data:unchecked));
  rtl_error_write(msg_size);
  rtl_error_write_unsigned_hex(hdr^.size);
  -- zkusim vypsat typ
  if hdr^.size>=8 then
    rtl_error_write(msg_type);
    -- pokus o cteni t_desc_entity
    begin
      desc:=p_desc_entity(data^[0]:unchecked);
      rtl_error_write_uni(desc^.id)
    catch
      when others do ;
      end;
    end if;
  rtl_error_write(msg_crlf);

  begin
    -- zkusim vypsat nejake data
    rows:=hdr^.size div 16;
    if rows>3 then
      rows:=3;
      end if;

    for row in 0 .. rows loop
      rtl_error_write_unsigned_hex(row*16+t_rtl_native_unsigned(data:unchecked));
      rtl_error_write(msg_pipe);
      for col in 0 .. 15 loop
        if row*16+col>=hdr^.size then
          rtl_error_write(msg_space3);
        else
          rtl_error_write_byte_hex(table^[row][col]);
          end if;
        end loop;
      rtl_error_write(msg_pipe);
      for col2 in 0 .. 15 loop
        if row*16+col2>=hdr^.size then
          rtl_error_write(msg_space);
        else
          rtl_error_write_byte(table^[row][col2]);
          end if;
        end loop;
      --rtl_error_write(msg_crlf);
      end loop;
  catch
    when others do ;
      rtl_error_write(msg_crlf);
    end;


catch
  when others do ;
    -- catch all
leave
  rtl_error_write(msg_crlf);
  end dump_header;
#end if;


--end blocks;