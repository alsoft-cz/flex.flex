----------------------------------------------------------------------------------------------------
--module private blocks =
-- Flex Run-time Library
-- Memory manager definitions
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

var
    memory_blocks_conter  : t_rtl_native_unsigned; -- block age helper

type
  --%%TODO fill of unchecked array 
  -- fuj
  t_rtl_unsigned8array_not_unchecked = array 0..1023 of t_rtl_unsigned8;
  p_rtl_unsigned8array_not_unchecked = ^t_rtl_unsigned8array_not_unchecked;
  -- /fuj


------------------------------------------------------------------------------------------------
procedure addheader =
------------------------------------------------------------------------------------------------
begin
  result:=size + mem_headersize + mem_footersize;
  end addheader;

------------------------------------------------------------------------------------------------
procedure adr2hdr =
------------------------------------------------------------------------------------------------
begin
  result:unchecked := t_rtl_native_unsigned(addr:unchecked) - (mem_headersize);
  end adr2hdr;

------------------------------------------------------------------------------------------------
procedure hdr2adr =
------------------------------------------------------------------------------------------------
begin
  result:unchecked := t_rtl_native_unsigned(hdr:unchecked) + (mem_headersize);
  end hdr2adr;

------------------------------------------------------------------------------------------------
procedure hdr2ftr =
------------------------------------------------------------------------------------------------
begin
  result:unchecked:=t_rtl_native_unsigned(hdr:unchecked) + (mem_headersize) + size;
  end hdr2ftr;

-----------------------------------------------------------------------------------------------
procedure set_header_alloc =
------------------------------------------------------------------------------------------------
var
  ftr          : p_rtl_memmgr_footer;
begin 
  -- vyradit z retezu
  if delchainroot<>nil then
    delchainroot^.del(p_rtl_chain_item(hdr:unchecked));
    end if;

  hdr^.dealocator:=dealocator;
  hdr^.size:=size;
  hdr^.lenght:=0;
  hdr^.num:=num;

  -- %%TODO zamykat ? zatim asi neni treba, je to spis orientacni hodnota
  -- interlock increment ?
  -- PavelS
  memory_blocks_conter + 1;
  hdr^.age:=memory_blocks_conter;
  -- ftr^.thread:=0; -- %%TODO ? dodelat zjisteni threadu
  -- hdr^.hints:=0; --%%TODO ?

  -- zaradit do retezu
  if addchainroot<>nil then
    addchainroot^.add(p_rtl_chain_item(hdr:unchecked));
  else
    hdr^.next:=nil;
    hdr^.prev:=nil;
    end if;

  --%%TODO fillz of unchecked array 
  -- fuj
  for i in mem_headersize..(size-1+mem_headersize) loop
    p_rtl_unsigned8array_not_unchecked(hdr:unchecked)^[i]:=0;
    end loop;
  -- /fuj

  ftr:=hdr2ftr(hdr,size);
  ftr^.checksum:=((t_rtl_native_unsigned(hdr^.dealocator:unchecked) xor hdr^.num) xor (hdr^.size xor hdr^.age));
  end set_header_alloc;

------------------------------------------------------------------------------------------------
procedure set_header_free =
------------------------------------------------------------------------------------------------
var
  ftr          : p_rtl_memmgr_footer;
begin 
  -- vyradit z retezu
  if delchainroot<>nil then
    delchainroot^.del(p_rtl_chain_item(hdr:unchecked));
    end if;

  hdr^.num:=num;

  -- zaradit do retezu
  if addchainroot<>nil then
    addchainroot^.add(p_rtl_chain_item(hdr:unchecked));
    end if;
  
  --%%TODO fill $fd of unchecked array 
  -- fuj
  for i in mem_headersize..(hdr^.size-1+mem_headersize) loop
    p_rtl_unsigned8array_not_unchecked(hdr:unchecked)^[i]:=$FD;
    end loop;
  -- /fuj

  
  ftr:=hdr2ftr(hdr,hdr^.size);
  ftr^.checksum:=((t_rtl_native_unsigned(hdr^.dealocator:unchecked) xor hdr^.num) xor (hdr^.size xor hdr^.age));
  end set_header_free;

------------------------------------------------------------------------------------------------
procedure check_free_header =
------------------------------------------------------------------------------------------------
var
  ftr          : p_rtl_memmgr_footer;
begin
    ftr:=hdr2ftr(hdr,hdr^.size);
    if ftr^.checksum <> ((t_rtl_native_unsigned(hdr^.dealocator:unchecked) xor hdr^.num) xor (hdr^.size xor hdr^.age)) then
      raise memory_corrupt_error;
      end if;
{%%TODO catch
  when others do
    raise memory_corrupt_error;}
  end check_free_header;

------------------------------------------------------------------------------------------------
procedure check_allocated_header =
------------------------------------------------------------------------------------------------
var
  ftr          : p_rtl_memmgr_footer;
begin
    ftr:=hdr2ftr(hdr,hdr^.size);
    if ftr^.checksum <> ((t_rtl_native_unsigned(hdr^.dealocator:unchecked) xor hdr^.num) xor (hdr^.size xor hdr^.age)) then
      raise memory_corrupt_error;
      end if;
{%%TODO catch
  when others do
    raise memory_corrupt_error;}
  end check_allocated_header;

------------------------------------------------------------------------------------------------
procedure dump_header =
------------------------------------------------------------------------------------------------
begin
  end dump_header;


--end blocks;