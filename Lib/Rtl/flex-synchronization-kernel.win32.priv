----------------------------------------------------------------------------------------------------
procedure rtl_kernel_try =
----------------------------------------------------------------------------------------------------
var
    start          : t_system_ticks;
    elapsed        : t_system_ticks;
    timeout        : t_rtl_timeout;

begin
  if milisec>0 then 
    timeout:=milisec;
    start:=GetTickCount();
    loop
      case WaitForSingleObjectEx(kernel_object,timeout,true)
        when WAIT_OBJECT_0 do
          result:=true;
          return;
        when WAIT_TIMEOUT do
          result:=false;
          return;
        when WAIT_IO_COMPLETION do
          elapsed:=GetTickCount()-start;
          timeout - t_rtl_timeout(elapsed);
          if timeout<1 then
            timeout:=0;
            end if;
        when WAIT_FAILED do
          raise synchronization_error;
        when WAIT_ABANDONED do
          raise synchronization_error;
        end case;
      end loop;
  else
    loop
      case WaitForSingleObjectEx(kernel_object,milisec,true)
        when WAIT_OBJECT_0 do
          result:=true;
          return;
        when WAIT_TIMEOUT do
          result:=false;
          return;
        when WAIT_IO_COMPLETION do
          ;
        when WAIT_FAILED do
          raise synchronization_error;
        when WAIT_ABANDONED do
          raise synchronization_error;
        end case;
      end loop;
    end if;
  end rtl_kernel_try;


----------------------------------------------------------------------------------------------------
procedure rtl_kernel_try_one_of =
----------------------------------------------------------------------------------------------------
var
    start          : t_system_ticks;
    elapsed        : t_system_ticks;
    timeout        : t_rtl_timeout;
    length         : t_rtl_native_unsigned;
    res            : t_rtl_native_unsigned;


begin
  length:=kernel_objects:last-kernel_objects:first;
  if length>winnt_maximum_wait_objects then
    raise synchronization_error;
    end if;

  if milisec>0 then 
    timeout:=milisec;
    start:=GetTickCount();
    loop
      res:=WaitForMultipleObjectsEx(length,p_winnt_multiple_objects(^kernel_objects:unchecked),false,timeout,true);
      case res
        when WAIT_OBJECT_0..WAIT_OBJECT_63 do
          result:=t_rtl_native_signed(res-WAIT_OBJECT_0);
          return;
        when WAIT_TIMEOUT do
          result:=-1;
          return;
        when WAIT_IO_COMPLETION do
          elapsed:=GetTickCount()-start;
          timeout - t_rtl_timeout(elapsed);
          if timeout<1 then
            timeout:=0;
            end if;
        when WAIT_FAILED do
          raise synchronization_error;
        when WAIT_ABANDONED do
          raise synchronization_error;
        end case;
      end loop;
  else
    loop
      res:=WaitForMultipleObjectsEx(length,p_winnt_multiple_objects(^kernel_objects:unchecked),false,timeout,true);
      case res
        when WAIT_OBJECT_0..WAIT_OBJECT_63 do
          result:=t_rtl_native_signed(res-WAIT_OBJECT_0);
          return;
        when WAIT_TIMEOUT do
          result:=-1;
          return;
        when WAIT_IO_COMPLETION do
          ;
        when WAIT_FAILED do
          raise synchronization_error;
        when WAIT_ABANDONED do
          raise synchronization_error;
        end case;
      end loop;
    end if;
  end rtl_kernel_try_one_of;



----------------------------------------------------------------------------------------------------
procedure rtl_kernel_try_all_of =
----------------------------------------------------------------------------------------------------
var
    start          : t_system_ticks;
    elapsed        : t_system_ticks;
    timeout        : t_rtl_timeout;
    length         : t_rtl_native_unsigned;
    res            : t_rtl_native_unsigned;


begin
  length:=kernel_objects:last-kernel_objects:first;
  if length>winnt_maximum_wait_objects then
    raise synchronization_error;
    end if;

  if milisec>0 then 
    timeout:=milisec;
    start:=GetTickCount();
    loop
      res:=WaitForMultipleObjectsEx(length,p_winnt_multiple_objects(^kernel_objects:unchecked),true,timeout,true);
      case res
        when WAIT_OBJECT_0..WAIT_OBJECT_63 do
          result:=true;
          return;
        when WAIT_TIMEOUT do
          result:=false;
          return;
        when WAIT_IO_COMPLETION do
          elapsed:=GetTickCount()-start;
          timeout - t_rtl_timeout(elapsed);
          if timeout<1 then
            timeout:=0;
            end if;
        when WAIT_FAILED do
          raise synchronization_error;
        when WAIT_ABANDONED do
          raise synchronization_error;
        end case;
      end loop;
  else
    loop
      res:=WaitForMultipleObjectsEx(length,p_winnt_multiple_objects(^kernel_objects:unchecked),true,timeout,true);
      case res
        when WAIT_OBJECT_0..WAIT_OBJECT_63 do
          result:=true;
          return;
        when WAIT_TIMEOUT do
          result:=false;
          return;
        when WAIT_IO_COMPLETION do
          ;
        when WAIT_FAILED do
          raise synchronization_error;
        when WAIT_ABANDONED do
          raise synchronization_error;
        end case;
      end loop;
    end if;
  end rtl_kernel_try_all_of;



----------------------------------------------------------------------------------------------------
procedure rtl_kernel_try_expression_tree =
----------------------------------------------------------------------------------------------------
begin
  raise implementation_error;
  end rtl_kernel_try_expression_tree;


----------------------------------------------------------------------------------------------------
#template rtl_adjust_timeout;
----------------------------------------------------------------------------------------------------
  if milisec>0 then 
    elapsed:=GetTickCount()-start;
    timeout - t_rtl_timeout(elapsed);
    if timeout<1 then 
      timeout:=0; 
      end if;
    end if;
#end rtl_adjust_timeout;


----------------------------------------------------------------------------------------------------
#template rtl_init_timeout;
----------------------------------------------------------------------------------------------------
  timeout:=milisec;
  if milisec>0 then 
    start:=GetTickCount();
    end if;
#end rtl_init_timeout;
