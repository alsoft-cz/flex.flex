----------------------------------------------------------------------------------------------------
module public tags =
-- Tags of entities and entity tag-specific operations.
-- Flex Standard Library
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

----- Entity descriptor ----------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
--
-- General entity descriptor layout:
--
--     +------------------+
--     | entity type code | +0
--     +------------------+
--     | pointer to ID    | +4
--     +------------------+
--     | ancestor tag     | +8
--     +------------------+
--
----------------------------------------------------------------------------------------------------

type
  -- entity-type code
  t_entity_code    = private unsigned 32;

  -- entity identifier
  t_entity_id      = t_rtl_char32ustr;
  p_entity_id      = p_rtl_char32ustr_const;

  -- entity descriptor
  t_desc_entity    = record
      etype        : t_entity_code;              -- entity code
      id           : p_entity_id;                -- entity identifier
      ancestor_tag : t_rtl_tag_internal;         -- ancestor (the ancestor's :tag attribute)
      end record
          for alignment use 1
          for size      use 12;
  p_desc_entity    = ^t_desc_entity for machine_pointer use true;

  -- descriptor of a typed entity (used only as a parent in the type hierarchy)
  t_desc_typed     = t_desc_entity with record
      type_tag     : t_rtl_tag_internal;
      end record
          for alignment use 1
          for size      use t_desc_entity:size+4;


const
  -- codes of types of entitites
  et_undef         = t_entity_code(0);           -- undefined type of entity
  et_compilation   = t_entity_code(1);           -- compilation unit
  et_program       = t_entity_code(2);           -- program
  et_module        = t_entity_code(3);           -- module
  et_special       = t_entity_code(4);           -- special method (ENTRY, EXIT, ...)
  et_procedure     = t_entity_code(5);           -- procedure
  et_static        = t_entity_code(6);           -- static method
  et_virtual       = t_entity_code(7);           -- virtual method
  et_task          = t_entity_code(8);           -- task
  et_override      = t_entity_code(9);           -- virtual method override
  et_macro         = t_entity_code(10);          -- macro
  et_overload      = t_entity_code(11);          -- subprogram overload -- not in run-time meta data
  et_operator      = t_entity_code(12);          -- operator overload   -- not in run-time meta data
  et_var           = t_entity_code(13);          -- variable
  et_type          = t_entity_code(14);          -- type
  et_class         = t_entity_code(15);          -- class
  et_const         = t_entity_code(16);          -- constant
  et_enum          = t_entity_code(17);          -- enumeration item
  et_parameter     = t_entity_code(18);          -- parameter
  et_message       = t_entity_code(19);          -- message
  et_label         = t_entity_code(20);          -- label               -- not in run-time meta data
  et_template      = t_entity_code(21);          -- #template           -- not in run-time meta data
  et_tparameter    = t_entity_code(22);          -- #template parameter -- not in run-time meta data
  et_attribute     = t_entity_code(23);          -- attribute

----------------------------------------------------------------------------------------------------
procedure rtl_tag_is_equal (
    A              : in t_rtl_tag;
    B              : in t_rtl_tag)
    return t_rtl_logical;
-- Checks whether A is equal to B (A = B).
----------------------------------------------------------------------------------------------------
procedure rtl_tag_is_not_equal (
    A              : in t_rtl_tag;
    B              : in t_rtl_tag)
    return t_rtl_logical;
-- Checks whether A is equal to B (A <> B).
----------------------------------------------------------------------------------------------------
procedure rtl_tag_is_ancestor (
    A              : in t_rtl_tag;
    B              : in t_rtl_tag)
    return t_rtl_logical;
-- Checks whether A is an ancestor of B (A < B).
----------------------------------------------------------------------------------------------------
procedure rtl_tag_is_ancestor_or_equal (
    A              : in t_rtl_tag;
    B              : in t_rtl_tag)
    return t_rtl_logical;
-- Checks whether A is an ancestor of B or they are equal (A <= B).
----------------------------------------------------------------------------------------------------
procedure rtl_tag_is_descendant (
    A              : in t_rtl_tag;
    B              : in t_rtl_tag)
    return t_rtl_logical;
-- Checks whether A is a descendant of B (A > B).
----------------------------------------------------------------------------------------------------
procedure rtl_tag_is_descendant_or_equal (
    A              : in t_rtl_tag;
    B              : in t_rtl_tag)
    return t_rtl_logical;
-- Checks whether A is a descendant of B or they are equal (A >= B).
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
#separate public types;
-- Type tags and type tag-specific operations.
----------------------------------------------------------------------------------------------------
#separate public messages;
-- Message tags and message tag-specific operations.
----------------------------------------------------------------------------------------------------

end tags;