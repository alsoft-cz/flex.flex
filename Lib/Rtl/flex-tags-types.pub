----------------------------------------------------------------------------------------------------
module public types =
-- Type tags and type tag-specific operations.
-- Flex Run-time Library
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

----- Type descriptor ------------------------------------------------------------------------------
type
  -- data-type code     
  t_datatype_code  = private unsigned 32;

  -- size of a data type or its instance respectively
  t_type_size      = protected t_rtl_unsigned32;

  -- type descriptor
  t_desc_type      = t_desc_entity with record
      dtype        : t_datatype_code;            -- data type code
      size         : t_type_size;                -- size of the type (the :size attribute)
      spec_init    : t_rtl_pointer;              -- pointer to the INIT special method
      spec_entry   : t_rtl_pointer;              -- pointer to the ENTRY special method
      spec_exit    : t_rtl_pointer;              -- pointer to the EXIT special method
      spec_adjust  : t_rtl_pointer;              -- pointer to the ADJUST special method
      spec_rollback: t_rtl_pointer;              -- pointer to the ROLLBACK special method
      spec_commit  : t_rtl_pointer;              -- pointer to the COMMIT special method
      end record
          for alignment use 1
          for size      use 44;
  p_desc_type      = ^t_desc_type for machine_pointer use true;

  -- type with a base type (pointer, array, string)
  t_desc_type_based= t_desc_type with record
      base_tag     : t_rtl_tag_internal;         -- tag of the base type
      end record
          for alignment use 1
          for size      use t_desc_type:size+4;
  p_desc_type_based= ^t_desc_type_based for machine_pointer use true;

  -- indexed type (array, string)
  t_desc_type_indexed = t_desc_type_based with record
      range_tag    : t_rtl_tag_internal;         -- tag of the range type
      end record
          for alignment use 1
          for size      use t_desc_type_based:size+4;
  p_desc_type_indexed = ^t_desc_type_indexed for machine_pointer use true;

  -- ordinal type
  t_desc_type_ordinal = t_desc_type with record
      first        : t_rtl_unsigned32;           -- unsigned image of the :first attribute
      last         : t_rtl_unsigned32;           -- unsigned image of the :last attribute
      end record
          for alignment use 1
          for size      use t_desc_type:size+8;
  p_desc_type_ordinal = ^t_desc_type_ordinal for machine_pointer use true;

  t_init_taskvar_value = procedure (
    instance       : t_rtl_pointer);
  p_init_taskvar_value = ^t_init_taskvar_value for machine_pointer use true;

const
  -- codes of data types
  dt_undef         = t_datatype_code(0);
  dt_signed        = t_datatype_code(1);         -- signed integer
  dt_unsigned      = t_datatype_code(2);         -- unsigned integer
  dt_float         = t_datatype_code(3);         -- floating-point number
  dt_char          = t_datatype_code(4);         -- character
  dt_logical       = t_datatype_code(5);         -- logical
  dt_string        = t_datatype_code(7);         -- constrained string
  dt_ustring       = t_datatype_code(8);         -- unconstrained string
  dt_array         = t_datatype_code(9);         -- constrained array
  dt_uarray        = t_datatype_code(10);        -- unconstrained array
  dt_record        = t_datatype_code(11);        -- record
  dt_class         = t_datatype_code(12);        -- class
--dt_interface     = t_datatype_code(13);        -- reserved for future use
  dt_enum          = t_datatype_code(6);         -- enumeration
  dt_set           = t_datatype_code(14);        -- set
  dt_pointer       = t_datatype_code(15);        -- pointer
  dt_tag           = t_datatype_code(16);        -- tag
  dt_message       = t_datatype_code(17);        -- message
  dt_subprogram    = t_datatype_code(18);        -- subprogram
  dt_task          = t_datatype_code(19);        -- task



----- Class descriptor -----------------------------------------------------------------------------
type
  -- class descriptor
  t_desc_class     = t_desc_type with record
      master_offset: t_rtl_unsigned32;           -- negative offset of the enclosing instance (<>0 => this is an interface)
      vtable       : t_rtl_unsigned32;           -- pointer to the virtual table          
      itable       : t_rtl_unsigned32;           -- pointer to the interface table
      end record
          for alignment use 1
          for size      use 56;

  -- interface reference
  t_ref_interface  = record
      class_tag    : t_rtl_tag_internal;         -- tag 
      offset       : t_rtl_unsigned32;           -- interface instance offset in the enclosing instance
      end record
          for alignment use 1
          for size use 8;
          -- ! size of [t_ref_interface] is being used as an immediate value in the assembly code !

  -- interface reference table
  t_interface_table= string of t_ref_interface for alignment use 1;
  p_interface_table= ^t_interface_table;

  -- virtual table
  t_vptr_table     = array of t_rtl_pointer for alignment use 1;
  p_vptr_table     = ^t_vptr_table;



----------------------------------------------------------------------------------------------------
#template generate_rtl_call_special_method_pub (
    rtl_name);                                   -- desired name of the [rtl_call_*] method
-- Generates a [rtl_call_*] method used to call the appropriate special method.
----------------------------------------------------------------------------------------------------

  --------------------------------------------------------------------------------------------------
  procedure rtl_name (
      instance       : in t_rtl_pointer);
  #pragma stackframe(rtl_name,stack_pointer_relative);
  --------------------------------------------------------------------------------------------------

  #end generate_rtl_call_special_method_pub;

----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_special_method_pub;
  #for rtl_name   use; rtl_call_init
  #end generate_rtl_call_special_method_pub;
-- Calls the INIT method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_special_method_pub;
  #for rtl_name   use; rtl_call_entry
  #end generate_rtl_call_special_method_pub;
-- Calls the ENTRY method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_special_method_pub;
  #for rtl_name   use; rtl_call_exit
  #end generate_rtl_call_special_method_pub;
-- Calls the EXIT method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_special_method_pub;
  #for rtl_name   use; rtl_call_adjust
  #end generate_rtl_call_special_method_pub;
-- Calls the ADJUST method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_special_method_pub;
  #for rtl_name   use; rtl_call_commit
  #end generate_rtl_call_special_method_pub;
-- Calls the COMMIT method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_special_method_pub;
  #for rtl_name   use; rtl_call_rollback
  #end generate_rtl_call_special_method_pub;
-- Calls the ROLLBACK method.
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
procedure rtl_setup_instance(
    instance       : in t_rtl_pointer;           -- pointer to the instance of a class
    class_tag      : in t_rtl_tag;               -- class-type tag
    init_value     : in p_init_taskvar_value);   -- pointer to procedure, which sets default value
                                                 -- can be nil
----------------------------------------------------------------------------------------------------
procedure rtl_adjust_instance(
    instance       : in t_rtl_pointer;           -- pointer to the instance of a class
    class_tag      : in t_rtl_tag);              -- class-type tag
----------------------------------------------------------------------------------------------------
procedure rtl_finalize_instance(
    instance       : in t_rtl_pointer;           -- pointer to the instance of a class
    class_tag      : in t_rtl_tag);              -- class-type tag
----------------------------------------------------------------------------------------------------
procedure rtl_setup_class_instance (
    instance       : in t_rtl_pointer;           -- pointer to the instance of a class
    class_tag      : in t_rtl_tag);              -- class-type tag
-- Sets-up an instance of a class. 
-- Assigns the class-type tag to the hidden [@tag] field, calls the [@init] and [@entry] special
-- methods and sets the [@status] hidden field to initialized.
-- Do not use for set-up of exposed-classes' instances.
----------------------------------------------------------------------------------------------------
procedure rtl_finalize_class_instance (
    instance       : in t_rtl_pointer);          -- pointer to the instance of a class
-- Finalizes an instance of a class. 
-- Calls the [@exit] special method and resets the [@status] hidden field.
-- Does nothing for uninitialized instances.
-- Can be used for finalization of exposed-classes' instances.
----------------------------------------------------------------------------------------------------
procedure rtl_setup_interface_instance (
    enclosing_class: in t_rtl_pointer;           -- pointer to the enclosing instance
    interface_index: in t_interface_table:range);-- index of the interface in the interface table
-- Sets-up the [interface_index]th interface (exposed-class instance) of the [enclosing_class].
-- Assigns the class-type tag to the hidden [@tag] field, calls the [@init] and [@entry] special
-- methods and sets the [@status] hidden field to initialized interface.
----------------------------------------------------------------------------------------------------

end types;