----------------------------------------------------------------------------------------------------
module public types =
-- Tagged types.
-- Flex Run-time Library
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------

----- Type descriptor ------------------------------------------------------------------------------
type
  -- data-type code     
  t_datatype_code  = private unsigned 32;

  -- type descriptor
  t_desc_type      = t_desc_entity with record
      dtype        : t_datatype_code;            -- data type code
      size         : t_rtl_unsigned32;           -- size of the type (the :size attribute)
      spec_init    : t_rtl_pointer;              -- pointer to the INIT special method
      spec_entry   : t_rtl_pointer;              -- pointer to the ENTRY special method
      spec_exit    : t_rtl_pointer;              -- pointer to the EXIT special method
      spec_adjust  : t_rtl_pointer;              -- pointer to the ADJUST special method
      spec_rollback: t_rtl_pointer;              -- pointer to the ROLLBACK special method
      spec_commit  : t_rtl_pointer;              -- pointer to the COMMIT special method
      end record
          for alignment use 1
          for size      use 44;

const
  -- codes of data types
  dt_undef         = t_datatype_code(0);
  dt_signed        = t_datatype_code(1);         -- signed integer
  dt_unsigned      = t_datatype_code(2);         -- unsigned integer
  dt_float         = t_datatype_code(3);         -- floating-point number
  dt_char          = t_datatype_code(4);         -- character
  dt_logical       = t_datatype_code(5);         -- logical
  dt_string        = t_datatype_code(7);         -- constrained string
  dt_ustring       = t_datatype_code(8);         -- unconstrained string
  dt_array         = t_datatype_code(9);         -- constrained array
  dt_uarray        = t_datatype_code(10);        -- unconstrained array
  dt_record        = t_datatype_code(11);        -- record
  dt_class         = t_datatype_code(12);        -- class
--dt_interface     = t_datatype_code(13);        -- reserved for future use
  dt_enum          = t_datatype_code(6);         -- enumeration
  dt_set           = t_datatype_code(14);        -- set
  dt_pointer       = t_datatype_code(15);        -- pointer
  dt_tag           = t_datatype_code(16);        -- tag
  dt_message       = t_datatype_code(17);        -- message
  dt_subprogram    = t_datatype_code(18);        -- subprogram
  dt_task          = t_datatype_code(19);        -- task



----- Class descriptor -----------------------------------------------------------------------------
type
  -- class descriptor
  t_desc_class     = t_desc_type with record
      master_offset: t_rtl_unsigned32;           -- negative offset of the enclosing instance (<>0 => this is an interface)
      vtable       : t_rtl_unsigned32;           -- pointer to the virtual table          
      itable       : t_rtl_unsigned32;           -- pointer to the interface table
      end record
          for alignment use 1
          for size      use 56;

  -- interface reference
  t_ref_interface  = record
      class_tag    : t_rtl_tag;                  -- tag 
      offset       : t_rtl_unsigned32;           -- interface instance offset in the enclosing instance
      end record
          for alignment use 1
          for size use 8;

  -- interface reference table
  t_interface_table= string of t_ref_interface for alignment use 1;
  p_interface_table= ^t_interface_table;

  -- virtual table
  t_vptr_table     = array of t_rtl_pointer for alignment use 1;
  p_vptr_table     = ^t_vptr_table;

end types;