----------------------------------------------------------------------------------------------------
-- %%TODO(COMMENT)
-- Flex Run-time Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
-- kernel object
----------------------------------------------------------------------------------------------------
type 
  t_rtl_kernel_object = t_handle;
  t_rtl_kernel_object_array = array of t_rtl_kernel_object;

----------------------------------------------------------------------------------------------------
-- mutex
----------------------------------------------------------------------------------------------------
type
  t_rtl_mutex          = t_rtl_kernel_object;
                
----------------------------------------------------------------------------------------------------
-- semaphore
----------------------------------------------------------------------------------------------------
type
  t_rtl_semaphore      = t_rtl_kernel_object;

----------------------------------------------------------------------------------------------------
-- event
----------------------------------------------------------------------------------------------------
type
  t_rtl_event          = t_rtl_kernel_object;




----------------------------------------------------------------------------------------------------
-- critical section
----------------------------------------------------------------------------------------------------
type
  t_rtl_critical       = record
      lock_count       : aliased t_rtl_native_signed;
      lock_semaphore   : aliased t_rtl_semaphore;
      spin_count       : t_rtl_native_unsigned;
      recursion_count  : t_rtl_native_signed;
      owning_task      : t_rtl_task_id;
      end record;



----------------------------------------------------------------------------------------------------
-- critical semaphore
----------------------------------------------------------------------------------------------------
type
  t_rtl_critisem       = record
      lock_count       : aliased t_rtl_native_signed;
      lock_semaphore   : aliased t_rtl_semaphore;
      spin_count       : t_rtl_native_unsigned;
      max_in           : t_rtl_native_signed;
      end record;



----------------------------------------------------------------------------------------------------
-- critical event
----------------------------------------------------------------------------------------------------
type
  t_rtl_critievt       = record
      lock_count       : aliased t_rtl_native_signed;
      lock_event       : aliased t_rtl_event;
      spin_count       : t_rtl_native_unsigned;
      end record;



----------------------------------------------------------------------------------------------------
-- queue
----------------------------------------------------------------------------------------------------
type
  t_rtl_squeue   = record                        -- struktura blokujici fronty
    list           : t_rtl_doubly_list;          -- seznam prvku ve fronte
    count          : t_rtl_native_unsigned;      -- pocet prvku ve fronte
    freedata       : p_rtl_ref_free_resource;    -- uvolnovaci callback
    lock           : t_rtl_critical;             -- critical pro zamykani fronty
    first          : t_rtl_critisem;             -- semafor na cekani na alespon jeden prvek
    next           : t_rtl_critisem;             -- semafor pro cekani na dalsi prvek na vystupu
    empty          : t_rtl_critievt;             -- event na cekani na prazdnou frontu
    end record;



----------------------------------------------------------------------------------------------------
--  constants
----------------------------------------------------------------------------------------------------
const
  rtl_invalid_kernel_object : t_rtl_kernel_object = $FFFFFFFF;
  rtl_invalid_mutex         : t_rtl_mutex = rtl_invalid_kernel_object;
  rtl_invalid_semaphore     : t_rtl_semaphore = rtl_invalid_kernel_object;
  rtl_invalid_event         : t_rtl_event = rtl_invalid_kernel_object;

  rtl_nil_mutex             : t_rtl_event = 0;
  rtl_nil_semaphore         : t_rtl_semaphore = 0;
  rtl_nil_event             : t_rtl_event = 0;
  rtl_max_semaphore         : t_rtl_native_signed = $7FFFFFF;
