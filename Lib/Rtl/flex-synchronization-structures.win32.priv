----------------------------------------------------------------------------------------------------
-- kernel object
----------------------------------------------------------------------------------------------------
type 
  t_rtl_kernel_object = t_handle;
  t_rtl_kernel_object_array = array of t_rtl_kernel_object;

----------------------------------------------------------------------------------------------------
-- mutex
----------------------------------------------------------------------------------------------------
type
  t_rtl_mutex          = t_rtl_kernel_object;
                
----------------------------------------------------------------------------------------------------
-- semaphore
----------------------------------------------------------------------------------------------------
type
  t_rtl_semaphore      = t_rtl_kernel_object;

----------------------------------------------------------------------------------------------------
-- event
----------------------------------------------------------------------------------------------------
type
  t_rtl_event          = t_rtl_kernel_object;




----------------------------------------------------------------------------------------------------
-- critical section
----------------------------------------------------------------------------------------------------
type
  t_rtl_critical       = record
      lock_count       : aliased t_rtl_native_signed;
      lock_semaphore   : aliased t_handle;
      spin_count       : t_rtl_native_unsigned;
      recursion_count  : t_rtl_native_signed;
      owning_task      : t_rtl_task_id;
      end record;



----------------------------------------------------------------------------------------------------
-- critical semaphore
----------------------------------------------------------------------------------------------------
type
  t_rtl_critisem       = record
      lock_count       : aliased t_rtl_native_signed;
      lock_semaphore   : aliased t_handle;
      spin_count       : t_rtl_native_unsigned;
      max_in           : t_rtl_native_signed;
      end record;

----------------------------------------------------------------------------------------------------
-- stack
----------------------------------------------------------------------------------------------------
type
  
  t_rtl_sstack_nb = t_rtl_ref_lifo with record   -- struktura neblokujiciho stacku
    freedata       : p_rtl_ref_free_resource;    -- uvolnovaci callback
    counter        : aliased t_rtl_critisem;     -- semafor pro cekani na prazdny stack
                                                 -- pro pocet prvku mensi nez pocet ctecich 
                                                 -- tasku blokujici ve smyslu prvku ktere se 
                                                 -- jiz zacali cist
    trynext        : t_rtl_critisem;             -- semafor pro cekani na dalsi prvek na vystupu
    end record;

  t_rtl_sstack_cr = t_rtl_singly_list with record -- struktura blokujiciho stacku
    freedata       : p_rtl_ref_free_resource;    -- uvolnovaci callback
    counter        : t_rtl_critisem;             -- semafor pro cekani na prazdny stack
    lock           : t_rtl_critical;             -- semafor pro zamykani stacku
    lcounter       : t_rtl_native_signed;        -- real locked count
    trynext        : t_rtl_critisem;             -- semafor pro cekani na dalsi prvek na vystupu
    end record;

  t_rtl_sstack = record
    nonblocking    : t_rtl_sstack_nb for position use 0;
    critical       : t_rtl_sstack_cr for position use 0;
    style          : t_rtl_concurency_style;
    end record;


----------------------------------------------------------------------------------------------------
-- queue
----------------------------------------------------------------------------------------------------
type
  t_rtl_squeue_nb = t_rtl_ref_fifo with record   -- struktura neblokujici fronty
    freedata       : p_rtl_ref_free_resource;    -- uvolnovaci callback
    counter        : aliased t_rtl_critisem;     -- semafor pro cekani na prazdnou frontu
                                                 -- pro pocet prvku mensi nez pocet ctecich 
                                                 -- tasku blokujici ve smyslu prvku ktere se 
                                                 -- jiz zacali cist
    trynext        : t_rtl_critisem;             -- semafor pro cekani na dalsi prvek na vystupu
    end record;

  t_rtl_squeue_cr = t_rtl_doubly_list with record -- struktura blokujici fronty
    freedata       : p_rtl_ref_free_resource;    -- uvolnovaci callback
    counter        : t_rtl_critisem;             -- semafor pro cekani na prazdnou frontu
    lock           : t_rtl_critical;             -- semafor pro zamykani fronty
    lcounter       : t_rtl_native_signed;        -- real locked count
    trynext        : t_rtl_critisem;             -- semafor pro cekani na dalsi prvek na vystupu
    waitempty      : t_rtl_critical;             -- critical pro cekani na prazdnou frontu
    end record;

  t_rtl_squeue = record
    nonblocking    : t_rtl_squeue_nb for position use 0;
    critical       : t_rtl_squeue_cr for position use 0;
    style          : t_rtl_concurency_style;
    end record;

----------------------------------------------------------------------------------------------------
-- linked list
----------------------------------------------------------------------------------------------------
type
  t_rtl_sset_nb = t_rtl_ref_fifo with record     -- struktura neblokujiciho seznamu
    freedata       : p_rtl_ref_free_resource;    -- uvolnovaci callback
    counter        : aliased t_rtl_critisem;     -- semafor pro cekani na prazdny list
                                                 -- pro pocet prvku mensi nez pocet ctecich 
                                                 -- tasku blokujici ve smyslu prvku ktere se 
                                                 -- jiz zacali cist
    trynext        : t_rtl_critisem;             -- semafor pro cekani na dalsi prvek na vystupu
    end record;

  t_rtl_sset_cr = t_rtl_doubly_list with record  -- struktura blokujiciho seznamu
    freedata       : p_rtl_ref_free_resource;    -- uvolnovaci callback
    counter        : t_rtl_critisem;             -- semafor pro cekani na prazdny seznam
    lock           : t_rtl_critical;             -- semafor pro zamykani seznamu
    lcounter       : t_rtl_native_signed;        -- real locked count
    trynext        : t_rtl_critisem;             -- semafor pro cekani na dalsi prvek na vystupu
    end record;

  t_rtl_sset       = record
    nonblocking    : t_rtl_sset_nb for position use 0;
    critical       : t_rtl_sset_cr for position use 0;
    style          : t_rtl_concurency_style;
    end record;

  t_rtl_sset_iterator_nb = record               -- neblokujici iterator
    prev           : t_rtl_ref_shared;
    data           : t_rtl_ref_shared;
    end record;
  p_rtl_sset_iterator_nb = ^t_rtl_sset_iterator_nb for machine_pointer use true;

  t_rtl_sset_iterator_cr = record               -- neblokujici iterator
    data           : p_rtl_doubly_pc_item;
    end record;
  p_rtl_sset_iterator_cr = ^t_rtl_sset_iterator_cr for machine_pointer use true;

  t_rtl_sset_iterator = record
    nonblocking    : aliased t_rtl_sset_iterator_nb for position use 0;
    critical       : aliased t_rtl_sset_iterator_cr for position use 0;
    end record;


----------------------------------------------------------------------------------------------------
--  constants
----------------------------------------------------------------------------------------------------
const
  rtl_invalid_kernel_object : t_rtl_kernel_object = $FFFFFFFF;
  rtl_invalid_mutex         : t_rtl_mutex = rtl_invalid_kernel_object;
  rtl_invalid_semaphore     : t_rtl_semaphore = rtl_invalid_kernel_object;
  rtl_invalid_event         : t_rtl_event = rtl_invalid_kernel_object;

  rtl_nil_mutex             : t_rtl_event = 0;
  rtl_nil_semaphore         : t_rtl_semaphore = 0;
  rtl_nil_event             : t_rtl_event = 0;
