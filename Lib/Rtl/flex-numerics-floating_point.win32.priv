----------------------------------------------------------------------------------------------------
module private floating_point =
-- Basic float point arithmetic
-- Flex Run-time Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------
-- Aleš : 10.04.2003 : Vytvořil
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
-- Floating-point constants
----------------------------------------------------------------------------------------------------
const
  -- řídící slovo procesoru
                                                 --   Exception masks                           
  fp_cw_invalid    = 2$0000_0000_0000_0001;      -- Invalid operation                           
  fp_cw_denormal   = 2$0000_0000_0000_0010;      -- Denormalized operand                        
  fp_cw_zerodivide = 2$0000_0000_0000_0100;      -- Zero divide                                 
  fp_cw_overflow   = 2$0000_0000_0000_1000;      -- Overflow                                    
  fp_cw_underflow  = 2$0000_0000_0001_0000;      -- Underflow                                   
  fp_cw_inexact    = 2$0000_0000_0010_0000;      -- Precision (Inexact result)                  

                                                 --   Rounding Control                          
  fp_cw_chop       = 2$0000_1100_0000_0000;      -- chop                                        
  fp_cw_up         = 2$0000_1000_0000_0000;      -- up                                          
  fp_cw_down       = 2$0000_0100_0000_0000;      -- down                                        
  fp_cw_near       = 2$0000_0000_0000_0000;      -- near                                        

                                                 --   Precision Control                         
  fp_cw_24         = 2$0000_0000_0000_0000;      -- 24 bits                                     
  fp_cw_53         = 2$0000_0010_0000_0000;      -- 53 bits                                     
  fp_cw_64         = 2$0000_0011_0000_0000;      -- 64 bits                                     


  -- stavové slovo procesoru
                                                 -- Exception flags
  fp_sw_invalid    = 2$0000_0000_0000_0001;      -- Invalid operation                           
  fp_sw_denormal   = 2$0000_0000_0000_0010;      -- Denormalized operand                        
  fp_sw_zerodivide = 2$0000_0000_0000_0100;      -- Zero divide                                 
  fp_sw_overflow   = 2$0000_0000_0000_1000;      -- Overflow                                    
  fp_sw_underflow  = 2$0000_0000_0001_0000;      -- Underflow                                   
  fp_sw_inexact    = 2$0000_0000_0010_0000;      -- Precision (Inexact result)                  

  fp_sw_ir         = 2$0000_0000_1000_0000;      -- Interrupt Request

                                                 --   Condition Code 
  fp_sw_C0         = 2$0000_0001_0000_0000;      -- C0
  fp_sw_C1         = 2$0000_0010_0000_0000;      -- C1
  fp_sw_C2         = 2$0000_0100_0000_0000;      -- C2
  fp_sw_C3         = 2$0100_0000_0000_0000;      -- C3

  fp_sw_st         = 2$0011_1000_0000_0000;      -- Stack top pointer


----------------------------------------------------------------------------------------------------
procedure fp_evaluate_exception =
----------------------------------------------------------------------------------------------------
var
  fp_sw            : mod unsigned 16;
  
begin
  #syntax asm; 
    wait 
    fstsw   fp_sw
    fnclex       
  #end asm;  

  if (fp_sw and fp_sw_invalid) > 0 then raise fp_invalid_operand; end if;
  if (fp_sw and fp_sw_denormal) > 0 then raise fp_denormal_operand; end if;
  if (fp_sw and fp_sw_zerodivide) > 0 then raise fp_divide_by_zero; end if;
  if (fp_sw and fp_sw_overflow) > 0 then raise fp_numeric_overflow; end if;
  if (fp_sw and fp_sw_underflow) > 0 then raise fp_numeric_underflow; end if;
  -- zatím se nepoužívá, protože může nastat při konverzích čísel
  -- if (fp_sw and fp_sw_inexact) > 0 then raise fp_inexact_result; end if;

  end fp_evaluate_exception;



----------------------------------------------------------------------------------------------------
procedure fp_x2x =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm; 
    mov     eax,a
    fld     <10>[eax]   
    mov     eax,result
    fstp    <10>[eax]   
  #end asm;  

  fp_evaluate_exception;
  end fp_x2x;


----------------------------------------------------------------------------------------------------
procedure fp_x2d =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm; 
    mov     eax,a
    fld     <10>[eax] 
    mov     eax,result
    fstp    <8>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_x2d;


----------------------------------------------------------------------------------------------------
procedure fp_x2s =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm; 
    mov     eax,a
    fld     <10>[eax]
    mov     eax,result
    fstp    <4>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_x2s;


----------------------------------------------------------------------------------------------------
procedure fp_d2x =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm; 
    mov     eax,a
    fld     <8>[eax]
    mov     eax,result
    fstp    <10>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_d2x;


----------------------------------------------------------------------------------------------------
procedure fp_d2d =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm; 
    mov     eax,a
    fld     <8>[eax]
    mov     eax,result
    fstp    <8>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_d2d;


----------------------------------------------------------------------------------------------------
procedure fp_d2s =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm; 
    mov     eax,a
    fld     <8>[eax]
    mov     eax,result
    fstp    <4>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_d2s;


----------------------------------------------------------------------------------------------------
procedure fp_s2x =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm; 
    mov     eax,a
    fld     <4>[eax]
    mov     eax,result
    fstp    <10>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_s2x;


----------------------------------------------------------------------------------------------------
procedure fp_s2d =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm; 
    mov     eax,a
    fld     <4>[eax]
    mov     eax,result
    fstp    <8>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_s2d;


----------------------------------------------------------------------------------------------------
procedure fp_s2s =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm; 
    mov     eax,a
    fld     <4>[eax]
    mov     eax,result
    fstp    <4>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_s2s;



----------------------------------------------------------------------------------------------------
procedure fp_assign_xx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_x2x(a);
  end fp_assign_xx;


----------------------------------------------------------------------------------------------------
procedure fp_assign_xd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_x2d(a);
  end fp_assign_xd;


----------------------------------------------------------------------------------------------------
procedure fp_assign_xs =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_x2s(a);
  end fp_assign_xs;


----------------------------------------------------------------------------------------------------
procedure fp_assign_dx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_d2x(a);
  end fp_assign_dx;


----------------------------------------------------------------------------------------------------
procedure fp_assign_dd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_d2d(a);
  end fp_assign_dd;


----------------------------------------------------------------------------------------------------
procedure fp_assign_ds =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_d2s(a);
  end fp_assign_ds;


----------------------------------------------------------------------------------------------------
procedure fp_assign_sx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_s2x(a);
  end fp_assign_sx;


----------------------------------------------------------------------------------------------------
procedure fp_assign_sd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_s2d(a);
  end fp_assign_sd;


----------------------------------------------------------------------------------------------------
procedure fp_assign_ss =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_s2s(a);
  end fp_assign_ss;


----------------------------------------------------------------------------------------------------
procedure fp_add =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm; 
    mov     eax,a
    fld     <10>[eax]
    mov     eax,b
    fld     <10>[eax]
    faddp   st1,st0
    mov     eax,result     
    fstp    <10>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_add;


----------------------------------------------------------------------------------------------------
procedure fp_add_xx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_add(a,b);
  end fp_add_xx;


----------------------------------------------------------------------------------------------------
procedure fp_add_xd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_add(a,fp_d2x(b));
  end fp_add_xd;


----------------------------------------------------------------------------------------------------
procedure fp_add_xs =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_add(a,fp_s2x(b));
  end fp_add_xs;


----------------------------------------------------------------------------------------------------
procedure fp_add_dx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_add(fp_d2x(a),b);
  end fp_add_dx;


----------------------------------------------------------------------------------------------------
procedure fp_add_dd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_add(fp_d2x(a),fp_d2x(b));
  end fp_add_dd;


----------------------------------------------------------------------------------------------------
procedure fp_add_ds =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_add(fp_d2x(a),fp_s2x(b));
  end fp_add_ds;


----------------------------------------------------------------------------------------------------
procedure fp_add_sx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_add(fp_s2x(a),b);
  end fp_add_sx;


----------------------------------------------------------------------------------------------------
procedure fp_add_sd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_add(fp_s2x(a),fp_d2x(b));
  end fp_add_sd;


----------------------------------------------------------------------------------------------------
procedure fp_add_ss =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_add(fp_s2x(a),fp_s2x(b));
  end fp_add_ss;


----------------------------------------------------------------------------------------------------
procedure fp_add_assign_xx =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2x(fp_add_xx(a,b));
  end fp_add_assign_xx;


----------------------------------------------------------------------------------------------------
procedure fp_add_assign_xd =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2x(fp_add_xd(a,b));
  end fp_add_assign_xd;


----------------------------------------------------------------------------------------------------
procedure fp_add_assign_xs =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2x(fp_add_xs(a,b));
  end fp_add_assign_xs;


----------------------------------------------------------------------------------------------------
procedure fp_add_assign_dx =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2d(fp_add_dx(a,b));
  end fp_add_assign_dx;


----------------------------------------------------------------------------------------------------
procedure fp_add_assign_dd =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2d(fp_add_dd(a,b));
  end fp_add_assign_dd;


----------------------------------------------------------------------------------------------------
procedure fp_add_assign_ds =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2d(fp_add_ds(a,b));
  end fp_add_assign_ds;


----------------------------------------------------------------------------------------------------
procedure fp_add_assign_sx =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2s(fp_add_sx(a,b));
  end fp_add_assign_sx;


----------------------------------------------------------------------------------------------------
procedure fp_add_assign_sd =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2s(fp_add_sd(a,b));
  end fp_add_assign_sd;


----------------------------------------------------------------------------------------------------
procedure fp_add_assign_ss =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2s(fp_add_ss(a,b));
  end fp_add_assign_ss;


----------------------------------------------------------------------------------------------------
procedure fp_sub =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm; 
    mov     eax,a
    fld     <10>[eax]
    mov     eax,b
    fld     <10>[eax]
    fsubp   st1,st0
    mov     eax,result     
    fstp    <10>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_sub;


----------------------------------------------------------------------------------------------------
procedure fp_sub_xx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_sub(a,b);
  end fp_sub_xx;


----------------------------------------------------------------------------------------------------
procedure fp_sub_xd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_sub(a,fp_d2x(b));
  end fp_sub_xd;


----------------------------------------------------------------------------------------------------
procedure fp_sub_xs =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_sub(a,fp_s2x(b));
  end fp_sub_xs;


----------------------------------------------------------------------------------------------------
procedure fp_sub_dx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_sub(fp_d2x(a),b);
  end fp_sub_dx;


----------------------------------------------------------------------------------------------------
procedure fp_sub_dd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_sub(fp_d2x(a),fp_d2x(b));
  end fp_sub_dd;


----------------------------------------------------------------------------------------------------
procedure fp_sub_ds =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_sub(fp_d2x(a),fp_s2x(b));
  end fp_sub_ds;


----------------------------------------------------------------------------------------------------
procedure fp_sub_sx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_sub(fp_s2x(a),b);
  end fp_sub_sx;


----------------------------------------------------------------------------------------------------
procedure fp_sub_sd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_sub(fp_s2x(a),fp_d2x(b));
  end fp_sub_sd;


----------------------------------------------------------------------------------------------------
procedure fp_sub_ss =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_sub(fp_s2x(a),fp_s2x(b));
  end fp_sub_ss;


----------------------------------------------------------------------------------------------------
procedure fp_sub_assign_xx =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2x(fp_sub_xx(a,b));
  end fp_sub_assign_xx;


----------------------------------------------------------------------------------------------------
procedure fp_sub_assign_xd =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2x(fp_sub_xd(a,b));
  end fp_sub_assign_xd;


----------------------------------------------------------------------------------------------------
procedure fp_sub_assign_xs =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2x(fp_sub_xs(a,b));
  end fp_sub_assign_xs;


----------------------------------------------------------------------------------------------------
procedure fp_sub_assign_dx =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2d(fp_sub_dx(a,b));
  end fp_sub_assign_dx;


----------------------------------------------------------------------------------------------------
procedure fp_sub_assign_dd =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2d(fp_sub_dd(a,b));
  end fp_sub_assign_dd;


----------------------------------------------------------------------------------------------------
procedure fp_sub_assign_ds =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2d(fp_sub_ds(a,b));
  end fp_sub_assign_ds;


----------------------------------------------------------------------------------------------------
procedure fp_sub_assign_sx =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2s(fp_sub_sx(a,b));
  end fp_sub_assign_sx;


----------------------------------------------------------------------------------------------------
procedure fp_sub_assign_sd =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2s(fp_sub_sd(a,b));
  end fp_sub_assign_sd;


----------------------------------------------------------------------------------------------------
procedure fp_sub_assign_ss =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2s(fp_sub_ss(a,b));
  end fp_sub_assign_ss;


----------------------------------------------------------------------------------------------------
procedure fp_mul =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm; 
    mov     eax,a
    fld     <10>[eax]
    mov     eax,b
    fld     <10>[eax]
    fmulp   st1,st0
    mov     eax,result     
    fstp    <10>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_mul;


----------------------------------------------------------------------------------------------------
procedure fp_mul_xx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_mul(a,b);
  end fp_mul_xx;


----------------------------------------------------------------------------------------------------
procedure fp_mul_xd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_mul(a,fp_d2x(b));
  end fp_mul_xd;


----------------------------------------------------------------------------------------------------
procedure fp_mul_xs =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_mul(a,fp_s2x(b));
  end fp_mul_xs;


----------------------------------------------------------------------------------------------------
procedure fp_mul_dx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_mul(fp_d2x(a),b);
  end fp_mul_dx;


----------------------------------------------------------------------------------------------------
procedure fp_mul_dd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_mul(fp_d2x(a),fp_d2x(b));
  end fp_mul_dd;


----------------------------------------------------------------------------------------------------
procedure fp_mul_ds =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_mul(fp_d2x(a),fp_s2x(b));
  end fp_mul_ds;


----------------------------------------------------------------------------------------------------
procedure fp_mul_sx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_mul(fp_s2x(a),b);
  end fp_mul_sx;


----------------------------------------------------------------------------------------------------
procedure fp_mul_sd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_mul(fp_s2x(a),fp_d2x(b));
  end fp_mul_sd;


----------------------------------------------------------------------------------------------------
procedure fp_mul_ss =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_mul(fp_s2x(a),fp_s2x(b));
  end fp_mul_ss;


----------------------------------------------------------------------------------------------------
procedure fp_mul_assign_xx =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2x(fp_mul_xx(a,b));
  end fp_mul_assign_xx;


----------------------------------------------------------------------------------------------------
procedure fp_mul_assign_xd =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2x(fp_mul_xd(a,b));
  end fp_mul_assign_xd;

----------------------------------------------------------------------------------------------------
procedure fp_mul_assign_xs =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2x(fp_mul_xs(a,b));
  end fp_mul_assign_xs;


----------------------------------------------------------------------------------------------------
procedure fp_mul_assign_dx =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2d(fp_mul_dx(a,b));
  end fp_mul_assign_dx;


----------------------------------------------------------------------------------------------------
procedure fp_mul_assign_dd =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2d(fp_mul_dd(a,b));
  end fp_mul_assign_dd;


----------------------------------------------------------------------------------------------------
procedure fp_mul_assign_ds =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2d(fp_mul_ds(a,b));
  end fp_mul_assign_ds;


----------------------------------------------------------------------------------------------------
procedure fp_mul_assign_sx =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2s(fp_mul_sx(a,b));
  end fp_mul_assign_sx;


----------------------------------------------------------------------------------------------------
procedure fp_mul_assign_sd =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2s(fp_mul_sd(a,b));
  end fp_mul_assign_sd;


----------------------------------------------------------------------------------------------------
procedure fp_mul_assign_ss =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2s(fp_mul_ss(a,b));
  end fp_mul_assign_ss;


----------------------------------------------------------------------------------------------------
procedure fp_div =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm; 
    mov     eax,a
    fld     <10>[eax]
    mov     eax,b
    fld     <10>[eax]
    fdivp   st1,st0
    mov     eax,result     
    fstp    <10>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_div;


----------------------------------------------------------------------------------------------------
procedure fp_div_xx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_div(a,b);
  end fp_div_xx;


----------------------------------------------------------------------------------------------------
procedure fp_div_xd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_div(a,fp_d2x(b));
  end fp_div_xd;


----------------------------------------------------------------------------------------------------
procedure fp_div_xs =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_div(a,fp_s2x(b));
  end fp_div_xs;


----------------------------------------------------------------------------------------------------
procedure fp_div_dx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_div(fp_d2x(a),b);
  end fp_div_dx;


----------------------------------------------------------------------------------------------------
procedure fp_div_dd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_div(fp_d2x(a),fp_d2x(b));
  end fp_div_dd;


----------------------------------------------------------------------------------------------------
procedure fp_div_ds =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_div(fp_d2x(a),fp_s2x(b));
  end fp_div_ds;


----------------------------------------------------------------------------------------------------
procedure fp_div_sx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_div(fp_s2x(a),b);
  end fp_div_sx;


----------------------------------------------------------------------------------------------------
procedure fp_div_sd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_div(fp_s2x(a),fp_d2x(b));
  end fp_div_sd;


----------------------------------------------------------------------------------------------------
procedure fp_div_ss =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_div(fp_s2x(a),fp_s2x(b));
  end fp_div_ss;


----------------------------------------------------------------------------------------------------
procedure fp_div_assign_xx =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2x(fp_div_xx(a,b));
  end fp_div_assign_xx;


----------------------------------------------------------------------------------------------------
procedure fp_div_assign_xd =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2x(fp_div_xd(a,b));
  end fp_div_assign_xd;


----------------------------------------------------------------------------------------------------
procedure fp_div_assign_xs =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2x(fp_div_xs(a,b));
  end fp_div_assign_xs;

----------------------------------------------------------------------------------------------------
procedure fp_div_assign_dx =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2d(fp_div_dx(a,b));
  end fp_div_assign_dx;

----------------------------------------------------------------------------------------------------
procedure fp_div_assign_dd =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2d(fp_div_dd(a,b));
  end fp_div_assign_dd;

----------------------------------------------------------------------------------------------------
procedure fp_div_assign_ds =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2d(fp_div_ds(a,b));
  end fp_div_assign_ds;

----------------------------------------------------------------------------------------------------
procedure fp_div_assign_sx =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2s(fp_div_sx(a,b));
  end fp_div_assign_sx;

----------------------------------------------------------------------------------------------------
procedure fp_div_assign_sd =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2s(fp_div_sd(a,b));
  end fp_div_assign_sd;

----------------------------------------------------------------------------------------------------
procedure fp_div_assign_ss =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2s(fp_div_ss(a,b));
  end fp_div_assign_ss;


----------------------------------------------------------------------------------------------------
procedure fp_comp =
-- a<b --> -1
-- a=b -->  0
-- a>b --> +1
----------------------------------------------------------------------------------------------------
var
  vysledek          : t_rtl_native_signed;

begin
  #syntax asm; 
    mov     eax,b
    fld     <10>[eax]    
    mov     eax,a
    fld     <10>[eax]
    fcompp  
    fstsw ax
    sahf 
    mov     ebx,0
    jz      @konec 
    mov     ebx,1
    ja      @konec 
    mov     ebx,$FFFF_FFFF{-1}
@konec:
    mov     vysledek,ebx
  #end asm;  

  result:=vysledek;

  fp_evaluate_exception;
  end fp_comp;


----------------------------------------------------------------------------------------------------
procedure fp_comp_eq_xx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(a,b)=0;
  end fp_comp_eq_xx;

----------------------------------------------------------------------------------------------------
procedure fp_comp_eq_xd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(a,fp_d2x(b))=0;
  end fp_comp_eq_xd;

----------------------------------------------------------------------------------------------------
procedure fp_comp_eq_xs =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(a,fp_s2x(b))=0;
  end fp_comp_eq_xs;

----------------------------------------------------------------------------------------------------
procedure fp_comp_eq_dx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_d2x(a),b)=0;
  end fp_comp_eq_dx;

----------------------------------------------------------------------------------------------------
procedure fp_comp_eq_dd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_d2x(a),fp_d2x(b))=0;
  end fp_comp_eq_dd;

----------------------------------------------------------------------------------------------------
procedure fp_comp_eq_ds =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_d2x(a),fp_s2x(b))=0;
  end fp_comp_eq_ds;

----------------------------------------------------------------------------------------------------
procedure fp_comp_eq_sx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_s2x(a),b)=0;
  end fp_comp_eq_sx;

----------------------------------------------------------------------------------------------------
procedure fp_comp_eq_sd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_s2x(a),fp_d2x(b))=0;
  end fp_comp_eq_sd;

----------------------------------------------------------------------------------------------------
procedure fp_comp_eq_ss =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_s2x(a),fp_s2x(b))=0;
  end fp_comp_eq_ss;

 
----------------------------------------------------------------------------------------------------
procedure fp_comp_ne_xx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(a,b)<>0;
  end fp_comp_ne_xx;


----------------------------------------------------------------------------------------------------
procedure fp_comp_ne_xd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(a,fp_d2x(b))<>0;
  end fp_comp_ne_xd;

----------------------------------------------------------------------------------------------------
procedure fp_comp_ne_xs =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(a,fp_s2x(b))<>0;
  end fp_comp_ne_xs;

----------------------------------------------------------------------------------------------------
procedure fp_comp_ne_dx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_d2x(a),b)<>0;
  end fp_comp_ne_dx;

----------------------------------------------------------------------------------------------------
procedure fp_comp_ne_dd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_d2x(a),fp_d2x(b))<>0;
  end fp_comp_ne_dd;

----------------------------------------------------------------------------------------------------
procedure fp_comp_ne_ds =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_d2x(a),fp_s2x(b))<>0;
  end fp_comp_ne_ds;

----------------------------------------------------------------------------------------------------
procedure fp_comp_ne_sx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_s2x(a),b)<>0;
  end fp_comp_ne_sx;

----------------------------------------------------------------------------------------------------
procedure fp_comp_ne_sd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_s2x(a),fp_d2x(b))<>0;
  end fp_comp_ne_sd;

----------------------------------------------------------------------------------------------------
procedure fp_comp_ne_ss =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_s2x(a),fp_s2x(b))<>0;
  end fp_comp_ne_ss;


----------------------------------------------------------------------------------------------------
procedure fp_comp_g_xx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(a,b)=1;
  end fp_comp_g_xx;

----------------------------------------------------------------------------------------------------
procedure fp_comp_g_xd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(a,fp_d2x(b))=1;
  end fp_comp_g_xd;

----------------------------------------------------------------------------------------------------
procedure fp_comp_g_xs =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(a,fp_s2x(b))=1;
  end fp_comp_g_xs;

----------------------------------------------------------------------------------------------------
procedure fp_comp_g_dx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_d2x(a),b)=1;
  end fp_comp_g_dx;

----------------------------------------------------------------------------------------------------
procedure fp_comp_g_dd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_d2x(a),fp_d2x(b))=1;
  end fp_comp_g_dd;

----------------------------------------------------------------------------------------------------
procedure fp_comp_g_ds =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_d2x(a),fp_s2x(b))=1;
  end fp_comp_g_ds;

----------------------------------------------------------------------------------------------------
procedure fp_comp_g_sx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_s2x(a),b)=1;
  end fp_comp_g_sx;

----------------------------------------------------------------------------------------------------
procedure fp_comp_g_sd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_s2x(a),fp_d2x(b))=1;
  end fp_comp_g_sd;

----------------------------------------------------------------------------------------------------
procedure fp_comp_g_ss =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_s2x(a),fp_s2x(b))=1;
  end fp_comp_g_ss;

 
----------------------------------------------------------------------------------------------------
procedure fp_comp_ge_xx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(a,b)>=0;
  end fp_comp_ge_xx;


----------------------------------------------------------------------------------------------------
procedure fp_comp_ge_xd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(a,fp_d2x(b))>=0;
  end fp_comp_ge_xd;


----------------------------------------------------------------------------------------------------
procedure fp_comp_ge_xs =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(a,fp_s2x(b))>=0;
  end fp_comp_ge_xs;


----------------------------------------------------------------------------------------------------
procedure fp_comp_ge_dx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_d2x(a),b)>=0;
  end fp_comp_ge_dx;


----------------------------------------------------------------------------------------------------
procedure fp_comp_ge_dd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_d2x(a),fp_d2x(b))>=0;
  end fp_comp_ge_dd;


----------------------------------------------------------------------------------------------------
procedure fp_comp_ge_ds =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_d2x(a),fp_s2x(b))>=0;
  end fp_comp_ge_ds;

----------------------------------------------------------------------------------------------------
procedure fp_comp_ge_sx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_s2x(a),b)>=0;
  end fp_comp_ge_sx;

----------------------------------------------------------------------------------------------------
procedure fp_comp_ge_sd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_s2x(a),fp_d2x(b))>=0;
  end fp_comp_ge_sd;

----------------------------------------------------------------------------------------------------
procedure fp_comp_ge_ss =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_s2x(a),fp_s2x(b))>=0;
  end fp_comp_ge_ss;




 
----------------------------------------------------------------------------------------------------
procedure fp_comp_l_xx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(a,b)=-1;
  end fp_comp_l_xx;

----------------------------------------------------------------------------------------------------
procedure fp_comp_l_xd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(a,fp_d2x(b))=-1;
  end fp_comp_l_xd;

----------------------------------------------------------------------------------------------------
procedure fp_comp_l_xs =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(a,fp_s2x(b))=-1;
  end fp_comp_l_xs;

----------------------------------------------------------------------------------------------------
procedure fp_comp_l_dx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_d2x(a),b)=-1;
  end fp_comp_l_dx;

----------------------------------------------------------------------------------------------------
procedure fp_comp_l_dd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_d2x(a),fp_d2x(b))=-1;
  end fp_comp_l_dd;

----------------------------------------------------------------------------------------------------
procedure fp_comp_l_ds =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_d2x(a),fp_s2x(b))=-1;
  end fp_comp_l_ds;

----------------------------------------------------------------------------------------------------
procedure fp_comp_l_sx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_s2x(a),b)=-1;
  end fp_comp_l_sx;

----------------------------------------------------------------------------------------------------
procedure fp_comp_l_sd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_s2x(a),fp_d2x(b))=-1;
  end fp_comp_l_sd;

----------------------------------------------------------------------------------------------------
procedure fp_comp_l_ss =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_s2x(a),fp_s2x(b))=-1;
  end fp_comp_l_ss;

 
----------------------------------------------------------------------------------------------------
procedure fp_comp_le_xx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(a,b)<=0;
  end fp_comp_le_xx;

----------------------------------------------------------------------------------------------------
procedure fp_comp_le_xd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(a,fp_d2x(b))<=0;
  end fp_comp_le_xd;

----------------------------------------------------------------------------------------------------
procedure fp_comp_le_xs =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(a,fp_s2x(b))<=0;
  end fp_comp_le_xs;

----------------------------------------------------------------------------------------------------
procedure fp_comp_le_dx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_d2x(a),b)<=0;
  end fp_comp_le_dx;

----------------------------------------------------------------------------------------------------
procedure fp_comp_le_dd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_d2x(a),fp_d2x(b))<=0;
  end fp_comp_le_dd;

----------------------------------------------------------------------------------------------------
procedure fp_comp_le_ds =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_d2x(a),fp_s2x(b))<=0;
  end fp_comp_le_ds;

----------------------------------------------------------------------------------------------------
procedure fp_comp_le_sx =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_s2x(a),b)<=0;
  end fp_comp_le_sx;

----------------------------------------------------------------------------------------------------
procedure fp_comp_le_sd =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_s2x(a),fp_d2x(b))<=0;
  end fp_comp_le_sd;

----------------------------------------------------------------------------------------------------
procedure fp_comp_le_ss =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_comp(fp_s2x(a),fp_s2x(b))<=0;
  end fp_comp_le_ss;


----------------------------------------------------------------------------------------------------
procedure fp_abs =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm; 
    mov     eax,a
    fld     <10>[eax]
    fabs   
    mov     eax,result
    fstp    <10>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_abs;


----------------------------------------------------------------------------------------------------
procedure fp_abs_x =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_abs(a);
  end fp_abs_x;


----------------------------------------------------------------------------------------------------
procedure fp_abs_d =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_abs(fp_d2x(a));
  end fp_abs_d;


----------------------------------------------------------------------------------------------------
procedure fp_abs_s =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_abs(fp_s2x(a));
  end fp_abs_s;


----------------------------------------------------------------------------------------------------
procedure fp_abs_assign_x =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_abs(a);
  end fp_abs_assign_x;


----------------------------------------------------------------------------------------------------
procedure fp_abs_assign_d =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2d(fp_abs(fp_d2x(a)));
  end fp_abs_assign_d;


----------------------------------------------------------------------------------------------------
procedure fp_abs_assign_s =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2s(fp_abs(fp_s2x(a)));
  end fp_abs_assign_s;


----------------------------------------------------------------------------------------------------
procedure fp_minus =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm; 
    mov     eax,a
    fld     <10>[eax]
    fchs 
    mov     eax,result
    fstp    <10>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_minus;


----------------------------------------------------------------------------------------------------
procedure fp_minus_x =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_minus(a);
  end fp_minus_x;


----------------------------------------------------------------------------------------------------
procedure fp_minus_d =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_minus(fp_d2x(a));
  end fp_minus_d;


----------------------------------------------------------------------------------------------------
procedure fp_minus_s =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_minus(fp_s2x(a));
  end fp_minus_s;


----------------------------------------------------------------------------------------------------
procedure fp_minus_assign_x =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_minus(a);
  end fp_minus_assign_x;

----------------------------------------------------------------------------------------------------
procedure fp_minus_assign_d =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2d(fp_minus(fp_d2x(a)));
  end fp_minus_assign_d;


----------------------------------------------------------------------------------------------------
procedure fp_minus_assign_s =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2s(fp_minus(fp_s2x(a)));
  end fp_minus_assign_s;


----------------------------------------------------------------------------------------------------
procedure fp_plus =
----------------------------------------------------------------------------------------------------
begin
  result:=a;
  end fp_plus;


----------------------------------------------------------------------------------------------------
procedure fp_plus_x =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_plus(a);
  end fp_plus_x;


----------------------------------------------------------------------------------------------------
procedure fp_plus_d =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_plus(fp_d2x(a));
  end fp_plus_d;


----------------------------------------------------------------------------------------------------
procedure fp_plus_s =
----------------------------------------------------------------------------------------------------
begin
  result:=fp_plus(fp_s2x(a));
  end fp_plus_s;


----------------------------------------------------------------------------------------------------
procedure fp_plus_assign_x =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_plus(a);
  end fp_plus_assign_x;

----------------------------------------------------------------------------------------------------
procedure fp_plus_assign_d =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2d(fp_plus(fp_d2x(a)));
  end fp_plus_assign_d;


----------------------------------------------------------------------------------------------------
procedure fp_plus_assign_s =
----------------------------------------------------------------------------------------------------
begin
  a:=fp_x2s(fp_plus(fp_s2x(a)));
  end fp_plus_assign_s;


----------------------------------------------------------------------------------------------------
entry =
-- Nastaví potebné chování fp aritmetiky
----------------------------------------------------------------------------------------------------
type
  t_unsigned16     = unsigned 16;

var
  fp_cw            : t_unsigned16;


begin
  -- sestavit řídící slovo     
  fp_cw:= 0
    
    -- Exception Masks   
    or fp_cw_invalid      -- Invalid operation                           
    or fp_cw_denormal     -- Denormalized operand                        
    or fp_cw_zerodivide   -- Zero divide                                 
    or fp_cw_overflow     -- Overflow                                    
    or fp_cw_underflow    -- Underflow                                   
    or fp_cw_inexact      -- Precision (Inexact result)                  

    --   Rounding Control                          
    -- fp_cw_chop         -- chop                                        
    -- fp_cw_up           -- up                                          
    -- fp_cw_down         -- down                                        
    or fp_cw_near         -- near                                        

    --   Precision Control                         
    -- fp_cw_24;          -- 24 bits                                     
    -- fp_cw_53;          -- 53 bits                                     
    or fp_cw_64;          -- 64 bits                                     


  #syntax asm; 
    fninit
    fnclex
    fldcw   fp_cw
    wait  
  #end asm;  

  end entry;



----------------------------------------------------------------------------------------------------
exit =
-- Resetuje příznaky chyb fp aritmetiky
----------------------------------------------------------------------------------------------------

begin
  #syntax asm; 
    fninit     
    fnclex     
    wait       
  #end asm;  
  end exit;


  end floating_point;


{
#template fp_bin_aritm (name);

-- Vygeneruje sadu procedur ve tvaru pro p°et?Řen? binßrn?ho aritmetick?ho
-- operßtoru. Procedury jsou vygenerovßny ve vÜech kombinac?ch obou vstupn?ch
-- parametr• typu single, double a extended v?etn? volßn? p°?sluÜn2ch konverzn?ch
-- funkc?. Nßvratovß hodnota je vŘdy extended.
          
procedure fp_name_xx =
begin
  result:=fp_name(a,b);
  end fp_name_xx;

procedure fp_name_xd =
begin
  result:=fp_name(a,fp_d2x(b));
  end fp_name_xd;

procedure fp_name_xs =
begin
  result:=fp_name(a,fp_s2x(b));
  end fp_name_xs;

procedure fp_name_dx =
begin
  result:=fp_name(fp_d2x(a),b);
  end fp_name_dx;

procedure fp_name_dd =
begin
  result:=fp_name(fp_d2x(a),fp_d2x(b));
  end fp_name_dd;

procedure fp_name_ds =
begin
  result:=fp_name(fp_d2x(a),fp_s2x(b));
  end fp_name_ds;

procedure fp_name_sx =
begin
  result:=fp_name(fp_s2x(a),b);
  end fp_name_sx;

procedure fp_name_sd =
begin
  result:=fp_name(fp_s2x(a),fp_d2x(b));
  end fp_name_sd;

procedure fp_name_ss =
begin
  result:=fp_name(fp_s2x(a),fp_s2x(b));
  end fp_name_ss;


#end fp_bin_aritm;
}
