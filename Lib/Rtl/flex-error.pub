----------------------------------------------------------------------------------------------------
module public error =
-- Error handling and misc
-- Flex Run-time Library
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
procedure rtl_error_write_unsigned (
    num            : t_rtl_unsigned32);
-- Displays a fatal error number.
----------------------------------------------------------------------------------------------------
procedure rtl_error_write (
    msgz           : in t_syscharustr);          -- \0 terminated string
-- Displays a fatal error message.
----------------------------------------------------------------------------------------------------
procedure rtl_terminate (
    code           : in t_rtl_unsigned32);       -- process exit code passed to the OS
-- Terminates the program with exit-code CODE.
----------------------------------------------------------------------------------------------------
procedure rtl_terminate0 ;
-- Terminates the program with exit-code 0.
#pragma assign(terminate,flex.error.rtl_terminate0);
-- Compiler magic
----------------------------------------------------------------------------------------------------



#template rtl_debuger_break;
#syntax asm;
  int      3;
  #end asm;
#end rtl_debuger_break;

#if rtl_debug then;
  #template rtl_debug_debuger_break;
    rtl_debuger_break;
    #end rtl_debug_debuger_break;
#else;
  #template rtl_debug_debuger_break;
    -- intentionally left blank
    #end rtl_debug_debuger_break;
#end if;

#if not #declared rtl_debuger_break_on_exception; then;
const
  rtl_debuger_break_on_exception = 1=0;
#end if;

#if not #declared rtl_debug_dump_on_exception; then;
const
  rtl_debug_dump_on_exception = 1=0;
#end if;


#if rtl_debuger_break_on_exception then;
  #template rtl_debuger_break_exception;
    rtl_debuger_break;
    #end rtl_debuger_break_exception;
#else;
  #template rtl_debuger_break_exception;
    -- intentionally left blank
    #end rtl_debuger_break_exception;
#end if;

#if rtl_debug_dump_on_exception then;
----------------------------------------------------------------------------------------------------
procedure rtl_debug_dump_exception(
    msgz           : in t_syscharustr;
    ecode          : in t_rtl_unsigned32;
    etag           : in t_rtl_unsigned32;
    edata          : in t_rtl_unsigned32);
----------------------------------------------------------------------------------------------------
#else;
  #template rtl_debug_dump_exception(msg,ecode,etag,edata);
    -- intentionally left blank
    #end rtl_debug_dump_exception;
#end if;


end error;