----------------------------------------------------------------------------------------------------
-- %%TODO(COMMENT)
-- Flex Run-time Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure rtl_mutex_new =
-- Create and initialize mutex object.
----------------------------------------------------------------------------------------------------
begin
  mutex_object:unchecked:=CreateMutexW(nil,owned,nil);
  if t_rtl_unsigned32(mutex_object:unchecked)=INVALID_HANDLE then 
    raise synchronization_error;
    end if;
  end rtl_mutex_new;



----------------------------------------------------------------------------------------------------
procedure rtl_mutex_lazy =
-- Create and initialize mutex object on demand.
----------------------------------------------------------------------------------------------------
var
  old_value        : t_rtl_mutex;
  new_value        : t_rtl_mutex;

begin
  result:=true;
  if mutex_object=rtl_nil_mutex then
    rtl_mutex_new(new_value,owned);
    rtl_interlocked_compare_exchange(    ^t_rtl_native_signed(mutex_object),
                                          t_rtl_native_signed(new_value),
                                          t_rtl_native_signed(rtl_nil_semaphore),
                                          t_rtl_native_signed(old_value));
    if old_value<>rtl_nil_mutex then
      --nekdo mne predbehnul
      rtl_mutex_discard(new_value);
      result:=false;
      end if;
    end if;
  end rtl_mutex_lazy;



----------------------------------------------------------------------------------------------------
procedure rtl_mutex_discard =
-- Discard mutex object.
----------------------------------------------------------------------------------------------------
begin
  if CloseHandle(mutex_object)=0 then 
    raise synchronization_error;
    end if;
  t_rtl_unsigned32(mutex_object:unchecked):=INVALID_HANDLE;
  end rtl_mutex_discard;



----------------------------------------------------------------------------------------------------
procedure rtl_mutex_lock =
-- Lock mutex.
----------------------------------------------------------------------------------------------------
begin
  if not rtl_kernel_try(t_rtl_kernel_object(mutex_object),t_rtl_wait_infinite) then
    raise synchronization_error;
    end if;
  end rtl_mutex_lock;



----------------------------------------------------------------------------------------------------
procedure rtl_mutex_try_lock =
----------------------------------------------------------------------------------------------------
begin
  result:=rtl_kernel_try(t_rtl_kernel_object(mutex_object),milisec);
  end rtl_mutex_try_lock;



----------------------------------------------------------------------------------------------------
procedure rtl_mutex_unlock =
-- Unlock mutex.
----------------------------------------------------------------------------------------------------
begin
  if ReleaseMutex(mutex_object)=0 then 
    raise synchronization_error;
    end if;
  end rtl_mutex_unlock;
