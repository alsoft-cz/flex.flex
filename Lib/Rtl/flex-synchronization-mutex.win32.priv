----------------------------------------------------------------------------------------------------
procedure rtl_mutex_new =
-- Create and initialize mutex object.
----------------------------------------------------------------------------------------------------
begin
  mutex_object:unchecked:=CreateMutexA(nil,false,nil);
  if t_rtl_unsigned32(mutex_object:unchecked)=INVALID_HANDLE then 
    raise synchronization_error;
    end if;
  end rtl_mutex_new;


----------------------------------------------------------------------------------------------------
procedure rtl_mutex_discard =
-- Discard mutex object.
----------------------------------------------------------------------------------------------------
begin
  if CloseHandle(mutex_object)=0 then 
    raise synchronization_error;
    end if;
  t_rtl_unsigned32(mutex_object:unchecked):=INVALID_HANDLE;
  end rtl_mutex_discard;


----------------------------------------------------------------------------------------------------
procedure rtl_mutex_lock =
-- Lock mutex.
----------------------------------------------------------------------------------------------------
begin
  if not rtl_kernel_try(t_rtl_kernel_object(mutex_object),t_rtl_wait_infinite) then
    raise synchronization_error;
    end if;
  end rtl_mutex_lock;

----------------------------------------------------------------------------------------------------
procedure rtl_mutex_try_lock =
----------------------------------------------------------------------------------------------------
begin
  result:=rtl_kernel_try(t_rtl_kernel_object(mutex_object),milisec);
  end rtl_mutex_try_lock;


----------------------------------------------------------------------------------------------------
procedure rtl_mutex_unlock =
-- Unlock mutex.
----------------------------------------------------------------------------------------------------
begin
  if ReleaseMutex(mutex_object)=0 then 
    raise synchronization_error;
    end if;
  end rtl_mutex_unlock;
