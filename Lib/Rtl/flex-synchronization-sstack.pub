----------------------------------------------------------------------------------------------------
procedure rtl_sstack_new(
    sstack         : out ref t_rtl_sstack;
    style          : in t_rtl_concurency_style;
    freedata       : in p_rtl_ref_free_resource:=nil); -- userdata free procedure
-- Create new synchronized dynamic stack
----------------------------------------------------------------------------------------------------
procedure rtl_sstack_discard(
    sstack         : in out ref t_rtl_sstack);
-- Discard synchronized dynamic stack
----------------------------------------------------------------------------------------------------
procedure rtl_sstack_reset(
    sstack         : in out ref t_rtl_sstack);
-- clean stack
----------------------------------------------------------------------------------------------------
procedure rtl_sstack_push(
    sstack         : in out ref t_rtl_sstack;
    data           : in t_rtl_pointer);
-- push data
----------------------------------------------------------------------------------------------------
procedure rtl_sstack_pop(
    sstack         : in out ref t_rtl_sstack;
    data           : out t_rtl_pointer;
    filter         : in p_rtl_expression:=nil);
-- pop data
----------------------------------------------------------------------------------------------------
procedure rtl_sstack_try_pop(
    sstack         : in out ref t_rtl_sstack;
    data           : out t_rtl_pointer;
    milisec        : in t_rtl_timeout;
    filter         : in p_rtl_expression:=nil)
    return         t_rtl_logical;
-- try pop data
----------------------------------------------------------------------------------------------------