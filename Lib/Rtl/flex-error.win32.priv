----------------------------------------------------------------------------------------------------
module private error =
-- Error handling and misc
-- Flex Run-time Library
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------
with
  os_api;

var
#if sub_gui then;
    title      : static const array 1..22 of t_syschar := 'Flex Run-time Library'\0;
#end if;
    msg_task   : static const string 22 of t_syschar := ''\0;

----------------------------------------------------------------------------------------------------
procedure rtl_error_write =
-- Displays a fatal error message.
----------------------------------------------------------------------------------------------------
#if sub_console then;
  var
    written            : t_rtl_unsigned32;
#end if;

begin
  #if sub_console then;
    if WriteConsole(GetStdHandle(STD_ERROR_HANDLE),msgz[1],msgz:length-1,written,nil)=0 then
      -- ignore errors
      end if;
  #elsif sub_gui then;
    if MessageBox(0,msgz[1],title,0)=0 then
      -- ignore errors
      end if;
  #end if;
  end rtl_error_write;


----------------------------------------------------------------------------------------------------
procedure rtl_wait_key =
----------------------------------------------------------------------------------------------------
with
  synchronization;

var
  res              : array 1..1 of t_syschar := ' ';
#if sub_console then;
  readen           : t_rtl_unsigned32;
  stdin            : t_rtl_kernel_object;
#end if;

begin
  rtl_error_write(msgz);
  #if sub_console then;
    t_handle(stdin:unchecked):=getstdhandle(std_input_handle);
    if rtl_kernel_try (stdin,t_rtl_wait_infinite) then
      -- ignore errors
      end if;
  #end if;
  end rtl_wait_key;



----------------------------------------------------------------------------------------------------
procedure rtl_error_write_uni =
-- Displays a fatal error message.
----------------------------------------------------------------------------------------------------
var
    temp           : string 256 of t_syschar;

begin
  temp:length:=msgz^:length+1;
  for p in 1 .. msgz^:length loop
    temp[p]:unchecked:=msgz^[p];
    end loop;
  temp[msgz^:length+1]:ord:=0;
  rtl_error_write(temp);
  end rtl_error_write_uni;



----------------------------------------------------------------------------------------------------
procedure rtl_error_write_unsigned =
----------------------------------------------------------------------------------------------------
var
  i                : t_rtl_unsigned32;           -- absolute value of NUM
  j                : t_rtl_unsigned32;           -- floating 1 for conversion
  k                : t_rtl_unsigned32;           -- temp
  z                : t_rtl_unsigned32;           -- next digit's position
  res              : string 11 of t_syschar := '         0'\0;

begin
  i:=num;
  res:length:=1;
  z:=1;
  j:=1;
  while j<=i div 10 loop
    j:=10*j;
    res:length+1;
    end loop;

  -- set each digit to it's right value
  while j>0 loop
    k:=k:type(i div j);
    if k>=0 and then k<=9 then
      res[z]:ord:="0":ord+k;
      z+1;
      i:=i mod j;
      j:=j div 10;
    else
      res:='??????????'\0;
      return;
      end if;
    end loop;
    res[res:length+1]:ord:=0;
  rtl_error_write(res);
  end rtl_error_write_unsigned;


----------------------------------------------------------------------------------------------------
procedure rtl_error_write_unsigned_hex =
-- %%TODO optimize !!!!
----------------------------------------------------------------------------------------------------
var
  i                : t_rtl_unsigned32;           -- absolute value of NUM
  j                : t_rtl_unsigned32;           -- floating 1 for conversion
  k                : t_rtl_unsigned32;           -- temp
  z                : t_rtl_unsigned32;           -- next digit's position
  res              : string 11 of t_syschar := '0x00000000'\0;
begin
  i:=num;
  z:=3;
  j:=$10000000;
  res:length:=11;

  -- set each digit to it's right value
  while j>0 loop
    k:=k:type(i div j);
    if k>=0 and then k<=9 then
      res[z]:ord:="0":ord+k;
      z+1;
      i:=i mod j;
      j:=j div 16;
    elsif k>=10 and then k<=15 then
      res[z]:ord:="A":ord+k-10;
      z+1;
      i:=i mod j;
      j:=j div 16;
    else
      res:='??????????'\0;
      return;
      end if;
    end loop;
  rtl_error_write(res);
  end rtl_error_write_unsigned_hex;



----------------------------------------------------------------------------------------------------
procedure rtl_error_write_byte_hex =
-- %%TODO optimize !!!!
----------------------------------------------------------------------------------------------------
var
  i                : t_rtl_unsigned32;           -- absolute value of NUM
  j                : t_rtl_unsigned32;           -- floating 1 for conversion
  k                : t_rtl_unsigned32;           -- temp
  z                : t_rtl_unsigned32;           -- next digit's position
  res              : string 4 of t_syschar := '00 '\0;

begin
  i:=num;
  z:=1;
  j:=$10;
  --res:length:=4;

  -- set each digit to it's right value
  while j>0 loop
    k:=k:type(i div j);
    if k>=0 and then k<=9 then
      res[z]:ord:="0":ord+k;
      z+1;
      i:=i mod j;
      j:=j div 16;
    elsif k>=10 and then k<=15 then
      res[z]:ord:="A":ord+k-10;
      z+1;
      i:=i mod j;
      j:=j div 16;
    else
      res:=' ??'\0;
      return;
      end if;
    end loop;
  rtl_error_write(res);
  end rtl_error_write_byte_hex;



----------------------------------------------------------------------------------------------------
procedure rtl_error_write_byte =
----------------------------------------------------------------------------------------------------
var
  i                : t_rtl_unsigned32;           -- absolute value of NUM
  res              : string 2 of t_syschar := ' '\0;

begin
  i:=num;
  if num>32 and num<>$B7 then
    res[1]:ord:=num;
    end if;
  rtl_error_write(res);
  end rtl_error_write_byte;



----------------------------------------------------------------------------------------------------
procedure rtl_handle_constraint_error =
-- Handles constraint error.
----------------------------------------------------------------------------------------------------
begin
  raise constraint_error;
  end rtl_handle_constraint_error;


----------------------------------------------------------------------------------------------------
procedure rtl_terminate  =
-- Terminates the program with exit-code CODE.
----------------------------------------------------------------------------------------------------
with
  os_api;

begin
#if os_win32 then;
  exitprocess(code);
#elsif os_linux then;
  #syntax asm;
    mov   ebx,code                               -- exit status of the calling process
    mov   eax,nr_sys_exit                        -- kernel syscall "terminate the calling process"
    int   $80                                    -- call to kernel
    #end asm;
#else;
  #error 'RTL Internal Error: Unrecognized operating system 6';
#end if;
  end rtl_terminate;


----------------------------------------------------------------------------------------------------
procedure rtl_terminate0 =
-- Terminates the program with exit-code 0.
----------------------------------------------------------------------------------------------------
begin
  rtl_terminate(0);
  end rtl_terminate0;

end error;