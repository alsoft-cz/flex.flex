----------------------------------------------------------------------------------------------------
module private error =
-- Error handling and misc
-- Flex Run-time Library
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------
with
  os_api;

----------------------------------------------------------------------------------------------------
procedure rtl_error_write =
-- Displays a fatal error message.
----------------------------------------------------------------------------------------------------
#if sub_console then;
  var
    written            : t_rtl_unsigned32;
#elsif sub_gui then;
  var
    title    : static const array 1..22 of t_syschar := 'Flex Run-time Library'\0;
#end if;

begin
  #if sub_console then;
    if WriteConsole(GetStdHandle(STD_ERROR_HANDLE),msgz[1],msgz:length,written,nil)=0 then
      -- ignore errors
      end if;
  #elsif sub_gui then;
    if MessageBox(0,msgz[1],title,0)=0 then
      -- ignore errors
      end if;
  #end if;
  end rtl_error_write;



----------------------------------------------------------------------------------------------------
procedure rtl_terminate  =
-- Terminates the program with exit-code CODE.
----------------------------------------------------------------------------------------------------
with
  os_api;

begin
#if os_win32 then;
  exitprocess(code);
#elsif os_linux then;
  #syntax asm;
    mov   ebx,code                               -- exit status of the calling process
    mov   eax,nr_sys_exit                        -- kernel syscall "terminate the calling process"
    int   $80                                    -- call to kernel
    #end asm;
#else;
  #error 'RTL Internal Error: Unrecognized operating system 6';
#end if;
  end rtl_terminate;


----------------------------------------------------------------------------------------------------
procedure rtl_terminate0 =
-- Terminates the program with exit-code 0.
----------------------------------------------------------------------------------------------------
begin
  rtl_terminate(0);
  end rtl_terminate0;



----------------------------------------------------------------------------------------------------
procedure rtl_error_write_unsigned =
----------------------------------------------------------------------------------------------------
var
  i                : t_rtl_unsigned32;           -- absolute value of NUM
  j                : t_rtl_unsigned32;           -- floating 1 for conversion
  k                : t_rtl_unsigned32;           -- temp
  z                : t_rtl_unsigned32;           -- next digit's position
  l                : t_rtl_unsigned32;           -- len
  res              : array 1..11 of t_syschar := '         0'\0;
#if sub_console then;
    written            : t_rtl_unsigned32;
#elsif sub_gui then;
    title    : static const array 1..22 of t_syschar := 'Flex Run-time Library'\0;
#end if;

begin
  -- care about the sign
  i:=num;
  l:=1;

  -- save the first digit's position
  z:=1;

  -- for i=859 we'll start with j=100; for i=1000, j=1000.
  j:=1;
  while j<=i div 10 loop
    j:=10*j;
    l+1;
    end loop;

  -- set each digit to it's right value
  while j>0 loop
    k:=k:type(i div j);
    if k>=0 and then k<=9 then
      res[z]:ord:="0":ord+k;
      z+1;
      i:=i mod j;
      j:=j div 10;
    else
      res:='??????????'\0;
      return;
      end if;
    end loop;
    l+1;
    res[l]:ord:=0;

  #if sub_console then;
    if WriteConsole(getstdhandle(std_error_handle),res[1],l,written,nil)=0 then
      -- ignore errors
      end if;
  #elsif sub_gui then;
    if MessageBox(0,res[1],title,0)=0 then
      -- ignore errors
      end if;
  #end if;
  end rtl_error_write_unsigned;

#if rtl_debug_dump_on_exception then;
----------------------------------------------------------------------------------------------------
procedure rtl_debug_dump_exception =
----------------------------------------------------------------------------------------------------
begin
  rtl_error_write_unsigned(GetCurrentThreadId());
#if #environment compiler_version;='4.0.3.7' then;
  rtl_error_write_unsigned(ecode);
#end if;
  rtl_error_write_unsigned(etag);
  rtl_error_write_unsigned(t_rtl_unsigned32(edata:unchecked));
  rtl_error_write(msgz);
  end rtl_debug_dump_exception;
#end if;

----------------------------------------------------------------------------------------------------
procedure rtl_dump_unhandled_exception =
----------------------------------------------------------------------------------------------------
begin
  rtl_error_write_unsigned(GetCurrentThreadId());
#if #environment compiler_version;='4.0.3.7' then;
  rtl_error_write_unsigned(ecode);
#end if;
  rtl_error_write_unsigned(t_rtl_unsigned32(etag:unchecked));
  rtl_error_write_unsigned(t_rtl_unsigned32(edata:unchecked));
  rtl_error_write(msgz);
  end rtl_dump_unhandled_exception;


----------------------------------------------------------------------------------------------------
procedure rtl_handle_constraint_error =
-- Handles constraint error.
----------------------------------------------------------------------------------------------------
begin
  raise constraint_error;
  end rtl_handle_constraint_error;

end error;