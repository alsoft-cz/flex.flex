----------------------------------------------------------------------------------------------------
module private types =
-- Type tags and type tag-specific operations.
-- Flex Run-time Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------
--
-- Type descriptor layout:
--
--     +---------------+                                                          
--     | :size         | +0         \                                             
--     +---------------+            |                                             
--     | data type     | +4         |                                             
--     +---------------+            |                                             
--     | ancestor :tag | +8         |                                             
--     +---------------+            |                                             
--     | ^@init     *) | +12        |
--     +---------------+            |                                             
--     | ^entry        | +16        | all data types
--     +---------------+            |
--     | ^exit         | +20        |                                             
--     +---------------+            |                                             
--     | ^adjust       | +24        |                                             
--     +---------------+            |                                             
--     | ^rollback     | +28        |                                             
--     +---------------+            |                                             
--     | ^commit       | +32        /
--     +---------------+
--     | ^virtual_1    | +36        \
--     |    ...        |            | classes only
--     | ^virtual_n    | +36 + 4*n  /
--     +---------------+
--
--     *) always NIL for classes
--
----------------------------------------------------------------------------------------------------

type
  -- layout of the hidden fields of a class instance
  t_rtl_internal_class_layout = record
      class_tag    : t_rtl_tag;                  -- tag of the type of the class
      class_status : t_rtl_native_mod_unsigned;  -- status bit-field
      end record
          for alignment use 1
          for size      use 8;

const
  -- bits of the [@status] hidden field
  class_status_initialized = 2$0000_0000_0000_0001; -- instance is initialized
  class_status_interface   = 2$0000_0000_0000_0010; -- instance is an instance of an interface

----------------------------------------------------------------------------------------------------
#template generate_rtl_call_special_method_priv (
    rtl_name,                                    -- desired name of the [rtl_call_*] method
    ptr_offset);                                 -- offset of the pointer to the method within the
                                                 -- type descritor
-- Generates a [rtl_call_*] method used to call the appropriate special method.
----------------------------------------------------------------------------------------------------

  --------------------------------------------------------------------------------------------------
  procedure rtl_name =
  -- Calls the <special> method.
  --------------------------------------------------------------------------------------------------
  begin
    #syntax asm;

#if #environment compiler_version;='4.0.5.2' then;
      -- class address
      mov    eax,[esp+4]
      -- load :TAG
      mov    eax,[eax]
#else;
      -- load :TAG
      mov    eax,[esp+8]
#end if;
      -- load ^<special>
  @2: mov    edx,[eax+ptr_offset]
      cmp    edx,0
      je     @1
      -- call <special>
      jmp    edx
  @1: -- load parent :TAG
      mov    eax,[eax+t_desc_type.ancestor_tag]
      -- don't care about non-tagged types
      cmp    eax,0
      jne    @2
      #end asm;
    end rtl_name;

  #end generate_rtl_call_special_method_priv;



----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_special_method_priv;
  #for rtl_name   use; rtl_call_init
  #for ptr_offset use; t_desc_type.spec_init
  #end generate_rtl_call_special_method_priv;
-- Calls the INIT method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_special_method_priv;
  #for rtl_name   use; rtl_call_entry
  #for ptr_offset use; t_desc_type.spec_entry
  #end generate_rtl_call_special_method_priv;
-- Calls the ENTRY method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_special_method_priv;
  #for rtl_name   use; rtl_call_exit
  #for ptr_offset use; t_desc_type.spec_exit
  #end generate_rtl_call_special_method_priv;
-- Calls the EXIT method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_special_method_priv;
  #for rtl_name   use; rtl_call_adjust
  #for ptr_offset use; t_desc_type.spec_adjust
  #end generate_rtl_call_special_method_priv;
-- Calls the ADJUST method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_special_method_priv;
  #for rtl_name   use; rtl_call_commit
  #for ptr_offset use; t_desc_type.spec_commit
  #end generate_rtl_call_special_method_priv;
-- Calls the COMMIT method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_special_method_priv;
  #for rtl_name   use; rtl_call_rollback
  #for ptr_offset use; t_desc_type.spec_rollback
  #end generate_rtl_call_special_method_priv;
-- Calls the ROLLBACK method.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
#template generate_rtl_call_indexed_special_method_priv (
    rtl_name,                                    -- desired name of the [rtl_call_*] method
    ptr_offset);                                 -- offset of the pointer to the method within the
                                                 -- type descritor
-- Generates a [rtl_call_indexed_*] method used to call the appropriate special method of indexed types.
----------------------------------------------------------------------------------------------------

  --------------------------------------------------------------------------------------------------
  procedure rtl_name =
  -- Calls the <special> method.
  --------------------------------------------------------------------------------------------------
  begin
    #syntax asm;
      -- load TAG
      mov    eax,[esp+$10]
      -- load ^<special>
  @2: mov    edx,[eax+ptr_offset]
      cmp    edx,0
      je     @1
      -- call <special>
      jmp    edx
  @1: -- load parent :TAG
      mov    eax,[eax+t_desc_type.ancestor_tag]
      -- don't care about non-tagged types
      cmp    eax,0
      jne    @2
      #end asm;
    end rtl_name;

  #end generate_rtl_call_indexed_special_method_priv;



----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_indexed_special_method_priv;
  #for rtl_name   use; rtl_call_indexed_init
  #for ptr_offset use; t_desc_type.spec_init
  #end generate_rtl_call_indexed_special_method_priv;
-- Calls the INIT method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_indexed_special_method_priv;
  #for rtl_name   use; rtl_call_indexed_entry
  #for ptr_offset use; t_desc_type.spec_entry
  #end generate_rtl_call_indexed_special_method_priv;
-- Calls the ENTRY method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_indexed_special_method_priv;
  #for rtl_name   use; rtl_call_indexed_exit
  #for ptr_offset use; t_desc_type.spec_exit
  #end generate_rtl_call_indexed_special_method_priv;
-- Calls the EXIT method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_indexed_special_method_priv;
  #for rtl_name   use; rtl_call_indexed_adjust
  #for ptr_offset use; t_desc_type.spec_adjust
  #end generate_rtl_call_indexed_special_method_priv;
-- Calls the ADJUST method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_indexed_special_method_priv;
  #for rtl_name   use; rtl_call_indexed_commit
  #for ptr_offset use; t_desc_type.spec_commit
  #end generate_rtl_call_indexed_special_method_priv;
-- Calls the COMMIT method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_indexed_special_method_priv;
  #for rtl_name   use; rtl_call_indexed_rollback
  #for ptr_offset use; t_desc_type.spec_rollback
  #end generate_rtl_call_indexed_special_method_priv;
-- Calls the ROLLBACK method.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
#template generate_rtl_ancestor_special_method (
    rtl_name,                                    -- desired name of the [rtl_ancestor_*] method
    ptr_offset);                                 -- offset of the pointer to the method within the
                                                 -- type descritor
-- Generates a [rtl_ancestor_*] method used to call the appropriate inherited special method.
----------------------------------------------------------------------------------------------------

  --------------------------------------------------------------------------------------------------
  procedure rtl_name =
  -- Calls the <special> method.
  --------------------------------------------------------------------------------------------------
  begin
    #syntax asm;
      -- class address
      mov    eax,[esp+4]
      -- load ancestor :TAG
  @1: mov    eax,[eax+t_desc_type.ancestor_tag]
      -- don't care about non-tagged types
      cmp    eax,0
      je     @3
      -- load ^<special>
  @2: mov    edx,[eax+ptr_offset]
      cmp    edx,0
      je     @1
      -- call <special>
      jmp    edx
  @3:
      #end asm;
    end rtl_name;

  #end generate_rtl_ancestor_special_method;



----------------------------------------------------------------------------------------------------
#expand generate_rtl_ancestor_special_method;
  #for rtl_name   use; rtl_ancestor_init
  #for ptr_offset use; t_desc_type.spec_init
  #end generate_rtl_ancestor_special_method;
-- Calls the INIT method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_ancestor_special_method;
  #for rtl_name   use; rtl_ancestor_entry
  #for ptr_offset use; t_desc_type.spec_entry
  #end generate_rtl_ancestor_special_method;
-- Calls the ENTRY method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_ancestor_special_method;
  #for rtl_name   use; rtl_ancestor_exit
  #for ptr_offset use; t_desc_type.spec_exit
  #end generate_rtl_ancestor_special_method;
-- Calls the EXIT method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_ancestor_special_method;
  #for rtl_name   use; rtl_ancestor_adjust
  #for ptr_offset use; t_desc_type.spec_adjust
  #end generate_rtl_ancestor_special_method;
-- Calls the ADJUST method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_ancestor_special_method;
  #for rtl_name   use; rtl_ancestor_commit
  #for ptr_offset use; t_desc_type.spec_commit
  #end generate_rtl_ancestor_special_method;
-- Calls the COMMIT method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_ancestor_special_method;
  #for rtl_name   use; rtl_ancestor_rollback
  #for ptr_offset use; t_desc_type.spec_rollback
  #end generate_rtl_ancestor_special_method;
-- Calls the ROLLBACK method.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
procedure rtl_get_size_from_tag =
-- Determines the dynamic :size attribute of the data specified by [data_ptr] using its :tag 
-- [data_tag]. If the data type is unconstrained, then the :size is determined from the memory 
-- manager.
----------------------------------------------------------------------------------------------------
with
  flex.memory;

begin
  -- is the data type unconstrained ?
  if p_desc_type(data_tag:unchecked)^.dtype=dt_ustring or p_desc_type(data_tag:unchecked)^.dtype=dt_uarray

    -- yes => query the memory manager
    then 
      result:=rtl_size(data_ptr);

    -- no => use the static size
    else
      result:=p_desc_type(data_tag:unchecked)^.size;
      end if;
  end rtl_get_size_from_tag;



----------------------------------------------------------------------------------------------------
procedure rtl_get_size_from_tag_direct =
-- Retrieves the size stored within the given type tag [data_tag].
----------------------------------------------------------------------------------------------------
begin
  result:=p_desc_type(data_tag:unchecked)^.size;
  end rtl_get_size_from_tag_direct;



----------------------------------------------------------------------------------------------------
#template compute_last_from_size;
-- Computes last from size. To be used within [rtl_get_last_from_tag*] only.
----------------------------------------------------------------------------------------------------
  -- get rid of the static part of a string, if needed
  if p_desc_type(data_tag:unchecked)^.dtype=dt_string or p_desc_type(data_tag:unchecked)^.dtype=dt_ustring then
    result-t_rtl_native_unsigned:size;
    end if;

  -- no further adjustments necessary, if size is zero
  if result=0 then return end if;

  -- compute the actual value of :last
  result div p_desc_type(p_desc_type_indexed(data_tag:unchecked)^.base_tag:unchecked)^.size;

  -- for an (unconstrained) array, base the :last at 0 (a dynamic view of an array or unconstrained 
  -- array is indexed from 0)
  if p_desc_type(data_tag:unchecked)^.dtype=dt_array or p_desc_type(data_tag:unchecked)^.dtype=dt_uarray then
    pred result;
    end if;
  #end compute_last_from_size;



----------------------------------------------------------------------------------------------------
procedure rtl_get_last_from_tag =
-- Determines the dynamic :last attribute of the data specified by [data_ptr] using its :tag 
-- [data_tag]. If the data type is unconstrained, then the :last is determined from the memory 
-- manager.                               
----------------------------------------------------------------------------------------------------
begin
#if #environment compiler_version;<>'4.0.5.2' then;
  -- Act according to the data type described by the tag
  case p_desc_type(data_tag:unchecked)^.dtype
    -- unconstrained string/array: determine from the memory manager
    when dt_ustring,dt_uarray do
       -- determine the size of the data
       result:=rtl_get_size_from_tag(data_ptr,data_tag);

       -- compute last from size
       compute_last_from_size;

    -- constrained string/array -- look up in the type definition
    when dt_string,dt_array do
      declare var
        prange_desc : p_desc_type_ordinal;

      begin
        prange_desc:=p_desc_type_ordinal(p_desc_type_indexed(data_tag:unchecked)^.range_tag:unchecked);
        result:=prange_desc^.last;
        end declare;

    when others do raise type_error;
    end case;
#else;
  -- determine the size of the data
  result:=rtl_get_size_from_tag(data_ptr,data_tag);

  -- compute last from size
  compute_last_from_size;
#end if;
  end rtl_get_last_from_tag;



----------------------------------------------------------------------------------------------------
procedure rtl_get_last_from_tag_direct =
-- Retrieves the size stored within the given type tag [data_tag].
----------------------------------------------------------------------------------------------------
begin
  -- determine the size of the data
  result:=rtl_get_size_from_tag_direct(data_tag);

  -- compute last from size
  compute_last_from_size;
  end rtl_get_last_from_tag_direct;



----------------------------------------------------------------------------------------------------
procedure rtl_get_first_from_tag =
-- Determines the dynamic :first attribute of the data specified by [data_ptr] using its :tag 
-- [data_tag].
----------------------------------------------------------------------------------------------------
begin
  -- Act according to the data type described by the tag
  case p_desc_type(data_tag:unchecked)^.dtype
    -- string, unconstrained string -- always 1
    when dt_string, dt_ustring do result:=1;

    -- unconstrained array -- always 0
    when dt_uarray do result:=0;

    -- constrained array -- look up in the type definition
    when dt_array do
      declare var
        prange_desc : p_desc_type_ordinal;

      begin
        prange_desc:=p_desc_type_ordinal(p_desc_type_indexed(data_tag:unchecked)^.range_tag:unchecked);
        result:=prange_desc^.first;
        end declare;

    when others do raise type_error;
    end case;
  end rtl_get_first_from_tag;



----------------------------------------------------------------------------------------------------
procedure rtl_setup_class_instance =
-- Sets-up an instance of a class. 
-- Assigns the class-type tag to the hidden [@tag] field, calls the [@init] and [@entry] special
-- methods and sets the [@status] hidden field to initialized.
-- Do not use for set-up of exposed-classes' instances.
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    -- pointer to the instance
    mov    eax,instance

    -- set-up the [@tag] field
    mov    edx,class_tag
    mov    <t_rtl_tag> [eax+t_rtl_internal_class_layout.class_tag],edx

    -- call @init and @entry
#if #environment compiler_version;<>'4.0.5.2' then;
    push   edx
#end if;
    push   eax
#if #environment compiler_version;<>'4.0.5.2' then;
    push   edx
#end if;
    push   eax
    call   rtl_call_init
    call   rtl_call_entry

    -- set the [@status] field to initialized
    mov    eax,instance
    mov    <t_rtl_native_mod_unsigned> [eax+t_rtl_internal_class_layout.class_status],class_status_initialized
    #end asm;
  end rtl_setup_class_instance;



----------------------------------------------------------------------------------------------------
procedure rtl_finalize_class_instance =
-- Finalizes an instance of a class. 
-- Calls the [@init] and [@entry] special methods and resets the [@status] hidden field.
-- Does nothing for uninitialized instances.
-- Can be used for finalization of exposed-classes' instances.
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    -- pointer to the instance
    mov    eax,instance

    -- ensure the class was initialized
    test   <t_rtl_native_mod_unsigned> [eax+t_rtl_internal_class_layout.class_status],class_status_initialized
    jz     @1

    -- call @exit
#if #environment compiler_version;<>'4.0.5.2' then;
    push   <t_rtl_unsigned32>[eax]
#end if;
    push   eax
    call   rtl_call_exit

    -- reset the [@status] field
    mov    eax,instance
    mov    <t_rtl_native_mod_unsigned> [eax+t_rtl_internal_class_layout.class_status],0

@1:
    #end asm;
  end rtl_finalize_class_instance;



----------------------------------------------------------------------------------------------------
procedure rtl_setup_interface_instance =
-- Sets-up the [interface_index]th interface (exposed-class instance) of the [enclosing_class].
-- Assigns the class-type tag to the hidden [@tag] field, calls the [@init] and [@entry] special
-- methods and sets the [@status] hidden field to initialized interface.
----------------------------------------------------------------------------------------------------
const
  class_status_initialized_interface = class_status_interface or class_status_initialized;

begin
  #syntax asm;
    -- pointer to the instance
    mov    eax,enclosing_class
    
    -- index of the interface
    mov    edx,interface_index

    -- prepare pointer to "enclosing_instance.@tag^.itable^[interface_index]"
    mov    ebx,[eax+t_rtl_internal_class_layout.class_tag]
    mov    ebx,[ebx+t_desc_class.itable]
    lea    ebx,[ebx+edx*{t_ref_interface:size}8+4{t_interface_table:length:size}-8{t_ref_interface:size}]

    -- compute pointer to the interface instance
    add    eax,[ebx+t_ref_interface.offset]

    -- set-up the [@tag] field
    mov    edx,[ebx+t_ref_interface.class_tag]
    mov    <t_rtl_tag> [eax+t_rtl_internal_class_layout.class_tag],edx

    -- call @init and @entry
    push   eax
#if #environment compiler_version;<>'4.0.5.2' then;
    push   edx
#end if;
    push   eax
#if #environment compiler_version;<>'4.0.5.2' then;
    push   edx
#end if;
    push   eax
    call   rtl_call_init
    call   rtl_call_entry

    -- set the [@status] field to initialized & interface
    pop    eax
    mov    <t_rtl_native_mod_unsigned> [eax+t_rtl_internal_class_layout.class_status],class_status_initialized_interface
    #end asm;
  end rtl_setup_interface_instance;



----------------------------------------------------------------------------------------------------
procedure rtl_setup_instance =
-- Sets up an instance of a type specified by the given tag. Used during task variable initialization.
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    -- pointer to the instance
    mov    eax,instance

    -- tag of the created instance
    mov    edx,class_tag

    -- is it a class?
    cmp    <t_entity_code>[edx+t_desc_entity.etype],et_class
    jne    @1

    -- yes=>initialize it as a class
    push   eax
    push   edx
    call   rtl_setup_class_instance
    jmp    @3

@1:
    -- no, it is not a class=>initialize it with a binary copy, if some data was given
    -- were we given any initialization data?
    mov    esi, init_value
    test   esi, esi
    jz     @2

    -- yes=>clone it into the new instance
    mov    ecx,<t_rtl_unsigned32>[edx+t_desc_type.size]
    cld
    mov    edi,eax
    rep    movsb
    --%%TODO optimization (->movsd)

@2:
    push   class_tag
    push   instance
    call   rtl_call_init

@3:
    #end asm;
  end rtl_setup_instance;



----------------------------------------------------------------------------------------------------
procedure rtl_adjust_instance =
----------------------------------------------------------------------------------------------------
begin
  -- %%TODO(TASKVAR)
  end rtl_adjust_instance;



----------------------------------------------------------------------------------------------------
procedure rtl_finalize_instance =
-- Finalizes an instance of a type specified by the given tag. Used during task variable finalization.
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    -- pointer to the instance
    mov    eax,instance

    -- tag of the finalized instance
    mov    edx,class_tag

    -- is it a class?
    cmp    <t_entity_code>[edx+t_desc_entity.etype],et_class
    jne    @1

    -- yes=>finalize it as a class
    push   eax
    call   rtl_finalize_class_instance
@1:
    #end asm;
  end rtl_finalize_instance;



---- Compiler magic --------------------------------------------------------------------------------
#pragma assign(call_init               ,flex.tags.types.rtl_call_init               );
#pragma assign(call_entry              ,flex.tags.types.rtl_call_entry              );
#pragma assign(call_exit               ,flex.tags.types.rtl_call_exit               );
#pragma assign(call_adjust             ,flex.tags.types.rtl_call_adjust             );
#pragma assign(call_rollback           ,flex.tags.types.rtl_call_rollback           );
#pragma assign(call_commit             ,flex.tags.types.rtl_call_commit             );
#pragma assign(call_indexed_init       ,flex.tags.types.rtl_call_indexed_init       );
#pragma assign(call_indexed_entry      ,flex.tags.types.rtl_call_indexed_entry      );
#pragma assign(call_indexed_exit       ,flex.tags.types.rtl_call_indexed_exit       );
#pragma assign(call_indexed_adjust     ,flex.tags.types.rtl_call_indexed_adjust     );
#pragma assign(call_indexed_rollback   ,flex.tags.types.rtl_call_indexed_rollback   );
#pragma assign(call_indexed_commit     ,flex.tags.types.rtl_call_indexed_commit     );
#pragma assign(ancestor_init           ,flex.tags.types.rtl_ancestor_init           );
#pragma assign(ancestor_entry          ,flex.tags.types.rtl_ancestor_entry          );
#pragma assign(ancestor_exit           ,flex.tags.types.rtl_ancestor_exit           );
#pragma assign(ancestor_adjust         ,flex.tags.types.rtl_ancestor_adjust         );
#pragma assign(ancestor_rollback       ,flex.tags.types.rtl_ancestor_rollback       );
#pragma assign(ancestor_commit         ,flex.tags.types.rtl_ancestor_commit         );
#pragma assign(get_size_from_tag       ,flex.tags.types.rtl_get_size_from_tag       );
#pragma assign(get_size_from_tag_direct,flex.tags.types.rtl_get_size_from_tag_direct);
#pragma assign(get_last_from_tag       ,flex.tags.types.rtl_get_last_from_tag       );
#pragma assign(get_last_from_tag_direct,flex.tags.types.rtl_get_last_from_tag_direct);
#pragma assign(get_first_from_tag      ,flex.tags.types.rtl_get_first_from_tag      );
#pragma assign(setup_interface_instance,flex.tags.types.rtl_setup_interface_instance);
----------------------------------------------------------------------------------------------------

end types;