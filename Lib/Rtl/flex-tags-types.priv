----------------------------------------------------------------------------------------------------
module private types =
-- Tagged types.
-- Flex Run-time Library
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------
--
-- Type descriptor layout:
--
--     +---------------+                                                          
--     | :size         | +0         \                                             
--     +---------------+            |                                             
--     | data type     | +4         |                                             
--     +---------------+            |                                             
--     | ancestor :tag | +8         |                                             
--     +---------------+            |                                             
--     | ^@init     *) | +12        |
--     +---------------+            |                                             
--     | ^entry        | +16        | all data types
--     +---------------+            |
--     | ^exit         | +20        |                                             
--     +---------------+            |                                             
--     | ^adjust       | +24        |                                             
--     +---------------+            |                                             
--     | ^rollback     | +28        |                                             
--     +---------------+            |                                             
--     | ^commit       | +32        /
--     +---------------+
--     | ^virtual_1    | +36        \
--     |    ...        |            | classes only
--     | ^virtual_n    | +36 + 4*n  /
--     +---------------+
--
--     *) always NIL for classes
--
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
#template generate_rtl_call_special_method_priv (
    rtl_name,                                    -- desired name of the [rtl_call_*] method
    ptr_offset);                                 -- offset of the pointer to the method within the
                                                 -- type descritor
-- Generates a [rtl_call_*] method used to call the appropriate special method.
----------------------------------------------------------------------------------------------------

  --------------------------------------------------------------------------------------------------
  procedure rtl_name =
  -- Calls the <special> method.
  --------------------------------------------------------------------------------------------------
  begin
    #syntax asm;
      -- class address
      mov    eax,[esp+4]
      -- load :TAG
      mov    eax,[eax]
      -- load ^<special>
  @2: mov    edx,[eax+ptr_offset]
      cmp    edx,0
      je     @1
      -- call <special>
      jmp    edx
  @1: -- load parent :TAG
      mov    eax,[eax+t_desc_type.ancestor_tag]
      -- don't care about non-tagged types
      cmp    eax,0
      jne    @2
      #end asm;
    end rtl_name;

  #end generate_rtl_call_special_method_priv;



----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_special_method_priv;
  #for rtl_name   use; rtl_call_init
  #for ptr_offset use; t_desc_type.spec_init
  #end generate_rtl_call_special_method_priv;
-- Calls the INIT method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_special_method_priv;
  #for rtl_name   use; rtl_call_entry
  #for ptr_offset use; t_desc_type.spec_entry
  #end generate_rtl_call_special_method_priv;
-- Calls the ENTRY method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_special_method_priv;
  #for rtl_name   use; rtl_call_exit
  #for ptr_offset use; t_desc_type.spec_exit
  #end generate_rtl_call_special_method_priv;
-- Calls the EXIT method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_special_method_priv;
  #for rtl_name   use; rtl_call_adjust
  #for ptr_offset use; t_desc_type.spec_adjust
  #end generate_rtl_call_special_method_priv;
-- Calls the ADJUST method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_special_method_priv;
  #for rtl_name   use; rtl_call_commit
  #for ptr_offset use; t_desc_type.spec_commit
  #end generate_rtl_call_special_method_priv;
-- Calls the COMMIT method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_call_special_method_priv;
  #for rtl_name   use; rtl_call_rollback
  #for ptr_offset use; t_desc_type.spec_rollback
  #end generate_rtl_call_special_method_priv;
-- Calls the ROLLBACK method.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
#template generate_rtl_ancestor_special_method (
    rtl_name,                                    -- desired name of the [rtl_ancestor_*] method
    ptr_offset);                                 -- offset of the pointer to the method within the
                                                 -- type descritor
-- Generates a [rtl_ancestor_*] method used to call the appropriate inherited special method.
----------------------------------------------------------------------------------------------------

  --------------------------------------------------------------------------------------------------
  procedure rtl_name (
      instance       : in t_rtl_pointer);
  #pragma stackframe(rtl_name,stack_pointer_relative);
  procedure rtl_name =
  -- Calls the <special> method.
  --------------------------------------------------------------------------------------------------
  begin
    #syntax asm;
      -- class address
      mov    eax,[esp+4]
      -- load ancestor :TAG
  @1: mov    eax,[eax+t_desc_type.ancestor_tag]
      -- don't care about non-tagged types
      cmp    eax,0
      je     @3
      -- load ^<special>
  @2: mov    edx,[eax+ptr_offset]
      cmp    edx,0
      je     @1
      -- call <special>
      jmp    edx
  @3:
      #end asm;
    end rtl_name;

  #end generate_rtl_ancestor_special_method;



----------------------------------------------------------------------------------------------------
#expand generate_rtl_ancestor_special_method;
  #for rtl_name   use; rtl_ancestor_init
  #for ptr_offset use; t_desc_type.spec_init
  #end generate_rtl_ancestor_special_method;
-- Calls the INIT method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_ancestor_special_method;
  #for rtl_name   use; rtl_ancestor_entry
  #for ptr_offset use; t_desc_type.spec_entry
  #end generate_rtl_ancestor_special_method;
-- Calls the ENTRY method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_ancestor_special_method;
  #for rtl_name   use; rtl_ancestor_exit
  #for ptr_offset use; t_desc_type.spec_exit
  #end generate_rtl_ancestor_special_method;
-- Calls the EXIT method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_ancestor_special_method;
  #for rtl_name   use; rtl_ancestor_adjust
  #for ptr_offset use; t_desc_type.spec_adjust
  #end generate_rtl_ancestor_special_method;
-- Calls the ADJUST method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_ancestor_special_method;
  #for rtl_name   use; rtl_ancestor_commit
  #for ptr_offset use; t_desc_type.spec_commit
  #end generate_rtl_ancestor_special_method;
-- Calls the COMMIT method.
----------------------------------------------------------------------------------------------------
#expand generate_rtl_ancestor_special_method;
  #for rtl_name   use; rtl_ancestor_rollback
  #for ptr_offset use; t_desc_type.spec_rollback
  #end generate_rtl_ancestor_special_method;
-- Calls the ROLLBACK method.
----------------------------------------------------------------------------------------------------



#if #declared ondra; then;
----------------------------------------------------------------------------------------------------
procedure rtl_is_ancestor (
    A              : in t_rtl_tag;
    _B             : in t_rtl_tag)
    return t_rtl_logical32 =
-- Checks whether A is an ancestor of B (A < B).
----------------------------------------------------------------------------------------------------
var
  B                : t_rtl_tag;

begin
  B:=_B;
  while B<>nil loop
    B:=p_type_descriptor(B:unchecked)^.ancestor_tag;
    if A=B then 
      break;
      end if;
    end loop;
  result:=B<>nil;
  end rtl_is_ancestor;



----------------------------------------------------------------------------------------------------
procedure rtl_is_ancestor_or_equal (
    A              : in t_rtl_tag;
    B              : in t_rtl_tag)
    return t_rtl_logical32 =
-- Checks whether A is an ancestor of B or they are equal (A <= B).
----------------------------------------------------------------------------------------------------
var
  B                : t_rtl_tag;

begin
  B:=_B;
  while B<>nil and then A<>B loop
    B:=p_type_descriptor(B:unchecked)^.ancestor_tag;
    end loop;
  result:=B<>nil;
  end rtl_is_ancestor_or_equal;



----------------------------------------------------------------------------------------------------
procedure rtl_is_descendant (
    _A             : in t_rtl_tag;
    B              : in t_rtl_tag)
    return t_rtl_logical32 =
-- Checks whether A is a descendant of B (A > B).
----------------------------------------------------------------------------------------------------
var
  _A               : t_rtl_tag;

begin
  A:=_A;
  while A<>nil loop
    A:=p_type_descriptor(A:unchecked)^.ancestor_tag;
    if A=B then 
      break;
      end if;
    end loop;
  result:=A<>nil;
  end rtl_is_descendant;



----------------------------------------------------------------------------------------------------
procedure rtl_is_descendant_or_equal (
    _A             : in t_rtl_tag;
    B              : in t_rtl_tag)
    return t_rtl_logical32 =
-- Checks whether A is a descendant of B or they are equal (A >= B).
----------------------------------------------------------------------------------------------------
var
  A                : t_rtl_tag;

begin
  A:=_A;
  while A<>nil and then A<>B loop
    A:=p_type_descriptor(A:unchecked)^.ancestor_tag;
    end loop;
  result:=A<>nil;
  end rtl_is_descendant_or_equal;
#end if;



---- Compiler magic --------------------------------------------------------------------------------
#pragma assign(call_init             ,flex.tags.types.rtl_call_init             );
#pragma assign(call_entry            ,flex.tags.types.rtl_call_entry            );
#pragma assign(call_exit             ,flex.tags.types.rtl_call_exit             );
#pragma assign(call_adjust           ,flex.tags.types.rtl_call_adjust           );
#pragma assign(call_rollback         ,flex.tags.types.rtl_call_rollback         );
#pragma assign(call_commit           ,flex.tags.types.rtl_call_commit           );
#pragma assign(ancestor_init         ,flex.tags.types.rtl_ancestor_init         );
#pragma assign(ancestor_entry        ,flex.tags.types.rtl_ancestor_entry        );
#pragma assign(ancestor_exit         ,flex.tags.types.rtl_ancestor_exit         );
#pragma assign(ancestor_adjust       ,flex.tags.types.rtl_ancestor_adjust       );
#pragma assign(ancestor_rollback     ,flex.tags.types.rtl_ancestor_rollback     );
#pragma assign(ancestor_commit       ,flex.tags.types.rtl_ancestor_commit       );
#if #declared ondra; then;
#pragma assign(is_ancestor           ,flex.tags.types.rtl_is_ancestor           );
#pragma assign(is_ancestor_or_equal  ,flex.tags.types.rtl_is_ancestor_or_equal  );
#pragma assign(is_descendant         ,flex.tags.types.rtl_is_descendant         );
#pragma assign(is_descendant_or_equal,flex.tags.types.rtl_is_descendant_or_equal);
#end if;
----------------------------------------------------------------------------------------------------



end types;