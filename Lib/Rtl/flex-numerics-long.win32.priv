----------------------------------------------------------------------------------------------------
module private long =
-- Long numebers support
-- Flex Run-time Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------

with
  flex.checks;

----------------------------------------------------------------------------------------------------
procedure ul_n2q  =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov edx,result
    mov eax,a;
    mov [edx],eax;
    mov eax,0;
    mov [edx+4],eax;
    #end asm;
  end ul_n2q;



----------------------------------------------------------------------------------------------------
procedure ul_q2n  =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov edx,a;
    mov eax,[edx+4];
    cmp eax,0
    jz  @1;
    call rtl_handle_constraint_error;
@1:
    mov eax,[edx];
    mov result,eax;
    #end asm;
  end ul_q2n;



----------------------------------------------------------------------------------------------------
procedure ul_assign_qq =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov edx,a
    mov eax,[edx]
    mov ebx,[edx+4]
    mov edx,result
    mov [edx],eax
    mov [edx+4],ebx
    #end asm;
  end ul_assign_qq;



----------------------------------------------------------------------------------------------------
procedure ul_assign_nq =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov edx,result
    mov eax,a;
    mov [edx],eax;
    mov eax,0;
    mov [edx+4],eax;
    #end asm;
  end ul_assign_nq;



----------------------------------------------------------------------------------------------------
procedure ul_assign_qn =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov edx,a;
    mov eax,[edx+4];
    cmp eax,0
    jz  @1;
    call rtl_handle_constraint_error;
@1:
    mov eax,[edx];
    mov result,eax;
    #end asm;
  end ul_assign_qn;



----------------------------------------------------------------------------------------------------
procedure ul_add_qq =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov edx,a
    mov eax,[edx]
    mov ebx,[edx+4]
    mov edx,result
    mov [edx],eax
    mov [edx+4],ebx
    mov edx,b
    mov eax,[edx]
    mov ebx,[edx+4]
    mov edx,result
    add [edx],eax
    adc [edx+4],ebx
    jnc @1
    call rtl_handle_constraint_error;
@1:
    #end asm;
  end ul_add_qq;



----------------------------------------------------------------------------------------------------
procedure ul_add_assign_qq =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov edx,b
    mov eax,[edx]
    mov ebx,[edx+4]
    mov edx,result
    add [edx],eax
    adc [edx+4],ebx
    jnc @1
    call rtl_handle_constraint_error;
@1:
    #end asm;
  end ul_add_assign_qq;



----------------------------------------------------------------------------------------------------
procedure ul_sub_qq =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov edx,a
    mov eax,[edx]
    mov ebx,[edx+4]
    mov edx,result
    mov [edx],eax
    mov [edx+4],ebx
    mov edx,b
    mov eax,[edx]
    mov ebx,[edx+4]
    mov edx,result
    sub [edx],eax
    sbb [edx+4],ebx
    jnc @1
    call rtl_handle_constraint_error;
@1:
    #end asm;
  end ul_sub_qq;



----------------------------------------------------------------------------------------------------
procedure ul_sub_assign_qq =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov edx,b
    mov eax,[edx]
    mov ebx,[edx+4]
    mov edx,result
    sub [edx],eax
    sbb [edx+4],ebx
    jnc @1
    call rtl_handle_constraint_error;
@1:
    #end asm;
  end ul_sub_assign_qq;



----------------------------------------------------------------------------------------------------
procedure ul_mul_qq =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov ebx,a
    mov edx,b
    mov eax,[ebx+4]  --HIA
    mov ecx,[edx+4]  --HIB
    --test for both hiwords zero.
    or  ecx,eax
    mov ecx,[edx]    --LOB
    jnz @1
    -- both are zero, just mult ALO and BLO
    mov eax,[ebx]    --LOA
    mul {eax,}ecx
    jmp @3
@1:
    --test for both hiwords nonzero
    cmp eax,0        --HIA
    jz @2
    mov ebx,[edx+4]  --HIB
    cmp ebx,0
    jz @2
    call rtl_handle_constraint_error;
@2:
    mul {eax,}ecx    --a=HIA c=LOB
    mov esi,eax
    mov ebx,a
    mov eax,[ebx]    --LOA
    mov ebx,b
    mul {eax,}<4>[ebx+4]    --a=LOA b=HIB
    add esi,eax
    mov ebx,a
    mov eax,[ebx]    --LOA
    mul {eax,}ecx    --a=LOA c=LOB
    add edx,esi
    jnc @3
    call rtl_handle_constraint_error;
@3:
    mov ebx,result
    mov [ebx],eax    --LO
    mov [ebx+4],edx  --HI
    #end asm;
  end ul_mul_qq;



----------------------------------------------------------------------------------------------------
procedure ul_mul_assign_qq =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov ebx,result
    mov edx,b
    mov eax,[ebx+4]  --HIA
    mov ecx,[edx+4]  --HIB
    --test for both hiwords zero.
    or  ecx,eax
    mov ecx,[edx]    --LOB
    jnz @1
    -- both are zero, just mult ALO and BLO
    mov eax,[ebx]    --LOA
    mul {eax,}ecx
    jmp @3
@1:
    --test for both hiwords nonzero
    cmp eax,0        --HIA
    jz @2
    mov ebx,[edx+4]  --HIB
    cmp ebx,0
    jz @2
    call rtl_handle_constraint_error;
@2:
    mul {eax,}ecx    --a=HIA c=LOB
    mov esi,eax
    mov ebx,result
    mov eax,[ebx]    --LOA
    mov ebx,b
    mul {eax,}<4>[ebx+4]    --a=LOA b=HIB
    add esi,eax
    mov ebx,result
    mov eax,[ebx]    --LOA
    mul {eax,}ecx    --a=LOA c=LOB
    add edx,esi
    jnc @3
    call rtl_handle_constraint_error;
@3:
    mov ebx,result
    mov [ebx],eax    --LO
    mov [ebx+4],edx  --HI
    #end asm;
  end ul_mul_assign_qq;



----------------------------------------------------------------------------------------------------
procedure ul_div_qq =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov esi,b;
    mov eax,[esi+4];
    or  eax,eax;
    jnz @1;
    mov ecx,[esi];
    mov esi,a;
    mov eax,[esi+4];
    xor edx,edx;
    div ecx;
    mov ebx,eax;
    mov eax,[esi];
    div ecx;
    mov edx,ebx;
    jmp @2;
@1:
    mov ecx,eax;
    mov ebx,[esi];
    mov esi,a;
    mov edx,[esi+4];
    mov eax,[esi];
@3:
    shr ecx,1;
    rcr ebx,1;
    shr edx,1;
    rcr eax,1;
    or  ecx,ecx;
    jnz @3;
    div ebx;

    push eax;
    mov esi,b;
    mul <4>[esi+4];
    mov ecx,eax;
    mov eax,b;
    mov eax,[eax];
    pop esi;

    mul esi;
    add edx,ecx;
    jc  @4;

    mov ecx,a;
    cmp edx,[ecx+4];
    ja  @4;
    jb  @5;
    cmp eax,[ecx];
    jbe @5;
@4:
    dec esi;
@5:
    xor edx,edx;
    mov eax,esi;
@2:
    mov ebx,result
    mov [ebx],eax    --LO
    mov [ebx+4],edx  --HI
  #end asm;
  end ul_div_qq;



----------------------------------------------------------------------------------------------------
procedure ul_div_assign_qq =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov esi,b;
    mov eax,[esi+4];
    or  eax,eax;
    jnz @1;
    mov ecx,[esi];
    mov esi,result;
    mov eax,[esi+4];
    xor edx,edx;
    div ecx;
    mov ebx,eax;
    mov eax,[esi];
    div ecx;
    mov edx,ebx;
    jmp @2;
@1:
    mov ecx,eax;
    mov ebx,[esi];
    mov esi,result;
    mov edx,[esi+4];
    mov eax,[esi];
@3:
    shr ecx,1;
    rcr ebx,1;
    shr edx,1;
    rcr eax,1;
    or  ecx,ecx;
    jnz @3;
    div ebx;

    push eax;
    mov esi,b;
    mul <4>[esi+4];
    mov ecx,eax;
    mov eax,b;
    mov eax,[eax];
    pop esi;

    mul esi;
    add edx,ecx;
    jc  @4;

    mov ecx,result;
    cmp edx,[ecx+4];
    ja  @4;
    jb  @5;
    cmp eax,[ecx];
    jbe @5;
@4:
    dec esi;
@5:
    xor edx,edx;
    mov eax,esi;
@2:
    mov ebx,result
    mov [ebx],eax    --LO
    mov [ebx+4],edx  --HI
  #end asm;
  end ul_div_assign_qq;



----------------------------------------------------------------------------------------------------
procedure ul_mod_qq =
----------------------------------------------------------------------------------------------------
begin
  raise implementation_error;
  end ul_mod_qq;



----------------------------------------------------------------------------------------------------
procedure ul_mod_assign_qq =
----------------------------------------------------------------------------------------------------
begin
  raise implementation_error;
  end ul_mod_assign_qq;


----------------------------------------------------------------------------------------------------
-- Signed
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure ul_i2s  =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov ebx,result
    mov eax,a;
    cdq
    mov [ebx],eax;
    mov [ebx+4],edx;
    #end asm;
  end ul_i2s;



----------------------------------------------------------------------------------------------------
procedure ul_s2i  =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov edx,a;
    mov eax,[edx+4];
    cmp eax,$FFFF_FFFF
    jz  @1;
    call rtl_handle_constraint_error;
@1:
    mov eax,[edx];
    mov result,eax;
    #end asm;
  end ul_s2i;



----------------------------------------------------------------------------------------------------
procedure ul_assign_ss =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov edx,a
    mov eax,[edx]
    mov ebx,[edx+4]
    mov edx,result
    mov [edx],eax
    mov [edx+4],ebx
    #end asm;
  end ul_assign_ss;



----------------------------------------------------------------------------------------------------
procedure ul_assign_is =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov ebx,result
    mov eax,a;
    cdq
    mov [ebx],eax;
    mov [ebx+4],eax;
    #end asm;
  end ul_assign_is;



----------------------------------------------------------------------------------------------------
procedure ul_assign_si =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov edx,a;
    mov eax,[edx+4];
    cmp eax,$FFFF_FFFF
    jz  @1;
    call rtl_handle_constraint_error;
@1:
    mov eax,[edx];
    mov result,eax;
    #end asm;
  end ul_assign_si;



----------------------------------------------------------------------------------------------------
procedure ul_add_ss =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov edx,a
    mov eax,[edx]
    mov ebx,[edx+4]
    mov edx,result
    mov [edx],eax
    mov [edx+4],ebx
    mov edx,b
    mov eax,[edx]
    mov ebx,[edx+4]
    mov edx,result
    add [edx],eax
    adc [edx+4],ebx
    jnc @1
    call rtl_handle_constraint_error;
@1:
    #end asm;
  end ul_add_ss;



----------------------------------------------------------------------------------------------------
procedure ul_add_assign_ss =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov edx,b
    mov eax,[edx]
    mov ebx,[edx+4]
    mov edx,result
    add [edx],eax
    adc [edx+4],ebx
    jnc @1
    call rtl_handle_constraint_error;
@1:
    #end asm;
  end ul_add_assign_ss;



----------------------------------------------------------------------------------------------------
procedure ul_sub_ss =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov edx,a
    mov eax,[edx]
    mov ebx,[edx+4]
    mov edx,result
    mov [edx],eax
    mov [edx+4],ebx
    mov edx,b
    mov eax,[edx]
    mov ebx,[edx+4]
    mov edx,result
    sub [edx],eax
    sbb [edx+4],ebx
    jnc @1
    call rtl_handle_constraint_error;
@1:
    #end asm;
  end ul_sub_ss;



----------------------------------------------------------------------------------------------------
procedure ul_sub_assign_ss =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov edx,b
    mov eax,[edx]
    mov ebx,[edx+4]
    mov edx,result
    sub [edx],eax
    sbb [edx+4],ebx
    jnc @1
    call rtl_handle_constraint_error;
@1:
    #end asm;
  end ul_sub_assign_ss;



----------------------------------------------------------------------------------------------------
procedure ul_mul_ss =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov ebx,a
    mov edx,b
    mov eax,[ebx+4]  --HIA
    mov ecx,[edx+4]  --HIB
    --test for both hiwords zero.
    or  ecx,eax
    mov ecx,[edx]    --LOB
    jnz @1
    -- both are zero, just mult ALO and BLO
    mov eax,[ebx]    --LOA
    mul {eax,}ecx
    jmp @3
@1:
    --test for both hiwords nonzero
    cmp eax,0        --HIA
    jz @2
    mov ebx,[edx+4]  --HIB
    cmp ebx,0
    jz @2
    call rtl_handle_constraint_error;
@2:
    mul {eax,}ecx    --a=HIA c=LOB
    mov esi,eax
    mov ebx,a
    mov eax,[ebx]    --LOA
    mov ebx,b
    mul {eax,}<4>[ebx+4]    --a=LOA b=HIB
    add esi,eax
    mov ebx,a
    mov eax,[ebx]    --LOA
    mul {eax,}ecx    --a=LOA c=LOB
    add edx,esi
    jnc @3
    call rtl_handle_constraint_error;
@3:
    mov ebx,result
    mov [ebx],eax    --LO
    mov [ebx+4],edx  --HI
    #end asm;
  end ul_mul_ss;



----------------------------------------------------------------------------------------------------
procedure ul_mul_assign_ss =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov ebx,result
    mov edx,b
    mov eax,[ebx+4]  --HIA
    mov ecx,[edx+4]  --HIB
    --test for both hiwords zero.
    or  ecx,eax
    mov ecx,[edx]    --LOB
    jnz @1
    -- both are zero, just mult ALO and BLO
    mov eax,[ebx]    --LOA
    mul {eax,}ecx
    jmp @3
@1:
    --test for both hiwords nonzero
    cmp eax,0        --HIA
    jz @2
    mov ebx,[edx+4]  --HIB
    cmp ebx,0
    jz @2
    call rtl_handle_constraint_error;
@2:
    mul {eax,}ecx    --a=HIA c=LOB
    mov esi,eax
    mov ebx,result
    mov eax,[ebx]    --LOA
    mov ebx,b
    mul {eax,}<4>[ebx+4]   --a=LOA b=HIB
    add esi,eax
    mov ebx,result
    mov eax,[ebx]    --LOA
    mul {eax,}ecx    --a=LOA c=LOB
    add edx,esi
    jnc @3
    call rtl_handle_constraint_error;
@3:
    mov ebx,result
    mov [ebx],eax    --LO
    mov [ebx+4],edx  --HI
    #end asm;
  end ul_mul_assign_ss;



----------------------------------------------------------------------------------------------------
procedure ul_div_ss =
----------------------------------------------------------------------------------------------------
var
    a2             : t_unsigned64;
    b2             : t_unsigned64;

begin
  #syntax asm;
    xor edi,edi
    mov esi,a
    mov eax,[esi+4]
    or  eax,eax
    jge @6
    inc edi
    mov edx,[esi]
    neg eax
    neg edx
    sbb eax,0
    lea esi,a2
    mov [esi+4],eax
    mov [esi],edx
@6:
    mov esi,b
    mov eax,[esi+4]
    or  eax,eax
    jge @7
    inc edi
    mov edx,[esi]
    neg eax
    neg edx
    sbb eax,0
    lea esi,b2
    mov [esi+4],eax
    mov [esi],edx
@7:
    or  eax,eax;
    jnz @1;
    mov ecx,[esi];
    lea esi,a2;
    mov eax,[esi+4];
    xor edx,edx;
    div ecx;
    mov ebx,eax;
    mov eax,[esi];
    div ecx;
    mov edx,ebx;
    jmp @8;
@1:
    mov ebx,eax;
    mov ecx,[esi];
    lea esi,a2;
    mov edx,[esi+4];
    mov eax,[esi];
@3:
    shr ebx,1;
    rcr ecx,1;
    shr edx,1;
    rcr eax,1;
    or  ebx,ebx;
    jnz @3;
    div ecx;

    push eax;
    lea esi,b2;
    mul <4>[esi+4];
    mov ecx,eax;
    mov eax,[esi];
    pop esi;

    mul esi;
    add edx,ecx;
    jc  @4;

    lea ecx,a2;
    cmp edx,[ecx+4];
    ja  @4;
    jb  @5;
    cmp eax,[ecx];
    jbe @5;
@4:
    dec esi;
@5:
    xor edx,edx;
    mov eax,esi;
@8:
    dec edi
    jnz @2
    neg edx
    neg eax
    sbb edx,0
@2:
    mov ebx,result
    mov [ebx],eax    --LO
    mov [ebx+4],edx  --HI
  #end asm;
  end ul_div_ss;



----------------------------------------------------------------------------------------------------
procedure ul_div_assign_ss =
----------------------------------------------------------------------------------------------------
var
    a2             : t_unsigned64;
    b2             : t_unsigned64;

begin
  #syntax asm;
    xor edi,edi
    mov esi,result
    mov eax,[esi+4]
    or  eax,eax
    jge @6
    inc edi
    mov edx,[esi]
    neg eax
    neg edx
    sbb eax,0
    lea esi,a2
    mov [esi+4],eax
    mov [esi],edx
@6:
    mov esi,b
    mov eax,[esi+4]
    or  eax,eax
    jge @7
    inc edi
    mov edx,[esi]
    neg eax
    neg edx
    sbb eax,0
    lea esi,b2
    mov [esi+4],eax
    mov [esi],edx
@7:
    or  eax,eax;
    jnz @1;
    mov ecx,[esi];
    lea esi,a2;
    mov eax,[esi+4];
    xor edx,edx;
    div ecx;
    mov ebx,eax;
    mov eax,[esi];
    div ecx;
    mov edx,ebx;
    jmp @8;
@1:
    mov ebx,eax;
    mov ecx,[esi];
    lea esi,a2;
    mov edx,[esi+4];
    mov eax,[esi];
@3:
    shr ebx,1;
    rcr ecx,1;
    shr edx,1;
    rcr eax,1;
    or  ebx,ebx;
    jnz @3;
    div ecx;

    push eax;
    lea esi,b2;
    mul <4>[esi+4];
    mov ecx,eax;
    mov eax,[esi];
    pop esi;

    mul esi;
    add edx,ecx;
    jc  @4;

    mov ecx,result;
    cmp edx,[ecx+4];
    ja  @4;
    jb  @5;
    cmp eax,[ecx];
    jbe @5;
@4:
    dec esi;
@5:
    xor edx,edx;
    mov eax,esi;
@8:
    dec edi
    jnz @2
    neg edx
    neg eax
    sbb edx,0
@2:
    mov ebx,result
    mov [ebx],eax    --LO
    mov [ebx+4],edx  --HI
  #end asm;
  end ul_div_assign_ss;



----------------------------------------------------------------------------------------------------
procedure ul_mod_ss =
----------------------------------------------------------------------------------------------------
var
    a2             : t_unsigned64;
    b2             : t_unsigned64;

begin
  #syntax asm;
    xor edi,edi
    mov esi,a
    mov eax,[esi+4]
    or  eax,eax
    jge @1
    inc edi
    mov edx,[esi]
    neg eax
    neg edx
    sbb eax,0
    lea esi,a2
    mov [esi+4],eax
    mov [esi],edx
@1:
    mov esi,b
    mov eax,[esi+4]
    or  eax,eax
    jge @2
    mov edx,[esi]
    neg eax
    neg edx
    sbb eax,0
    lea esi,b2
    mov [esi+4],eax
    mov [esi],edx
@2:
    or  eax,eax
    jnz @3
    mov ecx,[esi]
    lea esi,a2
    mov eax,[esi+4]
    xor edx,edx
    div ecx
    mov eax,[esi]
    div ecx
    mov eax,edx
    xor edx,edx
    dec edi
    jns @4
    jmp @8
@3:
    mov ebx,eax;
    lea esi,b2;
    mov ecx,[esi];
    lea esi,a2;
    mov edx,[esi+4];
    mov eax,[esi];
@5:
    shr ebx,1;
    rcr ecx,1;
    shr edx,1;
    rcr eax,1;
    or  ebx,ebx;
    jnz @5;
    div ecx;
    mov ecx,eax;
    lea esi,b2;
    mul <4>[esi+4];
    xchg ecx,eax
    mul <4>[esi]
    add edx,ecx
    jc  @6
    lea esi,a2
    cmp edx,[esi+4]
    ja  @6
    jb  @7
    cmp eax,[esi]
    jbe @7
@6:
    lea esi,b2
    sub eax,[esi]
    sbb edx,[esi+4]
@7:
    lea esi,a2
    sub eax,[esi]
    sbb edx,[esi+4]
    dec edi
    jns @8
@4:
    neg edx
    neg eax
    sbb edx,0
@8:
    mov ebx,result
    mov [ebx],eax    --LO
    mov [ebx+4],edx  --HI
  #end asm;
  end ul_mod_ss;



----------------------------------------------------------------------------------------------------
procedure ul_mod_assign_ss =
----------------------------------------------------------------------------------------------------
var
    a2             : t_unsigned64;
    b2             : t_unsigned64;

begin
  #syntax asm;
    xor edi,edi
    mov esi,result
    mov eax,[esi+4]
    or  eax,eax
    jge @1
    inc edi
    mov edx,[esi]
    neg eax
    neg edx
    sbb eax,0
    lea esi,a2
    mov [esi+4],eax
    mov [esi],edx
@1:
    mov esi,b
    mov eax,[esi+4]
    or  eax,eax
    jge @2
    mov edx,[esi]
    neg eax
    neg edx
    sbb eax,0
    lea esi,b2
    mov [esi+4],eax
    mov [esi],edx
@2:
    or  eax,eax
    jnz @3
    mov ecx,[esi]
    lea esi,a2
    mov eax,[esi+4]
    xor edx,edx
    div ecx
    mov eax,[esi]
    div ecx
    mov eax,edx
    xor edx,edx
    dec edi
    jns @4
    jmp @8
@3:
    mov ebx,eax;
    lea esi,b2;
    mov ecx,[esi];
    lea esi,a2;
    mov edx,[esi+4];
    mov eax,[esi];
@5:
    shr ebx,1;
    rcr ecx,1;
    shr edx,1;
    rcr eax,1;
    or  ebx,ebx;
    jnz @5;
    div ecx;
    mov ecx,eax;
    lea esi,b2;
    mul <4>[esi+4];
    xchg ecx,eax
    mul <4>[esi]
    add edx,ecx
    jc  @6
    lea esi,a2
    cmp edx,[esi+4]
    ja  @6
    jb  @7
    cmp eax,[esi]
    jbe @7
@6:
    lea esi,b2
    sub eax,[esi]
    sbb edx,[esi+4]
@7:
    lea esi,a2
    sub eax,[esi]
    sbb edx,[esi+4]
    dec edi
    jns @8
@4:
    neg edx
    neg eax
    sbb edx,0
@8:
    mov ebx,result
    mov [ebx],eax    --LO
    mov [ebx+4],edx  --HI
  #end asm;
  end ul_mod_assign_ss;
end long;