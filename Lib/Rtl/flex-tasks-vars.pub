---------------------------------------------------------------------------------------------------
module public vars =
-- Task variables
-- Flex Run-time Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------
with
    tags.types;

const
    tv_hash_size   = 101;

type
    t_task_var_id = t_rtl_native_unsigned;

    t_tv_var;
    p_tv_var = ^t_tv_var;
    t_tv_var = record
      task_varid  : t_task_var_id;
      next_var     : p_tv_var;
      inheritable  : t_rtl_logical;
      data         : t_rtl_pointer;
      end record;

    t_task_vars = record
      hash_tv_var  : array 0..tv_hash_size-1 of p_tv_var;
      end record;
    p_task_vars = ^t_task_vars;


----------------------------------------------------------------------------------------------------
procedure rtl_alloc_task_var_id (
    typetag        : in t_rtl_tag;               -- tag of type
    task_varid     : out ref t_task_var_id;      -- handle to task var
    initvalue      : in unchecked;               -- pointer to binary initialization data
                                                 -- can be nil
    inheritable    : in t_rtl_logical:=false;
    immediate      : in t_rtl_logical:=false);
-- allocate task variable handle
----------------------------------------------------------------------------------------------------
procedure rtl_free_task_var_id (
    task_varid     : in out ref t_task_var_id);  -- handle to task var
-- free task variable handle
----------------------------------------------------------------------------------------------------
procedure rtl_get_task_var (
    task_varid     : in t_task_var_id            -- handle to task var
    ) return t_rtl_pointer;
-- returns pointer to task_var
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
procedure rtl_get_task_var_other (
    task_varid    : in t_task_var_id;            -- handle to task var
    taskhead      : in p_task_header
    ) return t_rtl_pointer;
-- returns pointer to task_var
----------------------------------------------------------------------------------------------------
procedure rtl_create_task_var (
    task_varid     : in t_task_var_id;           -- handle to task var
    taskhead       : in p_task_header;
    origtaskhead   : in p_task_header:=nil
    ) return t_rtl_pointer;
-- returns pointer to task_var
----------------------------------------------------------------------------------------------------
procedure rtl_free_task_var (
    task_varid     : in t_task_var_id;           -- handle to task var
    currtaskhead   : in p_task_header:=nil);
----------------------------------------------------------------------------------------------------
procedure rtl_set_task_var_inheritance (
    task_varid     : in t_task_var_id;           -- handle to task var
    inheritable    : in t_rtl_logical
    );
-- sets inheritance
----------------------------------------------------------------------------------------------------
procedure rtl_initialize_all_task_vars (
    taskhead       : in p_task_header;
    origtaskhead   : in p_task_header
    );
-- copy all inheritable & immediate task_vars
----------------------------------------------------------------------------------------------------
procedure rtl_discard_all_task_vars (
    taskhead       : in p_task_header
    );
-- discard all task_vars
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
#separate public os;
----------------------------------------------------------------------------------------------------

---- compiler magic --------------------------------------------------------------------------------
#pragma assign(alloc_task_var_id,rtl_alloc_task_var_id);
#pragma assign(get_task_var     ,rtl_get_task_var);
#pragma assign(free_task_var_id ,rtl_free_task_var_id);
----------------------------------------------------------------------------------------------------

end vars;