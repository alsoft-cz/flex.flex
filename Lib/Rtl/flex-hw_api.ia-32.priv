----------------------------------------------------------------------------------------------------
module private hw_api =
-- Flex Run-time Library
-- WIN32 API
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------


#if rtl_debug then;
  --%%TODO predelat taky na macro
  ---------------------------------------------------------------------------------------------------
  procedure test_align(locked_value: t_rtl_pointer) =
  #pragma stackframe(test_align,stack_pointer_relative);
  ---------------------------------------------------------------------------------------------------
  begin
    if  (t_rtl_native_mod_unsigned(locked_value:unchecked) and t_rtl_native_mod_unsigned($03))<>0 then
      raise implementation_error;
      end if;
    end test_align;
#else;
  ---------------------------------------------------------------------------------------------------
  #template test_align(locked_value);
  -- test zarovnani adresy na 128 bitu
  ----------------------------------------------------------------------------------------------------
  -- intentionally left blank
    #end test_align;
  #end if;



----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_compare_exchange =
----------------------------------------------------------------------------------------------------
begin
  test_align(^locked_value);
  #syntax asm;
    mov            ecx,locked_value              --address
    mov            edx,new_value                 --exchange
    mov            eax,when_locked_eq            --compare
    lockbus 
    cmpxchg        [ecx],edx
    mov            ecx,old_value
    mov            [ecx],eax                     --result
    #end asm;
  end rtl_interlocked_compare_exchange;



----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_compare_exchange_ptr =
----------------------------------------------------------------------------------------------------
begin
  test_align(^locked_value);
  #syntax asm;
    mov            ecx,locked_value              --address
    mov            edx,new_value                 --exchange
    mov            eax,when_locked_eq            --compare
    lockbus 
    cmpxchg        [ecx],edx
    mov            ecx,old_value
    mov            [ecx],eax                     --result
    #end asm;
  end rtl_interlocked_compare_exchange_ptr;



----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_read_ptr =
----------------------------------------------------------------------------------------------------
begin
  test_align(^locked_value);
  #syntax asm;
    mov            ebx,locked_value              --address
    --lockbus 
    mov            eax,[ebx]
    mov            ebx,value
    mov            [ebx],eax                     --result
    #end asm;
  end rtl_interlocked_read_ptr;



----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_exchange =
----------------------------------------------------------------------------------------------------
begin
  test_align(^locked_value);
  #syntax asm;
    mov            ecx,locked_value              --address
@1:
    mov            edx,new_value                 --exchange
    mov            eax,[ecx]                     --compare
    lockbus 
    cmpxchg        [ecx],edx
    cmp            eax,edx
    jnz            @1
    mov            ecx,old_value
    mov            [ecx],eax                     --result
    #end asm;
  end rtl_interlocked_exchange;



----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_exchange_add =
----------------------------------------------------------------------------------------------------
begin
  test_align(^locked_value);
  #syntax asm;
    mov            ecx,locked_value              --address
    mov            eax,add_value                 --add
    lockbus
    xadd [ecx],eax
    mov            ecx,old_value
    mov            [ecx],eax                     --result
    #end asm;
  end rtl_interlocked_exchange_add;



----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_exchange_add_new =
----------------------------------------------------------------------------------------------------
begin
  test_align(^locked_value);
  #syntax asm;
    mov            ecx,locked_value              --address
    mov            eax,add_value                 --add
    lockbus
    xadd [ecx],eax
    mov            ecx,new_value
    add            eax,add_value
    mov            [ecx],eax                     --result
    #end asm;
  end rtl_interlocked_exchange_add_new;



----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_inc_out =
----------------------------------------------------------------------------------------------------
begin
  rtl_interlocked_exchange_add(locked_value,1,old_value);
  end rtl_interlocked_inc_out;



----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_dec_out =
----------------------------------------------------------------------------------------------------
begin
  rtl_interlocked_exchange_add(locked_value,-1,old_value);
  end rtl_interlocked_dec_out;



----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_inc =
----------------------------------------------------------------------------------------------------
var
  old_value        : t_rtl_native_signed;

begin
  rtl_interlocked_exchange_add(locked_value,1,old_value);
  end rtl_interlocked_inc;



----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_dec =
----------------------------------------------------------------------------------------------------
var
    old_value      : t_rtl_native_signed;

begin
  rtl_interlocked_exchange_add(locked_value,-1,old_value);
  end rtl_interlocked_dec;



----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_dec_if_greater_than =
----------------------------------------------------------------------------------------------------
var
    new_value      : t_rtl_native_signed;
    exch_value     : t_rtl_native_signed;

begin
  loop
    old_value:=t_rtl_native_signed(locked_value^:unchecked);
    if old_value>when_locked_gt then
      new_value:=old_value-sub_value;
    else
      new_value:=old_value;
      end if;
    rtl_interlocked_compare_exchange(locked_value,new_value,old_value,exch_value);
    if exch_value=old_value then
      return;
      end if;
    pause_nop;
    end loop;
  end rtl_interlocked_dec_if_greater_than;



----------------------------------------------------------------------------------------------------
procedure rtl_intelocked_increment_if_less_than =
----------------------------------------------------------------------------------------------------
var
    new_value      : t_rtl_native_signed;
    exch_value     : t_rtl_native_signed;

begin
  loop
    old_value:=t_rtl_native_signed(locked_value^:unchecked);
    if old_value<when_locked_lt then
      new_value:=old_value+add_value;
    else
      new_value:=old_value;
      end if;
    rtl_interlocked_compare_exchange(locked_value,new_value,old_value,exch_value);
    if exch_value=old_value then
      return;
      end if;
    pause_nop;
    end loop;
  end rtl_intelocked_increment_if_less_than;



----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_exchange_add_half =
----------------------------------------------------------------------------------------------------
begin
  #syntax asm;
    mov            ecx,locked_value              --address
    mov            ax,add_value                  --add
    lockbus
    xadd [ecx],ax
    mov            edx,old_value
    mov            [edx],ax                      --result
    #end asm;
  end rtl_interlocked_exchange_add_half;



----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_inc_out_half =
----------------------------------------------------------------------------------------------------
begin
  rtl_interlocked_exchange_add_half(locked_value,1,old_value);
  end rtl_interlocked_inc_out_half;



----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_dec_out_half =
----------------------------------------------------------------------------------------------------
begin
  rtl_interlocked_exchange_add_half(locked_value,-1,old_value);
  end rtl_interlocked_dec_out_half;



----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_compare_exchange_double =
----------------------------------------------------------------------------------------------------
begin
  test_align(^locked_value);
  #syntax asm;
    mov            esi,locked_value                                       --address
    mov            eax,when_locked_eq
    mov            edx,[eax].t_rtl_double_native_signed.high            --compare
    mov            eax,[eax].t_rtl_double_native_signed.low             --compare
    mov            ecx,new_value
    mov            ebx,[ecx].t_rtl_double_native_signed.low             --exchange
    mov            ecx,[ecx].t_rtl_double_native_signed.high            --exchange
    lockbus
    cmpxchg8b      <t_rtl_double_native_signed>[esi]
    mov            ecx,old_value
    mov            [ecx].t_rtl_double_native_signed.high,edx            --result
    mov            [ecx].t_rtl_double_native_signed.low,eax             --result
    #end asm;
  end rtl_interlocked_compare_exchange_double;





{
----------------------------------------------------------------------------------------------------
procedure rtl_intelocked_increment_if_greater_than_zero(
    locked_value   : p_rtl_native_signed;
    add_value      : in t_rtl_native_signed;
    old_value      : out t_rtl_native_signed) =
----------------------------------------------------------------------------------------------------
var
    new_value      : t_rtl_native_signed;
    exch_value     : t_rtl_native_signed;

begin
  loop
    old_value:=locked_value^;
    if old_value>0 then
      new_value:=old_value+add_value;
    else
      new_value:=old_value;
      end if;
    rtl_interlocked_compare_exchange(locked_value,new_value,old_value,exch_value);
    if exch_value=old_value then
      return;
      end if;
    end loop;
  end rtl_intelocked_increment_if_greater_than_zero;


----------------------------------------------------------------------------------------------------
procedure rtl_intelocked_increment_if_lesser_than_zero(
    locked_value   : p_rtl_native_signed;
    add_value      : in t_rtl_native_signed;
    old_value      : out t_rtl_native_signed) =
----------------------------------------------------------------------------------------------------
var
    new_value      : t_rtl_native_signed;
    exch_value     : t_rtl_native_signed;

begin
  loop
    old_value:=locked_value^;
    if old_value<0 then
      new_value:=old_value+add_value;
    else
      new_value:=old_value;
      end if;
    rtl_interlocked_compare_exchange(locked_value,new_value,old_value,exch_value);
    if exch_value=old_value then
      return;
      end if;
    end loop;
  end rtl_intelocked_increment_if_lesser_than_zero;



----------------------------------------------------------------------------------------------------
procedure rtl_intelocked_inc_if_greater_than(
    locked_value   : p_rtl_native_signed;
    add_value      : in t_rtl_native_signed;
    when_locked_gt : in t_rtl_native_signed;
    old_value      : out t_rtl_native_signed) =
----------------------------------------------------------------------------------------------------
var
    new_value      : t_rtl_native_signed;
    exch_value     : t_rtl_native_signed;

begin
  loop
    old_value:=locked_value^;
    if old_value>when_locked_gt then
      new_value:=old_value+add_value;
    else
      new_value:=old_value;
      end if;
    rtl_interlocked_compare_exchange(locked_value,new_value,old_value,exch_value);
    if exch_value=old_value then
      return;
      end if;
    end loop;
  end rtl_intelocked_inc_if_greater_than;
}

end hw_api;