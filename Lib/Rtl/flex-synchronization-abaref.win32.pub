type
  t_rtl_abaref_item;
  p_rtl_abaref_item = ^t_rtl_abaref_item for machine_pointer use true;
  t_rtl_abaref_pointer;
  p_rtl_abaref_pointer = ^t_rtl_abaref_pointer;

----------------------------------------------------------------------------------------------------
procedure rtl_interlocked_abaref_compare_exchange (
    locked_value   : in p_rtl_abaref_pointer;
    new_value      : in t_rtl_abaref_pointer;
    when_locked_eq : in t_rtl_abaref_pointer;
    old_value      : out t_rtl_abaref_pointer);
----------------------------------------------------------------------------------------------------
procedure rtl_abaref_copy_pointer_both (
    target_pointer : in out aliased t_rtl_abaref_pointer;  -- shared interlocked 
    when_tg_eq     : in p_rtl_abaref_pointer;          -- nil allowed 
    source_pointer : in out ref t_rtl_abaref_pointer;  -- shared interlocked 
    when_sc_eq     : in p_rtl_abaref_pointer;          -- nil allowed 
    new_target     : in p_rtl_abaref_pointer;          -- nil allowed 
    success        : out t_rtl_logical8);
----------------------------------------------------------------------------------------------------
procedure rtl_abaref_copy_pointer_target (
    target_pointer : in out aliased t_rtl_abaref_pointer;  -- shared interlocked 
    when_tg_eq     : in p_rtl_abaref_pointer;          -- nil allowed 
    source_pointer : in out ref t_rtl_abaref_pointer;  -- thread private
    new_target     : in p_rtl_abaref_pointer;          -- nil allowed 
    success        : out t_rtl_logical8);
----------------------------------------------------------------------------------------------------
procedure rtl_abaref_copy_pointer_source (
    target_pointer : in out ref t_rtl_abaref_pointer;  -- thread private
    source_pointer : in out ref t_rtl_abaref_pointer;  -- shared interlocked 
    when_sc_eq     : in p_rtl_abaref_pointer;          -- nil allowed 
    success        : out t_rtl_logical8);
----------------------------------------------------------------------------------------------------
procedure rtl_abaref_copy_pointer_none (
    target_pointer : in out ref t_rtl_abaref_pointer;  -- thread private
    source_pointer : in out ref t_rtl_abaref_pointer;  -- thread private
    success        : out t_rtl_logical8);
----------------------------------------------------------------------------------------------------
procedure rtl_abaref_discard (
    target_pointer : in out ref t_rtl_abaref_pointer;  -- thread private
    success        : out t_rtl_logical8);
----------------------------------------------------------------------------------------------------
procedure rtl_abaref_new (
    node           : out ref t_rtl_abaref_pointer);
----------------------------------------------------------------------------------------------------
