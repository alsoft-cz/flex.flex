----------------------------------------------------------------------------------------------------
-- kriticka sekce implementovana mutexem
----------------------------------------------------------------------------------------------------

type
  t_rtl_critical   = t_kernel_object; --%%TODO t_winnt_critical_section;

----------------------------------------------------------------------------------------------------
procedure rtl_critical_new =
-- Create and initialize critical object.
----------------------------------------------------------------------------------------------------
begin
  critical_object:unchecked:=CreateMutexA(nil,false,nil);
  if t_rtl_unsigned32(critical_object:unchecked)=INVALID_HANDLE then 
    raise synchronization_error;
    end if;
  end rtl_critical_new;

----------------------------------------------------------------------------------------------------
procedure rtl_critical_discard =
-- Discard critical object.
----------------------------------------------------------------------------------------------------
begin
  if not CloseHandle(critical_object) then 
    raise synchronization_error;
    end if;
  t_rtl_unsigned32(critical_object:unchecked):=INVALID_HANDLE;
  end rtl_critical_discard;


----------------------------------------------------------------------------------------------------
procedure rtl_critical_set_spin =
----------------------------------------------------------------------------------------------------
begin
  -- zadne spinovani na mutexu
  end rtl_critical_set_spin;


----------------------------------------------------------------------------------------------------
procedure rtl_critical_lock =
-- Lock critical.
----------------------------------------------------------------------------------------------------
begin
  if not rtl_kernel_try(t_kernel_object(critical_object),t_rtl_wait_infinite) then
    raise synchronization_error;
    end if;
  end rtl_critical_lock;


----------------------------------------------------------------------------------------------------
procedure rtl_critical_try_lock =
----------------------------------------------------------------------------------------------------
begin
  result:=rtl_kernel_try(t_kernel_object(critical_object),milisec);
  end rtl_critical_try_lock;


----------------------------------------------------------------------------------------------------
procedure rtl_critical_unlock =
-- Unlock critical.
----------------------------------------------------------------------------------------------------
begin
  if not ReleaseMutex(critical_object) then 
    raise synchronization_error;
    end if;
  end rtl_critical_unlock;
