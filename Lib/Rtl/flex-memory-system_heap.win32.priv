----------------------------------------------------------------------------------------------------
module private system_heap =
-- Flex Run-time Library
-- Memory manager - segregated
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------
with 
    os_api,
    flex.exceptions;


const 
    initial_heap_size = 256*1024;

class private c_rtl_systemmemheap =
    var
      sysheap             : t_handle;

    ------------------------------------------------------------------------------------------------
    override memmgr_alloc =
    ------------------------------------------------------------------------------------------------
    var
      header       : p_rtl_memmgr_header;

    begin
      header:unchecked:=HeapAlloc(sysheap,HEAP_ZERO_MEMORY,addheader(size));
      if header=nil then
        raise memory_alloc_error;
        end if;
#if #environment compiler_version;='4.0.4.4' then;
      set_header_alloc(num,header,size,type_tag,^this,false,chain,nil);
#else;
      set_header_alloc(num,header,size,^this,false,chain,nil);
#end if;
      addr:=hdr2adr(header);
      end memmgr_alloc;



    ------------------------------------------------------------------------------------------------
    override  memmgr_adjust =
    ------------------------------------------------------------------------------------------------
    var
      header       : p_rtl_memmgr_header;

    begin
      header:=adr2hdr(addr);
      check_allocated_header(header);
      header:unchecked:=HeapReAlloc(sysheap,0,header,addheader(size));
      if header=nil then
        raise memory_alloc_error;
        end if;
#if #environment compiler_version;='4.0.4.4' then;
      set_header_alloc(num,header,size,header^.type_tag,^this,false,nil,nil);
#else;
      set_header_alloc(num,header,size,^this,false,nil,nil);
#end if;
      addr:=hdr2adr(header);
      end memmgr_adjust;



    -----------------------------------------------------------------------------------------------
    override  memmgr_free =
    ------------------------------------------------------------------------------------------------
    var
      header       : p_rtl_memmgr_header;

    begin
      header:=adr2hdr(addr);
      check_allocated_header(header);
      set_header_free(num,header,false,nil,chain);
      if HeapFree(sysheap,0,header)=0 then
        raise memory_corrupt_error;
        end if;
      end memmgr_free;



    -----------------------------------------------------------------------------------------------
    override  memmgr_validate =
    ------------------------------------------------------------------------------------------------
    begin
      if HeapValidate(sysheap,0,nil)=0 then
        raise memory_corrupt_error;
        end if;
      end memmgr_validate;
    


#if rtl_memory_debug then;
    -----------------------------------------------------------------------------------------------
    override  memmgr_dump =
    ------------------------------------------------------------------------------------------------
    var
      ent          : aliased t_winnt_process_heap_entry;
      header       : p_rtl_memmgr_header;

    begin
      rtl_suppress_dump_exception(true);
      while HeapWalk(sysheap,^ent)<>0 loop
        begin
          if (ent.lpdata<>nil) and ((ent.wflags and winnt_process_heap_entry_busy)<>0) then
            header:=p_rtl_memmgr_header(ent.lpdata);
            if header^.dealocator=^this and hdr2adr(header)<>^this then
              dump_header(header);
              succ count;
              end if;
            end if;
        catch
          when others do
          end;
        end loop;
      rtl_suppress_dump_exception(false);
      end memmgr_dump;
#end if;
    

    ------------------------------------------------------------------------------------------------
    entry =
    ------------------------------------------------------------------------------------------------
    begin
      -- vytvorim si systemovy heap
      -- sysheap:=HeapCreate(0,initial_heap_size,0);
      -- nebo dostanu heap procesu
      sysheap:=GetProcessHeap();
      if sysheap=nil then 
        raise memory_error;
        end if;
      end entry;



    ------------------------------------------------------------------------------------------------
    exit =
    ------------------------------------------------------------------------------------------------
    with errors;
    var
      count        : t_rtl_native_unsigned;

    begin
      #if rtl_memory_debug then;
      memmgr_validate;
      memmgr_dump(count);
      if count<>0 then
        rtl_wait_key(msg_dump_leaks);
        end if;
      #end if;

      -- zrusim systemovy heap
      -- pouze pokud neni heap procesu
      --if HeapDestroy(sysheap)=0 then
      --  raise memory_error;
      --  end if;
      end exit;
    end c_rtl_systemmemheap;



----------------------------------------------------------------------------------------------------
procedure rtl_early_sysheap_init =
----------------------------------------------------------------------------------------------------
with
  tags.types;

var
    header       : p_rtl_memmgr_header;

begin
  header:unchecked:=HeapAlloc(GetProcessHeap(),HEAP_ZERO_MEMORY,addheader(c_rtl_systemmemheap:size));
  if header=nil then
    raise memory_alloc_error;
    end if;
  heap:=hdr2adr(header);
#if #environment compiler_version;='4.0.4.4' then;
  set_header_alloc(0,header,c_rtl_systemmemheap:size,nil,heap,false,nil,nil);
#else;
  set_header_alloc(0,header,c_rtl_systemmemheap:size,heap,false,nil,nil);
#end if;
  
  rtl_setup_class_instance (heap,c_rtl_systemmemheap:tag);
  end rtl_early_sysheap_init;



----------------------------------------------------------------------------------------------------
procedure rtl_late_sysheap_deinit =
----------------------------------------------------------------------------------------------------
with
  tags.types;

var
    header       : p_rtl_memmgr_header;

begin
  rtl_finalize_class_instance(heap);
  header:=adr2hdr(heap);
  check_allocated_header(header);
  set_header_free(0,header,false,nil,nil);
  if HeapFree(GetProcessHeap(),0,header)=0 then
    raise memory_corrupt_error;
    end if;
  end rtl_late_sysheap_deinit;
end system_heap;
