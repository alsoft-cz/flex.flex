{%%TEMP} -- temporary module

message
  -- float-point arithmetic messages
  fp_numeric_error     extend numeric_error;     -- implementation defined
  fp_invalid_operand   extend fp_numeric_error;  -- implementation defined
  fp_denormal_operand  extend fp_numeric_error;  -- implementation defined
  fp_divide_by_zero    extend fp_numeric_error;  -- implementation defined
  fp_numeric_overflow  extend fp_numeric_error;  -- implementation defined
  fp_numeric_underflow extend fp_numeric_error;  -- implementation defined
  fp_inexact_result    extend fp_numeric_error;  -- implementation defined

{%%TEMP}  -- temporary code              
{%%TEMP}  {
{%%TEMP}  type
{%%TEMP}    t_single         = float 32;                   -- single precision float point number
{%%TEMP}    t_double         = float 64;                   -- double precision float point number
{%%TEMP}    t_extended       = float 80;                   -- extended double precision float point number
{%%TEMP}  }
{%%TEMP}  
{%%TEMP}  type
{%%TEMP}    t_single         = array 0..3 of unsigned 8;   -- single precision float point number
{%%TEMP}    t_double         = array 0..7 of unsigned 8;   -- double precision float point number
{%%TEMP}    t_extended       = array 0..9 of unsigned 8;   -- extended double precision float point number

----------------------------------------------------------------------------------------------------
-- Floating-point constants
----------------------------------------------------------------------------------------------------
const
  -- øídící slovo procesoru
                                                 --   Exception masks                           
  fp_cw_invalid    = 2$0000_0000_0000_0001;      -- Invalid operation                           
  fp_cw_denormal   = 2$0000_0000_0000_0010;      -- Denormalized operand                        
  fp_cw_zerodivide = 2$0000_0000_0000_0100;      -- Zero divide                                 
  fp_cw_overflow   = 2$0000_0000_0000_1000;      -- Overflow                                    
  fp_cw_underflow  = 2$0000_0000_0001_0000;      -- Underflow                                   
  fp_cw_inexact    = 2$0000_0000_0010_0000;      -- Precision (Inexact result)                  

                                                 --   Rounding Control                          
  fp_cw_chop       = 2$0000_1100_0000_0000;      -- chop                                        
  fp_cw_up         = 2$0000_1000_0000_0000;      -- up                                          
  fp_cw_down       = 2$0000_0100_0000_0000;      -- down                                        
  fp_cw_near       = 2$0000_0000_0000_0000;      -- near                                        

                                                 --   Precision Control                         
  fp_cw_24         = 2$0000_0000_0000_0000;      -- 24 bits                                     
  fp_cw_53         = 2$0000_0010_0000_0000;      -- 53 bits                                     
  fp_cw_64         = 2$0000_0011_0000_0000;      -- 64 bits                                     


  -- stavové slovo procesoru
                                                 --   Exception flags
  fp_sw_invalid    = 2$0000_0000_0000_0001;      -- Invalid operation                           
  fp_sw_denormal   = 2$0000_0000_0000_0010;      -- Denormalized operand                        
  fp_sw_zerodivide = 2$0000_0000_0000_0100;      -- Zero divide                                 
  fp_sw_overflow   = 2$0000_0000_0000_1000;      -- Overflow                                    
  fp_sw_underflow  = 2$0000_0000_0001_0000;      -- Underflow                                   
  fp_sw_inexact    = 2$0000_0000_0010_0000;      -- Precision (Inexact result)                  

  fp_sw_ir         = 2$0000_0000_1000_0000;      -- Interrupt Request

                                                 --   Condition Code 
  fp_sw_C0         = 2$0000_0001_0000_0000;      -- C0
  fp_sw_C1         = 2$0000_0010_0000_0000;      -- C1
  fp_sw_C2         = 2$0000_0100_0000_0000;      -- C2
  fp_sw_C3         = 2$0100_0000_0000_0000;      -- C3

  fp_sw_st         = 2$0011_1000_0000_0000;      -- Stack top pointer


----------------------------------------------------------------------------------------------------
module floating_point =
-- basic float point arithmetic
----------------------------------------------------------------------------------------------------
-- Aleš : 10.04.2003 : Vytvoøil
----------------------------------------------------------------------------------------------------


#if not #declared fp_debug; then;
const
  -- runtime-time library debugging mode
  fp_debug        = true;
#end if;


message
#if fp_debug then;
  fp_internal_error    extend fp_numeric_error;
#end if;




procedure fp_evaluate_exception =
var
  fp_sw            : mod unsigned 16;
  
begin
  #syntax asm; 
    wait 
    fstsw   fp_sw
    fnclex       
  #end asm;  

  if (fp_sw and fp_sw_invalid) > 0 then raise fp_invalid_operand; end if;
  if (fp_sw and fp_sw_denormal) > 0 then raise fp_denormal_operand; end if;
  if (fp_sw and fp_sw_zerodivide) > 0 then raise fp_divide_by_zero; end if;
  if (fp_sw and fp_sw_overflow) > 0 then raise fp_numeric_overflow; end if;
  if (fp_sw and fp_sw_underflow) > 0 then raise fp_numeric_underflow; end if;
  -- zatím se nepoužívá, protože mùže nastat pøi konverzích èísel
  -- if (fp_sw and fp_sw_inexact) > 0 then raise fp_inexact_result; end if;

  end fp_evaluate_exception;



procedure fp_x2x (a : in t_extended) return t_extended =
begin
  #syntax asm; 
    mov     eax,a
    fld     <10>[eax]   
    mov     eax,result
    fstp    <10>[eax]   
  #end asm;  

  fp_evaluate_exception;
  end fp_x2x;


procedure fp_x2d (a : in t_extended) return t_double =
begin
  #syntax asm; 
    mov     eax,a
    fld     <10>[eax] 
    mov     eax,result
    fstp    <8>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_x2d;


procedure fp_x2s (a : in t_extended) return t_single =
begin
  #syntax asm; 
    mov     eax,a
    fld     <10>[eax]
    mov     eax,result
    fstp    <4>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_x2s;


procedure fp_d2x (a : in t_double) return t_extended =
begin
  #syntax asm; 
    mov     eax,a
    fld     <8>[eax]
    mov     eax,result
    fstp    <10>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_d2x;


procedure fp_d2d (a : in t_double) return t_double =
begin
  #syntax asm; 
    mov     eax,a
    fld     <8>[eax]
    mov     eax,result
    fstp    <8>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_d2d;


procedure fp_d2s (a : in t_double) return t_single =
begin
  #syntax asm; 
    mov     eax,a
    fld     <8>[eax]
    mov     eax,result
    fstp    <4>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_d2s;


procedure fp_s2x (a : in t_single) return t_extended =
begin
  #syntax asm; 
    mov     eax,a
    fld     <4>[eax]
    mov     eax,result
    fstp    <10>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_s2x;


procedure fp_s2d (a : in t_single) return t_double =
begin
  #syntax asm; 
    mov     eax,a
    fld     <4>[eax]
    mov     eax,result
    fstp    <8>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_s2d;


procedure fp_s2s (a : in t_single) return t_single =
begin
  #syntax asm; 
    mov     eax,a
    fld     <4>[eax]
    mov     eax,result
    fstp    <4>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_s2s;



procedure fp_assign_xx (result : in out t_extended; a : in t_extended) =
begin
  result:=fp_x2x(a);
  end fp_assign_xx;


procedure fp_assign_xd (result : in out t_double; a : in t_extended) =
begin
  result:=fp_x2d(a);
  end fp_assign_xd;


procedure fp_assign_xs (result : in out t_single; a : in t_extended) =
begin
  result:=fp_x2s(a);
  end fp_assign_xs;


procedure fp_assign_dx (result : in out t_extended; a : in t_double) =
begin
  result:=fp_d2x(a);
  end fp_assign_dx;


procedure fp_assign_dd (result : in out t_double; a : in t_double) =
begin
  result:=fp_d2d(a);
  end fp_assign_dd;


procedure fp_assign_ds (result : in out t_single; a : in t_double) =
begin
  result:=fp_d2s(a);
  end fp_assign_ds;


procedure fp_assign_sx (result : in out t_extended; a : in t_single) =
begin
  result:=fp_s2x(a);
  end fp_assign_sx;


procedure fp_assign_sd (result : in out t_double; a : in t_single)  =
begin
  result:=fp_s2d(a);
  end fp_assign_sd;


procedure fp_assign_ss (result : in out t_single; a : in t_single) =
begin
  result:=fp_s2s(a);
  end fp_assign_ss;






procedure fp_add (a : in t_extended; b : in t_extended) return t_extended =
begin
  #syntax asm; 
    mov     eax,a
    fld     <10>[eax]
    mov     eax,b
    fld     <10>[eax]
    faddp   st1,st0
    mov     eax,result     
    fstp    <10>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_add;


{
#template fp_bin_aritm (name);

-- Vygeneruje sadu procedur ve tvaru pro pøetížení binárního aritmetického
-- operátoru. Procedury jsou vygenerovány ve všech kombinacích obou vstupních
-- parametrù typu single, double a extended vèetnì volání pøíslušných konverzních
-- funkcí. Návratová hodnota je vždy extended.
          
procedure fp_name_xx (a : in t_extended; b : in t_extended) return t_extended =
begin
  result:=fp_name(a,b);
  end fp_name_xx;

procedure fp_name_xd (a : in t_extended; b : in t_double) return t_extended =
begin
  result:=fp_name(a,fp_d2x(b));
  end fp_name_xd;

procedure fp_name_xs (a : in t_extended; b : in t_single) return t_extended =
begin
  result:=fp_name(a,fp_s2x(b));
  end fp_name_xs;

procedure fp_name_dx (a : in t_double; b : in t_extended) return t_extended =
begin
  result:=fp_name(fp_d2x(a),b);
  end fp_name_dx;

procedure fp_name_dd (a : in t_double; b : in t_double) return t_extended =
begin
  result:=fp_name(fp_d2x(a),fp_d2x(b));
  end fp_name_dd;

procedure fp_name_ds (a : in t_double; b : in t_single) return t_extended =
begin
  result:=fp_name(fp_d2x(a),fp_s2x(b));
  end fp_name_ds;

procedure fp_name_sx (a : in t_single; b : in t_extended) return t_extended =
begin
  result:=fp_name(fp_s2x(a),b);
  end fp_name_sx;

procedure fp_name_sd (a : in t_single; b : in t_double) return t_extended =
begin
  result:=fp_name(fp_s2x(a),fp_d2x(b));
  end fp_name_sd;

procedure fp_name_ss (a : in t_single; b : in t_single) return t_extended =
begin
  result:=fp_name(fp_s2x(a),fp_s2x(b));
  end fp_name_ss;


#end fp_bin_aritm;
}

{ fp_bin_aritm (add) }



procedure fp_add_xx (a : in t_extended; b : in t_extended) return t_extended =
begin
  result:=fp_add(a,b);
  end fp_add_xx;

procedure fp_add_xd (a : in t_extended; b : in t_double) return t_extended =
begin
  result:=fp_add(a,fp_d2x(b));
  end fp_add_xd;

procedure fp_add_xs (a : in t_extended; b : in t_single) return t_extended =
begin
  result:=fp_add(a,fp_s2x(b));
  end fp_add_xs;

procedure fp_add_dx (a : in t_double; b : in t_extended) return t_extended =
begin
  result:=fp_add(fp_d2x(a),b);
  end fp_add_dx;

procedure fp_add_dd (a : in t_double; b : in t_double) return t_extended =
begin
  result:=fp_add(fp_d2x(a),fp_d2x(b));
  end fp_add_dd;

procedure fp_add_ds (a : in t_double; b : in t_single) return t_extended =
begin
  result:=fp_add(fp_d2x(a),fp_s2x(b));
  end fp_add_ds;

procedure fp_add_sx (a : in t_single; b : in t_extended) return t_extended =
begin
  result:=fp_add(fp_s2x(a),b);
  end fp_add_sx;

procedure fp_add_sd (a : in t_single; b : in t_double) return t_extended =
begin
  result:=fp_add(fp_s2x(a),fp_d2x(b));
  end fp_add_sd;

procedure fp_add_ss (a : in t_single; b : in t_single) return t_extended =
begin
  result:=fp_add(fp_s2x(a),fp_s2x(b));
  end fp_add_ss;





procedure fp_add_assign_xx (a : in out t_extended; b : in t_extended) =
begin
  a:=fp_x2x(fp_add_xx(a,b));
  end fp_add_assign_xx;

procedure fp_add_assign_xd (a : in out t_extended; b : in t_double) =
begin
  a:=fp_x2x(fp_add_xd(a,b));
  end fp_add_assign_xd;

procedure fp_add_assign_xs (a : in out t_extended; b : in t_single) =
begin
  a:=fp_x2x(fp_add_xs(a,b));
  end fp_add_assign_xs;

procedure fp_add_assign_dx (a : in out t_double; b : in t_extended) =
begin
  a:=fp_x2d(fp_add_dx(a,b));
  end fp_add_assign_dx;

procedure fp_add_assign_dd (a : in out t_double; b : in t_double) =
begin
  a:=fp_x2d(fp_add_dd(a,b));
  end fp_add_assign_dd;

procedure fp_add_assign_ds (a : in out t_double; b : in t_single) =
begin
  a:=fp_x2d(fp_add_ds(a,b));
  end fp_add_assign_ds;

procedure fp_add_assign_sx (a : in out t_single; b : in t_extended) =
begin
  a:=fp_x2s(fp_add_sx(a,b));
  end fp_add_assign_sx;

procedure fp_add_assign_sd (a : in out t_single; b : in t_double) =
begin
  a:=fp_x2s(fp_add_sd(a,b));
  end fp_add_assign_sd;

procedure fp_add_assign_ss (a : in out t_single; b : in t_single) =
begin
  a:=fp_x2s(fp_add_ss(a,b));
  end fp_add_assign_ss;







procedure fp_sub (a : in t_extended; b : in t_extended) return t_extended =
begin
  #syntax asm; 
    mov     eax,a
    fld     <10>[eax]
    mov     eax,b
    fld     <10>[eax]
    fsubp   st1,st0
    mov     eax,result     
    fstp    <10>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_sub;


procedure fp_sub_xx (a : in t_extended; b : in t_extended) return t_extended =
begin
  result:=fp_sub(a,b);
  end fp_sub_xx;

procedure fp_sub_xd (a : in t_extended; b : in t_double) return t_extended =
begin
  result:=fp_sub(a,fp_d2x(b));
  end fp_sub_xd;

procedure fp_sub_xs (a : in t_extended; b : in t_single) return t_extended =
begin
  result:=fp_sub(a,fp_s2x(b));
  end fp_sub_xs;

procedure fp_sub_dx (a : in t_double; b : in t_extended) return t_extended =
begin
  result:=fp_sub(fp_d2x(a),b);
  end fp_sub_dx;

procedure fp_sub_dd (a : in t_double; b : in t_double) return t_extended =
begin
  result:=fp_sub(fp_d2x(a),fp_d2x(b));
  end fp_sub_dd;

procedure fp_sub_ds (a : in t_double; b : in t_single) return t_extended =
begin
  result:=fp_sub(fp_d2x(a),fp_s2x(b));
  end fp_sub_ds;

procedure fp_sub_sx (a : in t_single; b : in t_extended) return t_extended =
begin
  result:=fp_sub(fp_s2x(a),b);
  end fp_sub_sx;

procedure fp_sub_sd (a : in t_single; b : in t_double) return t_extended =
begin
  result:=fp_sub(fp_s2x(a),fp_d2x(b));
  end fp_sub_sd;

procedure fp_sub_ss (a : in t_single; b : in t_single) return t_extended =
begin
  result:=fp_sub(fp_s2x(a),fp_s2x(b));
  end fp_sub_ss;





procedure fp_sub_assign_xx (a : in out t_extended; b : in t_extended) =
begin
  a:=fp_x2x(fp_sub_xx(a,b));
  end fp_sub_assign_xx;

procedure fp_sub_assign_xd (a : in out t_extended; b : in t_double) =
begin
  a:=fp_x2x(fp_sub_xd(a,b));
  end fp_sub_assign_xd;

procedure fp_sub_assign_xs (a : in out t_extended; b : in t_single) =
begin
  a:=fp_x2x(fp_sub_xs(a,b));
  end fp_sub_assign_xs;

procedure fp_sub_assign_dx (a : in out t_double; b : in t_extended) =
begin
  a:=fp_x2d(fp_sub_dx(a,b));
  end fp_sub_assign_dx;

procedure fp_sub_assign_dd (a : in out t_double; b : in t_double) =
begin
  a:=fp_x2d(fp_sub_dd(a,b));
  end fp_sub_assign_dd;

procedure fp_sub_assign_ds (a : in out t_double; b : in t_single) =
begin
  a:=fp_x2d(fp_sub_ds(a,b));
  end fp_sub_assign_ds;

procedure fp_sub_assign_sx (a : in out t_single; b : in t_extended) =
begin
  a:=fp_x2s(fp_sub_sx(a,b));
  end fp_sub_assign_sx;

procedure fp_sub_assign_sd (a : in out t_single; b : in t_double) =
begin
  a:=fp_x2s(fp_sub_sd(a,b));
  end fp_sub_assign_sd;

procedure fp_sub_assign_ss (a : in out t_single; b : in t_single) =
begin
  a:=fp_x2s(fp_sub_ss(a,b));
  end fp_sub_assign_ss;








procedure fp_mul (a : in t_extended; b : in t_extended) return t_extended =
begin
  #syntax asm; 
    mov     eax,a
    fld     <10>[eax]
    mov     eax,b
    fld     <10>[eax]
    fmulp   st1,st0
    mov     eax,result     
    fstp    <10>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_mul;



procedure fp_mul_xx (a : in t_extended; b : in t_extended) return t_extended =
begin
  result:=fp_mul(a,b);
  end fp_mul_xx;

procedure fp_mul_xd (a : in t_extended; b : in t_double) return t_extended =
begin
  result:=fp_mul(a,fp_d2x(b));
  end fp_mul_xd;

procedure fp_mul_xs (a : in t_extended; b : in t_single) return t_extended =
begin
  result:=fp_mul(a,fp_s2x(b));
  end fp_mul_xs;

procedure fp_mul_dx (a : in t_double; b : in t_extended) return t_extended =
begin
  result:=fp_mul(fp_d2x(a),b);
  end fp_mul_dx;

procedure fp_mul_dd (a : in t_double; b : in t_double) return t_extended =
begin
  result:=fp_mul(fp_d2x(a),fp_d2x(b));
  end fp_mul_dd;

procedure fp_mul_ds (a : in t_double; b : in t_single) return t_extended =
begin
  result:=fp_mul(fp_d2x(a),fp_s2x(b));
  end fp_mul_ds;

procedure fp_mul_sx (a : in t_single; b : in t_extended) return t_extended =
begin
  result:=fp_mul(fp_s2x(a),b);
  end fp_mul_sx;

procedure fp_mul_sd (a : in t_single; b : in t_double) return t_extended =
begin
  result:=fp_mul(fp_s2x(a),fp_d2x(b));
  end fp_mul_sd;

procedure fp_mul_ss (a : in t_single; b : in t_single) return t_extended =
begin
  result:=fp_mul(fp_s2x(a),fp_s2x(b));
  end fp_mul_ss;





procedure fp_mul_assign_xx (a : in out t_extended; b : in t_extended) =
begin
  a:=fp_x2x(fp_mul_xx(a,b));
  end fp_mul_assign_xx;

procedure fp_mul_assign_xd (a : in out t_extended; b : in t_double) =
begin
  a:=fp_x2x(fp_mul_xd(a,b));
  end fp_mul_assign_xd;

procedure fp_mul_assign_xs (a : in out t_extended; b : in t_single) =
begin
  a:=fp_x2x(fp_mul_xs(a,b));
  end fp_mul_assign_xs;

procedure fp_mul_assign_dx (a : in out t_double; b : in t_extended) =
begin
  a:=fp_x2d(fp_mul_dx(a,b));
  end fp_mul_assign_dx;

procedure fp_mul_assign_dd (a : in out t_double; b : in t_double) =
begin
  a:=fp_x2d(fp_mul_dd(a,b));
  end fp_mul_assign_dd;

procedure fp_mul_assign_ds (a : in out t_double; b : in t_single) =
begin
  a:=fp_x2d(fp_mul_ds(a,b));
  end fp_mul_assign_ds;

procedure fp_mul_assign_sx (a : in out t_single; b : in t_extended) =
begin
  a:=fp_x2s(fp_mul_sx(a,b));
  end fp_mul_assign_sx;

procedure fp_mul_assign_sd (a : in out t_single; b : in t_double) =
begin
  a:=fp_x2s(fp_mul_sd(a,b));
  end fp_mul_assign_sd;

procedure fp_mul_assign_ss (a : in out t_single; b : in t_single) =
begin
  a:=fp_x2s(fp_mul_ss(a,b));
  end fp_mul_assign_ss;






procedure fp_div (a : in t_extended; b : in t_extended) return t_extended =
var
  fp_sw            : unsigned 16;

begin
  #syntax asm; 
    mov     eax,a
    fld     <10>[eax]
    mov     eax,b
    fld     <10>[eax]
    fdivp   st1,st0
    mov     eax,result     
    fstp    <10>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_div;


procedure fp_div_xx (a : in t_extended; b : in t_extended) return t_extended =
begin
  result:=fp_div(a,b);
  end fp_div_xx;

procedure fp_div_xd (a : in t_extended; b : in t_double) return t_extended =
begin
  result:=fp_div(a,fp_d2x(b));
  end fp_div_xd;

procedure fp_div_xs (a : in t_extended; b : in t_single) return t_extended =
begin
  result:=fp_div(a,fp_s2x(b));
  end fp_div_xs;

procedure fp_div_dx (a : in t_double; b : in t_extended) return t_extended =
begin
  result:=fp_div(fp_d2x(a),b);
  end fp_div_dx;

procedure fp_div_dd (a : in t_double; b : in t_double) return t_extended =
begin
  result:=fp_div(fp_d2x(a),fp_d2x(b));
  end fp_div_dd;

procedure fp_div_ds (a : in t_double; b : in t_single) return t_extended =
begin
  result:=fp_div(fp_d2x(a),fp_s2x(b));
  end fp_div_ds;

procedure fp_div_sx (a : in t_single; b : in t_extended) return t_extended =
begin
  result:=fp_div(fp_s2x(a),b);
  end fp_div_sx;

procedure fp_div_sd (a : in t_single; b : in t_double) return t_extended =
begin
  result:=fp_div(fp_s2x(a),fp_d2x(b));
  end fp_div_sd;

procedure fp_div_ss (a : in t_single; b : in t_single) return t_extended =
begin
  result:=fp_div(fp_s2x(a),fp_s2x(b));
  end fp_div_ss;





procedure fp_div_assign_xx (a : in out t_extended; b : in t_extended) =
begin
  a:=fp_x2x(fp_div_xx(a,b));
  end fp_div_assign_xx;

procedure fp_div_assign_xd (a : in out t_extended; b : in t_double) =
begin
  a:=fp_x2x(fp_div_xd(a,b));
  end fp_div_assign_xd;

procedure fp_div_assign_xs (a : in out t_extended; b : in t_single) =
begin
  a:=fp_x2x(fp_div_xs(a,b));
  end fp_div_assign_xs;

procedure fp_div_assign_dx (a : in out t_double; b : in t_extended) =
begin
  a:=fp_x2d(fp_div_dx(a,b));
  end fp_div_assign_dx;

procedure fp_div_assign_dd (a : in out t_double; b : in t_double) =
begin
  a:=fp_x2d(fp_div_dd(a,b));
  end fp_div_assign_dd;

procedure fp_div_assign_ds (a : in out t_double; b : in t_single) =
begin
  a:=fp_x2d(fp_div_ds(a,b));
  end fp_div_assign_ds;

procedure fp_div_assign_sx (a : in out t_single; b : in t_extended) =
begin
  a:=fp_x2s(fp_div_sx(a,b));
  end fp_div_assign_sx;

procedure fp_div_assign_sd (a : in out t_single; b : in t_double) =
begin
  a:=fp_x2s(fp_div_sd(a,b));
  end fp_div_assign_sd;

procedure fp_div_assign_ss (a : in out t_single; b : in t_single) =
begin
  a:=fp_x2s(fp_div_ss(a,b));
  end fp_div_assign_ss;




type
  t_unsigned16     = unsigned 16;
  t_signed         = signed 32;
  t_logical        = logical 32;



procedure fp_comp (a : in t_extended; b : in t_extended) return t_signed =
-- a<b --> -1
-- a=b -->  0
-- a>b --> +1

var
  status            : t_unsigned16;
  vysledek          : t_signed;

begin
  #syntax asm; 
    mov     eax,b
    fld     <10>[eax]    
    mov     eax,a
    fld     <10>[eax]
    fcompp  
    fstsw ax
    sahf 
    mov     ebx,0
    jz      @konec 
    mov     ebx,1
    ja      @konec 
    mov     ebx,$FFFF_FFFF{-1}
@konec:
    mov     vysledek,ebx
  #end asm;  

  result:=vysledek;

  fp_evaluate_exception;
  end fp_comp;






procedure fp_comp_eq_xx (a : in t_extended; b : in t_extended) return t_logical =
begin
  result:=fp_comp(a,b)=0;
  end fp_comp_eq_xx;

procedure fp_comp_eq_xd (a : in t_extended; b : in t_double) return t_logical =
begin
  result:=fp_comp(a,fp_d2x(b))=0;
  end fp_comp_eq_xd;

procedure fp_comp_eq_xs (a : in t_extended; b : in t_single) return t_logical =
begin
  result:=fp_comp(a,fp_s2x(b))=0;
  end fp_comp_eq_xs;

procedure fp_comp_eq_dx (a : in t_double; b : in t_extended) return t_logical =
begin
  result:=fp_comp(fp_d2x(a),b)=0;
  end fp_comp_eq_dx;

procedure fp_comp_eq_dd (a : in t_double; b : in t_double) return t_logical =
begin
  result:=fp_comp(fp_d2x(a),fp_d2x(b))=0;
  end fp_comp_eq_dd;

procedure fp_comp_eq_ds (a : in t_double; b : in t_single) return t_logical =
begin
  result:=fp_comp(fp_d2x(a),fp_s2x(b))=0;
  end fp_comp_eq_ds;

procedure fp_comp_eq_sx (a : in t_single; b : in t_extended) return t_logical =
begin
  result:=fp_comp(fp_s2x(a),b)=0;
  end fp_comp_eq_sx;

procedure fp_comp_eq_sd (a : in t_single; b : in t_double) return t_logical =
begin
  result:=fp_comp(fp_s2x(a),fp_d2x(b))=0;
  end fp_comp_eq_sd;

procedure fp_comp_eq_ss (a : in t_single; b : in t_single) return t_logical =
begin
  result:=fp_comp(fp_s2x(a),fp_s2x(b))=0;
  end fp_comp_eq_ss;




 
procedure fp_comp_ne_xx (a : in t_extended; b : in t_extended) return t_logical =
begin
  result:=fp_comp(a,b)<>0;
  end fp_comp_ne_xx;

procedure fp_comp_ne_xd (a : in t_extended; b : in t_double) return t_logical =
begin
  result:=fp_comp(a,fp_d2x(b))<>0;
  end fp_comp_ne_xd;

procedure fp_comp_ne_xs (a : in t_extended; b : in t_single) return t_logical =
begin
  result:=fp_comp(a,fp_s2x(b))<>0;
  end fp_comp_ne_xs;

procedure fp_comp_ne_dx (a : in t_double; b : in t_extended) return t_logical =
begin
  result:=fp_comp(fp_d2x(a),b)<>0;
  end fp_comp_ne_dx;

procedure fp_comp_ne_dd (a : in t_double; b : in t_double) return t_logical =
begin
  result:=fp_comp(fp_d2x(a),fp_d2x(b))<>0;
  end fp_comp_ne_dd;

procedure fp_comp_ne_ds (a : in t_double; b : in t_single) return t_logical =
begin
  result:=fp_comp(fp_d2x(a),fp_s2x(b))<>0;
  end fp_comp_ne_ds;

procedure fp_comp_ne_sx (a : in t_single; b : in t_extended) return t_logical =
begin
  result:=fp_comp(fp_s2x(a),b)<>0;
  end fp_comp_ne_sx;

procedure fp_comp_ne_sd (a : in t_single; b : in t_double) return t_logical =
begin
  result:=fp_comp(fp_s2x(a),fp_d2x(b))<>0;
  end fp_comp_ne_sd;

procedure fp_comp_ne_ss (a : in t_single; b : in t_single) return t_logical =
begin
  result:=fp_comp(fp_s2x(a),fp_s2x(b))<>0;
  end fp_comp_ne_ss;




 
procedure fp_comp_g_xx (a : in t_extended; b : in t_extended) return t_logical =
begin
  result:=fp_comp(a,b)=1;
  end fp_comp_g_xx;

procedure fp_comp_g_xd (a : in t_extended; b : in t_double) return t_logical =
begin
  result:=fp_comp(a,fp_d2x(b))=1;
  end fp_comp_g_xd;

procedure fp_comp_g_xs (a : in t_extended; b : in t_single) return t_logical =
begin
  result:=fp_comp(a,fp_s2x(b))=1;
  end fp_comp_g_xs;

procedure fp_comp_g_dx (a : in t_double; b : in t_extended) return t_logical =
begin
  result:=fp_comp(fp_d2x(a),b)=1;
  end fp_comp_g_dx;

procedure fp_comp_g_dd (a : in t_double; b : in t_double) return t_logical =
begin
  result:=fp_comp(fp_d2x(a),fp_d2x(b))=1;
  end fp_comp_g_dd;

procedure fp_comp_g_ds (a : in t_double; b : in t_single) return t_logical =
begin
  result:=fp_comp(fp_d2x(a),fp_s2x(b))=1;
  end fp_comp_g_ds;

procedure fp_comp_g_sx (a : in t_single; b : in t_extended) return t_logical =
begin
  result:=fp_comp(fp_s2x(a),b)=1;
  end fp_comp_g_sx;

procedure fp_comp_g_sd (a : in t_single; b : in t_double) return t_logical =
begin
  result:=fp_comp(fp_s2x(a),fp_d2x(b))=1;
  end fp_comp_g_sd;

procedure fp_comp_g_ss (a : in t_single; b : in t_single) return t_logical =
begin
  result:=fp_comp(fp_s2x(a),fp_s2x(b))=1;
  end fp_comp_g_ss;




 
procedure fp_comp_ge_xx (a : in t_extended; b : in t_extended) return t_logical =
begin
  result:=fp_comp(a,b)>=0;
  end fp_comp_ge_xx;

procedure fp_comp_ge_xd (a : in t_extended; b : in t_double) return t_logical =
begin
  result:=fp_comp(a,fp_d2x(b))>=0;
  end fp_comp_ge_xd;

procedure fp_comp_ge_xs (a : in t_extended; b : in t_single) return t_logical =
begin
  result:=fp_comp(a,fp_s2x(b))>=0;
  end fp_comp_ge_xs;

procedure fp_comp_ge_dx (a : in t_double; b : in t_extended) return t_logical =
begin
  result:=fp_comp(fp_d2x(a),b)>=0;
  end fp_comp_ge_dx;

procedure fp_comp_ge_dd (a : in t_double; b : in t_double) return t_logical =
begin
  result:=fp_comp(fp_d2x(a),fp_d2x(b))>=0;
  end fp_comp_ge_dd;

procedure fp_comp_ge_ds (a : in t_double; b : in t_single) return t_logical =
begin
  result:=fp_comp(fp_d2x(a),fp_s2x(b))>=0;
  end fp_comp_ge_ds;

procedure fp_comp_ge_sx (a : in t_single; b : in t_extended) return t_logical =
begin
  result:=fp_comp(fp_s2x(a),b)>=0;
  end fp_comp_ge_sx;

procedure fp_comp_ge_sd (a : in t_single; b : in t_double) return t_logical =
begin
  result:=fp_comp(fp_s2x(a),fp_d2x(b))>=0;
  end fp_comp_ge_sd;

procedure fp_comp_ge_ss (a : in t_single; b : in t_single) return t_logical =
begin
  result:=fp_comp(fp_s2x(a),fp_s2x(b))>=0;
  end fp_comp_ge_ss;




 
procedure fp_comp_l_xx (a : in t_extended; b : in t_extended) return t_logical =
begin
  result:=fp_comp(a,b)=-1;
  end fp_comp_l_xx;

procedure fp_comp_l_xd (a : in t_extended; b : in t_double) return t_logical =
begin
  result:=fp_comp(a,fp_d2x(b))=-1;
  end fp_comp_l_xd;

procedure fp_comp_l_xs (a : in t_extended; b : in t_single) return t_logical =
begin
  result:=fp_comp(a,fp_s2x(b))=-1;
  end fp_comp_l_xs;

procedure fp_comp_l_dx (a : in t_double; b : in t_extended) return t_logical =
begin
  result:=fp_comp(fp_d2x(a),b)=-1;
  end fp_comp_l_dx;

procedure fp_comp_l_dd (a : in t_double; b : in t_double) return t_logical =
begin
  result:=fp_comp(fp_d2x(a),fp_d2x(b))=-1;
  end fp_comp_l_dd;

procedure fp_comp_l_ds (a : in t_double; b : in t_single) return t_logical =
begin
  result:=fp_comp(fp_d2x(a),fp_s2x(b))=-1;
  end fp_comp_l_ds;

procedure fp_comp_l_sx (a : in t_single; b : in t_extended) return t_logical =
begin
  result:=fp_comp(fp_s2x(a),b)=-1;
  end fp_comp_l_sx;

procedure fp_comp_l_sd (a : in t_single; b : in t_double) return t_logical =
begin
  result:=fp_comp(fp_s2x(a),fp_d2x(b))=-1;
  end fp_comp_l_sd;

procedure fp_comp_l_ss (a : in t_single; b : in t_single) return t_logical =
begin
  result:=fp_comp(fp_s2x(a),fp_s2x(b))=-1;
  end fp_comp_l_ss;




 
procedure fp_comp_le_xx (a : in t_extended; b : in t_extended) return t_logical =
begin
  result:=fp_comp(a,b)<=0;
  end fp_comp_le_xx;

procedure fp_comp_le_xd (a : in t_extended; b : in t_double) return t_logical =
begin
  result:=fp_comp(a,fp_d2x(b))<=0;
  end fp_comp_le_xd;

procedure fp_comp_le_xs (a : in t_extended; b : in t_single) return t_logical =
begin
  result:=fp_comp(a,fp_s2x(b))<=0;
  end fp_comp_le_xs;

procedure fp_comp_le_dx (a : in t_double; b : in t_extended) return t_logical =
begin
  result:=fp_comp(fp_d2x(a),b)<=0;
  end fp_comp_le_dx;

procedure fp_comp_le_dd (a : in t_double; b : in t_double) return t_logical =
begin
  result:=fp_comp(fp_d2x(a),fp_d2x(b))<=0;
  end fp_comp_le_dd;

procedure fp_comp_le_ds (a : in t_double; b : in t_single) return t_logical =
begin
  result:=fp_comp(fp_d2x(a),fp_s2x(b))<=0;
  end fp_comp_le_ds;

procedure fp_comp_le_sx (a : in t_single; b : in t_extended) return t_logical =
begin
  result:=fp_comp(fp_s2x(a),b)<=0;
  end fp_comp_le_sx;

procedure fp_comp_le_sd (a : in t_single; b : in t_double) return t_logical =
begin
  result:=fp_comp(fp_s2x(a),fp_d2x(b))<=0;
  end fp_comp_le_sd;

procedure fp_comp_le_ss (a : in t_single; b : in t_single) return t_logical =
begin
  result:=fp_comp(fp_s2x(a),fp_s2x(b))<=0;
  end fp_comp_le_ss;



 
procedure fp_abs (a : in t_extended) return t_extended =
begin
  #syntax asm; 
    mov     eax,a
    fld     <10>[eax]
    fabs   
    mov     eax,result
    fstp    <10>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_abs;


procedure fp_abs_x (a : in t_extended) return t_extended =
begin
  result:=fp_abs(a);
  end fp_abs_x;

procedure fp_abs_d (a : in t_double) return t_extended =
begin
  result:=fp_abs(fp_d2x(a));
  end fp_abs_d;

procedure fp_abs_s (a : in t_single) return t_extended =
begin
  result:=fp_abs(fp_s2x(a));
  end fp_abs_s;



procedure fp_abs_assign_x (a : in out t_extended) =
begin
  a:=fp_abs(a);
  end fp_abs_assign_x;

procedure fp_abs_assign_d (a : in out t_double) =
begin
  a:=fp_x2d(fp_abs(fp_d2x(a)));
  end fp_abs_assign_d;

procedure fp_abs_assign_s (a : in out t_single) =
begin
  a:=fp_x2s(fp_abs(fp_s2x(a)));
  end fp_abs_assign_s;




procedure fp_minus (a : in t_extended) return t_extended =
begin
  #syntax asm; 
    mov     eax,a
    fld     <10>[eax]
    fchs 
    mov     eax,result
    fstp    <10>[eax]
  #end asm;  

  fp_evaluate_exception;
  end fp_minus;


procedure fp_minus_x (a : in t_extended) return t_extended =
begin
  result:=fp_minus(a);
  end fp_minus_x;

procedure fp_minus_d (a : in t_double) return t_extended =
begin
  result:=fp_minus(fp_d2x(a));
  end fp_minus_d;

procedure fp_minus_s (a : in t_single) return t_extended =
begin
  result:=fp_minus(fp_s2x(a));
  end fp_minus_s;



procedure fp_minus_assign_x (a : in out t_extended) =
begin
  a:=fp_minus(a);
  end fp_minus_assign_x;

procedure fp_minus_assign_d (a : in out t_double) =
begin
  a:=fp_x2d(fp_minus(fp_d2x(a)));
  end fp_minus_assign_d;

procedure fp_minus_assign_s (a : in out t_single) =
begin
  a:=fp_x2s(fp_minus(fp_s2x(a)));
  end fp_minus_assign_s;




procedure fp_plus (a : in t_extended) return t_extended =
begin
  result:=a;
  end fp_plus;


procedure fp_plus_x (a : in t_extended) return t_extended =
begin
  result:=fp_plus(a);
  end fp_plus_x;

procedure fp_plus_d (a : in t_double) return t_extended =
begin
  result:=fp_plus(fp_d2x(a));
  end fp_plus_d;

procedure fp_plus_s (a : in t_single) return t_extended =
begin
  result:=fp_plus(fp_s2x(a));
  end fp_plus_s;



procedure fp_plus_assign_x (a : in out t_extended) =
begin
  a:=fp_plus(a);
  end fp_plus_assign_x;

procedure fp_plus_assign_d (a : in out t_double) =
begin
  a:=fp_x2d(fp_plus(fp_d2x(a)));
  end fp_plus_assign_d;

procedure fp_plus_assign_s (a : in out t_single) =
begin
  a:=fp_x2s(fp_plus(fp_s2x(a)));
  end fp_plus_assign_s;


 

----------------------------------------------------------------------------------------------------
entry =
-- Nastaví potøebné chování fp aritmetiky
----------------------------------------------------------------------------------------------------

var
  fp_cw            : t_unsigned16;


begin
  -- sestavit øídicí slovo     
  fp_cw:= 0
    
    -- Exception Masks   
    or fp_cw_invalid      -- Invalid operation                           
    or fp_cw_denormal     -- Denormalized operand                        
    or fp_cw_zerodivide   -- Zero divide                                 
    or fp_cw_overflow     -- Overflow                                    
    or fp_cw_underflow    -- Underflow                                   
    or fp_cw_inexact      -- Precision (Inexact result)                  

    --   Rounding Control                          
    -- fp_cw_chop         -- chop                                        
    -- fp_cw_up           -- up                                          
    -- fp_cw_down         -- down                                        
    or fp_cw_near         -- near                                        

    --   Precision Control                         
    -- fp_cw_24;          -- 24 bits                                     
    -- fp_cw_53;          -- 53 bits                                     
    or fp_cw_64;          -- 64 bits                                     


  #syntax asm; 
    fninit
    fnclex
    fldcw   fp_cw
    wait  
  #end asm;  

  end entry;



----------------------------------------------------------------------------------------------------
exit =
-- Resetuje pøíznaky chyb fp aritmetiky
----------------------------------------------------------------------------------------------------

begin
  #syntax asm; 
    fninit     
    fnclex     
    wait       
  #end asm;  
  end exit;


  end floating_point;

{%%TEMP}  -- temporary code
{%%TEMP}  overload + :   -- binární operátor
{%%TEMP}                 floating_point.fp_add_xx, 
{%%TEMP}                 floating_point.fp_add_xd, 
{%%TEMP}                 floating_point.fp_add_xs, 
{%%TEMP}                 floating_point.fp_add_dx, 
{%%TEMP}                 floating_point.fp_add_dd, 
{%%TEMP}                 floating_point.fp_add_ds, 
{%%TEMP}                 floating_point.fp_add_sx, 
{%%TEMP}                 floating_point.fp_add_sd, 
{%%TEMP}                 floating_point.fp_add_ss,
{%%TEMP}                 -- binární pøiøazovací operátor
{%%TEMP}                 floating_point.fp_add_assign_xx, 
{%%TEMP}                 floating_point.fp_add_assign_xd, 
{%%TEMP}                 floating_point.fp_add_assign_xs, 
{%%TEMP}                 floating_point.fp_add_assign_dx, 
{%%TEMP}                 floating_point.fp_add_assign_dd, 
{%%TEMP}                 floating_point.fp_add_assign_ds, 
{%%TEMP}                 floating_point.fp_add_assign_sx, 
{%%TEMP}                 floating_point.fp_add_assign_sd, 
{%%TEMP}                 floating_point.fp_add_assign_ss,
{%%TEMP}                 -- unární operátor
{%%TEMP}                 floating_point.fp_plus_x, 
{%%TEMP}                 floating_point.fp_plus_d, 
{%%TEMP}                 floating_point.fp_plus_s,
{%%TEMP}                 -- unární pøiøazovací operátor
{%%TEMP}                 floating_point.fp_plus_assign_x, 
{%%TEMP}                 floating_point.fp_plus_assign_d, 
{%%TEMP}                 floating_point.fp_plus_assign_s;
{%%TEMP}                 
{%%TEMP}  overload - :   -- binární operátor
{%%TEMP}                 floating_point.fp_sub_xx, 
{%%TEMP}                 floating_point.fp_sub_xd, 
{%%TEMP}                 floating_point.fp_sub_xs, 
{%%TEMP}                 floating_point.fp_sub_dx, 
{%%TEMP}                 floating_point.fp_sub_dd, 
{%%TEMP}                 floating_point.fp_sub_ds, 
{%%TEMP}                 floating_point.fp_sub_sx, 
{%%TEMP}                 floating_point.fp_sub_sd, 
{%%TEMP}                 floating_point.fp_sub_ss,
{%%TEMP}                 -- binární pøiøazovací operátor
{%%TEMP}                 floating_point.fp_sub_assign_xx, 
{%%TEMP}                 floating_point.fp_sub_assign_xd, 
{%%TEMP}                 floating_point.fp_sub_assign_xs, 
{%%TEMP}                 floating_point.fp_sub_assign_dx, 
{%%TEMP}                 floating_point.fp_sub_assign_dd, 
{%%TEMP}                 floating_point.fp_sub_assign_ds, 
{%%TEMP}                 floating_point.fp_sub_assign_sx, 
{%%TEMP}                 floating_point.fp_sub_assign_sd, 
{%%TEMP}                 floating_point.fp_sub_assign_ss,
{%%TEMP}                 -- unární operátor
{%%TEMP}                 floating_point.fp_minus_x, 
{%%TEMP}                 floating_point.fp_minus_d, 
{%%TEMP}                 floating_point.fp_minus_s,
{%%TEMP}                 -- unární pøiøazovací operátor
{%%TEMP}                 floating_point.fp_minus_assign_x, 
{%%TEMP}                 floating_point.fp_minus_assign_d, 
{%%TEMP}                 floating_point.fp_minus_assign_s;
{%%TEMP}                 
{%%TEMP}  overload * :   -- binární operátor
{%%TEMP}                 floating_point.fp_mul_xx, 
{%%TEMP}                 floating_point.fp_mul_xd, 
{%%TEMP}                 floating_point.fp_mul_xs, 
{%%TEMP}                 floating_point.fp_mul_dx, 
{%%TEMP}                 floating_point.fp_mul_dd, 
{%%TEMP}                 floating_point.fp_mul_ds, 
{%%TEMP}                 floating_point.fp_mul_sx, 
{%%TEMP}                 floating_point.fp_mul_sd, 
{%%TEMP}                 floating_point.fp_mul_ss,
{%%TEMP}                 -- binární pøiøazovací operátor
{%%TEMP}                 floating_point.fp_mul_assign_xx, 
{%%TEMP}                 floating_point.fp_mul_assign_xd, 
{%%TEMP}                 floating_point.fp_mul_assign_xs, 
{%%TEMP}                 floating_point.fp_mul_assign_dx, 
{%%TEMP}                 floating_point.fp_mul_assign_dd, 
{%%TEMP}                 floating_point.fp_mul_assign_ds, 
{%%TEMP}                 floating_point.fp_mul_assign_sx, 
{%%TEMP}                 floating_point.fp_mul_assign_sd, 
{%%TEMP}                 floating_point.fp_mul_assign_ss;
{%%TEMP}                 
{%%TEMP}  overload / :   -- binární operátor
{%%TEMP}                 floating_point.fp_div_xx, 
{%%TEMP}                 floating_point.fp_div_xd, 
{%%TEMP}                 floating_point.fp_div_xs, 
{%%TEMP}                 floating_point.fp_div_dx, 
{%%TEMP}                 floating_point.fp_div_dd, 
{%%TEMP}                 floating_point.fp_div_ds, 
{%%TEMP}                 floating_point.fp_div_sx, 
{%%TEMP}                 floating_point.fp_div_sd, 
{%%TEMP}                 floating_point.fp_div_ss,
{%%TEMP}                 -- binární pøiøazovací operátor
{%%TEMP}                 floating_point.fp_div_assign_xx, 
{%%TEMP}                 floating_point.fp_div_assign_xd, 
{%%TEMP}                 floating_point.fp_div_assign_xs, 
{%%TEMP}                 floating_point.fp_div_assign_dx, 
{%%TEMP}                 floating_point.fp_div_assign_dd, 
{%%TEMP}                 floating_point.fp_div_assign_ds, 
{%%TEMP}                 floating_point.fp_div_assign_sx, 
{%%TEMP}                 floating_point.fp_div_assign_sd, 
{%%TEMP}                 floating_point.fp_div_assign_ss;
{%%TEMP}                 
{%%TEMP}  overload := :  floating_point.fp_assign_xx, 
{%%TEMP}                 floating_point.fp_assign_xd, 
{%%TEMP}                 floating_point.fp_assign_xs,
{%%TEMP}                 floating_point.fp_assign_dx, 
{%%TEMP}                 floating_point.fp_assign_dd, 
{%%TEMP}                 floating_point.fp_assign_ds,
{%%TEMP}                 floating_point.fp_assign_sx, 
{%%TEMP}                 floating_point.fp_assign_sd, 
{%%TEMP}                 floating_point.fp_assign_ss;
{%%TEMP}                 
{%%TEMP}  overload = :   --floating_point.fp_comp_eq_xx, 
{%%TEMP}                 floating_point.fp_comp_eq_xd, 
{%%TEMP}                 floating_point.fp_comp_eq_xs,
{%%TEMP}                 floating_point.fp_comp_eq_dx, 
{%%TEMP}                 --floating_point.fp_comp_eq_dd, 
{%%TEMP}                 floating_point.fp_comp_eq_ds,
{%%TEMP}                 floating_point.fp_comp_eq_sx, 
{%%TEMP}                 floating_point.fp_comp_eq_sd;
{%%TEMP}                 --floating_point.fp_comp_eq_ss;
{%%TEMP}                 
{%%TEMP}  overload <> :  --floating_point.fp_comp_ne_xx, 
{%%TEMP}                 floating_point.fp_comp_ne_xd, 
{%%TEMP}                 floating_point.fp_comp_ne_xs,
{%%TEMP}                 floating_point.fp_comp_ne_dx, 
{%%TEMP}                 --floating_point.fp_comp_ne_dd, 
{%%TEMP}                 floating_point.fp_comp_ne_ds,
{%%TEMP}                 floating_point.fp_comp_ne_sx, 
{%%TEMP}                 floating_point.fp_comp_ne_sd; 
{%%TEMP}                 --floating_point.fp_comp_ne_ss;
{%%TEMP}                 
{%%TEMP}  overload > :   floating_point.fp_comp_g_xx, 
{%%TEMP}                 floating_point.fp_comp_g_xd, 
{%%TEMP}                 floating_point.fp_comp_g_xs,
{%%TEMP}                 floating_point.fp_comp_g_dx, 
{%%TEMP}                 floating_point.fp_comp_g_dd, 
{%%TEMP}                 floating_point.fp_comp_g_ds,
{%%TEMP}                 floating_point.fp_comp_g_sx, 
{%%TEMP}                 floating_point.fp_comp_g_sd, 
{%%TEMP}                 floating_point.fp_comp_g_ss;
{%%TEMP}                 
{%%TEMP}  overload >= :  floating_point.fp_comp_ge_xx, 
{%%TEMP}                 floating_point.fp_comp_ge_xd, 
{%%TEMP}                 floating_point.fp_comp_ge_xs,
{%%TEMP}                 floating_point.fp_comp_ge_dx, 
{%%TEMP}                 floating_point.fp_comp_ge_dd, 
{%%TEMP}                 floating_point.fp_comp_ge_ds,
{%%TEMP}                 floating_point.fp_comp_ge_sx, 
{%%TEMP}                 floating_point.fp_comp_ge_sd, 
{%%TEMP}                 floating_point.fp_comp_ge_ss;
{%%TEMP}                 
{%%TEMP}  overload < :   floating_point.fp_comp_l_xx, 
{%%TEMP}                 floating_point.fp_comp_l_xd, 
{%%TEMP}                 floating_point.fp_comp_l_xs,
{%%TEMP}                 floating_point.fp_comp_l_dx, 
{%%TEMP}                 floating_point.fp_comp_l_dd, 
{%%TEMP}                 floating_point.fp_comp_l_ds,
{%%TEMP}                 floating_point.fp_comp_l_sx, 
{%%TEMP}                 floating_point.fp_comp_l_sd, 
{%%TEMP}                 floating_point.fp_comp_l_ss;
{%%TEMP}                 
{%%TEMP}  overload <= :  floating_point.fp_comp_le_xx, 
{%%TEMP}                 floating_point.fp_comp_le_xd, 
{%%TEMP}                 floating_point.fp_comp_le_xs,
{%%TEMP}                 floating_point.fp_comp_le_dx, 
{%%TEMP}                 floating_point.fp_comp_le_dd, 
{%%TEMP}                 floating_point.fp_comp_le_ds,
{%%TEMP}                 floating_point.fp_comp_le_sx, 
{%%TEMP}                 floating_point.fp_comp_le_sd, 
{%%TEMP}                 floating_point.fp_comp_le_ss;
{%%TEMP}  
{%%TEMP}  overload abs : -- unární operátor 
{%%TEMP}                 floating_point.fp_abs_x, 
{%%TEMP}                 floating_point.fp_abs_d, 
{%%TEMP}                 floating_point.fp_abs_s,
{%%TEMP}                 -- unární pøiøazovací operátor
{%%TEMP}                 floating_point.fp_abs_assign_x,
{%%TEMP}                 floating_point.fp_abs_assign_d,
{%%TEMP}                 floating_point.fp_abs_assign_s;
