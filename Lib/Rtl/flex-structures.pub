---------------------------------------------------------------------------------------------------
module public structures =
-- Simple structures
-- Flex Run-time Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
-- lists
----------------------------------------------------------------------------------------------------
type
  t_rtl_list_item = record
    end record;
  p_rtl_list_item  = ^t_rtl_list_item for machine_pointer use true;

  t_rtl_singly_item = t_rtl_list_item with record
    next           : p_rtl_list_item;
    end record;
  p_rtl_singly_item = ^t_rtl_singly_item for machine_pointer use true;

  t_rtl_doubly_item = t_rtl_list_item with record
    next           : p_rtl_list_item;
    prev           : p_rtl_list_item;
    end record;
  p_rtl_doubly_item = ^t_rtl_doubly_item for machine_pointer use true;
  
   
  t_rtl_singly_p_item = t_rtl_singly_item with record
    data           : t_rtl_pointer;
    end record;
  p_rtl_singly_p_item = ^t_rtl_singly_p_item for machine_pointer use true;

  t_rtl_doubly_p_item = t_rtl_doubly_item with record
    data           : t_rtl_pointer;
    end record;
  p_rtl_doubly_p_item = ^t_rtl_doubly_p_item for machine_pointer use true;

  t_rtl_doubly_pc_item = t_rtl_doubly_p_item with record
    refcount       : t_rtl_native_signed;
    invalid        : t_rtl_logical;
    end record;
  p_rtl_doubly_pc_item = ^t_rtl_doubly_pc_item for machine_pointer use true;

  t_rtl_singly_list = record
    first          : p_rtl_singly_item;
    end record;
  p_rtl_singly_list = ^t_rtl_singly_list for machine_pointer use true;

  t_rtl_doubly_list = record
    first          : p_rtl_doubly_item;
    last           : p_rtl_doubly_item;
    end record;
  p_rtl_doubly_list = ^t_rtl_doubly_list for machine_pointer use true;



----------------------------------------------------------------------------------------------------
procedure rtl_singly_list_create(
    list           : out class t_rtl_singly_list);
----------------------------------------------------------------------------------------------------
procedure rtl_singly_list_discard(
    list           : in out class t_rtl_singly_list);
----------------------------------------------------------------------------------------------------
procedure rtl_singly_list_insert(
    item           : in p_rtl_singly_item;
    list           : in out class t_rtl_singly_list);
----------------------------------------------------------------------------------------------------
procedure rtl_singly_list_remove(
    item           : in p_rtl_singly_item;
    list           : in out class t_rtl_singly_list);
----------------------------------------------------------------------------------------------------
procedure rtl_singly_list_remove_next(
    item           : in p_rtl_singly_item;
    list           : in out class t_rtl_singly_list);
----------------------------------------------------------------------------------------------------
procedure rtl_singly_list_first(
    item           : out p_rtl_singly_item;
    list           : in class t_rtl_singly_list);
----------------------------------------------------------------------------------------------------
procedure rtl_singly_list_next(
    item           : in out p_rtl_singly_item;
    list           : in class t_rtl_singly_list);
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
procedure rtl_doubly_list_create(
    list           : out class t_rtl_doubly_list);
----------------------------------------------------------------------------------------------------
procedure rtl_doubly_list_discard(
    list           : in out class t_rtl_doubly_list);
----------------------------------------------------------------------------------------------------
procedure rtl_doubly_list_insert(
    item           : in p_rtl_doubly_item;
    list           : in out class t_rtl_doubly_list);
----------------------------------------------------------------------------------------------------
procedure rtl_doubly_list_append(
    item           : in p_rtl_doubly_item;
    list           : in out class t_rtl_doubly_list);
----------------------------------------------------------------------------------------------------
procedure rtl_doubly_list_remove(
    item           : in p_rtl_doubly_item;
    list           : in out class t_rtl_doubly_list);
----------------------------------------------------------------------------------------------------
procedure rtl_doubly_list_first(
    item           : out p_rtl_doubly_item;
    list           : in class t_rtl_doubly_list);
----------------------------------------------------------------------------------------------------
procedure rtl_doubly_list_next(
    item           : in out p_rtl_doubly_item;
    list           : in class t_rtl_doubly_list);
----------------------------------------------------------------------------------------------------
procedure rtl_doubly_list_prev(
    item           : in out p_rtl_doubly_item;
    list           : in class t_rtl_doubly_list);
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
-- expressions
----------------------------------------------------------------------------------------------------


type
  t_rtl_expression_node_type = enum
    expr_nil;
    expr_and;
    expr_or;
    expr_xor;
    expr_not;
    expr_boolconst_leaf;
    expr_boolref_leaf;
    expr_callback_leaf;
    end enum for size use #environment target_machine_bits; div 8;
  
  t_rtl_expression_callback = procedure(
    userdata       : t_rtl_pointer;
    nodedata       : t_rtl_pointer)
    return t_rtl_logical;
  p_rtl_expression_callback = ^t_rtl_expression_callback for machine_pointer use true;

  t_rtl_expression_node;
  p_rtl_expression      = ^t_rtl_expression_node;
  t_rtl_expression_node = record
    node_type    : t_rtl_expression_node_type;
    -- leaf
      boolconst    : t_rtl_logical for position use #environment target_machine_bits; div 8;
      boolref      : p_rtl_logical for position use #environment target_machine_bits; div 8;
      nodedata     : t_rtl_pointer for position use #environment target_machine_bits; div 8;
      callback     : p_rtl_expression_callback for position use #environment target_machine_bits; div 4;
    -- operator 
      right        : p_rtl_expression for position use #environment target_machine_bits;;
      -- only for binary operators
      left         : p_rtl_expression for position use #environment target_machine_bits; div 4;
    end record;

----------------------------------------------------------------------------------------------------
procedure rtl_expr_discard(
    expression     : in out p_rtl_expression);
----------------------------------------------------------------------------------------------------
procedure rtl_expr_evaluate(
    expression     : in p_rtl_expression;
    userdata       : in t_rtl_pointer:=nil)
    return t_rtl_logical;
----------------------------------------------------------------------------------------------------
procedure rtl_expr_decompose_to_addend(
    expression     : in p_rtl_expression);
----------------------------------------------------------------------------------------------------
procedure rtl_expr_join(
    left           : in p_rtl_expression:=nil;
    operator       : t_rtl_expression_node_type;
    right          : in p_rtl_expression)
    return         p_rtl_expression;
----------------------------------------------------------------------------------------------------
procedure rtl_expr_boolconst(
    value          : t_rtl_logical)
    return         p_rtl_expression;
----------------------------------------------------------------------------------------------------
procedure rtl_expr_boolref(
    value          : p_rtl_logical)
    return         p_rtl_expression;
----------------------------------------------------------------------------------------------------
procedure rtl_expr_callback(
    callback       : p_rtl_expression_callback;
    nodedata       : t_rtl_pointer:=nil)
    return         p_rtl_expression;
----------------------------------------------------------------------------------------------------

end structures;