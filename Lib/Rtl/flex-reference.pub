----------------------------------------------------------------------------------------------------
module public reference = 
-- reference counting helpers
----------------------------------------------------------------------------------------------------
type
  t_rtl_ref_local;
  t_rtl_ref_soft;
  t_rtl_ref_shared;
  t_rtl_ref_snapshot;

  p_rtl_ref_local       = ^t_rtl_ref_local       for machine_pointer use true;
  p_rtl_ref_soft        = ^t_rtl_ref_soft        for machine_pointer use true;
  p_rtl_ref_shared      = ^t_rtl_ref_shared      for machine_pointer use true;
  p_rtl_ref_snapshot    = ^t_rtl_ref_snapshot    for machine_pointer use true;

  t_rtl_ref_free_resource = procedure (
    resource       : in out t_rtl_pointer);
  p_rtl_ref_free_resource = ^t_rtl_ref_free_resource for machine_pointer use true;
 
----------------------------------------------------------------------------------------------------
procedure rtl_ref_create_local(
    localref       : out ref t_rtl_ref_local;
    resource       : in t_rtl_pointer;
    collector      : in p_rtl_ref_free_resource);
----------------------------------------------------------------------------------------------------
procedure rtl_ref_discard_local(
    localref       : in out ref t_rtl_ref_local);
----------------------------------------------------------------------------------------------------
procedure rtl_ref_local_to_local(
    source         : in out ref t_rtl_ref_local;
    target         : in out ref t_rtl_ref_local);
----------------------------------------------------------------------------------------------------
procedure rtl_ref_derefrence(
    localref       : in out ref t_rtl_ref_local)
    return t_rtl_pointer;
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure rtl_ref_soft_to_local(
    source         : in out ref t_rtl_ref_soft;
    target         : in out ref t_rtl_ref_local);
----------------------------------------------------------------------------------------------------
procedure rtl_ref_soft_to_soft(
    source         : in out ref t_rtl_ref_soft;
    target         : in out ref t_rtl_ref_soft);
----------------------------------------------------------------------------------------------------
procedure rtl_ref_local_to_soft(
    source         : in out ref t_rtl_ref_local;
    target         : in out ref t_rtl_ref_soft);
----------------------------------------------------------------------------------------------------
procedure rtl_ref_discard_soft(
    softref        : in out ref t_rtl_ref_soft);
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
procedure rtl_ref_shared_to_snapshot(
    source         : in out ref t_rtl_ref_shared;
    target         : in out ref t_rtl_ref_snapshot);
----------------------------------------------------------------------------------------------------
procedure rtl_ref_shared_to_local(
    source         : in out ref t_rtl_ref_shared;
    target         : in out ref t_rtl_ref_local;
    when_sc_eq     : in out ref t_rtl_ref_snapshot)     -- in for compare
    return t_rtl_logical8;
----------------------------------------------------------------------------------------------------
procedure rtl_ref_shared_to_shared(
    source         : in out ref t_rtl_ref_shared;
    target         : in out ref t_rtl_ref_shared;
    when_sc_eq     : in out ref t_rtl_ref_snapshot;     -- in for compare
    when_tg_eq     : in out ref t_rtl_ref_snapshot)     -- in for compare
    return t_rtl_logical8;
----------------------------------------------------------------------------------------------------
procedure rtl_ref_shared_to_local_shared(
    source         : in out ref t_rtl_ref_shared;
    target         : in out ref t_rtl_ref_shared;
    when_sc_eq     : in out ref t_rtl_ref_snapshot)     -- in for compare
    return t_rtl_logical8;
----------------------------------------------------------------------------------------------------
procedure rtl_ref_local_shared_to_shared(
    source         : in out ref t_rtl_ref_shared;
    target         : in out ref t_rtl_ref_shared;
    when_tg_eq     : in out ref t_rtl_ref_snapshot;     -- in for compare
    tg_when_succ   : in p_rtl_ref_snapshot:=nil)        -- out for next compare
    return t_rtl_logical8;
----------------------------------------------------------------------------------------------------
procedure rtl_ref_local_shared_to_local_shared(
    source         : in out ref t_rtl_ref_shared;
    target         : in out ref t_rtl_ref_shared);
----------------------------------------------------------------------------------------------------
procedure rtl_ref_local_to_local_shared(
    source         : in out ref t_rtl_ref_local;
    target         : in out ref t_rtl_ref_shared);
----------------------------------------------------------------------------------------------------
procedure rtl_ref_shared_to_soft(
    source         : in out ref t_rtl_ref_shared;
    target         : in out ref t_rtl_ref_soft;
    when_sc_eq     : in out ref t_rtl_ref_snapshot)     -- in for compare
    return t_rtl_logical8;
----------------------------------------------------------------------------------------------------
procedure rtl_ref_local_to_shared(
    source         : in out ref t_rtl_ref_local;
    target         : in out ref t_rtl_ref_shared;
    when_tg_eq     : in out ref t_rtl_ref_snapshot;     -- in for compare
    tg_when_succ   : in p_rtl_ref_snapshot:=nil)     -- out for next compare
    return t_rtl_logical8;
----------------------------------------------------------------------------------------------------
procedure rtl_ref_discard_shared(
    target         : in out ref t_rtl_ref_shared;
    when_tg_eq     : in out ref t_rtl_ref_snapshot)     -- in for compare
    return t_rtl_logical8;
----------------------------------------------------------------------------------------------------
procedure rtl_ref_discard_local_shared(
    sharedref      : in out ref t_rtl_ref_shared);
----------------------------------------------------------------------------------------------------


--%%TODO protected

type
  t_rtl_ref_node;
  p_rtl_ref_node = ^t_rtl_ref_node for machine_pointer use true;

  t_rtl_ref_local = record
    node           : p_rtl_ref_node;
    end record;
  
  t_rtl_ref_soft  = record
    node           : p_rtl_ref_node;
    end record;
  
  t_rtl_ref_shared  = record
    node           : aliased {%%TODO remove aliased}p_rtl_ref_node;
    abacount       : t_rtl_half_native_unsigned;
    softcount      : t_rtl_half_native_signed;
    end record;

  t_rtl_ref_snapshot = record
    node           : p_rtl_ref_node;
    abacount       : t_rtl_half_native_unsigned;
    reserved       : t_rtl_half_native_unsigned;
    end record;

  t_rtl_ref_counter = record
    softcount      : aliased t_rtl_half_native_signed;     
    hardcount      : aliased t_rtl_half_native_signed;     
    end record;
  
  t_rtl_ref_node = record
    count          : aliased t_rtl_ref_counter;
    data           : t_rtl_pointer;              
    next           : t_rtl_ref_shared;
    collector      : p_rtl_ref_free_resource;
    invalid        : aliased t_rtl_native_signed;
    end record;

  t_rtl_ref_lifo = record
      first        : aliased t_rtl_ref_shared;
      end record;

  t_rtl_ref_fifo  = record
      head         : aliased t_rtl_ref_shared;
      tail         : aliased t_rtl_ref_shared;
      end record;

end reference;