----------------------------------------------------------------------------------------------------
module private tags =
-- Tags of entities and entity tag-specific operations.
-- Flex Run-time Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
#template to_nonfake_tag(T_dest,T_src);
-- Converts an expression of a tag type to the internal tag type and defakes the tag.
----------------------------------------------------------------------------------------------------
  -- convert to the internal tag type
  T_dest:=to_internal_tag(T_src);

  -- and defake the tag
  --%%TODO(TAG)
  #end to_nonfake_tag;



----------------------------------------------------------------------------------------------------
#template to_internal_tag(T);
-- Converts an expression of a tag type to the internal tag type [t_rtl_tag_internal].
----------------------------------------------------------------------------------------------------
  t_rtl_tag_internal(T:unchecked);
  #end to_internal_tag;



----------------------------------------------------------------------------------------------------
procedure rtl_tag_is_equal =
-- Checks whether A is equal to B (A = B).
----------------------------------------------------------------------------------------------------
var
  AA               : t_rtl_tag_internal;
  BB               : t_rtl_tag_internal;

begin
  to_nonfake_tag(AA,A);
  to_nonfake_tag(BB,B);
  result:=AA=BB;
  end rtl_tag_is_equal;



----------------------------------------------------------------------------------------------------
procedure rtl_tag_is_not_equal =
-- Checks whether A is equal to B (A <> B).
----------------------------------------------------------------------------------------------------
var
  AA               : t_rtl_tag_internal;
  BB               : t_rtl_tag_internal;

begin
  to_nonfake_tag(AA,A);
  to_nonfake_tag(BB,B);
  result:=AA<>BB;
  end rtl_tag_is_not_equal;



----------------------------------------------------------------------------------------------------
procedure rtl_tag_is_ancestor =
-- Checks whether A is an ancestor of B (A < B).
----------------------------------------------------------------------------------------------------
var
  AA               : t_rtl_tag_internal;
  BB               : t_rtl_tag_internal;

begin
  -- note that it is not necessary to defake the [B] tag, since this is done automatically as 
  -- a side-effect of the while loop
  to_nonfake_tag(AA,A);
  BB:=to_internal_tag(B);
  while BB<>nil loop
    BB:=p_desc_entity(BB)^.ancestor_tag;
    if AA=BB then 
      break;
      end if;
    end loop;
  result:=BB<>nil;
  end rtl_tag_is_ancestor;



----------------------------------------------------------------------------------------------------
procedure rtl_tag_is_ancestor_or_equal =
-- Checks whether A is an ancestor of B or they are equal (A <= B).
----------------------------------------------------------------------------------------------------
var
  AA               : t_rtl_tag_internal;
  BB               : t_rtl_tag_internal;

begin
  -- note that it is not necessary to defake the [B] tag, since this is done automatically as 
  -- a side-effect of the while loop
  to_nonfake_tag(AA,A);
  BB:=to_internal_tag(B);
  while BB<>nil and then AA<>BB loop
    BB:=p_desc_entity(BB)^.ancestor_tag;
    end loop;
  result:=BB<>nil;
  end rtl_tag_is_ancestor_or_equal;



----------------------------------------------------------------------------------------------------
procedure rtl_tag_is_descendant =
-- Checks whether A is a descendant of B (A > B).
----------------------------------------------------------------------------------------------------
var
  AA               : t_rtl_tag_internal;
  BB               : t_rtl_tag_internal;

begin
  -- note that it is not necessary to defake the [A] tag, since this is done automatically as 
  -- a side-effect of the while loop
  AA:=to_internal_tag(A);
  to_nonfake_tag(BB,B);
  while AA<>nil loop
    AA:=p_desc_entity(AA)^.ancestor_tag;
    if AA=BB then 
      break;
      end if;
    end loop;
  result:=AA<>nil;
  end rtl_tag_is_descendant;



----------------------------------------------------------------------------------------------------
procedure rtl_tag_is_descendant_or_equal =
-- Checks whether A is a descendant of B or they are equal (A >= B).
----------------------------------------------------------------------------------------------------
var
  AA               : t_rtl_tag_internal;
  BB               : t_rtl_tag_internal;

begin
  -- note that it is not necessary to defake the [A] tag, since this is done automatically as 
  -- a side-effect of the while loop
  AA:=to_internal_tag(A);
  to_nonfake_tag(BB,B);
  while AA<>nil and then AA<>BB loop
    AA:=p_desc_entity(AA)^.ancestor_tag;
    end loop;
  result:=AA<>nil;
  end rtl_tag_is_descendant_or_equal;



----------------------------------------------------------------------------------------------------
#pragma assign(compare_tags_eq,flex.tags.rtl_tag_is_equal              );
#pragma assign(compare_tags_ne,flex.tags.rtl_tag_is_not_equal          );
#pragma assign(order_tags_lt  ,flex.tags.rtl_tag_is_ancestor           );
#pragma assign(order_tags_le  ,flex.tags.rtl_tag_is_ancestor_or_equal  );
#pragma assign(order_tags_gt  ,flex.tags.rtl_tag_is_descendant         );
#pragma assign(order_tags_ge  ,flex.tags.rtl_tag_is_descendant_or_equal);
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
#separate private types;
-- Type tags and type tag-specific operations.
----------------------------------------------------------------------------------------------------
#separate private messages;
-- Message tags and message tag-specific operations.
----------------------------------------------------------------------------------------------------

end tags;