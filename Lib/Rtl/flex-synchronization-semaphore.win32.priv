----------------------------------------------------------------------------------------------------
procedure rtl_semaphore_new =
-- Create and initialize semaphore object.
----------------------------------------------------------------------------------------------------
begin
  semaphore_object:unchecked:=CreateSemaphoreA(nil,t_rtl_native_unsigned(maximum_in),t_rtl_native_unsigned(maximum_in),nil);
  if t_rtl_unsigned32(semaphore_object:unchecked)=INVALID_HANDLE then 
    raise synchronization_error;
    end if;
  end rtl_semaphore_new;

----------------------------------------------------------------------------------------------------
procedure rtl_semaphore_new_owned =
-- Create and initialize semaphore object.
----------------------------------------------------------------------------------------------------
begin
  semaphore_object:unchecked:=CreateSemaphoreA(nil,t_rtl_native_unsigned(maximum_in-owned),t_rtl_native_unsigned(maximum_in),nil);
  if t_rtl_unsigned32(semaphore_object:unchecked)=INVALID_HANDLE then 
    raise synchronization_error;
    end if;
  end rtl_semaphore_new_owned;


----------------------------------------------------------------------------------------------------
procedure rtl_semaphore_discard =
-- Discard semaphore object.
----------------------------------------------------------------------------------------------------
begin
  if CloseHandle(semaphore_object)=0 then 
    raise synchronization_error;
    end if;
  semaphore_object:=rtl_invalid_semaphore;
  end rtl_semaphore_discard;


----------------------------------------------------------------------------------------------------
procedure rtl_semaphore_lock =
-- Lock semaphore.
----------------------------------------------------------------------------------------------------
begin
  if not rtl_kernel_try(t_kernel_object(semaphore_object),t_rtl_wait_infinite) then
    raise synchronization_error;
    end if;
  end rtl_semaphore_lock;

----------------------------------------------------------------------------------------------------
procedure rtl_semaphore_try_lock =
----------------------------------------------------------------------------------------------------
begin
  result:=rtl_kernel_try(t_kernel_object(semaphore_object),milisec);
  end rtl_semaphore_try_lock;


----------------------------------------------------------------------------------------------------
procedure rtl_semaphore_unlock =
-- Unlock semaphore.
----------------------------------------------------------------------------------------------------
begin
  if ReleaseSemaphore(semaphore_object,1,nil)=0 then 
    raise synchronization_error;
    end if;
  end rtl_semaphore_unlock;


----------------------------------------------------------------------------------------------------
procedure rtl_semaphore_unlock_multi =
-- Unlock semaphore.
----------------------------------------------------------------------------------------------------
begin
  if ReleaseSemaphore(semaphore_object,t_rtl_native_unsigned(unlock_count),nil)=0 then 
    raise synchronization_error;
    end if;
  end rtl_semaphore_unlock_multi;