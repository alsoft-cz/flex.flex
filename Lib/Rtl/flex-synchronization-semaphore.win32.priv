----------------------------------------------------------------------------------------------------
-- %%TODO(COMMENT)
-- Flex Run-time Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure rtl_semaphore_new =
-- Create and initialize semaphore object.
----------------------------------------------------------------------------------------------------
begin
  semaphore_object:unchecked:=CreateSemaphoreW(nil,t_rtl_native_unsigned(maximum_in-owned),t_rtl_native_unsigned(maximum_in),nil);
  if t_rtl_unsigned32(semaphore_object:unchecked)=INVALID_HANDLE then 
    raise synchronization_error;
    end if;
  end rtl_semaphore_new;



----------------------------------------------------------------------------------------------------
procedure rtl_semaphore_lazy =
-- Create and initialize semaphore object on demand.
----------------------------------------------------------------------------------------------------
var
  old_value        : t_rtl_semaphore;
  new_value        : t_rtl_semaphore;

begin
  result:=true;
  if semaphore_object=rtl_nil_semaphore then
    rtl_semaphore_new(new_value,maximum_in,owned);
    rtl_interlocked_compare_exchange(    ^t_rtl_native_signed(semaphore_object),
                                          t_rtl_native_signed(new_value),
                                          t_rtl_native_signed(rtl_nil_semaphore),
                                          t_rtl_native_signed(old_value));
    if old_value<>rtl_nil_semaphore then
      --nekdo mne predbehnul
      rtl_semaphore_discard(new_value);
      result:=false;
      end if;
    end if;
  end rtl_semaphore_lazy;


----------------------------------------------------------------------------------------------------
procedure rtl_semaphore_discard =
-- Discard semaphore object.
----------------------------------------------------------------------------------------------------
begin
  if CloseHandle(semaphore_object)=0 then 
    raise synchronization_error;
    end if;
  semaphore_object:=rtl_invalid_semaphore;
  end rtl_semaphore_discard;



----------------------------------------------------------------------------------------------------
procedure rtl_semaphore_lock =
-- Lock semaphore.
----------------------------------------------------------------------------------------------------
begin
  if not rtl_kernel_try(t_rtl_kernel_object(semaphore_object),t_rtl_wait_infinite) then
    raise synchronization_error;
    end if;
  end rtl_semaphore_lock;

----------------------------------------------------------------------------------------------------
procedure rtl_semaphore_try_lock =
----------------------------------------------------------------------------------------------------
begin
  result:=rtl_kernel_try(t_rtl_kernel_object(semaphore_object),milisec);
  end rtl_semaphore_try_lock;



----------------------------------------------------------------------------------------------------
procedure rtl_semaphore_unlock =
-- Unlock semaphore.
----------------------------------------------------------------------------------------------------
begin
  if ReleaseSemaphore(semaphore_object,1,nil)=0 then 
    raise synchronization_error;
    end if;
  end rtl_semaphore_unlock;



----------------------------------------------------------------------------------------------------
procedure rtl_semaphore_unlock_multi =
-- Unlock semaphore.
----------------------------------------------------------------------------------------------------
begin
  if ReleaseSemaphore(semaphore_object,t_rtl_native_unsigned(unlock_count),nil)=0 then 
    raise synchronization_error;
    end if;
  end rtl_semaphore_unlock_multi;