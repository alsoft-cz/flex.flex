----------------------------------------------------------------------------------------------------
--module public blocks =
-- Flex Run-time Library
-- Memory manager definitions
-- Copyright (C) 1999-2003 A && L soft
----------------------------------------------------------------------------------------------------


-- dop©edn‚ deklarace
#if #environment compiler_version;='4.0.3.4' then;
class c_rtl_memheap; type p_rtl_memheap = ^class c_rtl_memheap {for machine_pointer use true};
class c_rtl_chain;   type p_rtl_chain   = ^class c_rtl_chain {for machine_pointer use true};
#if p_rtl_memheap:size<>4 then;
  #error 'Wrong size of "p_rtl_memheap"';
#end if;
#if p_rtl_chain:size<>4 then;
  #error 'Wrong size of "p_rtl_chain"';
#end if;
#else;
class c_rtl_memheap; type p_rtl_memheap = ^c_rtl_memheap;
class c_rtl_chain;   type p_rtl_chain   = ^c_rtl_chain;
#end if;

type
  t_rtl_memmgr_header;
  t_rtl_memmgr_footer;
  p_rtl_memmgr_header = ^t_rtl_memmgr_header;
  p_rtl_memmgr_footer = ^t_rtl_memmgr_footer;

type
  t_rtl_chain_item;
  p_rtl_chain_item = ^t_rtl_chain_item;
  t_rtl_chain_item = record
    next           : p_rtl_chain_item;
    prev           : p_rtl_chain_item;
    end record;

type
  t_rtl_memmgr_header = t_rtl_chain_item with record
    dealocator     : p_rtl_memheap;
    thread         : t_rtl_native_unsigned;
    num            : t_rtl_native_unsigned;
    age            : t_rtl_native_unsigned;
    size           : t_rtl_native_unsigned;
    lenght         : t_rtl_native_unsigned;
    end record;
  --%%TODO check record size = 32 bytes

type
  t_rtl_memmgr_footer = record
    checksum       : t_rtl_native_unsigned;
    reserve1       : t_rtl_native_unsigned;
    reserve2       : t_rtl_native_unsigned;
    reserve3       : t_rtl_native_unsigned;
    end record;
  --%%TODO check record size = 16 bytes

const
    mem_headersize     = t_rtl_memmgr_header:size;
    mem_footersize     = t_rtl_memmgr_footer:size;
    mem_headbothsize   = t_rtl_memmgr_footer:size + t_rtl_memmgr_header:size;
    mem_invalid_headnum : t_rtl_native_unsigned = $FFFFFFFF;

------------------------------------------------------------------------------------------------
procedure addheader (
size           : t_rtl_native_unsigned) 
return t_rtl_native_unsigned;
------------------------------------------------------------------------------------------------
procedure adr2hdr (
addr           : t_rtl_pointer) 
return p_rtl_memmgr_header;
------------------------------------------------------------------------------------------------
procedure hdr2adr (
hdr            : p_rtl_memmgr_header) 
return t_rtl_pointer ;
------------------------------------------------------------------------------------------------
procedure hdr2ftr (
hdr            : p_rtl_memmgr_header;                -- header
size           : in  t_rtl_native_unsigned)      -- data size
return p_rtl_memmgr_footer ;
-----------------------------------------------------------------------------------------------
procedure set_header_alloc (
num            : in  t_rtl_native_unsigned;      -- allocation ID
hdr            : in  p_rtl_memmgr_header;            -- address header
size           : in  t_rtl_native_unsigned;      -- requested size
dealocator     : in  p_rtl_memheap;                  -- delallocator
addchainroot   : in  p_rtl_chain:=nil;            -- root of chain to add
delchainroot   : in  p_rtl_chain:=nil);           -- root of chain to remove
------------------------------------------------------------------------------------------------
procedure set_header_free (
num            : in  t_rtl_native_unsigned;      -- allocation ID
hdr            : in  p_rtl_memmgr_header;            -- address header
addchainroot   : in  p_rtl_chain:=nil;            -- root of chain to add
delchainroot   : in  p_rtl_chain:=nil);           -- root of chain to remove
------------------------------------------------------------------------------------------------
procedure check_free_header (
hdr            : in  p_rtl_memmgr_header);           -- address header
------------------------------------------------------------------------------------------------
procedure check_allocated_header (
hdr            : in  p_rtl_memmgr_header);           -- address header
------------------------------------------------------------------------------------------------
procedure dump_header (
hdr            : in  p_rtl_memmgr_header             -- address header
--textstream     : in t_rtl_stream;              -- text stream
);
------------------------------------------------------------------------------------------------

--end blocks;