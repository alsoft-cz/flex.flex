----------------------------------------------------------------------------------------------------
-- %%TODO(COMMENT)
-- Flex Run-time Library
-- Copyright (C) 1999-2004 A && L soft
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
procedure rtl_squeue_new =
----------------------------------------------------------------------------------------------------
begin
  squeue.freedata:=freedata;
  rtl_doubly_list_create(squeue.list);
  rtl_critical_new(squeue.lock);
  rtl_critisem_new(squeue.first,rtl_max_semaphore,rtl_max_semaphore);
  rtl_critisem_new(squeue.next,rtl_max_semaphore,rtl_max_semaphore);
  rtl_critievt_new(squeue.empty,true);
  end rtl_squeue_new;



----------------------------------------------------------------------------------------------------
procedure rtl_squeue_discard =
----------------------------------------------------------------------------------------------------
begin
  rtl_squeue_reset(squeue);
  rtl_doubly_list_discard(squeue.list);
  rtl_critical_discard(squeue.lock);
  rtl_critisem_discard(squeue.first);
  rtl_critisem_discard(squeue.next);
  rtl_critievt_discard(squeue.empty);
  end rtl_squeue_discard;



----------------------------------------------------------------------------------------------------
procedure rtl_squeue_reset =
----------------------------------------------------------------------------------------------------
var
  data             :  t_rtl_pointer;

begin
 while rtl_squeue_try_draw_out(squeue,data,t_rtl_wait_immediate) loop
    if squeue.freedata<>nil then
      squeue.freedata^(data);
      end if;
    end loop;
  end rtl_squeue_reset;



----------------------------------------------------------------------------------------------------
procedure rtl_squeue_draw_out =
----------------------------------------------------------------------------------------------------
begin
  if not rtl_squeue_try_draw_out(squeue,data,t_rtl_wait_infinite,filter) then
    raise tasking_error;
    end if;
  end rtl_squeue_draw_out;



----------------------------------------------------------------------------------------------------
procedure rtl_squeue_wait_empty =
----------------------------------------------------------------------------------------------------
begin
  result:=rtl_critievt_try_wait(squeue.empty,milisec);
  end rtl_squeue_wait_empty;



----------------------------------------------------------------------------------------------------
procedure rtl_squeue_try_draw_out =
----------------------------------------------------------------------------------------------------
var
    listitem       : p_rtl_doubly_p_item;
    start          : t_system_ticks;
    elapsed        : t_system_ticks;
    timeout        : t_rtl_timeout;

begin
  rtl_init_timeout;
  loop
    result:=rtl_critisem_try_lock(squeue.first,timeout);
    if not result then
      return;
      end if;

    -- zkusim zamknout
    rtl_adjust_timeout;
    result:=rtl_critical_try_lock(squeue.lock,timeout);
    if result then
      rtl_doubly_list_first(p_rtl_doubly_item(listitem:unchecked),squeue.list);

      if filter<>nil then
        result:=rtl_expr_evaluate(filter,listitem^.data);
      --else
        --result:=true;
        end if;
      
      -- vyhovuje filtru, vyndam ven
      if result then
        rtl_doubly_list_remove(p_rtl_doubly_item(listitem:unchecked),squeue.list);
        data:=listitem^.data;
        discard listitem;

        -- zmensim pocet prvku ve fronte
        pred squeue.count;
        if squeue.count=0 then
          rtl_critievt_set(squeue.empty);
        else
          rtl_critisem_unlock_all_waiting(squeue.next);
          end if;
        end if;

      --odemknu
      rtl_critical_unlock(squeue.lock);

      -- pokud cekam na dalsi
      if not result then
        -- vratim firsta ktereho jsem vybral
        rtl_critisem_unlock(squeue.first);

        -- cekam na next
        rtl_adjust_timeout;
        result:=rtl_critisem_try_lock(squeue.next,timeout);
        if not result or timeout=0 then
          return;
          end if;
      else
        -- nalezeno koncim
        return;
        end if;
    else
      if timeout=0 then
        return;
        end if;
      end if;
    end loop;
  end rtl_squeue_try_draw_out;



----------------------------------------------------------------------------------------------------
procedure rtl_squeue_append =
----------------------------------------------------------------------------------------------------
var
    listitem       : p_rtl_doubly_p_item;

begin
  -- vytvorim prvek
  new listitem;
  listitem^.data:=data;

  -- zamknu
  rtl_critical_lock(squeue.lock);

    -- vlozim prvek
    rtl_doubly_list_append(p_rtl_doubly_item(listitem:unchecked),squeue.list);

    -- zvednu pocet prvku ve fronte
    succ squeue.count;
    if squeue.count=1 then
      rtl_critievt_reset(squeue.empty);
      end if;
    rtl_critisem_unlock(squeue.first);
    rtl_critisem_unlock_all_waiting(squeue.next);

  -- odemknu
  rtl_critical_unlock(squeue.lock);
  end rtl_squeue_append;



