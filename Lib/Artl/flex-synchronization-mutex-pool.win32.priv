----------------------------------------------------------------------------------------------------
procedure rtl_mutex_new =
-- Create and initialize mutex object.
----------------------------------------------------------------------------------------------------
begin
  if not rtl_sstack_pop(rtl_g_mutex_pool,t_rtl_pointer(mutex_object:unchecked)) then
    -- need allocate
    basic.rtl_mutex_new(mutex_object);
    end if;
  end rtl_mutex_new;


----------------------------------------------------------------------------------------------------
procedure rtl_mutex_discard =
-- Discard mutex object.
----------------------------------------------------------------------------------------------------
begin
  if rtl_g_mutex_pool.count>rtl_g_mutex_amplitude then
    basic.rtl_mutex_discard(mutex_object);
  else
    rtl_sstack_push(rtl_g_mutex_pool,t_rtl_pointer(mutex_object:unchecked))
    end if;
  end rtl_mutex_discard;


----------------------------------------------------------------------------------------------------
procedure rtl_mutex_lock =
-- Lock mutex.
----------------------------------------------------------------------------------------------------
begin
  basic.rtl_mutex_lock(mutex_object);
  end rtl_mutex_lock;

----------------------------------------------------------------------------------------------------
procedure rtl_mutex_try_lock =
----------------------------------------------------------------------------------------------------
begin
  result:=basic.rtl_mutex_try_lock(mutex_object,milisec);
  end rtl_mutex_try_lock;


----------------------------------------------------------------------------------------------------
procedure rtl_mutex_unlock =
-- Unlock mutex.
----------------------------------------------------------------------------------------------------
begin
  basic.rtl_mutex_unlock(mutex_object);
  end rtl_mutex_unlock;