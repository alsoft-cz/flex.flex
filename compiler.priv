----------------------------------------------------------------------------------------------------
module private compiler =
-- P©eklada‡ Flexu.
----------------------------------------------------------------------------------------------------

{
----------------------------------------------------------------------------------------------------
procedure compile =
-- P©eklad programu.
----------------------------------------------------------------------------------------------------
with
  console;

type
  --%%TODO(TAG) Odstranit tento typ.
  pci_cpuspecific  = ^class cp_cpu.cp_ia32.ci_cpuspecific;
  pcp_osspecific   = ^class cp_os.cp_win32.cp_osspecific;
  plinkresolver_ia32_win32 = ^class cl_link.cl_resolver.cl_ia32.linkresolver_ia32_win32;
  plinkimage_pe            = ^class cl_link.cl_image.cl_pe.linkimage_pe;

var
  compi            : pentity_compile;            -- kompila‡n¡ jednotka
  resolver         : ^class cl_link.cl_resolver.linkresolver;
  image            : ^class cl_link.cl_image.linkimage;
  exe_name         : p_file_name;
  lst_name         : p_file_name;
  listing          : cc_listing;                 -- listing

begin
  -- zvolit platformu
  compdesc:=cdbase_flex;
  sysdesc :=sdbase_win32;
  sysdesc.os_subsystem_type:=os_subsystem_console;
  
  -- nastavit parametry c¡lov‚ platformy
  new pci_cpuspecific(cpu); --%%TODO(TAG) new cpu tag cp_cpu.cp_ia32.ci_cpuspecific;
  new pcp_osspecific(os);   --%%TODO(TAG) new cpu tag cp_os.cp_win32.cp_osspecific;

  -- inicializovat environment promˆnn‚
  cc_def.cc_env.env_init_var;

  -- inicializovat seznam soubor– a seznam jmen pou‘it˜ch soubor–
  new cc_var.cfg_files;
  new cc_var.used_files;

  -- inicializovat seznam chyb
  new cc_var.ce;

  -- %%X vypo‡¡tat jm‚no EXE
  new exe_name range sname:length+4;
  exe_name^:=sname;
  exe_name^ & '.exe';

  -- %%X vypo‡¡tat jm‚no listingu
  new lst_name range sname:length+4;
  lst_name^:=sname;
  lst_name^ & '.lst';

  -- inicializovat listing
  listing.create(lst_name^,listing.t_listing_section_set:full);
  cc_var.listing:=^listing;


  ---- (0) opsat do listingu konfiguraci p©ekladu ----
  listing.start_section(listing.tls_setup);

  begin
    ---- (1) p©eklad  ----

    -- poznamenat do listingu za‡ tek p©ekladu
    listing.start_section(listing.tls_compilation);
    listing.write_header_item('Source code:',sname);
    listing.write_header_item('Compiled program:',exe_name^);
    listing.write_header_item('Listing:',lst_name^);
    listing.write_header_item('Date and time of compilation:','%%TODO(LIB)');
    listing.end_header;

    -- otev©¡t soubor
    cc_text.openfile(sname,false);

    -- p©elo‘it
    p_compunit(compi);


    ---- (2) glob ln¡ anal˜za  ----

    -- poznamenat na obrazovku a do listingu
    write_line('Analyzing...');
    listing.start_section(listing.tls_global_analysis);

    -- glob ln¡ anal˜za
    a_analyze(compi);


    ---- (3) generov n¡ k¢du  ----

    -- poznamenat na obrazovku a do listingu
    write_line('Generating code...');
    listing.start_section(listing.tls_code_generation);

    -- generov n¡ k¢du
    cg_gen.cg_ia32.ci_gen.i_codegen(compi);


    ---- (4) linkov n¡  ----

    -- poznamenat na obrazovku a do listingu
    write_line('Linking...');
    listing.start_section(listing.tls_linking);

    -- linkov n¡
    new plinkresolver_ia32_win32(resolver);
    new plinkimage_pe(image);
    plinkresolver_ia32_win32(resolver)^.init(compi,$00400000,4096,4096,32{16},4);
    plinkimage_pe(image)^.init(exe_name^);
    l_link(compi,resolver^,image^);

  catch
    -- chyby p©i p©ekladu
    when cc_codes.compiler_error, cc_codes.resume_error, cc_codes.internal_error {%%TODO(EXCEPTION) cc_codes.flex_error} do
        -- v tuto chv¡li ji‘ nic nedˆlat

  leave
    ---- (5) v˜sledek p©ekladu ----
    listing.start_section(listing.tls_summary);

    -- vypsat seznam chyb na obrazovku a do listingu
    print_errors(console_output^);
    print_errors(listing.get_output_text_stream^);
    end;
  end compile;
}


----------------------------------------------------------------------------------------------------
class private c_flex_compiler =
-- P©eklada‡ Flexu.
----------------------------------------------------------------------------------------------------

    with
      standard.conversions,
      cc_def,
      cc_def.cc_entity,
      cc_def.cc_desc,
      cc_def.cc_var,
      cc_base,
      cd_decl,
      cd_decl.cd_unit,
      ca_analyzer,
      ca_analyzer.ca_analyze,
      cp_cpu,
      cp_os,
      cg_gen,
      cl_link,
      cl_link.cl_resolver,
      cl_link.cl_image;

    use
      cc_def.cc_env,
      cc_def.cc_codes,
      cc_base.cc_text,
      cp_cpu.cp_ia32,
      cp_os.cp_win32,
      cg_gen.cg_ia32,
      cg_gen.cg_ia32.ci_gen,
      cl_link.cl_image.cl_pe,
      cl_link.cl_resolver.cl_ia32;

    type
      --%%TODO(TAG) Odstranit tento typ.
      pci_cpuspecific  = ^class cp_cpu.cp_ia32.ci_cpuspecific;
      pcp_osspecific   = ^class cp_os.cp_win32.cp_osspecific;
      plinkresolver_ia32_win32 = ^class cl_link.cl_resolver.cl_ia32.linkresolver_ia32_win32;
      plinkimage_pe            = ^class cl_link.cl_image.cl_pe.linkimage_pe;

    ------------------------------------------------------------------------------------------------
    static compile =
    -- P©eklad programu.
    ------------------------------------------------------------------------------------------------
    var
      compi        : pentity_compile;            -- kompila‡n¡ jednotka
      resolver     : ^class cl_link.cl_resolver.linkresolver;
      image        : ^class cl_link.cl_image.linkimage;

    begin
      -- nastavit stream pro z pis pr–bˆhu p©ekladu
      cc_var.output:=^os;
      
      -- inicializovat listing
      listing.create(lst_name,listing.t_listing_section_set:full);
      cc_var.listing:=^listing;


      ---- (0) opsat do listingu konfiguraci p©ekladu ----
      listing.start_section(listing.tls_setup);

      begin
        ---- (1) p©eklad  ----

        -- poznamenat do listingu za‡ tek p©ekladu
        listing.start_section(listing.tls_compilation);
        listing.write_header_item('Source code:',src_name);
        listing.write_header_item('Compiled program:',exe_name);
        listing.write_header_item('Listing:',lst_name);
        listing.write_header_item('Date and time of compilation:','%%TODO(LIB)');
        listing.end_header;

        -- otev©¡t soubor
        cc_text.openfile(src_name,false);

        -- p©elo‘it
        p_compunit(compi);

        -- konec, pokud je po‘adov na pouze syntaktick  kontrola
        if cfg_syntaxcheckonly then
          return;
          end if;

        -- vynechat pr zdn˜ © dek, vypad  to l‚pe
        os.write_line('');

        ---- (2) glob ln¡ anal˜za  ----

        -- poznamenat na obrazovku a do listingu
        os.write_line('Analyzing...');
        listing.start_section(listing.tls_global_analysis);

        -- glob ln¡ anal˜za
        a_analyze(compi);


        ---- (3) generov n¡ k¢du  ----

        -- poznamenat na obrazovku a do listingu
        os.write_line('Generating code...');
        listing.start_section(listing.tls_code_generation);

        -- generov n¡ k¢du
        cg_gen.cg_ia32.ci_gen.i_codegen(compi);


        ---- (4) linkov n¡  ----

        -- poznamenat na obrazovku a do listingu
        os.write_line('Linking...');
        listing.start_section(listing.tls_linking);

        -- linkov n¡
        new plinkresolver_ia32_win32(resolver);
        new plinkimage_pe(image);
        plinkresolver_ia32_win32(resolver)^.init(compi,$00400000,4096,4096,32{16},4);
        plinkimage_pe(image)^.init(exe_name);
        l_link(compi,resolver^,image^);

        -- #option Image_Base_Address(<num>);
        -- #option Code_Alignment(<num>);
        -- #option Global_Data_Alignment(<num>);
        -- #option Executable_Extension(<string>);
        -- #pragma No_Return(<subprogram>);

      catch
        -- chyby p©i p©ekladu
        when cc_codes.compiler_error, cc_codes.resume_error, cc_codes.internal_error {%%TODO(EXCEPTION) cc_codes.flex_error} do
            -- v tuto chv¡li ji‘ nic nedˆlat

      leave
        ---- (5) v˜sledek p©ekladu ----
        listing.start_section(listing.tls_summary);

        -- vynechat pr zdn˜ © dek, vypad  to l‚pe
        os.write_line('');

        -- zobrazit po‡et p©elo‘en˜ch © dk–
        os.write('Total of '); 
        os.write(unsigned_to_string(cc_var.total_lines));
        os.write(' (');
        os.write(unsigned_to_string(cc_var.effective_lines));
        os.write_line(' effective) lines compiled in %%TODO(LIB) ms (user: %%TODO(LIB) ms, kernel: %%TODO(LIB) ms)');

        -- vynechat pr zdn˜ © dek, vypad  to l‚pe
        os.write_line('');

        -- uvolnit pamˆŸ
        discard resolver;
        discard image;
        end;
      end compile;



    ------------------------------------------------------------------------------------------------
    entry =
    -- Inicializace.
    ------------------------------------------------------------------------------------------------
    begin
      -- zvolit platformu
      compdesc:=cdbase_flex;
      sysdesc :=sdbase_win32;
      sysdesc.os_subsystem_type:=os_subsystem_console;
      
      -- nastavit parametry c¡lov‚ platformy
      new pci_cpuspecific(cpu); --%%TODO(TAG) new cpu tag cp_cpu.cp_ia32.ci_cpuspecific;
      new pcp_osspecific(os);   --%%TODO(TAG) new cpu tag cp_os.cp_win32.cp_osspecific;

      -- inicializovat environment promˆnn‚
      cc_def.cc_env.env_init_var;

      -- inicializovat seznam jmen pou‘it˜ch soubor–
      new cc_var.used_files;

      -- inicializovat seznam chyb
      new cc_var.ce;
      end entry;

    end c_flex_compiler;

end compiler;