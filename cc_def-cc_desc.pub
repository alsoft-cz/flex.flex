----------------------------------------------------------------------------------------------------
module public{cc_def.}cc_desc =
-- P©eklada‡.
-- Popisy c¡lov˜ch platforem.
----------------------------------------------------------------------------------------------------
-- Ondra  : 23.02.2000 : Vytvo©il.
-- TomasH : 09.07.2003 : Pridal kostru na podporu jinych platforem
----------------------------------------------------------------------------------------------------

with 
  standard.streams;


----- C¡lov‚ platformy -----------------------------------------------------------------------------
{%OFF}
type
  -- opera‡n¡ syst‚my
  tosfamily    = enum
      tos_officeline;          -- OfficeLine
      tos_win32;               -- Windows NT/95
      tos_os400;               -- OS/400
      tos_unix;                -- Linux
      end enum;


  -- typy OS v ramci family
  -- jsou zde vsechny pohromade, ktery typ je platny s ktero family je urceno dale
  tostype      = enum 
      tost_basic;              -- blize nespecifikovany
      tost_win32_NT;           -- typy win32
      tost_win32_2000;
      tost_win32_95;
      tost_win32_98;           
      tost_unix_Linux;         -- typy unix
      tost_unix_OpenBSD;
      tost_unix_FreeBSD;
      tost_unix_NetBSD; 
      end enum;

  tostype_set = set of tostype;


  -- subsystemy
  tossubsystem = enum
      toss_native;             -- native subsystem (default)
      toss_console;            -- command line interface
      toss_gui;                -- graphic user interface
end enum;

  tossubsystem_set = set of tossubsystem;


  -- procesory
  tmachinearch = enum
      tma_FC32;                -- FlexCode 32
      tma_FC64;                -- FlexCode 64
      tma_IA32;                -- Intel IA-32
      tma_IA64;                -- Intel IA-64
      tma_AS400MI;             -- IBM AS/400 Machine Interface
      end enum;

  tmachinearch_set = set of tmachinearch;

  -- popis podporovanych OS a jejich typu, sybsystemu a architektur
  tfamily_desc   = record
      supported            : t_logical;            -- jestli je vubec podporovany, aby se nemusely vsechny enumy zakomentovavat
      os_type_set          : tostype_set;        -- ktere jsou pripustne typy OS v ramci family    
      os_subsystem_set     : tossubsystem_set;   -- ktere jsou pripustne subsystemy v ramci OS
      cpu_architecture_set : tmachinearch_set;   -- ktere jsou pripustne procesoru v dane architekture
      end record;

  tos_family_features = array tosfamily of tfamily_desc;  -- co ktery 

const
  -- verze jazyka
  language_version     = 4000;

--const 
  -- typy a subsystemy spadajici do rodiny win32
--  os_type_win32_set      : tostype_set = [tost_basic, tost_win32_NT, tost_win32_2000, tost_win32_95, tost_win32_98];
--  os_subsystem_win32_set : tossubsystem_set = [toss_console{, toss_gui}];   -- zatim podporujeme jenom console
--  os_cpu_win32_set       : tmachinearch_set = [tma_IA32];

  -- typy spadajici do rodiny unix
--  os_type_unix_set       : tostype_set = [tost_unix_Linux, tost_unix_OpenBSD, tost_unix_FreeBSD, tost_unix_NetBSD];
--  os_subsystem_unix_set  : tossubsystem_set  = [toss_console];
--  os_cpu_unix_set        : tmachinearch_set = [tma_IA32];

var
  os_family_features : const tos_family_features := [
      for tos_win32 use [                       -- podporovany system je win32
          for supported            use true,
          for os_type_set          use [tost_basic, tost_win32_NT, tost_win32_2000, tost_win32_95, tost_win32_98],
          for os_subsystem_set     use [toss_console{, toss_gui}],
          for cpu_architecture_set use [tma_IA32]
          ],
{      for tos_unix use [                       -- podporovany system je unix/linux
          for supported            use true,
          for os_type_set          use [tost_unix_linux, tost_unix_OpenBSD, tost_unix_FreeBSD, tost_unix_NetBSD],
          for os_subsystem_set     use [toss_console,toss_gui],
          for cpu_architecture_set use [tma_IA32, tma_IA64]
          ],}
      for others use [
          for supported            use false,      -- pro ostatni nemame podporu        
          for os_type_set          use [],   
          for os_subsystem_set     use [],
          for cpu_architecture_set use []
          ]
      ];

var
  -- Nasledujici stringy musi byt disjunktni, protoze pri zjistovani zda nalezeny file
  -- odpovida pozadovane variante nelze rozlisit ktera cast jmena odpovida ktere variante
  -- tyka se os_family, machine_architecture, os_type, os_subsystem

  -- typy opera‡n¡ch syst‚m–
  os_family            : const array tosfamily of t_char32str := [
      { tos_officeline } 'OFFICELINE',
      { tos_win32      } 'WIN32',
      { tos_os400      } 'OS_400',
      { tos_unix       } 'UNIX'];

  -- typy procesor–
  machine_architecture : const array tmachinearch of t_char32str := [
      { tgc_FC32       } 'FC32',
      { tgc_FC64       } 'FC64',
      { tgc_IA32       } 'IA-32',
      { tgc_IA64       } 'IA-64',
      { tgc_AS400MI    } 'AS_400-MI'];

  -- typy OS v ramci os_family
  os_type              : const array tostype of t_char32str := [
      { tost_basic        }  'BASIC',
      { tost_win32_NT     }  'NT',
      { tost_win32_2000   }  '2000',
      { tost_win32_95     }  '95',
      { tost_win32_98     }  '98',
      { tost_unix_Linux   }  'LINUX',
      { tost_unix_OpenBSD }  'OPENBSD',
      { tost_unix_FreeBSD }  'FREEBSD',
      { tost_unix_NetBSD  }  'NETBSD'];
 
  -- subsystemy
  os_subsystem         : const array tossubsystem of t_char32str := [ 
      { toss_native    } 'NATIVE',
      { toss_console   } 'CONSOLE',
      { toss_gui       } 'GUI'];

--const
  -- univerz ln¡ typ opera‡n¡ho syst‚mu "z kladn¡"
--  os_type_basic        = 'BASIC';

  -- typy Win32 syst‚m–
--  os_type_win32_NT     = 'NT';
--  os_type_win32_2000   = '2000';
--  os_type_win32_95     = '95';
--  os_type_win32_98     = '98';

  -- typy Unix syst‚m–
--  os_type_unix_Linux   = 'LINUX';
--  os_type_unix_OpenBSD = 'OPENBSD';
--  os_type_unix_FreeBSD = 'FREEBSD';
--  os_type_unix_NetBSD  = 'NETBSD';

  -- typy subsyst‚m–
--  os_subsystem_native  = 'NATIVE';
--  os_subsystem_console = 'CONSOLE';
--  os_subsystem_gui     = 'GUI';

type
  -- popis p©eklada‡e
  compilerdesc   = record
      c_name     : t_char32str;                  -- jm‚no p©eklada‡e
      c_type     : t_char32str;                  -- typ p©eklada‡e
      c_subtype  : t_char32str;                  -- subtyp p©eklada‡e
      c_ver      : t_char32str;                  -- verze p©eklada‡e
      end record;

  -- popis syst‚mu
  systemdesc     = record
      os_name              : t_char32str;        -- viz CC_ENV
      os_family            : tosfamily;          -- viz CC_ENV
      os_type              : tostype;            -- viz CC_ENV
      os_version           : t_char32str;        -- viz CC_ENV
      os_subsystem_type    : tossubsystem;       -- viz CC_ENV
      os_subsystem_version : t_char32str;        -- viz CC_ENV
      machine_architecture : tmachinearch;       -- viz CC_ENV
      machine_version      : t_char32str;        -- viz CC_ENV
      machine_bits         : t_unsigned;         -- viz CC_ENV
      machine_direct_byteorder : t_logical;      -- viz CC_ENV
      end record;

var
  -- popis p©eklada‡e
  cdbase_flex    : const compilerdesc := [
      for c_name               use 'A && L soft Flex',
      for c_type               use 'ALSOFT_FLEX',
      for c_subtype            use '',
      for c_ver                use '4.0.2'];

  -- implicitni definice platforem
  sdbase_list    : const array tosfamily of systemdesc := [
  -- z klad popisu Win32 platformy
--  sdbase_win32   : const systemdesc := [
    for tos_win32 use [
      for os_name              use 'Microsoft Windows',
      for os_family            use tos_win32,
      for os_type              use tost_basic,
      for os_version           use '4.0',
      for os_subsystem_type    use toss_console,
      for os_subsystem_version use '4.0',
      for machine_architecture use tma_ia32,
      for machine_version      use '5',
      for machine_bits         use 32,
      for machine_direct_byteorder use true],

  -- z klad popisu Linux platformy
--  sdbase_linux   : const systemdesc := [
    for tos_unix  use [
      for os_name              use 'Linux',
      for os_family            use tos_unix,
      for os_type              use tost_unix_linux,
      for os_version           use '2.0',
      for os_subsystem_type    use toss_console,
      for os_subsystem_version use '2.0',
      for machine_architecture use tma_ia32,
      for machine_version      use '5',
      for machine_bits         use 32,
      for machine_direct_byteorder use true],

   -- ostatni nepodporovane platformy 
   for others use [                                  -- tady by to chtelo neco lepsiho, ale je tp jedno, 
      for os_name              use 'Unsupported',    -- pokud je nastaveny flag na unsupported v os_family_features
      for os_family            use tos_unix,
      for os_type              use tost_unix_linux,
      for os_version           use '2.0',
      for os_subsystem_type    use toss_console,
      for os_subsystem_version use '2.0',
      for machine_architecture use tma_ia32,
      for machine_version      use '5',
      for machine_bits         use 32,
      for machine_direct_byteorder use true]
    ];


  -- host = na ktere platforme prekladame
  sdbase_host   : const systemdesc := [
      for os_name              use 'Microsoft Windows',
      for os_family            use tos_win32,
      for os_type              use tost_basic,
      for os_version           use '4.0',
      for os_subsystem_type    use toss_console,
      for os_subsystem_version use '4.0',
      for machine_architecture use tma_ia32,
      for machine_version      use '5',
      for machine_bits         use 32,
      for machine_direct_byteorder use true];
{%ON}


----------------------------------------------------------------------------------------------------
procedure set_os_family (
    os_name      : in t_char32ustr;                   -- jmeno os family
    ostream      : in c_output_text_stream);
-- nastavi OS family, raise config_error pokud je neznama nebo nepodporovana
----------------------------------------------------------------------------------------------------
procedure set_os_type (
    os_type_name : in t_char32ustr;                  -- jmeno os type
    ostream      : in c_output_text_stream);
-- nastavi OS type, raise config_error pokud je nezname nebo neni platne pro danou family
----------------------------------------------------------------------------------------------------
procedure set_os_subsystem (
    os_subsystem_name : in t_char32ustr;             -- jmeno os type
    ostream           : in c_output_text_stream);
-- Nastavi OS subsystem, raise config_error pokud je nezname nebo neni platne pro danou family
----------------------------------------------------------------------------------------------------
procedure set_cpu_architecture (
    cpu_architecture_name   : in t_char32ustr;       -- jmeno cpu architektury
    ostream                 : in c_output_text_stream);
-- nastavi pozadovanou CPU architekturu, raise config_error pokud je neznama nebo neni platna pro danou family


----------------------------------------------------------------------------------------------------
procedure get_os_family_name          return t_char32str;  
-- vrati jmeno prave zkonfigurovane OS family
----------------------------------------------------------------------------------------------------
procedure get_os_type_name            return t_char32str;  
-- vrati jmeno prave zkonfigurovaneho OS typu
----------------------------------------------------------------------------------------------------
procedure get_os_subsystem_name       return t_char32str;  
-- vrati jmeno prave zkonfigurovaneho OS subsystemu
----------------------------------------------------------------------------------------------------
procedure get_cpu_architecture_name   return t_char32str;  
-- vrati jmeno prave zkonfigurovane CPU architektury
----------------------------------------------------------------------------------------------------

end cc_desc;