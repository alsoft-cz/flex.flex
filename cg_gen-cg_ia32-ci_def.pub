----------------------------------------------------------------------------------------------------
module public ci_def =
-- P©eklada‡ Flexu.
-- Z kladn¡ definice pro gener tor k¢du.
----------------------------------------------------------------------------------------------------
-- Ondra : 29.03.2002 : Vytvo©il
----------------------------------------------------------------------------------------------------

with
  standard,
  cc_def.cc_lexsym,
  cx_expr,
  cx_expr.cx_def,
  cp_cpu.cp_32.cp_def,
  cp_cpu.cp_ia32.ci_instr,
  cp_cpu.cp_ia32.ci_abi,
  cg_debug,
  ci_struct;

const
  -- alokace pamˆti
  iimaxsize        = 16;                         -- maxim ln¡ velikost instrukce
  icodeinit        = 256{128};                   -- po‡ te‡n¡ pamˆŸ pro instrukce
  icodedelta       = 2048{256};                  -- zmˆna velikosti pamˆti pro instrukce
  ireloinit        = 32;                         -- po‡ te‡n¡ pamˆŸ pro relokace
  irelodelta       = 32;                         -- zmˆna velikosti pamˆti pro relokace
  itargetinit      = 32;                         -- po‡ te‡n¡ pamˆŸ pro c¡le skok–
  itargetdelta     = 32;                         -- zmˆna velikosti pamˆti pro c¡le skok–
  iunresinit       = 32;                         -- po‡ te‡n¡ pamˆŸ pro nevyhodnocen‚ skoky
  iunresdelta      = 32;                         -- zmˆna velikosti pamˆti pro nevyhod. skoky
  iparinit         = 4;                          -- po‡ te‡n¡ pamˆŸ pro parametry
  ipardelta        = 4;                          -- zmˆna velikosti pamˆti pro parametry
  ihistinit        = 8;                          -- po‡ te‡n¡ pamˆŸ pro historii
  ihistdelta       = 4;                          -- zmˆna velikosti pamˆti pro historii

const
  liimm_lval       = t_signed32:first;           -- nejni‘¨¡ p©¡m  hodnota
  liimm_hval       = t_unsigned32:last;          -- nejvy¨¨¡ p©¡m  hodnota

const
  ----- %%TECH Zarovn n¡ stacku --------------------------------------------------------------------
  -- P©edpokl d  se, ‘e na stacku jsou slova zarovn na na hranici ISTACKALIGN
  -- byt–. Tato konstanta by mˆla b˜t shodn  s IDEFREGSIZE.
  --------------------------------------------------------------------------------------------------
  -- zarovn n¡ stacku
  istackalign      = 4;

  ----- %%TECH Velikost registr– -------------------------------------------------------------------
  -- P©edpokl d  se, ‘e procesor pracuje s p©irozenou velikost¡ registr–
  -- IDEFREGSIZE byt–. Zejm‚na tedy velikost adresy (adresn¡ operace),
  -- normalizovan  velikost slova na stacku a optim ln¡ velikost registr– pro
  -- v˜po‡ty odpov¡daj¡ t‚to konstantˆ.
  --------------------------------------------------------------------------------------------------
  -- implicitn¡ velikost registr–
  idefregsize      = 4;

  ----- %%TECH Mal‚ objekty ------------------------------------------------------------------------
  -- Operace s objekty, kter‚ se nevejdou p©¡mo do registru, jsou zpravidla
  -- implementov ny dvakr t: Optimalizovan  verze pro objekty do ISMALLOBJECT
  -- byt– (typicky rozvinut¡m cyklu) a obecn  verze pro vˆt¨¡ velikosti.
  --------------------------------------------------------------------------------------------------
  -- prahov  velikost mal‚ho objektu
  ismallobject     = 16;


                                                                         
----- Operandy -------------------------------------------------------------------------------------
type
  ----- %%TECH P©ed v n¡ podm¡nky jako v˜sledek ----------------------------------------------------
  -- Podm¡nku lze p©edat jako v˜sledek v˜po‡tu v˜razu, p©i‡em‘ je-li splnˆna,
  -- je odpovˆƒ True, v opa‡n‚m p©¡padˆ False.
  --------------------------------------------------------------------------------------------------

  -- typ operandu
  ioptype          = enum
      io_none;                                   -- pr zdn˜ operand
      io_imm;                                    -- p©¡m  hodnota
      io_reg;                                    -- registr - v¨eobecn˜
      io_seg;                                    -- registr - segmentov˜
      io_cri;                                    -- registr - kontroln¡
      io_dri;                                    -- registr - ladic¡
      io_mem;                                    -- pamˆŸ
      io_rel;                                    -- relativn¡ adresa
      io_cc;                                     -- podm¡nka
      io_stack;                                  -- hodnota ulo‘en  na stacku
      end enum;
  ioptypeset       = set of ioptype;

type
  -- c¡l skoku
  itarget          = private t_unsigned32;

const
  -- nezn m˜ c¡l skoku
  iunknowntarget   = itarget(0);
  tgfallthru       = iunknowntarget;

  -- nezn m  adresa c¡le
  iunknownaddr     = 0;

type
  -- typ relokace
  irelotype        = enum
      irt_none;                                  -- nic
      irt_symbol;                                -- relativn¡ adresa symbolu v tabulce symbol–
                                                 -- souvisej¡c¡ relokabiln¡ objekt: PSYMBOL
      irt_imm;                                   -- p©¡m  hodnota
                                                 -- souvisej¡c¡ relokabiln¡ objekt: PEXPIMM
      end enum;

  -- virtu ln¡ ‡¡slo registru
  iregnum          = {%%TODO(RANGE)}t_unsigned range 1..in_count;

  -- registr pou‘it˜ v operandu
  ioperreg         = record
      reg          : ireg;                       -- registr
      mapping      : iregnum;                    -- mapov n¡ registru
      end record;

  -- operand
  -- %%X rozdˆlit do hierarchie objekt–
  ioper            = record
      rtype        : irelotype;                  -- typ souvisej¡c¡ho relokabiln¡ho symbolu
      psym         : pflexrecord;                -- relokabiln¡ symbol
      pexpr        : pflexclass;                 -- souvisej¡c¡ v˜raz
      size         : t_unsigned;                 -- velikost operandu
      --case
      optype       : ioptype;                    -- typ operandu
        --when io_none do ();
        --when io_imm  do (
          imm   : timm32;                        -- p©¡m  hodnota
          abstarget : itarget;                   -- abs. adresa n vˆ¨t¡ se pou‘ije m¡sto IMM
        --when io_reg,io_seg,io_cri,io_dri do (
          reg   : ioperreg;                      -- registr
        --when io_mem  do (
          base  : ioperreg for position use 38{%%TODO(POSIOTION) reg:position};                      -- b ze
          index : ioperreg;                      -- index
          scale : t_unsigned32;                  -- mˆ©¡tko (1,2,4,8)
          disp  : timm32;                        -- posunut¡
        --when io_rel  do (
          rel   : timm32 for position use 30{%%TODO(POSITION) imm:position};                        -- relativn¡ offset
          target: itarget;                       -- c¡l skoku (v gener toru k¢du)
          disptarget: itarget;                   -- c¡l skoku (pro £‡ely zobrazen¡)
          lpos  : pflexrecord{piasmlabellist};   -- c¡l skoku bˆhem p©ekladu #asm
          spos  : lexposblock;                   -- pozice n vˆ¨t¡ v souboru
        --when io_cc   do (
          cc    : icond;                         -- podm¡nka
        --io_stack: ();
      end record;

--%%TODO(POSITION)
#if ioper.imm:position<>ioper.rel:position then;
  #error 'Chyba pozici slozky REL';
#end if;
#if ioper.reg:position<>ioper.base:position then;
  #error 'Chyba pozici slozky BASE';
#end if;
--#error ioper.imm:position:image;
--#error ioper.reg:position:image;

var
  -- nulov˜ operand
  op0           : const ioper := nil;

  -- dal¨¡ ‡asto pou‘¡van‚ operandy
  op_0          : const ioper := [for size use 0, for optype use io_imm, for imm use timm32(0)];
  op_0_16bit    : const ioper := [for size use 2, for optype use io_imm, for imm use timm32(0)];
  op_0_32bit    : const ioper := [for size use 4, for optype use io_imm, for imm use timm32(0)];
  op_1          : const ioper := [for size use 0, for optype use io_imm, for imm use timm32(1)];
  op_2          : const ioper := [for size use 0, for optype use io_imm, for imm use timm32(2)];
  op_3          : const ioper := [for size use 0, for optype use io_imm, for imm use timm32(3)];
  op_7          : const ioper := [for size use 0, for optype use io_imm, for imm use timm32(7)];
  op_8          : const ioper := [for size use 0, for optype use io_imm, for imm use timm32(8)];
  op_16         : const ioper := [for size use 0, for optype use io_imm, for imm use timm32(16)];
  op_31         : const ioper := [for size use 0, for optype use io_imm, for imm use timm32(31)];
  op_0000FFFF   : const ioper := [for size use 0, for optype use io_imm, for imm use timm32($FFFF)];
  op_FFFFFFFF   : const ioper := [for size use 0, for optype use io_imm, for imm use timm32($FFFFFFFF)];
  op_lstrisize32: const ioper := [for size use 0, for optype use io_imm, for imm use timm32(lstrisize32)];
  op_al_        : const ioper := [for size use 1, for optype use io_reg, for reg use [for reg use ir_al,  for mapping use 1]];
  op_ah         : const ioper := [for size use 1, for optype use io_reg, for reg use [for reg use ir_ah,  for mapping use 1]];
  op_ax_        : const ioper := [for size use 2, for optype use io_reg, for reg use [for reg use ir_ax,  for mapping use 1]];
  op_eax_       : const ioper := [for size use 4, for optype use io_reg, for reg use [for reg use ir_eax, for mapping use 1]];
  op_ecx        : const ioper := [for size use 4, for optype use io_reg, for reg use [for reg use ir_ecx, for mapping use 1]];
  op_edx        : const ioper := [for size use 4, for optype use io_reg, for reg use [for reg use ir_edx, for mapping use 1]];
  op_esi        : const ioper := [for size use 4, for optype use io_reg, for reg use [for reg use ir_esi, for mapping use 1]];
  op_edi        : const ioper := [for size use 4, for optype use io_reg, for reg use [for reg use ir_edi, for mapping use 1]];
  op_ebp        : const ioper := [for size use 4, for optype use io_reg, for reg use [for reg use ir_ebp, for mapping use 1]];
  op_esp        : const ioper := [for size use 4, for optype use io_reg, for reg use [for reg use ir_esp, for mapping use 1]];



----- Z klad ©¡d¡c¡ struktury gener toru k¢du ------------------------------------------------------
type
  -- dop©edn‚ deklarace
  icodegen;        picodegen        = ^class icodegen;
  icodegen_addr;   picodegen_addr   = ^class icodegen_addr;
  icodegen_var;    picodegen_var    = ^class icodegen_var;
  icodegen_imm;    picodegen_imm    = ^class icodegen_imm;
  icodegen_type;   picodegen_type   = ^class icodegen_type;
  icodegen_subprog;picodegen_subprog= ^class icodegen_subprog;
  icodegen_label;  picodegen_label  = ^class icodegen_label;

  -- ©¡d¡c¡ struktura gener toru k¢du
  icodegen         = tflexrecord with record
      end record;

  -- objekt s adresou
  icodegen_addr    = icodegen with record
      addr         : tprg32;                     -- adresa
      end record;



----- ž¡d¡c¡ struktura gener toru k¢du souvisej¡c¡ s promˆnnou -------------------------------------
type
  -- informace o promˆnn‚
  icodegen_var     = icodegen_addr with record
      end record;



----- ž¡d¡c¡ struktura gener toru k¢du souvisej¡c¡ s p©¡mou hodnotou -------------------------------
type
  -- informace o p©¡m‚ hodnotˆ
  icodegen_imm     = icodegen_addr with record
      end record;



----- ž¡d¡c¡ struktura gener toru k¢du souvisej¡c¡ s typem -----------------------------------------
type
  -- informace o typu
  icodegen_type    = icodegen_addr with record
      -- %%TECH Zdˆdˆn  slo‘ka ADDR ur‡uje adresu DESC a z rove¤ slou‘¡ jako
      -- :tag typu.
      desc         : pitypedesc;       -- deskriptor typu
      size         : t_unsigned32;     -- velikost deskriptoru
      end record;



----- ž¡d¡c¡ struktura gener toru k¢du souvisej¡c¡ s podprogramem ----------------------------------
type
  -- dop©edn‚ deklarace
  icodeinst;       picodeinst       = ^icodeinst;
  imemblock;       pimemblock       = ^imemblock;

  -- informace o parametru
  iparinfo         = record
      pparam       : pentity_param;              -- souvisej¡c¡ parametr
      ofs          : t_signed32;                 -- relativn¡ offset parametru
      size         : t_unsigned32;               -- velikost bloku (v‡etnˆ zarovn n¡)
      end record;
  iparlist         = string{array} of iparinfo;

  -- profil parametr–
  iparprofile      = record
      call         : icallconvention;            -- volac¡ konvence
      thisofs      : t_signed32;                 -- offset THIS pointeru
      retfree      : t_unsigned32;               -- kolik byt– uvolnit p©i n vratu z procedury
    --plen         : t_unsigned;                 -- pamˆŸ obsazen  v PAR
    --psize        : t_unsigned;                 -- pamˆŸ alokovan  v PAR
      par          : ^iparlist;                  -- seznam parametr–
      end record;

  -- stav bloku
  iblockstatus     = enum
      ibs_free;                                  -- voln˜ blok
      ibs_temp;                                  -- do‡asn  pamˆŸ
      ibs_var;                                   -- promˆnn 
      end enum;

  -- jeden blok pamˆti
  imemblock        = record
      status       : iblockstatus;               -- aktu ln¡ stav bloku
      pvar         : pentity_var;                -- souvisej¡c¡ promˆnn 
      ofs          : {u}t_signed32;              -- relativn¡ offset za‡ tku bloku
      size         : t_unsigned32;               -- velikost bloku (v bytech)
      ifrom        : tprg32;                     -- oblast platnosti: po‡ te‡n¡ IP
      ito          : tprg32;                     -- oblast platnosti: koncov‚ IP
      prev         : pimemblock;                 -- p©edchoz¡ blok
      next         : pimemblock;                 -- n sleduj¡c¡ blok
      end record;

  -- obsazen¡ pamˆti
  imemlayout       = record
      first        : pimemblock;                 -- prvn¡ blok
      last         : pimemblock;                 -- posledn¡ blok
      largest      : t_unsigned32;               -- nejvˆt¨¡ aktu lnˆ voln˜ blok
      display      : t_unsigned32;               -- velikost display area (ulo‘en‚ EBP)
      end record;

  -- historie obsazen¡ pamˆti
  imemhistory      = record
      first        : pimemblock;                 -- prvn¡ blok
      last         : pimemblock;                 -- posledn¡ blok
      end record;

  -- relokace
  irelo            = record
      rtype        : irelotype;
      psym         : pentity;                    -- souvisej¡c¡ entita
      pexpr        : pexpnode;                   -- souvisej¡c¡ v˜raz
      nextip       : t_unsigned32;               -- IP dal¨¡ instrukce
      disp         : t_unsigned;                 -- adresa pole
      absolute     : t_logical;                  -- T-absolutn¡ adresa
      end record;
  ireloarray       = string{array} of irelo;

  -- seznam nad©azen˜ch procedur v hierarchii vno©en¡
  inestedarray     = string {!! %%X 1..$FFFFFF} of pentity_code;
  inestedlist      = record
   -- nlen         : t_unsigned;                 -- po‡et nad©azen˜ch procedur
      nlist        : ^inestedarray;              -- nad©azen‚ procedury
      end record;

  -- instance podprogramu
  icodeinst        = record
      next         : picodeinst;                 -- dal¨¡ instance v seznamu
      frame        : istackframe;                -- stack-frame
      profile      : iparprofile;                -- profil parametr–
      layout       : imemlayout;                 -- atu ln¡ layout pamˆti
      history      : imemhistory;                -- historie zmˆn
      nested       : inestedlist;                -- seznam nad©azen˜ch procedur
      c            : ^string of t_unsigned8;     -- vlastn¡ k¢d
      r            : ^ireloarray;                -- relokace
      di           : tdebuginfo;                 -- debug informace
      cstart       : t_unsigned32;               -- adresa, dopln¡ se p©i linkov n¡
      end record;

  -- ©¡d¡c¡ struktura
  icodegen_subprog = icodegen with record
      ifirst       : picodeinst;       -- seznam instanc¡ podprogramu
      ilast        : picodeinst;       -- posledn¡ instance v seznamu
      def_call     : icallconvention;  -- default volac¡ konvence
      def_frame    : istackframe;      -- default stack-frame
      end record;

----------------------------------------------------------------------------------------------------
procedure i_prepare (
    curr           : in out tentity_code);       -- entita obsahuj¡c¡ k¢d
-- P©¡prava symbolu p©ed generov n¡m.
----------------------------------------------------------------------------------------------------



----- ž¡d¡c¡ struktura gener toru k¢du souvisej¡c¡ s podprogramem ----------------------------------
type
  icodegen_label   = icodegen with record
      target       : itarget;                    -- n vˆ¨t¡ c¡le skoku
      end record;


----- ž¡d¡c¡ struktury bˆhem generov n¡ k¢du -------------------------------------------------------
type
  -- seznam c¡l– skok–
  itargetlist      = string of t_unsigned32;

  -- seznam nevyhodnocen˜ch skok–
  iunreslist       = string of record
      target       : itarget;                    -- identifik tor c¡le
      nextip       : t_unsigned32;               -- IP dal¨¡ instrukce
      disp         : t_unsigned;                 -- adresa pole (skokov‚ instrukce)
      len          : t_unsigned;                 -- d‚lka pole
      absolute     : t_logical;                  -- T-absolutn¡ adresa
      end record;

  -- informace o pr–bˆhu generov n¡
  igeninfo         = record
      compv        : tcompvar;                   -- pr vˆ platn‚ parametry
      iip          : t_unsigned;                 -- adresa posledn¡ instrukce
      isize        : t_unsigned;                 -- velikost posledn¡ instrukce
      idisp        : t_unsigned;                 -- offset adresy v r mci instrukce
      iimm1        : t_unsigned;                 -- offset p©¡m‚ hodnoty 1 v r mci instrukce
      iimm2        : t_unsigned;                 -- offset p©¡m‚ hodnoty 2 v r mci instrukce
      target       : ^itargetlist;               -- seznam c¡l– skok–
      unres        : ^iunreslist;                -- seznam nevyhodnocen˜ch skok–
      espmark      : t_unsigned;                 -- offset p©¡m‚ hodnoty, kter  se ode‡¡t  od
                                                 -- ESP p©i v˜robˆ m¡sta pro lok ln¡ promˆnn‚
    --xframe       : timm32;                     -- adresa hlavn¡ho exception-frame
      rcframe      : timm32;                     -- adresa aktu ln¡ho return-control framu
      end record;

  -- re‘im zpracov n¡ (na‡ten¡) v˜sledku (operandu)
  iexprloadmode    = enum
      lm_gen;                                    -- pouze generovat
      lm_addr;                                   -- na‡¡st adresu
      lm_addr_attr;                              -- adresa objektu s dynamick˜mi atributy
      lm_conv;                                   -- konvertovat na typ v˜sledku
      lm_reg;                                    -- konvertovat a na‡¡st do registru
      lm_reg_all;                                -- konvertovat a na‡¡st do registru (i p©¡mou hodnotu)
      lm_imm8_cl;                                -- konvertovat a na‡¡st do CL nebo 8bit const.
      lm_reg_eax;                                -- konvertovat a na‡¡st do EAX
      lm_imm_to_rel;                             -- konvertovat p©¡mou hodnotu na relativn¡ adresu
      lm_push_value;                             -- konvertovat a na‡¡st hodnotu a ulo‘it na stack
      lm_push_addr;                              -- na‡¡st adresu a ulo‘it na stack
      lm_push_and_load_addr;                     -- na‡¡st adresu, ulo‘it na stack a kopii vr tit
      lm_temp_value;                             -- konvertovat a na‡¡st do temporary promˆnn‚, nebo
                                                 -- ponechat jako p©¡mou hodnotu
      lm_temp_addr;                              -- adresu objektu ulo‘it do temporary promˆnn‚
      lm_pointer;                                -- na‡¡st a normalizovat pointer
      lm_pointer_reg;                            -- na‡¡st a normalizovat pointer, ulo‘it do registru
      end enum;
  iexprloadmodeset = set of iexprloadmode;

const
  -- re‘imy vedouc¡ na v˜po‡et adresy
  lms_addr         = iexprloadmodeset:[lm_addr,lm_addr_attr,lm_push_addr,lm_push_and_load_addr,lm_temp_addr];

type
  -- stav registru
  iregstatus       = enum
      irs_local;                                 -- voln˜ registr pro lok ln¡ pou‘it¡
      irs_used;                                  -- pu‘it˜ registr
      irs_pushed;                                -- registr ulo‘en˜ na stack
      irs_frozen;                                -- registr byl ulo‘en na stack a teƒ je voln˜
      end enum;
  iregstatusset    = set of iregstatus;

  -- re‘im alokace registr–
  iregallocmode    = enum
      irm_int;                                   -- registr se pou‘ije pro v˜po‡ty
      irm_addr;                                  -- registr se pou‘ije pro adresu
      end enum;

  -- preference registr–
  irprefinfo       = record
      reg          : iunireg;                    -- jak˜ registr preferujeme
      mode         : iregallocmode;              -- pro jak˜ aloka‡n¡ re‘im
      end record;

  -- preferovan˜ zp–sob p©ed n¡ v˜sledku
  ioutputpref      = enum
      iop_none;                                  -- bez preference
      iop_stack;                                 -- na stacku
      iop_cc;                                    -- jako k¢d podm¡nky
      end enum;

  -- informace o registru
  ireginfo         = record
      status       : iregstatus;                 -- status
      used         : t_unsigned;                 -- po‡et pou‘it¡ registru
      temp         : timm32;                     -- adresa odswapovan‚ho registru
      mapping      : iregnum;                    -- aktu ln¡ mapov n¡ registru
      end record;

  -- kontext generov n¡ v˜razu
  iexprcontext     = record
      ----- POZOR: P©i zmˆnˆ tohoto z znamu zmˆnit i I_NEWCONTEXT -----
      mode         : iexprloadmode;              -- re‘im zpracov n¡ v˜sledku
      -- Ondra 15.5.2002 : Typ rozvinut do jednotliv˜ch slo‘ek
    --outtyp       : pentity_type;               -- o‡ek van˜ typ v˜sledku
      outtyp       : record                      -- o‡ek van˜ typ v˜sledku
          stype    : tdatatype;                  -- druh typu
          size     : tunidata_size;              -- velikost
          pattrib  : rtattribset;                -- ulo‘en‚ dynamick‚ atributy
          base     : pentity_type;               -- b zov˜ typ
          end record;
      rsign        : t_logical;                  -- registry jsou T-signed, F-unsigned
      rsize        : t_unsigned;                 -- velikost pou‘it˜ch registr–
      rpref        : irprefinfo;                 -- preferovan˜ registr
      outpref      : ioutputpref;                -- preferovan˜ zp–sob p©ed n¡ v˜sledku
      rta          : rtattribset;                -- kter‚ dynamick‚ atributy budou pot©eba
      -- p©idˆlov n¡ registr–
      reginfo      : array iunireg of ireginfo;  -- informace o registrech
      active       : iuniregset;                 -- mno‘ina aktivn¡ch registr–
      mapping      : array iregnum of iunireg;   -- mapov n¡ aktivn¡ch reg.
      mapcount     : t_unsigned;                 -- po‡et p©i©azen˜ch mapov n¡

      dump_level   : t_unsigned;
      end record;

end ci_def;