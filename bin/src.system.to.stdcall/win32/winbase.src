----------------------------------------------------------------------------------------------------
module winbase =
-- Win32 API
----------------------------------------------------------------------------------------------------

with
  windef,windef.winnt;


const
  null_handle          = tsys_handle(0);

  INVALID_HANDLE_VALUE = tsys_handle:last{((HANDLE)-1)};
  INVALID_FILE_SIZE    = $FFFF_FFFF;
  INVALID_SET_FILE_POINTER = tsys_dword:last{((DWORD)-1)};

const
  FILE_BEGIN           = 0;
  FILE_CURRENT         = 1;
  FILE_END             = 2;

const
  FILE_FLAG_WRITE_THROUGH         = $80000000;
  FILE_FLAG_OVERLAPPED            = $40000000;
  FILE_FLAG_NO_BUFFERING          = $20000000;
  FILE_FLAG_RANDOM_ACCESS         = $10000000;
  FILE_FLAG_SEQUENTIAL_SCAN       = $08000000;
  FILE_FLAG_DELETE_ON_CLOSE       = $04000000;
  FILE_FLAG_BACKUP_SEMANTICS      = $02000000;
  FILE_FLAG_POSIX_SEMANTICS       = $01000000;
  FILE_FLAG_OPEN_REPARSE_POINT    = $00200000;
  FILE_FLAG_OPEN_NO_RECALL        = $00100000;

  CREATE_NEW          = 1;
  CREATE_ALWAYS       = 2;
  OPEN_EXISTING       = 3;
  OPEN_ALWAYS         = 4;
  TRUNCATE_EXISTING   = 5;

type
  OVERLAPPED       = record
      Internal     : psys_ulong;
      InternalHigh : psys_ulong;
      Offset       : tsys_dword;
      OffsetHigh   : tsys_dword;
      hEvent       : tsys_handle;
      end record;
  POVERLAPPED      = ^OVERLAPPED;

type
  SECURITY_ATTRIBUTES        = record
      nLength                : tsys_dword;
      lpSecurityDescriptor   : psys_void;
      bInheritHandle         : tsys_bool;
      end record;
  PSECURITY_ATTRIBUTES       = ^SECURITY_ATTRIBUTES;

type
  tsys_filetime    = record
    dwLowDateTime  : tsys_dword;
    dwHighDateTime : tsys_dword;
    end record;
   psys_filetime   = ^tsys_filetime;

const
  STD_INPUT_HANDLE            : tsys_dword = $FFFFFFF6; { ((DWORD)-10) }
  STD_OUTPUT_HANDLE           : tsys_dword = $FFFFFFF5; { ((DWORD)-11) }
  STD_ERROR_HANDLE            : tsys_dword = $FFFFFFF4; { ((DWORD)-12) }

----------------------------------------------------------------------------------------------------
procedure GetEnvironmentStrings return psys_void;
#pragma convention(GetEnvironmentStrings,stdcall);
#pragma import(GetEnvironmentStrings,'GetEnvironmentStringsW','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------
procedure GetLastError return tsys_dword;
#pragma convention(GetLastError,stdcall);
#pragma import(GetLastError,'GetLastError','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------
procedure GetFileSize (
    hFile          : in tsys_handle;
    lpFileSizeHigh : in psys_dword)
    return tsys_dword;
#pragma convention(GetFileSize,stdcall);
#pragma import(GetFileSize,'GetFileSize','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------
procedure GetStdHandle (
    nStdHandle                 : in tsys_dword)
    return tsys_handle;
#pragma convention(GetStdHandle,stdcall);
#pragma import(GetStdHandle,'GetStdHandle','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
procedure WriteFile(
    hFile                  : in tsys_handle;
    lpBuffer               : in unchecked;
    nNumberOfBytesToWrite  : in tsys_dword;
    lpNumberOfBytesWritten : out tsys_dword;
    lpOverlapped           : in POVERLAPPED)
    return tsys_bool;
#pragma convention(WriteFile,stdcall);
#pragma import(WriteFile,'WriteFile','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------
procedure ReadFile (
    hFile                  : in tsys_handle;
    lpBuffer               : out unchecked;
    nNumberOfBytesToRead   : in tsys_dword;
    lpNumberOfBytesRead    : out tsys_dword;
    lpOverlapped           : in POVERLAPPED)
    return tsys_bool;
#pragma convention(ReadFile,stdcall);
#pragma import(ReadFile,'ReadFile','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------
procedure SetFilePointer (
    hFile                : in tsys_handle;
    lDistanceToMove      : in tsys_dword;
    lpDistanceToMoveHigh : in psys_dword;
    dwMoveMethod         : in tsys_dword)
    return tsys_dword;
#pragma convention(SetFilePointer,stdcall);
#pragma import(SetFilePointer,'SetFilePointer','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------
procedure FindClose (
    hFindFile      : in tsys_handle)
    return tsys_bool;
#pragma convention(FindClose,stdcall);
#pragma import(FindClose,'FindClose','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------
procedure CloseHandle (
    hObject        : in tsys_handle)
    return tsys_bool;
#pragma convention(CloseHandle,stdcall);
#pragma import(CloseHandle,'CloseHandle','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------
procedure GetTickCount return tsys_dword;
#pragma convention(GetTickCount,stdcall);
#pragma import(GetTickCount,'GetTickCount','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------
procedure WaitForSingleObject (
    handle         : in tsys_handle;
    milliseconds   : in tsys_dword;
    alertable      : in tsys_dword)
    return tsys_dword;
#pragma convention(WaitForSingleObject,stdcall);
#pragma import(WaitForSingleObject,'WaitForSingleObjectEx','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------

type
  tsys_win32_find_dataw = record
    dwFileAttributes  : tsys_dword;
    ftCreationTime    : tsys_filetime;
    ftLastAccessTime  : tsys_filetime;
    ftLastWriteTime   : tsys_filetime;
    nFileSizeHigh     : tsys_dword;
    nFileSizeLow      : tsys_dword;
    dwReserved0       : tsys_dword;
    dwReserved1       : tsys_dword;
    cFileName         : array 0..max_path-1 of tsys_wchar;
    cAlternateFileName: array 0..14-1 of tsys_wchar;
    end record;
  psys_win32_find_dataw = ^tsys_win32_find_dataw;

----------------------------------------------------------------------------------------------------
procedure GetCommandLine return psys_wstr;
#pragma convention(GetCommandLine,stdcall);
#pragma import(GetCommandLine,'GetCommandLineW','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------
procedure GetEnvironmentVariable(
    env_var        : in psys_wstr;
    env_value      : in psys_wstr;
    size           : in tsys_dword)
    return tsys_dword;
#pragma convention(GetEnvironmentVariable,stdcall);
#pragma import(GetEnvironmentVariable,'GetEnvironmentVariableW','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------
procedure SetEnvironmentVariable(
    env_var        : in psys_wstr;
    env_value      : in psys_wstr)
    return tsys_bool;
#pragma convention(SetEnvironmentVariable,stdcall);
#pragma import(SetEnvironmentVariable,'SetEnvironmentVariableW','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------
procedure CreateDirectory (
    path_name      : in psys_wstr;
    security_attrs : in security_attributes)
    return tsys_bool;
#pragma convention(CreateDirectory,stdcall);
#pragma import(CreateDirectory,'CreateDirectoryW','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------
procedure CreateDirectoryEx (
    template_path_name : in psys_wstr;
    path_name      : in psys_wstr;
    security_attrs : in security_attributes)
    return tsys_bool;
#pragma convention(CreateDirectoryEx,stdcall);
#pragma import(CreateDirectoryEx,'CreateDirectoryExW','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------
procedure CreateFile (
    lpFileName                 : in tsys_wstr;
    dwDesiredAccess            : in tsys_dword;
    dwShareMode                : in tsys_dword;
    lpSecurityAttributes       : in PSECURITY_ATTRIBUTES;
    dwCreationDisposition      : in tsys_dword;
    dwFlagsAndAttributes       : in tsys_dword;
    hTemplateFile              : in tsys_handle)
    return tsys_handle;
#pragma convention(CreateFile,stdcall);
#pragma import(CreateFile,'CreateFileW','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------

type
  _FINDEX_INFO_LEVELS= enum
    FindExInfoStandard;
    FindExInfoMaxInfoLevel;
    end enum for size use 4;
  FINDEX_INFO_LEVELS = _FINDEX_INFO_LEVELS;

type
  _FINDEX_SEARCH_OPS= enum
    FindExSearchNameMatch;
    FindExSearchLimitToDirectories;
    FindExSearchLimitToDevices;
    FindExSearchMaxSearchOp;
    end enum for size use 4;
  FINDEX_SEARCH_OPS = _FINDEX_SEARCH_OPS;

----------------------------------------------------------------------------------------------------
procedure FindFirstFileExW(
    lpFileName      : in psys_wstr; 
    fInfoLevelId    : in FINDEX_INFO_LEVELS; 
    lpFindFileData  : out unchecked ; 
    fSearchOp       : in FINDEX_SEARCH_OPS; 
    lpSearchFilter  : in psys_void; 
    dwAdditionalFlags : in tsys_dword)
                      return tsys_handle;
#pragma convention(FindFirstFileExW,stdcall);
#pragma import(FindFirstFileExW,'FindFirstFileExW','kernel32.dll');
----------------------------------------------------------------------------------------------------
procedure FindFirstFile (
    lpFileName                 : in psys_wstr;
    lpFIndFileData             : out tsys_win32_find_dataw)
    return tsys_handle;
#pragma convention(FindFirstFile,stdcall);
#pragma import(FindFirstFile,'FindFirstFileW','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------
procedure FindNextFile (
    hFindFile      : in tsys_handle;
    lpFindFileData : out tsys_win32_find_dataw)
    return tsys_bool;
#pragma convention(FindNextFile,stdcall);
#pragma import(FindNextFile,'FindNextFileW','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------

end winbase;