----------------------------------------------------------------------------------------------------
module wincon =
-- Win32 API
----------------------------------------------------------------------------------------------------

with
  windef;

type
  tsys_coord       = record
      x            : tsys_short;
      y            : tsys_short;
      end record;
  psys_coord       = ^tsys_coord;

  tsys_small_rect  = record
      left         : tsys_short;
      top          : tsys_short;
      right        : tsys_short;
      bottom       : tsys_short;
      end record;
  psys_small_rect  = ^tsys_small_rect;

  tsys_key_event_record = record
      bkeydown          : tsys_bool;
      wrepeatcount      : tsys_word;
      wvirtualkeycode   : tsys_word;
      wvirtualscancode  : tsys_word;
      wchar             : tsys_wchar; 
      dwcontrolkeystate : tsys_dword;
      end record;
  psys_key_event_record = ^tsys_key_event_record;

const
  -- ControlKeyState flags
  RIGHT_ALT_PRESSED     = $0001; -- the right alt key is pressed.
  LEFT_ALT_PRESSED      = $0002; -- the left alt key is pressed.
  RIGHT_CTRL_PRESSED    = $0004; -- the right ctrl key is pressed.
  LEFT_CTRL_PRESSED     = $0008; -- the left ctrl key is pressed.
  SHIFT_PRESSED         = $0010; -- the shift key is pressed.
  NUMLOCK_ON            = $0020; -- the numlock light is on.
  SCROLLLOCK_ON         = $0040; -- the scrolllock light is on.
  CAPSLOCK_ON           = $0080; -- the capslock light is on.
  ENHANCED_KEY          = $0100; -- the key is enhanced.
  NLS_DBCSCHAR          = $00010000; -- DBCS for JPN: SBCS/DBCS mode.
  NLS_ALPHANUMERIC      = $00000000; -- DBCS for JPN: Alphanumeric mode.
  NLS_KATAKANA          = $00020000; -- DBCS for JPN: Katakana mode.
  NLS_HIRAGANA          = $00040000; -- DBCS for JPN: Hiragana mode.
  NLS_ROMAN             = $00400000; -- DBCS for JPN: Roman/Noroman mode.
  NLS_IME_CONVERSION    = $00800000; -- DBCS for JPN: IME conversion.
  NLS_IME_DISABLE       = $20000000; -- DBCS for JPN: IME enable/disable.

type
  tsys_mouse_event_record = record
      dwMousePosition     : tsys_coord;
      dwButtonState       : tsys_dword;
      dwControlKeyState   : tsys_dword;
      dwEventFlags        : tsys_dword;
      end record;
  psys_mouse_event_record = ^tsys_mouse_event_record;

const
  -- ButtonState flags
  FROM_LEFT_1ST_BUTTON_PRESSED    = $0001;
  RIGHTMOST_BUTTON_PRESSED        = $0002;
  FROM_LEFT_2ND_BUTTON_PRESSED    = $0004;
  FROM_LEFT_3RD_BUTTON_PRESSED    = $0008;
  FROM_LEFT_4TH_BUTTON_PRESSED    = $0010;

  --EventFlags
  MOUSE_MOVED   = $0001;
  DOUBLE_CLICK  = $0002;
  MOUSE_WHEELED = $0004;

type
  
  tsys_window_buffer_size_record = record
      dwSize       : tsys_coord;
      end record;
  psys_window_buffer_size_record = ^tsys_window_buffer_size_record;

  tsys_MENU_EVENT_RECORD = record
      dwCommandId  : tsys_uint;
      end record;
  psys_MENU_EVENT_RECORD = ^tsys_MENU_EVENT_RECORD;

  tsys_FOCUS_EVENT_RECORD = record
      bSetFocus    : tsys_bool;
      end record;
  psys_FOCUS_EVENT_RECORD = ^tsys_FOCUS_EVENT_RECORD;

  tsys_INPUT_RECORD0 = record
      EventType    : tsys_word;
      KeyEvent     : tsys_key_event_record   for position use 4{tsys_word:size};
      MouseEvent   : tsys_mouse_event_record for position use 4{tsys_word:size};
      WindowBufferSizeEvent : tsys_window_buffer_size_record for position use 4{tsys_word:size};
      MenuEvent    : tsys_menu_event_record  for position use 4{tsys_word:size};
      FocusEvent   : tsys_focus_event_record for position use 4{tsys_word:size}; 
      end record {for alignment use 4};
  psys_INPUT_RECORD0 = ^tsys_INPUT_RECORD0;

{ tsys_INPUT_RECORD0 = record
      EventType    : tsys_word;
      end record;
  psys_INPUT_RECORD0 = ^tsys_INPUT_RECORD0;

  tsys_input_record_key = tsys_input_record0 with record
      keyevent     : tsys_key_event_record;
      end record;
  psys_input_record_key = ^tsys_input_record_key;

  tsys_input_record_mouse = tsys_input_record0 with record
      mouseevent   : tsys_mouse_event_record;
      end record;
  psys_input_record_mouse= ^tsys_input_record_mouse;

  tsys_input_record_window = tsys_input_record0 with record
      windowbuffersizeenvet : tsys_window_buffer_size_record;
      end record;
  psys_input_record_window = ^tsys_input_record_window;
}

{%% unimplemented
  tsys_input_record_menu = tsys_input_record0 with record
      menuevent    : tsys_menu_event_record;
      end record;

  tsys_input_record_focus = tsys_input_record0 with record
      focusevent   : tsys_focus_event_record;
      end record;
}

const
  -- EventType flags:
  KEY_EVENT                = $0001; -- Event contains key event record
  MOUSE_EVENT              = $0002; -- Event contains mouse event record
  WINDOW_BUFFER_SIZE_EVENT = $0004; -- Event contains window change event record
  MENU_EVENT               = $0008; -- Event contains menu event record
  FOCUS_EVENT              = $0010; -- event contains focus change

type
  tsys_CHAR_INFO   = record
      UnicodeChar  : tsys_wchar;
      Attributes   : tsys_word;
      end record;
  psys_CHAR_INFO   = ^tsys_CHAR_INFO;

const
  -- Attributes flags:
  FOREGROUND_BLUE      = $0001; -- text color contains blue.
  FOREGROUND_GREEN     = $0002; -- text color contains green.
  FOREGROUND_RED       = $0004; -- text color contains red.
  FOREGROUND_INTENSITY = $0008; -- text color is intensified.
  BACKGROUND_BLUE      = $0010; -- background color contains blue.
  BACKGROUND_GREEN     = $0020; -- background color contains green.
  BACKGROUND_RED       = $0040; -- background color contains red.
  BACKGROUND_INTENSITY = $0080; -- background color is intensified.
  COMMON_LVB_LEADING_BYTE    = $0100; -- Leading Byte of DBCS
  COMMON_LVB_TRAILING_BYTE   = $0200; -- Trailing Byte of DBCS
  COMMON_LVB_GRID_HORIZONTAL = $0400; -- DBCS: Grid attribute: top horizontal.
  COMMON_LVB_GRID_LVERTICAL  = $0800; -- DBCS: Grid attribute: left vertical.
  COMMON_LVB_GRID_RVERTICAL  = $1000; -- DBCS: Grid attribute: right vertical.
  COMMON_LVB_REVERSE_VIDEO   = $4000; -- DBCS: Reverse fore/back ground attribute.
  COMMON_LVB_UNDERSCORE      = $8000; -- DBCS: Underscore.

  COMMON_LVB_SBCSDBCS        = $0300; -- SBCS or DBCS flag.

type
  tsys_CONSOLE_SCREEN_BUFFER_INFO = record
      dwSize               : tsys_coord;
      dwCursorPosition     : tsys_coord;
      wAttributes          : tsys_word;
      srWindow             : tsys_small_rect;
      dwMaximumWindowSize  : tsys_coord;
      end record;
  psys_CONSOLE_SCREEN_BUFFER_INFO = ^tsys_CONSOLE_SCREEN_BUFFER_INFO;

  tsys_CONSOLE_CURSOR_INFO = record
      dwSize               : tsys_dword;
      bVisible             : tsys_bool;
      end record;
  psys_CONSOLE_CURSOR_INFO = ^tsys_CONSOLE_CURSOR_INFO;


  -- typedef for ctrl-c handler routines
  tsys_handler_routine     = procedure (CtrlType : in tsys_dword) return tsys_bool;
  psys_handler_routine     = ^tsys_handler_routine;

const
  CTRL_C_EVENT        = 0;
  CTRL_BREAK_EVENT    = 1;
  CTRL_CLOSE_EVENT    = 2;
  -- 3 is reserved!
  -- 4 is reserved!
  CTRL_LOGOFF_EVENT   = 5;
  CTRL_SHUTDOWN_EVENT = 6;

  -- Input Mode flags:
  ENABLE_PROCESSED_INPUT = $0001;
  ENABLE_LINE_INPUT      = $0002;
  ENABLE_ECHO_INPUT      = $0004;
  ENABLE_WINDOW_INPUT    = $0008;
  ENABLE_MOUSE_INPUT     = $0010;

  -- Output Mode flags:
  ENABLE_PROCESSED_OUTPUT    = $0001;
  ENABLE_WRAP_AT_EOL_OUTPUT  = $0002;

----------------------------------------------------------------------------------------------------
-- direct API definitions.
----------------------------------------------------------------------------------------------------
procedure PeekConsoleInput (
    hConsoleInput              : in tsys_handle;
    lpBuffer                   : out tsys_input_record0;
    nLength                    : in tsys_dword;
    lpNumberOfEventsRead       : out tsys_dword)
    return tsys_bool;
#pragma convention(PeekConsoleInput,stdcall);
#pragma import(PeekConsoleInput,'PeekConsoleInputW','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------
procedure ReadConsoleInput (
    hConsoleInput              : in tsys_handle;
    lpBuffer                   : out tsys_input_record0;
    nLength                    : in tsys_dword;
    lpNumberOfEventsRead       : out tsys_dword)
    return tsys_bool;
#pragma convention(ReadConsoleInput,stdcall);
#pragma import(ReadConsoleInput,'ReadConsoleInputW','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------
procedure WriteConsoleInput (
    hConsoleInput              : in tsys_handle;
    lpBuffer                   : in psys_input_record0;
    nLength                    : in tsys_dword;
    lpNumberOfEventsWritten    : out tsys_dword)
    return tsys_bool;
#pragma convention(WriteConsoleInput,stdcall);
#pragma import(WriteConsoleInput,'ReadConsoleInputW','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------
procedure FlushConsoleInputBuffer (
    hConsoleInput              : in tsys_handle)
    return tsys_bool;
#pragma convention(FlushConsoleInputBuffer,stdcall);
#pragma import(FlushConsoleInputBuffer,'FlushConsoleInputBuffer','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------
procedure WriteConsole (
    hConsoleOutput             : in tsys_handle;
    lpBuffer                   : in unchecked;
    nNumberOfCharsToWrite      : in tsys_dword;
    lpNumberOfCharsWritten     : out tsys_dword;
    lpReserved                 : in psys_void)
    return tsys_bool;
#pragma convention(WriteConsole,stdcall);
#pragma import(WriteConsole,'WriteConsoleW','KERNEL32.DLL');
----------------------------------------------------------------------------------------------------

end wincon;