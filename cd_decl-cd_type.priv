----------------------------------------------------------------------------------------------------
module private cd_type =
-- P©eklada‡ Flexu.
-- Definice typ–.
----------------------------------------------------------------------------------------------------
-- Ondra : 07.11.2001 : Vytvo©il
----------------------------------------------------------------------------------------------------

with
  cc_sym,
  cd_create,cd_attr,cd_util,
  cx_expr,cx_expr.cx_def,cx_expr.cx_compile;

const
  -- definice typu
  lex_define       = lexsymset:[lex_signed,lex_unsigned,lex_imod,lex_enum,lex_logical,
                                lex_character,lex_range,lex_digits,lex_delta,lex_ptr,
                                lex_set,lex_array,lex_string,lex_record,lex_procedure,
                                lex_message,lex_task,lex_tag];

  -- determinace typu
  lex_determ       = lexsymset:[lex_range];

const
  plistinit        = 1;                          -- po‡ te‡n¡ pamˆŸ pro p©edky
  plistdelta       = 4;                          -- zmˆna pamˆti pro p©edky

----------------------------------------------------------------------------------------------------
procedure p_def_ordinal (
    context        : in tcontext;                -- nad©azen˜ kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext;                -- prim rn¡ kontext typu
    stype          : in tdatatype) =             -- st_signed nebo st_unsigned
-- Definice ordin ln¡ho typu SIGNED, UNSIGNED, LOGICAL nebo CHARACTER.
----------------------------------------------------------------------------------------------------
var
  expr             : pexpnode;

begin
  -- datov˜ typ
  curr.stype:=stype;

  -- v˜raz
  x_vyraz(curr_context,expr,es_expr);
  curr.expr.setexpr(expr);
  end p_def_ordinal;



----------------------------------------------------------------------------------------------------
procedure p_def_modular (
    context        : in tcontext;                -- nad©azen˜ kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext) =              -- prim rn¡ kontext typu
-- Modul rn¡ SIGNED, UNSIGNED.
----------------------------------------------------------------------------------------------------
var
  lex              : lexsym;                     -- lexik ln¡ symbol

begin
  -- modul rn¡ aritmetika
  curr.intaritm:=tia_modular;

  -- SIGNED nebo UNSIGNED
  getlex(curr_context,lex);
  case lex
    when lex_signed   do p_def_ordinal(context,curr,curr_context,dt_signed);
    when lex_unsigned do p_def_ordinal(context,curr,curr_context,dt_unsigned);
    when others do
        ce^.seterror({CCERR=}000023,ce_x_un_signed);
        ce^.loadpos;
        {%%RESUME ce^.raiseerror;}
        ce^.resumeerror;
    end case;
  end p_def_modular;



----------------------------------------------------------------------------------------------------
procedure p_def_range (
    context        : in tcontext;                -- nad©azen˜ kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext) =              -- prim rn¡ kontext typu
-- Definice typu rozsahem.
----------------------------------------------------------------------------------------------------
var
  expr             : pexpnode;

begin
  -- datov˜ typ
  curr.stype:=dt_ordinal;

  -- v˜raz
  x_vyraz(curr_context,expr,es_range);
  curr.expr.setexpr(expr);
  end p_def_range;



----------------------------------------------------------------------------------------------------
procedure p_def_enum (
    context        : in tcontext;                -- nad©azen˜ kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext) =              -- prim rn¡ kontext typu
-- Definice typu ENUM.
----------------------------------------------------------------------------------------------------
use
  cc_sym.cc_advanced;

var
  lex              : lexsym;                     -- lexik ln¡ symbol
  pitem            : pentity_enum;               -- prvek v˜‡tov‚ho typu
  item_context     : tcontext;                   -- kontext prvku v˜‡tov‚ho typu
--parent       : reftype;      -- p©edek
  order            : t_unsigned;                 -- po©ad¡ v˜‡tov‚ho prvku
  pos              : lexposblock;                -- pozice prvku
--id           : ident;

begin
  -- datov˜ typ
  curr.stype:=dt_enum;

  -- p©elo‘it a za©adit identifik tory
  order:=0;
  loop
    -- dal¨¡ symbol
    looklex(curr_context,lex);
    if lex<>lex_id then break; end if;

    -- za‡ tek deklarace
    d_create(curr_context,pentity(pitem),item_context,et_enum,pos);

    -- poznamenat po©ad¡ a typ
    pitem^.order:=order;
    pitem^.typ:=^curr;

    -- je¨tˆ za©adit do tabulky identifik tor– kontextu
    cc_sym.cc_advanced.sym_add_ident(context,pitem^.id,pitem);

    -- atributy
    p_attribute(item_context);

    -- st©edn¡k
    if followlex(item_context,lex_scol) then
      ce^.seterror({CCERR=}000024,ce_x_scol);
      ce^.loadpos;
      {%%RESUME ce^.raiseerror;}
      end if;

    -- konec deklarace
    d_end(pitem^,pos);

    -- po©ad¡ p©¡¨t¡ho prvku
    succ order;
    end loop;

  -- END ENUM
  if followendkw(curr_context,lex_enum) then
    ce^.seterror({CCERR=}000025,ce_x_end_enum);
    ce^.loadpos2;
    {%%RESUME ce^.raiseerror;}
    end if;
  end p_def_enum;



----------------------------------------------------------------------------------------------------
procedure p_def_float (
    context        : in tcontext;                -- nad©azen˜ kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext;                -- prim rn¡ kontext typu
    dtype          : in tfloatdeftype) =         -- st_signed nebo st_unsigned
-- Definice typu re ln‚ ‡¡slo.
----------------------------------------------------------------------------------------------------
var
  expr             : pexpnode;

begin
  -- datov˜ typ
  curr.stype:=dt_float;

  -- poznamenat si o jakou definici se jedn 
  curr.dtype:=dtype;

  -- v˜raz
  x_vyraz(curr_context,expr,es_expr);
  curr.expr.setexpr(expr);
  end p_def_float;



----------------------------------------------------------------------------------------------------
procedure p_def_pointer (
    context        : in tcontext;                -- nad©azen˜ kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext) =              -- prim rn¡ kontext typu
-- Definice typu pointer.
----------------------------------------------------------------------------------------------------
var
  lex              : lexsym;                     -- lexik ln¡ symbol

begin
  -- datov˜ typ
  curr.stype:=dt_pointer;

  -- kompatibilita b ze
  getlex(curr_context,lex);
  case lex
    -- UNCHECKED
    when lex_unchecked  do curr.pbase:=pb_unchecked;

    -- CLASS
    when lex_class      do curr.pbase:=pb_class;

    -- cokoliv jin‚ho se n s net˜k 
    when others do ungetlex;
    end case;

  -- determinace p©¡stupu
  p_varaccess(curr_context,curr.paccess);

  -- b zov˜ typ
  looklex(curr_context,lex);
  if lex in lex_expr_start+lex_define

    -- b zov˜ typ je uveden
    then
      p_typeidef(context,curr_context,curr.base);

    -- b zov˜ typ nen¡ uveden
    else
      -- v tom p©¡padˆ ale musel b˜t uveden modifik tor UNCHECKED
      if curr.pbase<>pb_unchecked then
        ce^.seterror({CCERR=}000026,ce_x_typ);
        ce^.sethint(hint_ptrunchecked);
        ce^.loadpos;
        {%%RESUME ce^.raiseerror;}
        ce^.resumeerror;
        end if;
      end if;
  end p_def_pointer;



----------------------------------------------------------------------------------------------------
procedure p_def_set (
    context        : in tcontext;                -- nad©azen˜ kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext) =              -- prim rn¡ kontext typu
-- Definice typu mno‘ina.
----------------------------------------------------------------------------------------------------
begin
  -- datov˜ typ
  curr.stype:=dt_set;

  -- OF
  if followlex(curr_context,lex_of) then
    ce^.seterror({CCERR=}000027,ce_x_of);
    ce^.loadpos;
    {%%RESUME ce^.raiseerror;}
    end if;

  -- b zov˜ typ
  p_typeidef(context,curr_context,curr.base);
  end p_def_set;



----------------------------------------------------------------------------------------------------
procedure p_def_array (
    context        : in tcontext;                -- nad©azen˜ kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext;                -- prim rn¡ kontext typu
    nested         : in t_logical) =             -- T-vnorene volani
-- Definice typu pole.
----------------------------------------------------------------------------------------------------
var
  lex              : lexsym;                     -- lexik ln¡ symbol
  pos              : lexposblock;                -- pozice
  base             : pentity_type;               -- vno©en‚ pole jako b zov˜ typ
  base_context     : tcontext;                   -- kontext vno©en‚ho pole
  expr             : pexpnode;

begin
  if checklex(curr_context,lex_of)

    -- neomezen‚ pole
    then
      -- je-li to vno©en‚ vol n¡, tak mus¡ n sledovat rozsah
      if nested then
        {%%X up©esnit chybov‚ hl ¨en¡ }
        ce^.seterror({CCERR=}000028,ce_x_rozsah);
        ce^.loadpos;
        {%%RESUME ce^.raiseerror;}
        ce^.resumeerror;
        end if;

      -- datov˜ typ
      curr.stype:=dt_uarray;

      -- b zov˜ typ
      p_typeidef(context,curr_context,curr.base);

    -- norm ln¡ pole
    else
      -- datov˜ typ
      curr.stype:=dt_array;

      -- rozsah
      x_vyraz(curr_context,expr,es_range);
      curr.srange.setexpr(expr);

      -- dal¨¡ symbol
      getlex(curr_context,lex);

      case lex
        -- OF
        when lex_of     do
            -- b zov˜ typ
            p_typeidef(context,curr_context,curr.base);

        -- ‡ rka
        when lex_comma  do
            -- nov˜ typ
            d_create_without_name({%%TODO(Ondra) nem  tu b˜t jen CONTEXT ??}curr_context,pentity(base),base_context,et_type,nil,pos);
            curr.base.settype(base);
            d_next(base^,pos);

            -- definice pole
            p_def_array(context,base^,base_context,true);

            -- konec deklarace
            d_end(base^,pos);

        -- cokoliv jin‚ho je chyba
        when others do
            ce^.seterror({CCERR=}000029,ce_x_of_comma);
            ce^.loadpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
        end case
      end if;
  end p_def_array;



----------------------------------------------------------------------------------------------------
procedure p_def_string (
    context        : in tcontext;                -- nad©azen˜ kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext) =              -- prim rn¡ kontext typu
-- Definice typu ©etˆzec.
----------------------------------------------------------------------------------------------------
var
  expr             : pexpnode;

begin
  if checklex(curr_context,lex_of)

    -- neomezen˜ ©etˆzec
    then
      -- datov˜ typ
      curr.stype:=dt_ustring;

    -- norm ln¡ ©etˆzec
    else
      -- datov˜ typ
      curr.stype:=dt_string;

      -- po‡et prvk–
      x_vyraz(curr_context,expr,es_expr);
      curr.expr.setexpr(expr);

      -- OF
      if followlex(curr_context,lex_of) then
        ce^.seterror({CCERR=}000030,ce_x_of);
        ce^.loadpos;
        {%%RESUME ce^.raiseerror;}
        end if;
      end if;

  -- b zov˜ typ
  p_typeidef(context,curr_context,curr.base);
  end p_def_string;



----------------------------------------------------------------------------------------------------
procedure p_slozky (
    context        : in tcontext;                -- nad©azen˜ kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext) =              -- prim rn¡ kontext typu
-- Slo‘ky recordu.
----------------------------------------------------------------------------------------------------
var
  lex              : lexsym;                     -- lexik ln¡ symbol
  pitem            : pentity_var;                -- slo‘ka
  pitemtyp         : reftype;                    -- typ slo‘ky
  item_context     : tcontext;                   -- kontext slo‘ky
  parent           : reftype;                    -- typ p©edka
--plink        : pdeflink;     -- odkaz na p©edka
--pwith            : pdefwith;                   -- WITH typ
--idlist       : tidentlist;   -- seznam identifik tor–
--id           : ident;        -- identifik tor
--xvarofs      : tunidata;     -- aktu ln¡ offset
  pos              : lexposblock;

begin
  loop
    -- dal¨¡ symbol
    looklex(curr_context,lex);
    if lex<>lex_id then break; end if;

    -- za‡ tek deklarace
    d_create(curr_context,pentity(pitem),item_context,et_var,pos);

    -- poznamenat dal¨¡ £daje
    pitem^.mclass:=mc_record;

    -- dvojte‡ka
    if followlex(item_context,lex_col) then
      ce^.seterror({CCERR=}000031,ce_x_col);
      ce^.loadpos;
      {%%RESUME ce^.raiseerror;}
      end if;

    -- typ
    p_typeidef(context,item_context,pitem^.typ);

    -- atributy
    p_attribute(item_context);

    -- konec deklarace
    d_end(pitem^,pos);

    -- st©edn¡k
    if followlex(curr_context,lex_scol) then
      ce^.seterror({CCERR=}000032,ce_x_scol);
      ce^.loadpos;
      {%%RESUME ce^.raiseerror;}
      end if;

    end loop;
  end p_slozky;



----------------------------------------------------------------------------------------------------
procedure p_def_record (
    context        : in tcontext;                -- nad©azen˜ kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext) =              -- prim rn¡ kontext typu
-- Definice typu record.
----------------------------------------------------------------------------------------------------
var
  lex              : lexsym;                     -- lexik ln¡ symbol
--varofs       : tunidata;     -- aktu ln¡ offset

begin
  -- datov˜ typ
  curr.stype:=dt_record;

  -- slo‘ky
--udload0(varofs);
  p_slozky(context,curr{,varofs},curr_context);

  -- velikost recordu
--curr.size:=varofs;

  -- END RECORD
  if followendkw(curr_context,lex_record) then
    ce^.seterror({CCERR=}000033,ce_x_end_record);
    ce^.loadpos2;
    {%%RESUME ce^.raiseerror;}
    end if;
  end p_def_record;



----------------------------------------------------------------------------------------------------
procedure p_paramlist (
    context        : in tcontext;                -- nad©azen˜ kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext;                -- prim rn¡ kontext typu
    nomode         : in t_logical;               -- vynechat Mode a Control
    parcount       : out t_unsigned) =           -- po‡et parametr–
-- Seznam form ln¡ch parametr–.
----------------------------------------------------------------------------------------------------
label
  R1;

var
  lex              : lexsym;                     -- lexik ln¡ symbol
  pparam           : pentity_param;              -- parametr
  param_context    : tcontext;                   -- kontext parametru
  parmode          : parammode;                  -- m¢d parametru
  parpass          : parampass;                  -- p©ed n¡ parametru
  num              : t_unsigned;                 -- po©ad¡ parametru
  expr             : pexpnode;                   -- inicializa‡n¡ v˜raz
  pos              : lexposblock;                -- pozice

begin
  parcount:=0;

  -- lev  z vorka
  if not checklex(curr_context,lex_lpar) then return; end if;

  num:=0;
  loop
    expr:=nil;

    -- za‡ tek deklarace
    d_create(curr_context,pentity(pparam),param_context,et_param,pos);

    -- dvojte‡ka
    if followlex(param_context,lex_col) then
      ce^.seterror({CCERR=}000034,ce_x_col);
      ce^.loadpos;
      {%%RESUME ce^.raiseerror;}
      end if;

    if nomode

      -- bez Mode a Control
      then 
        p_typename(context,curr_context,pparam^.typ);
        parmode:=pm_in;
        parpass:=pp_default;

      -- s Mode a Control
      else
        ----- %%LANG -----------------------------------------------------
        -- M¢dy parametr– procedury:
        --
        --  Mode    ::= IN | OUT | IN OUT
        --
        --  Control ::= STATIC | REF | UNCHECKED | CLASS | VIRTUAL
        --
        ------------------------------------------------------------------

        -- dal¨¡ symbol
        getlex(param_context,lex);

        {%%TECH Doplnˆn¡ implicitn¡ volac¡ konvence PP_REF pro m¢dy OUT      }
        -- a IN OUT je kl¡‡ov‚ pro spr vn‚ vyhodnocen¡ deklarace v E_PARAM.

        -- IN
        if lex=lex_in then
          -- dal¨¡ symbol
          getlex(param_context,lex);
          if lex=lex_out

            -- IN OUT
            then
              parmode:=pm_inout;
              parpass:=pp_ref;

              -- dal¨¡ symbol
              getlex(param_context,lex);

            -- IN
            else
              parmode:=pm_in;
              parpass:=pp_default;
              end if;

        -- OUT
        elsif lex=lex_out then
          parmode:=pm_out;
          parpass:=pp_ref;

          -- dal¨¡ symbol
          getlex(param_context,lex);

        -- nen¡ uveden m¢d
        else
          parmode:=pm_in;
          parpass:=pp_default;
          end if;

        -- p©ed n¡ parametru
        case lex
          when lex_static    do
              -- OUT a IN OUT se nesm¡ p©ed vat hodnotou
              if parmode in parammodeset:[pm_out,pm_inout] then
                ce^.seterror({CCERR=}000035,ce_i_static);
                ce^.sethint(hint_par_no_static);
                ce^.loadpos;
                {%%RESUME ce^.raiseerror;}
                goto R1;
                end if;
              parpass:=pp_value;

          when lex_ref       do parpass:=pp_ref;
          when lex_unchecked do parpass:=pp_unchecked;
          when lex_class     do parpass:=pp_class;
          when lex_virtual   do
              parpass:=pp_virtual;
              -- je jasn‚, ‘e procedura obsahuje alespo¤ jeden
              -- ©¡d¡c¡ parametr virtu ln¡ho vol n¡
              curr.rflags+procflagset:[rf_virtual];

          when others do ungetlex;
          end case;

      R1:
        -- dal¨¡ symbol
        looklex(param_context,lex);
        if lex in lexsymset:[lex_scol,lex_assign,lex_rpar]

          -- typ parametru nen¡ uveden
          then
            -- sm¡ m¡t parametr vynech n typ ?
            if parpass<>pp_unchecked then
              ce^.seterror({CCERR=}000036,ce_wrongdecl);
              ce^.sethint(hint_no_param_type);
              ce^.loadpos;
              {%%RESUME ce^.raiseerror;}
              ce^.resumeerror;
              end if;

          -- typ parametru je uveden
          else
            -- jm‚no typu
            p_typename(context,curr_context,pparam^.typ);
            end if;
        end if;

    -- po‡ te‡n¡ hodnota
    if checklex(param_context,lex_assign) then
      x_vyraz(param_context,expr,es_expr);

      {%%X}
      end if;

    -- doplnit £daje
    pparam^.mode:=parmode;
    pparam^.pass:=parpass;
    pparam^.num:=num;
    pparam^.init.setexpr(expr);
    succ num;

    -- konec deklarace
    d_end(pparam^,pos);

    until not checklex(curr_context,lex_scol);

  -- prav  z vorka
  if followlex(curr_context,lex_rpar) then
    ce^.seterror({CCERR=}000037,ce_x_rpar);
    ce^.loadpos;
    {%%RESUME ce^.raiseerror;}
    end if;

  -- kolik parametr– bylo deklarov no
  parcount:=num;
  end p_paramlist;



----------------------------------------------------------------------------------------------------
procedure p_def_procedure =
-- Definice typu procedura.
----------------------------------------------------------------------------------------------------
var
  lex              : lexsym;                     -- lexik ln¡ symbol
  pos              : lexposblock;                -- pozice
  result_context   : tcontext;                   -- kontext typu n vratov‚ hodnoty

begin
  -- datov˜ typ
  curr.stype:=dt_procedure;

  -- parametry
  p_paramlist(context,curr,curr_context,false,curr.parcount);

  -- typ n vratov‚ hodnoty
  if checklex(curr_context,lex_return) then

    -- za‡ tek deklarace
    d_create_without_name(curr_context,pentity(curr.result),result_context,et_param,^id_result,pos);

    -- Mode
    curr.result^.mode:=pm_out;

    -- Control
    getlex(result_context,lex);
    case lex
      when lex_class    do curr.result^.pass:=pp_class;
      when lex_virtual  do curr.result^.pass:=pp_virtual;
      when others do
          {%%TECH Doplnˆn¡ implicitn¡ volac¡ konvence PP_REF je kl¡‡ov‚ pro  }
          -- spr vn‚ vyhodnocen¡ deklarace v E_PARAM.
          curr.result^.pass:=pp_default;
          ungetlex;
      end case;

    -- jm‚no typu
    p_typename(context,result_context,curr.result^.typ);

    -- konec deklarace
    d_end(curr.result^,pos);
    end if;
  end p_def_procedure;



----------------------------------------------------------------------------------------------------
procedure p_def_message =
-- Definice typu zpr va.
----------------------------------------------------------------------------------------------------
begin
  -- datov˜ typ
  curr.stype:=dt_message;

  -- parametry
  p_paramlist(context,curr,curr_context,false,curr.parcount);
  end p_def_message;



----------------------------------------------------------------------------------------------------
procedure p_def_task =
-- Definice typu task.
----------------------------------------------------------------------------------------------------
begin
  -- datov˜ typ
  curr.stype:=dt_task;

  -- parametry
  p_paramlist(context,curr,curr_context,false,curr.parcount);
  end p_def_task;



----------------------------------------------------------------------------------------------------
procedure p_def_tag (
    context        : in tcontext;                -- nad©azen˜ kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext) =              -- prim rn¡ kontext typu
-- Definice typu tag.
----------------------------------------------------------------------------------------------------
begin
  -- datov˜ typ
  curr.stype:=dt_tag;
  end p_def_tag;



----------------------------------------------------------------------------------------------------
procedure p_typedef (
    context        : in tcontext;                -- nad©azen˜ kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext;                -- prim rn¡ kontext typu
    lex            : in lexsym) =                -- ji‘ na‡ten˜ lexik ln¡ symbol
-- Definice typu.
----------------------------------------------------------------------------------------------------
begin
  case lex
    when lex_signed     do p_def_ordinal(context,curr,curr_context,dt_signed);
    when lex_unsigned   do p_def_ordinal(context,curr,curr_context,dt_unsigned);
    when lex_imod       do p_def_modular(context,curr,curr_context);
    when lex_enum       do p_def_enum(context,curr,curr_context);
    when lex_logical    do p_def_ordinal(context,curr,curr_context,dt_logical);
    when lex_character  do p_def_ordinal(context,curr,curr_context,dt_char);
    when lex_range      do p_def_range(context,curr,curr_context);
    when lex_digits     do p_def_float(context,curr,curr_context,fdt_digits);
    when lex_delta      do p_def_float(context,curr,curr_context,fdt_delta);
    when lex_ptr        do p_def_pointer(context,curr,curr_context);
    when lex_set        do p_def_set(context,curr,curr_context);
    when lex_array      do p_def_array(context,curr,curr_context,false);
    when lex_string     do p_def_string(context,curr,curr_context);
    when lex_record     do p_def_record(context,curr,curr_context);
    when lex_procedure  do p_def_procedure(context,curr,curr_context);
    when lex_message    do p_def_message(context,curr,curr_context);
    when lex_task       do p_def_task(context,curr,curr_context);
    when lex_tag        do p_def_tag(context,curr,curr_context);
    when others do            verify(58,true);
    end case;
  end p_typedef;



----------------------------------------------------------------------------------------------------
procedure p_typeedef =
-- Definice typu jako sou‡ st deklarace.
----------------------------------------------------------------------------------------------------
var
  lex              : lexsym;                     -- lexik ln¡ symbol
  pparent          : reftype;                    -- p©edek typu
  expr             : pexpnode;                   -- v˜raz

begin
  -- dal¨¡ symbol
  getlex(curr_context,lex);

  if lex in lex_define

    -- p©¡mo definice typu
    then
      -- je to root typ
      curr.derive:=td_root;

      -- definice
      p_typedef(context,curr,curr_context,lex);

    -- jm‚no typu
    else
      ungetlex;

      -- jm‚no typu p©edka
      x_vyraz(curr_context,expr,es_name);

      -- dosadit jako p©edka
      curr.ancestor.setexpr(expr);

      -- constraint/extension
      getlex(curr_context,lex);
      case lex
        -- range constraint
        when lex_range  do
            curr.derive:=td_constrained;

            -- rozsah/v˜raz
            x_vyraz(curr_context,expr,es_choice);
            curr.expr.setexpr(expr);


        -- type extension
        when lex_with do
            -- roz¨¡©en¡ mus¡ b˜t regul rn¡
            curr.tkind:=tk_regular;

            -- nen¡ tam PRIVATE ?
            getlex(curr_context,lex);
            if lex=lex_private

              -- private extension
              then
                -- PRIVATE sm¡ b˜t jen v PUBLIC/PROTECTED ‡ sti modulu/t©¡dy
                if not ((context.entity^.etype in tentitytypeset:[et_module,et_class])
                and (context.region^.vsect in tentityvisibleset:[etv_public,etv_protected])) then
                  ce^.seterror({CCERR=}000038,ce_i_extension);
                  ce^.sethint(hint_private_extension);
                  {%%RESUME ce^.raiseerror;}
                  ce^.resumeerror;
                  end if;

                -- private extension
                curr.derive:=td_private_extension;

              -- norm ln¡ extension
              else
                -- norm ln¡ extension
                curr.derive:=td_extension;

                if lex in lex_define

                  -- definice
                  then p_typedef(context,curr,curr_context,lex)

                  -- jm‚no
                  else
                    ungetlex;
                    unimplemented(58);
                    end if;
                end if;


        -- trivi ln¡ derivace
        when others do
            curr.derive:=td_unconstrained;
            ungetlex;
        end case;
      end if;
  end p_typeedef;



----------------------------------------------------------------------------------------------------
procedure p_private_extension =
-- Private extension declaration.
----------------------------------------------------------------------------------------------------
var
  lex              : lexsym;                     -- lexik ln¡ symbol

begin
  -- dal¨¡ symbol
  getlex(curr_context,lex);

  -- definice
  p_typedef(context,curr,curr_context,lex);
  end p_private_extension;



----------------------------------------------------------------------------------------------------
procedure p_typeidef =
-- Jm‚no typu nebo definice jako sou‡ st implicitn¡ deklarace.
----------------------------------------------------------------------------------------------------
var
  lex              : lexsym;                     -- lexik ln¡ symbol
  pos              : lexposblock;                -- pozice implicitn¡ deklarace typu
  ityp             : pentity_type;               -- implicitnˆ deklarovan˜ typ
  ityp_context     : tcontext;                   -- kontext implicitnˆ deklarovan‚ho typu

begin
  -- dal¨¡ symbol
  getlex(context,lex);
  if lex in lex_define

    -- implicitn¡ deklarace
    then
      --unimplemented(20);

      -- za‡ tek deklarace
      d_create_without_name(context,pentity(ityp),ityp_context,et_type,nil,pos);
      ptyp.settype(ityp);
      d_next(ityp^,pos);

      -- definice
      p_typedef(context,ityp^,ityp_context,lex);

      -- konec deklarace
      d_end(ityp^,pos);

    -- jm‚no typu
    else
      ungetlex;

      -- jm‚no typu
      p_typename(context,curr,ptyp);
      end if;

  -- dal¨¡ symbol
  getlex(context,lex);
  if lex in lex_determ

    -- determinace odvozen‚ho typu
    then
      unimplemented(21);

    -- bez determinace
    else 
      ungetlex;
      end if;
  end p_typeidef;



----------------------------------------------------------------------------------------------------
procedure p_typename =
-- Jm‚no typu.
----------------------------------------------------------------------------------------------------
var
  expr             : pexpnode;

begin
  -- jm‚no
  x_vyraz(context,expr,es_name);
  ptyp.setexpr(expr);
  end p_typename;



end cd_type;