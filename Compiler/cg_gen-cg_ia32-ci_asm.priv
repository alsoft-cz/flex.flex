----------------------------------------------------------------------------------------------------
module private ci_asm =
-- Překladač Flexu.
-- Parser inline assembleru.
----------------------------------------------------------------------------------------------------
-- Ondra : 05.04.2002 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  cc_def.cc_entity,
  cc_def.cc_unitype,
  cc_def.cc_var,
  cc_def.cc_codes,
  cc_base,
  cc_base.cc_sym,
  cc_lex,
  cx_expr,
  cx_expr.cx_def,
  cx_expr.cx_imm,
  cx_expr.cx_compile,
  cb_block,
  cb_block.cb_def,
  cp_cpu.cp_32.cp_def,
  ci_code,
  ci_code.ci_operand,
  ci_code.ci_instr;

type
  -- pseudoinstrukce
  ipseudoinstr     = enum
      ipi_insert;                                -- vložení sekvence bytů
    --ipi_adjust;                                -- posuv IP o uvedenou hodnotu
      end enum;

var
  -- názvy pseudoinstrukcí
  ipseudoinstrtxt  : const array ipseudoinstr of tshortident := [
      for ipi_insert use 'INSERT'{,
      for ipi_adjust use 'ADJUST'}];

----------------------------------------------------------------------------------------------------
#separate public ci_lex;
#separate private ci_lex;
-- Rozšíření lexikálního analyzátoru pro inline assembler.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
procedure p_asm_label  (
    curr           : in tcontext;                -- aktuální kontext
    bl             : in out blasm) =             -- uzel reprezentující blok v inline assembleru
-- zpracování návěští před instrukcí
----------------------------------------------------------------------------------------------------
with
  cd_decl,
  cd_decl.cd_create;

var
  lex              : lexsym;                     -- lexikální prvek
  srch             : tentitysearch;              -- hledátko
  id               : pentityident;               -- identifikátor návěští
  pos              : lexposblock;                -- pozice
  plabel           : pentity_label;              -- deklarované návěští
  plabel_context   : tcontext;                   -- kontext deklarovaného návěští
  p                : piasmnode_label;            -- návěští

begin
  -- %%TECH Toto je jedno z mála míst, kde se při syntaktické analýze 
  -- manipuluje přímo se symbolem a ne jen s identifikátorem.
  --   Mohu si to dovolit, protože návěští je čistě lokální symbol
  -- a nehrozí, že by bylo generické.
  -- %%LANG Nehledě k tomu, že bez toho bych nerozpoznal o jakou      
  -- syntaktickou konstrukci se jedná

  -- identifikátor návěští
  id:=getlexid;

  -- pozice
  getlexpos(pos.b,ll_curr,false);

  -- zkusit vyhledat (jen v tomto regionu)
  srch.find_local_all(curr,id^);
  if srch.psym=nil 
  
    -- nové návěští
    then 
      -- založit nové návěští
      d_create_at_position(curr,pentity(plabel),plabel_context,et_label,id,pos);
      d_end_at_position(plabel^,pos,true);
    
    -- existující návěští
    else
      plabel:=srch.psym;

      -- je to skutečně návěští ?
      if plabel^.etype<>et_label then
        ce^.seterror({CCERR=}000338,ce_x_id_label);
        ce^.loadpos2;
        ce^.resumeerror;
        end if;

      -- nebylo již návěští umístěno ?
      if plabel^.placed then
        ce^.seterror({CCERR=}000339,ce_duplabel);
        ce^.setparam(entityident_to_string(id^));
        ce^.loadpos2;
        ce^.resumeerror;
        end if;     
      end if;

  -- dvojtečka
  if followlex(curr,lex_col) then
    ce^.seterror({CCERR=}000340,ce_x_col);
    ce^.loadpos;
    {%%RESUME ce^.raiseerror;}
    end if;

  -- pozice
  getlexpos(pos.e,ll_curr,true);

  -- nastavit pozici symbolu
  entity_set_position_all(plabel^,pos);

  -- označit návěští za umístěné
  plabel^.placed:=true;
  
  -- vytvořit záznam o umístění návěští
  new p;
  p^.ntype:=ian_label;
  p^.pos:=pos;
  p^.plabel:=plabel;
  
  -- zařadit do seznamu instrukcí
  if bl.ifirst<>nil
    then piasmnode(bl.ilast)^.next:=p;
    else piasmnode(bl.ifirst):=p;
    end if;
  piasmnode(bl.ilast):=p;
  end p_asm_label;



----------------------------------------------------------------------------------------------------
procedure adduitoimm32 (
    ui             : in tuniint;                 -- dodané číslo
    val            : in out timm32) =            -- výsledný operand
-- Z čísla v univerzálním tvaru vyrobí 32-bitovou hodnotu a PŘIČTE ji do VAL.
----------------------------------------------------------------------------------------------------
var
  x                : timm32;

begin
  -- dá se považovat za rozumné signed číslo? (-2^31..2^31-1)
  if not uniint_test_shrink(ui,4,true{=signed}) then
    x:=uniint_to_imm32(ui);

  -- dá se považovat za rozumné unsigned číslo? (0..2^32-1)
  elsif not uniint_test_shrink(ui,4,false{=unsigned}) then
    x:=uniint_to_imm32(ui);

  -- je to v háji
  else
    ce^.seterror({CCERR=}000341,ce_numrange);
    ce^.loadpos;
    ce^.resumeerror;
    end if;

  -- přičíst
  val+x;
  end adduitoimm32;



----------------------------------------------------------------------------------------------------
procedure create_rel_or_imm (
    instr          : in iasmnode_instr;          -- související instrukce
    size           : in t_unsigned;              -- velikost operandu (typicky 0 nebo 4)
    entity         : in pentity;                 -- související relokabilní entita
    oper           : in out c_operand) =         -- výsledný operand
-- Podle druhu právě překládané instrukce sestaví operand typu relativní adresa nebo přímá hodnota
-- a nastaví relokaci na zadanou entitu.
----------------------------------------------------------------------------------------------------
begin
  if iinstrinfo[instr.ii].kind in iiks_branch
    then oper.create_relative_address_low_level(size);
    else oper.create_imm_low_level(edt_address,size,0);
    end if;
  oper.set_relo_entity(entity);
  end create_rel_or_imm;



----------------------------------------------------------------------------------------------------
procedure asm_label_to_oper (
    curr           : in tcontext;                -- aktuální kontext
    instr          : in iasmnode_instr;          -- související instrukce
    id             : in pentityident;            -- identifikátor návěští
    bl             : in blasm;                   -- uzel reprezentující blok v inline assembleru
    oper           : in out c_operand) =         -- výsledný operand
-- do operandu instrukce poznamená odkaz na cíl skoku
----------------------------------------------------------------------------------------------------
with
  cd_decl,
  cd_decl.cd_create;

var
  srch             : tentitysearch;              -- hledátko
  plabel           : pentity_label;              -- návěští
  plabel_context   : tcontext;                   -- kontext deklarovaného návěští
  pos              : lexposblock;                -- prázdná pozice

begin
  -- najít záznam návěští
  srch.find_local_all(curr,id^);
  if srch.psym=nil

    -- návěští dosud nebylo deklarováno, učinit tak nyní
    then
      -- pro účely chybových hlášení bude návěští pro zatím deklarováno na místě prvního odkazu na něj
      getlexposall(pos,ll_curr);

      -- založit nové návěští
      d_create_at_position(curr,pentity(plabel),plabel_context,et_label,id,pos);
      d_end_at_position(plabel^,pos,true);

    -- návěští již existuje, jen ho převzít
    else
      -- převzít
      plabel:=srch.psym;    

      -- je to skutečně návěští
      if plabel^.etype<>et_label then
        ce^.seterror({CCERR=}000342,ce_x_id_label);
        ce^.loadpos2;
        ce^.resumeerror;
        end if;
      end if;

  -- zvýšit počet použití návěští
  succ plabel^.stat_usage;

  -- sestavit operand
  create_rel_or_imm(instr,0,plabel,oper);
  end asm_label_to_oper;



----------------------------------------------------------------------------------------------------
procedure p_asm_type_specifier (
    curr           : in tcontext;                -- aktuální kontext
    expr           : out pexpnode;               -- výraz použitý jako specifikátor typu
    opsize         : out t_unsigned) =           -- velikost operandu
-- Specifikátor typu operandu.
----------------------------------------------------------------------------------------------------
label
  n1;

var
  e                : tentityeval;

begin
  if checklex(curr,lex_lt) then
    -- jméno typu
    x_vyraz(curr,expr,es_name);
    x_evaluate(curr,expr,ek_typename_or_const_integer,nil,eu_formal,true,e);
    {%%X co když se nevyhodnotí }

    -- typ 
    if expr^.nclass=nc_type then
      -- typ musí mít velikost
      if not expr^.t.hassize then
        ce^.seterror({CCERR=}000343,ce_i_type);
        expr^.errpos;
        goto n1;
        end if;

      -- převzít velikost          
      opsize:=unidata_size_to_unsigned(expr^.t.getctype^.size);

    -- konstanta
    elsif expr^.ntype=nt_imm then
      declare var
        ui         : tuniint;

      begin
        -- načíst hodnota
        load_uniint(pexpimm(expr)^.imm,ui);

        -- převzít
        opsize:=uniint_to_unsigned(ui);
        end declare;

    -- cokoliv jiného se sem nemělo dostat
    else
      verify({VERIFY=}000644,true);
      end if;

  n1:
    -- následuje pravá lomená závorka
    if followlex(curr,lex_gt) then
      ce^.seterror({CCERR=}000344,ce_x_gt);
      ce^.loadpos;
      end if;
    end if;
  end p_asm_type_specifier;



----------------------------------------------------------------------------------------------------
procedure p_asm_operand (
    curr           : in tcontext;                -- aktuální kontext
    bl             : in blasm;                   -- uzel reprezentující blok v inline assembleru
    instr          : in out iasmnode_instr;      -- související instrukce
    oper           : in out c_operand;           -- prostor na operand
    typed          : in t_logical) =             -- byl specifikován typ
-- preklad jedne instrukce inline assembleru
----------------------------------------------------------------------------------------------------
with
  cc_base,
  cc_base.cc_sym;

var
  opsize           : t_unsigned;                 -- předepsaná velikost operandu (0=neuvedeno)

    ------------------------------------------------------------------------------------------------
    procedure p_selector ( 
        default_context : pentity;               -- implicitní kontext pro prohledávání
        offset_only     : t_logical) =           -- zajímá nás pouze offset, žádné konstanty
    -- Selektor adresy ve tvaru Identifikátor { . Identifikátor }, kde Identifikátor je jméno
    -- modulu, konstanty, typu, složky recordu/třídy.
    ------------------------------------------------------------------------------------------------
    var
      lex          : lexsym;                     -- lexikální prvek
      context      : pentity;                    -- kontext pro prohledávání
      value        : timm32;                     -- hodnota určená nalezenou entitou

    begin
      context:=default_context;
      loop
        -- přečíst identifikátor
        getlex(curr,lex);
        if lex<>lex_id then
          ce^.seterror({CCERR=}000345,ce_x_id);
          ce^.loadpos;
          ce^.resumeerror;
          end if;

        -- vyhledat entitu
        declare var
          srch     : tentitysearch;              -- hledátko

        begin
          if context=nil

            -- vyhledat globálně
            then
              srch.find_global(curr,getlexid^);
            
            -- vyhledat lokálně v existujícím kontextu
            else 
              declare var
                vis : tentityvisibleset;

              begin
                -- zjistit úroveň viditelnosti
                sym_get_visibility(curr.entity,context,vis);

                -- nejsou povoleny žádné úrovně viditelnosti => hledání (selektor) je zakázáno
                -- %%X Tohle jsem opsal z cx_expr.cx_form.a_form_component.findinsymbol]. Nevím,
                -- jestli je to relevantní i pro assembler. Ondra.
                if vis=tentityvisibleset:[] then
                  ce^.seterror({CCERR=}000346,ce_i_selector);
                  ce^.loadpos;
                  ce^.resumeerror;
                  end if;

                -- vyhledat v existujícím kontextu
                srch.find_local(sym_primary_context(context^),getlexid^,vis);
                end declare;
              end if;

          -- našlo se něco ?
          if srch.psym=nil then
            ce^.seterror({CCERR=}000347,ce_undeclared);
            ce^.setparam(entityident_to_string(getlexid^));
            ce^.loadpos;
            ce^.resumeerror;
            end if;

          -- zpracovat
          case srch.psym^.etype
            -- modul, třída, typ
            when et_module, et_class, et_type do  
                -- musí následovat tečka
                looklex(curr,lex);
                if lex<>lex_dot then
                  ce^.seterror({CCERR=}000348,ce_x_dot);
                  ce^.loadpos;
                  ce^.resumeerror;
                  end if;                 

                -- zresetovat hodnotu
                value:=nil;

            -- konstanta
            when et_const do
                -- jsou konstanty povoleny ?
                if offset_only then
                  ce^.seterror({CCERR=}000349,ce_i_symbol);
                  ce^.loadpos;
                  ce^.resumeerror;
                  end if;

                -- musí být diskrétního typu
                if pentity_const(srch.psym)^.typ.getctype^.stype not in dts_u_ordinal then                      
                  ce^.seterror({CCERR=}000350,ce_i_consttype);
                  ce^.loadpos;
                  ce^.resumeerror;
                  end if;

                -- hodnotu konstanty přičíst k hodnotě
                declare var
                  ui : tuniint;
                begin
                  -- zjistit hodnotu konstanty
                  load_uniint(pentity_const(srch.psym)^.init.getimm^,ui);

                  -- zjistit, jestli má přípustnou velikost
                  if uniint_test_shrink(ui,value:size,uniint_sign(ui)) then
                    ce^.seterror({CCERR=}000351,ce_numrange);
                    ce^.loadpos;
                    ce^.resumeerror;
                    end if;

                  -- nastavit hodnotu
                  value:=uniint_to_imm32(ui);
                  end declare;

                -- za konstantou selektor už určitě končí
                break;

            -- složka třídy nebo recordu
            when et_var do
                -- zkontrolovat paměťovou třídu
                if pentity_var(srch.psym)^.mclass not in memclassset:[mc_class,mc_record] then
                  ce^.seterror({CCERR=}000352,ce_i_memclass);
                  ce^.loadpos;
                  ce^.resumeerror;
                  end if;

                -- offset proměnné přičíst k hodnotě
                value+unidata_addr_to_imm32(pentity_var(srch.psym)^.addr);

            -- jiné entity neumíme
            when others do
                ce^.seterror({CCERR=}000353,ce_i_symbol);
                ce^.loadpos;
                ce^.resumeerror;
            end case;

          -- pro příště (bude-li nějaké) změnit kontext
          context:=srch.psym;
          end declare;
        until not checklex(curr,lex_dot);

      -- a na závěr konstantu aplikovat do operandu
      oper.shift_displacement(imm32_to_signed(value));
      end p_selector;



    ------------------------------------------------------------------------------------------------
    procedure p_memory_address (
        continue   : t_logical;                  -- T-nezakládat nový operand, už existuje
        no_base    : t_logical) =                -- T-bázový registr je (bude) obsazen
    -- Adresa v paměti ve tvaru: [ registr + registr * scale + offset ]
    ------------------------------------------------------------------------------------------------
    var
      lex          : lexsym;                     -- lexikální prvek

    begin
      -- připravit operand
      if not continue then
        oper.create_memory_address_low_level(edt_binary,opsize);
        end if;

      loop
        -- registr, číslo nebo +/-
        getlex(curr,lex);
        if lex=lex_sub

          -- - číslo
          then
            -- číslo
            if followlex(curr,lex_numi) then
              ce^.seterror({CCERR=}000354,ce_x_numi);
              ce^.loadpos;
              ce^.resumeerror;
              end if;
            
            -- přičíst znegovanou hodnotu k dosud nakumulované hodnotě
            oper.unshift_displacement(uniint_to_signed(getlexui));
            -- adduitoimm32(uniint_neg(getlexui),oper.disp);

            --%%TODO nejde přeložit tohle (asi je to chyba):
            --adduitoimm32(-getlexui,oper.disp);

          -- + registr, číslo
          else
            -- další symbol
            if lex=lex_add then getlex(curr,lex); end if;

            case lex
              -- registr
              when lex_asm_reg do
                  declare var
                    reg : ireg;                  -- registr

                  begin
                    -- jaký registr to je
                    reg:=ireg(getlexcode);

                    -- je to indexní registr ?
                    if reg not in ir_index then
                      ce^.seterror({CCERR=}000355,ce_g_registr);
                      ce^.loadpos;
                      ce^.resumeerror;
                      end if;

                    -- není tam měřítko ?
                    if checklex(curr,lex_mul)

                      -- * scale
                      then
                        -- index už je obsazen
                        if oper.index.reg<>ir_none then
                          ce^.seterror({CCERR=}000356,ce_g_registr);
                          ce^.loadpos;
                          ce^.resumeerror;
                          end if;

                        declare var
                          scale : t_unsigned;      -- měřítko
                          ui    : tuniint;         -- získané číslo

                        begin
                          -- přečíst číslo
                          if followlex(curr,lex_numi) then
                            ce^.seterror({CCERR=}000357,ce_x_numi);
                            ce^.loadpos;
                            ce^.resumeerror;
                            end if;
                          ui:=getlexui;

                          -- je to 1,2,4 nebo 8
                          scale:=uniint_to_unsigned(ui);
                          if uniint_test_shrink(ui,1,false) or (scale<>1 and scale<>2 and scale<>4 and scale<>8 {%%TODO(IN) not in [1,2,4,8]}) then
                            ce^.seterror({CCERR=}000358,ce_g_scale);
                            ce^.loadpos;
                            ce^.resumeerror;
                            end if;

                          -- sestavit index
                          oper.shift_by_index_low_level(reg,scale);
                          end declare;

                      -- jen registr
                      else
                        -- zkusit bázi
                        if not no_base and oper.base.reg=ir_none then oper.shift_by_base_low_level(reg)
                        -- zkusit index
                        elsif oper.index.reg=ir_none then oper.shift_by_index_low_level(reg,1)
                        -- moc registrů
                        else
                          ce^.seterror({CCERR=}000359,ce_g_registr);
                          ce^.loadpos;
                          ce^.resumeerror;
                          end if;
                        end if;
                    end declare;

              -- číslo
              when lex_numi do
                  -- získat hodnotu a přičíst k dosud nakumulované hodnotě
                  oper.shift_displacement(uniint_to_signed(getlexui));

              -- konstanta
              when lex_id do
                  ungetlex;
                  p_selector(nil,false);

              -- nic jiného neumím
              when others do
                  ce^.seterror({CCERR=}000360,ce_g_x_reg_numi);
                  ce^.loadpos;
                  ce^.resumeerror;
              end case;
            end if;

        looklex(curr,lex);
        until lex not in lexsymset:[lex_add,lex_sub];

      -- pravá hranatá závorka
      if followlex(curr,lex_rbra) then
        ce^.seterror({CCERR=}000361,ce_x_rbra);
        ce^.loadpos;
        end if;

      -- může následovat selektor položky recordu
      if checklex(curr,lex_dot) then
        p_selector(nil,true);
        end if;

    {
      -- pokud si to uživatel přeje, tak změníme implicitní velikost operandu
      if opsize<>0 then
        oper.size:=opsize;
        end if;
    }
      end p_memory_address;

var
  lex              : lexsym;                     -- lexikální prvek
--val              : lexval;                     -- hodnota prvku
  expr             : pexpnode;                   -- výraz použitý jako specifikátor typu

begin
  -- na začátku operandu může být uvedena specifikace typu (=velikosti)
  p_asm_type_specifier(curr,expr,opsize);

  -- zpracovat zbytek operandu
  getlex(curr,lex);
  case lex
    -- registr
    when lex_asm_reg do
        -- %%X jestliže existuje entita téhož jména, mělo by to přinejmenším varovat

        declare var
          reg      : ireg;                       -- registr

        begin
          -- zjistit kód registru
          reg:=ireg(getlexcode);

          if reg in ir_seg and then checklex(curr,lex_col)

            -- segmentový registr : [ registr + registr * scale + offset ]
            then 
              -- instrukce smí mít pouze jeden explicitně specifikovaný segment
              if instr.segment<>ir_none then
                ce^.seterror({CCERR=}000362,ce_g_segment);
                ce^.loadpos2;
                end if;

              -- poznamenat si segmentový registr do instrukce
              instr.segment:=reg;

              -- levá hranatá závorka
              if followlex(curr,lex_lbra) then
                ce^.seterror({CCERR=}000363,ce_x_lbra);
                ce^.loadpos;
                end if;

              -- přeložit adresu
              p_memory_address(false,false);

            -- registr samotný
            else
              -- vytvořit operand
              oper.create_use_register_low_level(edt_unsigned,reg);
      {
              -- kód registru
              oper.reg.reg:=ireg(getlexcode);

              -- odvodit typ operandu
              if oper.reg.reg in ir_reg+ir_sti+ir_mmxi+ir_xmmi then oper.optype:=io_reg
              elsif oper.reg.reg in ir_seg then oper.optype:=io_seg
              elsif oper.reg.reg in ir_cri then oper.optype:=io_cri
              elsif oper.reg.reg in ir_dri then oper.optype:=io_dri; end if;

              -- velikost 
              oper.size:=iregsize[oper.reg.reg];
      }
              -- zkontrolovat velikost oproti uživatelem explicitně zadané
              if (opsize<>0) and (opsize<>oper.size) then
                ce^.seterror({CCERR=}000364,ce_g_opsize);
                expr^.errpos;
                end if;
              end if;
          end declare;

    -- identifikátor
    when lex_id do
        declare var
          srch             : tentitysearch;              -- nalezený symbol

        begin
          -- vyhledej symbol v tabulce
          declare var
            id       : pentityident;               -- identifikator
          begin
            id:=getlexid;
            srch.find_global(curr,id^);
            if srch.psym=nil then
              ce^.seterror({CCERR=}000365,ce_undeclared);
              ce^.setparam(entityident_to_string(id^));
              ce^.loadpos;
              ce^.resumeerror;
              end if;
            end declare;

          -- zvýšit počet použití
          succ srch.psym^.stat_usage;

          -- podle typu objektu rozhodnout co s tím
          case srch.psym^.etype
            -- proměnná
            when et_var do
                case pentity_var(srch.psym)^.vmode
                  when vm_ref    do oper.create_memory_address_low_level(edt_address,lpointer32);
                  when vm_direct do oper.create_memory_address_low_level(
                                         edtype_from_type(pentity_var(srch.psym)^.typ.getctype),
                                         unidata_size_to_unsigned(pentity_var(srch.psym)^.typ.getctype^.size));
                  when vm_index  do unimplemented({UNIMP=}000277); -- je vůbec možné v built-in assembleru zpřístupnit taskové proměnné?
                  end case;
                oper.set_relo_entity(srch.psym);

                -- v některých případech může následovat index
                if pentity_var(srch.psym)^.vmode=vm_direct and then checklex(curr,lex_lbra) then
                  p_memory_address(true,pentity_var(srch.psym)^.mclass=mc_auto);
                  end if;

            -- konstanta
            when et_const do
                declare var
                  ui : tuniint;                  -- získané číslo

                begin
                  -- získej hodnotu konstanty
                  load_uniint(pentity_const(srch.psym)^.init.getimm^,ui);

                  -- ze získané hodnoty vytvoř operand instrukce
                  oper.create_imm_low_level(edt_unsigned,0,uniint_to_imm32(ui));
                  end declare;

            -- procedura
            when et_procedure, et_static do
                -- vytvořit operand
                create_rel_or_imm(instr,4,srch.psym,oper);

            when others do verify({VERIFY=}000192,true);
            end case;
          end declare;

        -- pokud si to uživatel přeje, tak změníme implicitní velikost operandu
        if opsize<>0 then
          -- %%X zobrazit varování pokud je OPSIZE > OPER.SIZE
          oper.adjust_size(opsize);
          end if;

    -- číslo
    when lex_numi do
        -- číslo se při linkování pozná tak, že operand je typu IO_IMM, a v PSYM
        -- je NIL. hodnota je uložena v IMM. Je-li PSYM<>NIL, není to číslo, ale
        -- hodnota proměnné.

        -- %% Zkontrolovat, zda se konstanta vejde do prostoru velikosti [opsize]

        -- ze získané hodnoty vytvoř operand instrukce
        oper.create_imm_low_level(edt_unsigned,opsize,uniint_to_imm32(getlexui));
      {
        -- pokud si to uživatel přeje, tak změníme implicitní velikost operandu
        if opsize<>0 then
          -- %% Zkontrolovat, zda se konstanta do prostoru takové velikosti vejde
          oper.size:=opsize;
          end if;
      }
    -- navesti
    when lex_asm_label do
        -- do instrukce uložit odkaz na návěští
        asm_label_to_oper(curr,instr,getlexid,bl,oper);

        -- explicitní specifikace velikosti tu nemá co dělat
        if opsize<>0 then
          -- %%X Hlásit nějakou chybu
          end if;

    -- [ registr + registr * scale + offset ]
    when lex_lbra do
        p_memory_address(false,false);

    when others do
        ce^.seterror({CCERR=}000366,ce_g_x_operand);
        ce^.loadpos;
        ce^.resumeerror;
    end case;
  end p_asm_operand;



----------------------------------------------------------------------------------------------------
procedure p_asm_instruction (
    curr           : in tcontext;                -- aktuální kontext
    bl             : in out blasm;               -- uzel reprezentující blok v inline assembleru
    prefixed       : in t_logical) =             -- T = GETLEX vrátí prefix
-- preklad jedne instrukce inline assembleru
----------------------------------------------------------------------------------------------------
label n1;

var
  lex              : lexsym;                     -- lexikální prvek
  val              : lexval;                     -- hodnota prvku
  p                : piasmnode_instr;            -- instrukce
  konec            : t_logical;                  -- konec operandu
  xpos             : lexposblock;
  i                : piasmnode_instr^.op:range;

begin
  -- alokovat paměť pro instrukci
  new p;
  p^.ntype:=ian_instruction;

  -- zpracovat všechny prefixy, zatím stačí 1
  if prefixed then
    -- zapamatovat si prefix instrukce
    p^.prefix:=iprefix(getlexcode);

    -- vyčíst případné konce řádků
    -- %%X prefix by neměl být povolen samotný na řádku...
    loop
      getlex(curr,lex);
      until lex<>lex_eoln;

    -- musí následovat samotný kód instrukce
    if lex<>lex_asm_instr then
      ce^.seterror({CCERR=}000367,ce_g_x_instr);
      ce^.loadpos2;
      ce^.resumeerror;
      end if;
    end if;

  -- připravit instrukci
  p^.ii:=iinstr(getlexcode);
{
  for i in piasmnode_instr^.op:range loop
    nullop(p^.op[i],io_none);
    end loop;
}
  -- zapamatuj si pozici instrukce
  getlexpos(p^.pos.b,ll_curr,false{=zacatek});

  -- zpracuj všechny operandy
  i:=p^.op:first;
  while i<=p^.op:last loop
    -- mohl by nasledovat operand
    getlex(curr,lex);

    -- středník => konec instrukce
    if lex=lex_scol then
      goto n1;

    -- konec řádku => konec instrukce
    elsif lex in lexsymset:[lex_eoln,lex_eof] then
      ungetlex;
      break;

    -- první operand
    elsif i=p^.op:first then
      ungetlex;
      p_asm_operand(curr,bl,p^,p^.op[i],false);

    -- čárka => další operand
    elsif lex=lex_comma then
      p_asm_operand(curr,bl,p^,p^.op[i],false);

    -- chyba
    else
      ce^.seterror({CCERR=}000368,ce_g_x_eoi);
      ce^.setinfo(hint_asm_eoln_or_operand);
      ce^.loadpos;
      ce^.resumeerror;
      end if;
    succ i;
    end loop;

  -- za instrukcí by mohl být ještě středník
  ignorelex(curr,lex_scol);

n1:
  -- zapamatuj si pozici posledního operandu
  getlexpos(p^.pos.e,ll_prev,true{=konec});

  -- upravit velikost operandů
  if p^.op[1].optype<>io_none and p^.op[1].size=0 then
    if p^.op[2].size<>0 then p^.op[1].adjust_size(p^.op[2].size);
    elsif p^.op[3].size<>0 then p^.op[1].adjust_size(p^.op[3].size); end if;
    end if;
  if p^.op[2].optype<>io_none and p^.op[2].size=0 then
    if p^.op[1].size<>0 then p^.op[2].adjust_size(p^.op[1].size)
    elsif p^.op[3].size<>0 then p^.op[2].adjust_size(p^.op[3].size); end if;
    end if;
  if p^.op[3].optype<>io_none and p^.op[3].size=0 then
    if p^.op[1].size<>0 then p^.op[3].adjust_size(p^.op[1].size)
    elsif p^.op[2].size<>0 then p^.op[3].adjust_size(p^.op[2].size); end if;
    end if;

  -- zkontrolovat přípustnost instrukce
  checkii(p^.pos,p^.ii,p^.op[1],p^.op[2],p^.op[3]);

  -- zařadit do seznamu
  if bl.ifirst=nil
    then piasmnode(bl.ifirst):=p;
    else piasmnode(bl.ilast)^.next:=p;
    end if;
  bl.ilast:=p;

catch
  when resume_error do resumelex(curr,lex,lex_asm_instr,rl_leave,lex_endasm,rt_leave);
  end p_asm_instruction;



----------------------------------------------------------------------------------------------------
procedure p_asm_insert (
    curr           : in tcontext;                -- aktuální kontext
    bl             : in out blasm) =             -- uzel reprezentující blok v inline assembleru
-- Pseudoinstrukce: vložení sekvence bytů.
----------------------------------------------------------------------------------------------------
var
  p                : piasmnode_insert;           -- pseudoinstrukce vložení sekvence bytů
  expr             : pexpnode;                   -- výraz použitý jako specifikátor typu
  opsize           : t_unsigned;                 -- velikost operandu
  ui               : tuniint;                    -- hodnota vkládaného bytu
  _bytes           : p^.bytes:type;

begin
  -- alokovat paměť pro pseudoinstrukci
  new p;
  p^.ntype:=ian_insert;

  -- zapamatuj si pozici instrukce
  getlexpos(p^.pos.b,ll_curr,false{=zacatek});

  -- sekvence operandů jsou hodnoty vkládaných bytů
  loop
    -- volitelně může být uveden specifikátor typ
    -- na začátku operandu může být uvedena specifikace typu (=velikosti)
    p_asm_type_specifier(curr,expr,opsize);
    if opsize<>0 and opsize<>1 and opsize<>2 and opsize<>4 then
      {%%TOODO ...}
      end if;
  
    -- číslo
    if not checklex(curr,lex_numi) then
      ce^.seterror({CCERR=}000369,ce_x_numi);
      ce^.loadpos;
      ce^.resumeerror;
      end if;

    -- hodnota čísla
    ui:=getlexui;

    -- jak jsme na tom s velikostí vkládané hodnoty ?
    if opsize<>0 
    
      -- je pevně daná => zjistit, zda se číslo vejde 
      then
        if uniint_test_shrink(ui,opsize,false) then
          ce^.seterror({CCERR=}000370,ce_numrange);
          ce^.loadpos;
          ce^.resumeerror;
          end if;

      -- máme si ji odvodit
      else 
        -- %%X Tohle tedy není dvakrát systémové řešení...
        if not uniint_test_shrink(ui,1,false) then opsize:=1
      { Ondra 2.4.2003 : Dočasně (%%X) zrušeno, protože $0000_0025 je matoucí. Později rozšířit
        o detekci počtu znaků integerového literálu a podle toho generovat varování.

        elsif not uniint_test_shrink(ui,2,false) then opsize:=2
        elsif not uniint_test_shrink(ui,4,false) then opsize:=4
      }
        else
          ce^.seterror({CCERR=}000371,ce_numrange);
          ce^.loadpos;
          ce^.resumeerror;
          end if;
        end if;

    -- realokovat paměť
    if p^.bytes=nil then
      new p^.bytes range opsize;
    elsif p^.bytes^:length+opsize>p^.bytes^:last then
      --%%TODO(ADJUST) adjust p^.bytes range p^.bytes^:length+opsize;
      new _bytes range p^.bytes^:length+opsize;
      _bytes^:=p^.bytes^;
      discard p^.bytes;
      p^.bytes:=_bytes;
      end if;

    -- vložit do sekvence bytů
    for i in 0..opsize-1 loop
      p^.bytes^ & t_code_byte(uniint_get_nth_byte(ui,i));
      end loop;
    until not checklex(curr,lex_comma);

  -- zapamatuj si pozici posledního operandu
  getlexpos(p^.pos.e,ll_prev,true{=konec});

  -- zařadit do seznamu
  if bl.ifirst=nil
    then piasmnode(bl.ifirst):=p;
    else piasmnode(bl.ilast)^.next:=p;
    end if;
  bl.ilast:=p;
  end p_asm_insert;


{
----------------------------------------------------------------------------------------------------
procedure p_asm_adjust (
    curr           : in tcontext;                -- aktuální kontext
    bl             : in out blasm) =             -- uzel reprezentující blok v inline assembleru
-- Posuv IP o uvedenou hodnotu.
----------------------------------------------------------------------------------------------------
var
  p                : piasmnode_adjust;           -- pseudoinstrukce posuv IP o uvedenou hodnotu

begin
  -- alokovat paměť pro pseudoinstrukci
  new p;

  -- jediný parametr je hodnota posuvu

  end p_asm_adjust;
}


----------------------------------------------------------------------------------------------------
procedure p_asm_pseudoinstr (
    curr           : in tcontext;                -- aktuální kontext
    bl             : in out blasm) =             -- uzel reprezentující blok v inline assembleru
-- Pseudoinstrukce.
----------------------------------------------------------------------------------------------------
begin
  case ipseudoinstr(getlexcode)
    -- vložení sekvence bytů
    when ipi_insert do p_asm_insert(curr,bl);
 {
    -- posuv IP o uvedenou hodnotu
    when ipi_adjust do p_asm_adjust(curr,bl);
}
    end case;
  end p_asm_pseudoinstr;



----------------------------------------------------------------------------------------------------
procedure p_asm : current module:ancestor.p_asm:base =
-- Parser inline assembleru.
----------------------------------------------------------------------------------------------------
var
  lex              : lexsym;                     -- lexikální symbol
  srch             : tentitysearch;              -- hledátko

  -- modifikace chování lexikálního analyzátoru pro účely překladu inline assembleru
  _behavior        : ci_lex.c_lex_behavior_ia32_asm;

begin
  loop
    getlex(curr,lex);
    case lex
      -- konec bloku preprocesoru
      when lex_endasm do break;

      -- prefix instrukce assembleru
      -- %%X Pro jednoduchost se předpokládá, že bude jen jeden
      when lex_asm_prefix do p_asm_instruction(curr,bl,true);

      -- instrukce asembleru
      when lex_asm_instr do p_asm_instruction(curr,bl,false);

      -- pseudoinstrukce
      when lex_asm_pseudoinstr do p_asm_pseudoinstr(curr,bl);

      -- konec radku na teto urovni ignorujeme
      when lex_eoln do ;

      -- návěští před instrukcí
      when lex_asm_label do p_asm_label(curr,bl);

      -- konec assembleru
      when lex_eof do
          ce^.seterror({CCERR=}000372,ce_meta_x_end_id);
          ce^.setparam(metaid_asm);
          ce^.loadpos2;
          return;

      when others do
          ce^.seterror({CCERR=}000373,ce_meta_x_end_id);
          ce^.setparam(metaid_asm);
          ce^.loadpos2;
          ce^.resumeerror;
      end case;
    end loop;

  -- zjistit, zda byla všechna použitá návěští deklarována
  srch.find_et_first_in_context(curr,et_label,[]);
  while srch.psym<>nil loop
    -- zkontrolovat, jestli bylo umístěno
    if not pentity_label(srch.psym)^.placed then
      ce^.seterror({CCERR=}000374,ce_undeclared);
      ce^.setparam(entityident_to_string(pentity_label(srch.psym)^.id^));
      ce^.setpos(pentity_label(srch.psym)^.pos[etp_def]);
      end if;

    -- další návěští
    srch.find_et_next;
    end loop;
  end p_asm;



----------------------------------------------------------------------------------------------------
entry =
----------------------------------------------------------------------------------------------------
begin
  current module:ancestor.p_asm:=^current module.p_asm;
  end entry;



end ci_asm;
