----------------------------------------------------------------------------------------------------
module private ci_pointer =
-- Překladač Flexu.
-- Operace s pointery.
----------------------------------------------------------------------------------------------------
-- Ondra : 18.04.2003 : Vytvořil
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
procedure i_gen_op_compare_pointer =
-- Porovnávání pointerů.
----------------------------------------------------------------------------------------------------
with
  advanced.low_level.bit_operations,
  ci_expr.ci_rcheck;

var
  el               : pexpnode;                   -- levý podvýraz
  er               : pexpnode;                   -- pravý podvýraz
  cc               : icond;                      -- kód podmínky
  rest             : typeview;                   -- společný typ operandů
  newcontext       : iexprcontext;               -- kontext generování podvýrazu

begin
  verify({VERIFY=}000325,expr^.arity<>eoa_2 or expr^.assign);

  -- podvýrazy
  expr^.get(el,er);

  -- vypočítat společný typ operandů
  x_resolve(el^.t,er^.t,false,rest);

  -- podmínka
  cc:=op2cc[expr^.oper,false];

  ----- porovnání na NIL -----
  if x_is_nil(er) then
    declare var
      op1          : c_operand;                  -- operand 1

    begin
      -- vygenerovat a načíst levý podvýraz
      i_newcontext(context,newcontext,lm_pointer{lm_pointer_reg},rest.getutype);
      i_load(inst,info,newcontext,context,el,op1);

      -- stačí porovnat na NIL pouze adresu
      -- %%X Opravdu ? viz flex@alsoft.cz
      op1.adjust_size(4);

      -- porovnat
      addii(inst,info,ii_cmp,op1,op_0,op0);

    leave
      -- uvolnit operand
      op1.free(info,context);
      end declare;

  ---- porovnání dvou pointerů -----
  else
    -- různé typy pointerů se porovnávají obecně jinak
    case rest.getpclass

      -- přístup k datům nebo podprogramu
      when pc_data, pc_subprogram do
          ----- %%TECH Porovnávání pointerů na třídu na (ne)rovnost --------------------------------
          -- Pro porovnání dvou class pointerů na třídu na (ne)rovnost stačí porovnat adresy uložené
          -- v pointerech a není potřeba se zabývat run-time tagy uloženými v instancích těchto
          -- tříd. Jinými slovy jsou-li adresy instancí tříd stejné, jsou jistě stejné i jejich
          -- run-time tagy. 
          --   Vyplývá to z toho, že instance třídy obsahuje na začátku servisní informace, takže se
          -- nemůže stát, že by její první složka (typu třída) měla stejnou adresu jako instance.
          -- Tato vlastnost samozřejmě platí i při porovnávání class pointeru na bázovou třídu se
          -- strict pointerem na odvozenou třídu.
          ------------------------------------------------------------------------------------------

          declare var
            op1    : c_operand;                  -- operand 1
            op2    : c_operand;                  -- operand 2
            rta_set: rtattribset;                -- run-time atributy podporované některým z operandů
            tg_end : itarget;                    -- návěští pro skok na konec porovnávání

          begin
            -- vygenerovat levý podvýraz
            i_newcontext(context,newcontext,lm_pointer,rest.getutype);
            i_load(inst,info,newcontext,context,el,op1);

            -- vygenerovat pravý podvýraz
            i_newcontext(context,newcontext,lm_pointer,rest.getutype);
            i_load(inst,info,newcontext,context,er,op2);

            -- obnovit registry
            op1.refresh(inst,info,context);
            op2.refresh(inst,info,context);

            -- zjistit množiny run-time atributů podporovaných jednotlivými operandy
          #if #environment compiler_version;='4.0.3.14' then;
            rta_set:=nil;
          #else;
            rta_set:=el^.t.getpattrib+er^.t.getpattrib;
          #end if;

            -- alokovat návěští pro skok na konec
            newtarget(info,tg_end);

            ----- (1) porovnat adresy -----
            declare var
              opaddr1 : c_operand;               -- adresa v levém operandu
              opaddr2 : c_operand;               -- adresa v pravém operandu

            begin
              -- načíst adresní složku levého operandu
              i_gen_load_pointer_address(inst,info,context,op1,opaddr1);

              -- načíst adresní složku pravého operandu
              i_gen_load_pointer_address(inst,info,context,op2,opaddr2);

              -- obnovit registry
              opaddr1.refresh(inst,info,context);
              opaddr2.refresh(inst,info,context);

              -- porovnat
              i_gen_simple_op(inst,info,context,ii_cmp,opaddr1,opaddr2);

              -- podmíněný skok na konec
              if rta_set<>rtattribset:[] then
                addjump(inst,info,context,ic_ne,tg_end);
                end if;

            leave
              -- uvolnit operandy
              opaddr1.free(info,context);
              opaddr2.free(info,context);
              end declare;

            ----- (2) porovnat uložené run-time atributy -----
            -- v praxi je v pointeru přímo uložen pouze :tag, :size a :@instance
            verify({VERIFY=}000971,rta_set-rtattribset:[rta_tag,rta_size,rta_instance]<>rtattribset:[]);

            -- má cenu něco začínat ?
            for rta in rtattrib loop
              -- jestliže je atribut alespoň v jednom pointeru, budeme ho porovnávat
              if rta in rta_set then
                declare var
                  oprta1 : c_operand;            -- hodnota run-time atributu levého operandu
                  oprta2 : c_operand;            -- hodnota run-time atributu pravého operandu

                begin  
                  -- načíst atribut levého pointeru
                  i_rta_load(inst,info,context,op1,rta,oprta1);

                  -- načíst atribut pravého pointeru
                  i_rta_load(inst,info,context,op2,rta,oprta2,for no_memory use true);

                  -- obnovit registry
                  oprta1.refresh(inst,info,context);
                  oprta2.refresh(inst,info,context);

                  -- porovnat
                  addii(inst,info,ii_cmp,oprta1,oprta2,op0);

                  {%%TODO(RTATTRIB) Toto opatření zrušit po zavedení run-time tag checků }
                  i_gen_rcheck_constraint_error_on_condition(inst,info,context,ic_ne);

                  -- vyřešili jsme jeden atribut
                  bit_reset(rta_set,t_bit_index(rta:ord));

                  -- podmíněný skok na konec
                  if rta_set<>rtattribset:[] then
                    addjump(inst,info,context,ic_ne,tg_end);
                    end if;

                leave
                  -- uvolnit operandy
                  oprta1.free(info,context);
                  oprta2.free(info,context);
                  end declare;
                end if;
              end loop;

            -- adresa skoku na toto místo
            settarget(info,tg_end,getaddr(inst));

          leave
            -- uvolnit operandy
            op1.free(info,context);
            op2.free(info,context);
            end declare;

      -- přístup k tasku
      when pc_task do
          unimplemented({UNIMP=}000168);

      -- přístup ke zprávě
      when pc_message do
          unimplemented({UNIMP=}000169);

      when others do verify({VERIFY=}000493,true);
      end case;
    end if;

  -- výsledek
  vysl.create_condition(cc);
  end i_gen_op_compare_pointer;



----------------------------------------------------------------------------------------------------
procedure i_gen_op_assign_pointer =
-- Přiřazení pointerů.
----------------------------------------------------------------------------------------------------
var
  el               : pexpnode;                   -- levý podvýraz
  er               : pexpnode;                   -- pravý podvýraz

begin
  verify({VERIFY=}000502,expr^.arity<>eoa_2);

  -- podvýrazy
  expr^.get(el,er);

  --- přiřazení NIL ---
  if x_is_nil(er) then
    declare var
      op1          : c_operand;                  -- operand 1
      newcontext   : iexprcontext;               -- kontext generování podvýrazu

    begin
      -- vygenerovat levý podvýraz
      i_newcontext(context,newcontext,lm_gen,el^.t.getctype);
      i_load(inst,info,newcontext,context,el,op1);

      -- vynulovat
      i_gen_fillz_static(inst,info,context,op1,value_size_from_expr(el));

    leave
      -- uvolnit operand
      op1.free(info,context);
      end declare;

  --- přiřazení jiného pointeru ---
  else
    declare var
      op1          : c_operand;                  -- levý operand
      op2          : c_operand;                  -- pravý operand
      newcontext   : iexprcontext;               -- kontext generování podvýrazu

    begin
      -- vygenerovat a načíst pravý podvýraz
      i_newcontext(context,newcontext,lm_pointer,el^.t.getctype);
      i_load(inst,info,newcontext,context,er,op2);

      -- vygenerovat levý podvýraz
      i_newcontext(context,newcontext,lm_pointer,nil);
      i_load(inst,info,newcontext,context,el,op1);

      -- obnovit registry
      op1.refresh(inst,info,context);
      op2.refresh(inst,info,context);

      -- vygenerovat vlastní přiřazení
      i_gen_store_pointer(inst,info,context,op2,op1);

    leave
      -- uvolnit operandy
      op1.free(info,context);
      op2.free(info,context);
      end declare;
    end if;

  -- výsledek: nic
  --nullop(vysl,io_none);  
  end i_gen_op_assign_pointer;



end ci_pointer;
