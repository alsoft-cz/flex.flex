----------------------------------------------------------------------------------------------------
module private ci_rtl =
-- Překladač Flexu.
-- Vazba na run-time knihovnu.
----------------------------------------------------------------------------------------------------
-- Ondra : 11.04.2002 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  cc_def.cc_var,
  cc_base,
  cc_base.cc_rtl,
  cg_gen.cg_ia32.ci_abi,
  cg_gen.cg_ia32.ci_struct,
  cg_gen.cg_ia32.ci_context,
  cg_gen.cg_ia32.ci_code.ci_instr,
  cg_gen.cg_ia32.ci_code.ci_stack,
  cg_gen.cg_ia32.ci_code.ci_operand,
  cg_gen.cg_ia32.ci_code.ci_relo,
  cg_gen.cg_ia32.ci_reg;

----------------------------------------------------------------------------------------------------
procedure i_create_xframe =
-- Vytvoří exception-frame.
----------------------------------------------------------------------------------------------------
var
  frameofs         : timm32;                     -- offset exception-frame
  context          : iexprcontext;               -- prázdný kontext

begin
  if not cfg_no_runtime then
    -- připravit prázdný kontext
    i_createcontext(context,lm_gen,nil);

    -- alokovat blok pro exception-frame
    alloctemp(inst,info,ixframe:size,frameofs);

    -- předvypočítat offset položky HANDLER
    framehandler:=frameofs+ixframe_handler;

    -- adresa obsluhy: při vytváření typicky END - ret
    addmovaddr(inst,info,context,framehandler,target);

    -- uložit adresu
    addpushofs(inst,info,context,frameofs);

    -- inicializovat zbytek
    addcallrtl(inst,info,context,rtl_init_xframe);
    end if;
  end i_create_xframe;



----------------------------------------------------------------------------------------------------
procedure i_set_handler =
-- Do aktuálního exception-frame přiřadí adresu exception-handleru.
----------------------------------------------------------------------------------------------------
var
  context          : iexprcontext;               -- prázdný kontext

begin
  -- připravit prázdný kontext
  i_createcontext(context,lm_gen,nil);

  -- přiřadit adresu exception handleru
  addmovaddr(inst,info,context,framehandler,target);
  end i_set_handler;



----------------------------------------------------------------------------------------------------
procedure i_dispatch_special =
-- Volání speciální metody. Na stacku očekává adresu instance.
----------------------------------------------------------------------------------------------------
begin
  case spectype
    when tst_init     do addcallrtl(inst,info,context,rtl_call_init);
    when tst_entry    do addcallrtl(inst,info,context,rtl_call_entry);
    when tst_exit     do addcallrtl(inst,info,context,rtl_call_exit);
    when tst_adjust   do addcallrtl(inst,info,context,rtl_call_adjust);
    when tst_rollback do addcallrtl(inst,info,context,rtl_call_rollback);
    when tst_commit   do addcallrtl(inst,info,context,rtl_call_commit);
    when others       do verify({VERIFY=}000408,true);
    end case;
  end i_dispatch_special;



----------------------------------------------------------------------------------------------------
procedure i_create_rcframe =
-- Vyvoří return-control frame.
----------------------------------------------------------------------------------------------------
var
  opaction         : c_operand;                  -- operand odpovídající poli Action
  context          : iexprcontext;               -- prázdný kontext

begin
  -- zapamatovat si adresu nadřazeného return-control framu
  {save_rcframe:=info.rcframe;}

  -- připravit prázdný kontext
  i_createcontext(context,lm_gen,nil);

  -- alokovat blok pro return-control frame
  alloctemp(inst,info,ircframe:size,info.rcframe);

  -- připravit operand s adresou pole Action
  opaction.create_memory_address_on_stack(inst,edt_unsigned,4,info.rcframe);

  -- kód akce nastavit na nulu
  addii(inst,info,ii_mov,opaction,op_0,op0);

leave
  -- uvolnit operand
  opaction.free(info,context);
  end i_create_rcframe;



----------------------------------------------------------------------------------------------------
procedure i_set_rcframe_action =
-- Do return-control framu doplní údaje o požadované akci.
----------------------------------------------------------------------------------------------------
var
  opaction         : c_operand;                  -- operand odpovídající poli Action
  opdest           : c_operand;                  -- operand odpovídající poli Destination
  opvalue_a        : c_operand;                  -- hodnota ukládaná do pole Action
  opvalue_d        : c_operand;                  -- hodnota ukládaná do pole Destination
  context          : iexprcontext;               -- prázdný kontext

begin
  -- připravit prázdný kontext
  i_createcontext(context,lm_gen,nil);

  -- připravit operand s adresou pole Action
  opaction.create_memory_address_on_stack(inst,edt_unsigned,4,info.rcframe+ircframe_action);

  -- připravit operand s adresou pole Destination
  opdest.create_memory_address_on_stack(inst,edt_address,4,info.rcframe+ircframe_dest);

  -- uložit hodnotu Action
  opvalue_a.create_imm(edt_unsigned,4,unsigned_to_imm32(action));
  addii(inst,info,ii_mov,opaction,opvalue_a,op0);

  -- uložit hodnotu Destination
  opvalue_d.create_imm(edt_address,4,0);
  opvalue_d.set_target(target);
  addii(inst,info,ii_mov,opdest,opvalue_d,op0);

leave
  -- uvolnit operandy
  opaction.free(info,context);
  opdest.free(info,context);
  opvalue_a.free(info,context);
  opvalue_d.free(info,context);
  end i_set_rcframe_action;



----------------------------------------------------------------------------------------------------
procedure i_process_rcframe =
-- Provede příkaz uložený v return-control framu.
----------------------------------------------------------------------------------------------------
var
  tg_continue      : itarget;                    -- návěští pro skok na konec zpracování
  opaction         : c_operand;                  -- operand odpovídající poli Action
  opdest           : c_operand;                  -- operand odpovídající poli Destination
  context          : iexprcontext;               -- prázdný kontext

begin
  -- připravit prázdný kontext
  i_createcontext(context,lm_gen,nil);

  -- alokovat návěští pro skok konec zpracování return-control framu
  newtarget(info,tg_continue);

  -- připravit operand s adresou pole Action
  opaction.create_memory_address_on_stack(inst,edt_unsigned,4,info.rcframe+ircframe_action);

  -- připravit operand s adresou pole Destination
  opdest.create_memory_address_on_stack(inst,edt_address,4,info.rcframe+ircframe_dest);

  -- porovnat na jedničku
  addii(inst,info,ii_cmp,opaction,op_1,op0);

  -- Action < 1 => nic se dělat nebude
  addjump(inst,info,context,ic_b,tg_continue);

  -- dekrementovat
  addii(inst,info,ii_dec,opaction,op0,op0);

  -- bylo Action > 1 => pokračujeme dál
  addjump(inst,info,context,ic_a,upper_end);

  -- bylo Action = 1 => skok na adresu návěští uloženou v Destination
  addii(inst,info,ii_jmp,opdest,op0,op0);

  -- dosadit cíl skoku na toto místo
  settarget(info,tg_continue,getaddr(inst));

leave
  -- uvolnit operandy
  opaction.free(info,context);
  opdest.free(info,context);

  -- obnovit adresu nadřazeného return-control framu
  {info.rcframe:=save_rcframe;}
  end i_process_rcframe;



end ci_rtl;
