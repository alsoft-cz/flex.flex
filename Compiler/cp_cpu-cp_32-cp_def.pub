----------------------------------------------------------------------------------------------------
module public cp_def =
-- Překladač Flexu.
-- Definice základních charakteristik.
----------------------------------------------------------------------------------------------------
-- Ondra : 25.03.2002 : Vytvořil
----------------------------------------------------------------------------------------------------

extend
  cc_def.cc_unitype;

----- %%TECH ---------------------------------------------------------------------------------------
-- Předpokládá se lineární 32-bitové adresování.
----------------------------------------------------------------------------------------------------



----- 32-bitové datové typy ------------------------------------------------------------------------
const
  lpointer32       = 4;                          -- velikost strojového pointeru
  ldata32          = 4;                          -- velikost lineární adresy na data
  lprg32           = 4;                          -- velikost lineární adresy na kód
  ldefint32        = 4;                          -- implicitní velikost INTEGER
  ldefchar32       = 4;                          -- implicitní velikost CHAR
  ldeflogical32    = 4;                          -- implicitní velikost BOOLEAN
  limm32           = 4;                          -- velikost strojové přímé hodnoty
  lstrisize32      = 4;                          -- velikost interní části řetězce
  linstanceptr32   = 4;                          -- velikost pointeru na instanci

type
  -- univerzální 32-bitový ukazatel
  tpointer32       = private t_unsigned32;
  -- 32-bitová lineární adresa na data
  tdata32          = private t_unsigned32;
  -- 32-bitová lineární adresa na kód
  tprg32           = private t_unsigned32;
  -- 32-bitový tag
  ttag32           = private t_unsigned32;
  -- 32-bitová přímá hodnota
  timm32           = private t_unsigned32;
  -- 32-bitová interní část řetězce
  tstrisize32      = private t_unsigned32;

const
  -- konverze délek strojových typů na TUNIDATA
  imm32_lpointer32     = timm32(4);
  imm32_ldata32        = timm32(4);
  imm32_lprg32         = timm32(4);
  imm32_ldefint32      = timm32(4);
  imm32_ldefchar32     = timm32(4);
  imm32_ldeflogical32  = timm32(4);
  imm32_limm32         = timm32(4);
  imm32_lstrisize32    = timm32(4);

  -- konverze délek strojových typů na TUNIDATA
  ud_lpointer32    = tunidata_size(4);
  ud_ldata32       = tunidata_size(4);
  ud_lprg32        = tunidata_size(4);
  ud_ldefint32     = tunidata_size(4);
  ud_ldefchar32    = tunidata_size(4);
  ud_ldeflogical32 = tunidata_size(4);
  ud_limm32        = tunidata_size(4);
  ud_lstrisize32   = tunidata_size(4);

----------------------------------------------------------------------------------------------------
procedure imm32_to_unidata_addr (
    x              : timm32)
    return tunidata_addr;
-- Neznaménkově převede IMM32 na UNIDATA.
----------------------------------------------------------------------------------------------------
procedure imm32_to_uniint (
    x              : timm32)
    return tuniint;
-- Neznaménkově převede IMM32 na UNIINT.
----------------------------------------------------------------------------------------------------
procedure imm32_to_unsigned (
    x              : timm32)
    return t_unsigned32;
-- Převod IMM32 na UNSIGNED.
----------------------------------------------------------------------------------------------------
procedure imm32_to_signed (
    x              : timm32)
    return t_signed32;
-- Převod IMM32 na UNSIGNED.
----------------------------------------------------------------------------------------------------
procedure signed_to_imm32 (
    x              : t_signed32)
    return timm32;
-- Převod SIGNED na IMM32.
----------------------------------------------------------------------------------------------------
procedure unsigned_to_imm32 (
    x              : t_unsigned32)
    return timm32;
-- Převod UNSIGNED na IMM32.
----------------------------------------------------------------------------------------------------
procedure uniint_to_imm32 (
    ui             : tuniint)
    return timm32;
-- Převod TUNIINT na TIMM32.
----------------------------------------------------------------------------------------------------
procedure unidata_size_to_imm32 (
    ud             : tunidata_size)
    return timm32;
-- Převod TUNIDATA_SIZE na TIMM32.
----------------------------------------------------------------------------------------------------
procedure unidata_bitsize_to_imm32 (
    ud             : tunidata_bitsize)
    return timm32;
-- Převod TUNIDATA_BITSIZE na TIMM32.
----------------------------------------------------------------------------------------------------
procedure unidata_addr_to_imm32 (
    ud             : tunidata_addr)
    return timm32;
-- Převod TUNIDATA_ADDR na TIMM32.
----------------------------------------------------------------------------------------------------
procedure imm32_is_power_of_2 (
    a              : in timm32;
    n              : out t_unsigned32;
    res            : out t_logical);
-- A = 2^N ([res]=True, je-li A nějaká mocnina dvojky. Exponent je vrácen v N.)
----------------------------------------------------------------------------------------------------
procedure imm32_signed_ge (
    a              : timm32;
    b              : t_signed32)
    return t_logical;
-- Znaménkové A >= B.
----------------------------------------------------------------------------------------------------
procedure imm32_signed_le (
    a              : timm32;
    b              : t_signed32)
    return t_logical;
-- Znaménkové A <= B.
----------------------------------------------------------------------------------------------------
procedure prg32_to_unidata_addr (
    x              : tprg32)
    return tunidata_addr;
-- Neznaménkově převede PRG32 na UNIDATA.
----------------------------------------------------------------------------------------------------



----- Layout třídy ---------------------------------------------------------------------------------

----- %%TECH Layout třídy---------------------------------------------------------------------------
-- Každá třída obsahuje dvě skryté složky: dynamický atribut :tag (@TAG) a množinu příznaků
-- (@STATUS) - bitové pole. Jsou definovány dva příznaky:
--    -- bit 0: nastaven na jedničku, pokud byla instance již inicializována (proběhlo volání entry)
--    -- bit 1: nastaven na jedničku, pokud se jedná o instanci interfacu jiné třídy
--
-- Layout třídy:
--
--     +-----------+
--     | @TAG      | +0
--     +-----------+
--     | @STATUS   | +4
--     +-----------+
--     | složky    | +8
--     |  ...      |
--     |  ...      |
--     +-----------+
--
----------------------------------------------------------------------------------------------------

const
  -- velikost interní části třídy
  cpu32_class_isize    = tunidata_size(8);

  -- offsety složek
  cpu32_class_tag      = timm32(0);
  cpu32_class_status   = timm32(4);



----- Charakteristické konstanty -------------------------------------------------------------------
const
  -- meze logického typu
  cpu32_logical_lval   : tuniint = [$00,for others use $00];
  cpu32_logical_hval   : tuniint = [$01,for others use $00];

  -- maximální horní mez řetězce
  cpu32_string_isize   = tunidata_size($04);
  cpu32_string_max_hval: tuniint = [$FF,$FF,$FF,$FF,for others use $00];

var
  -- parametry numerických typů
  cpu32_intrange       : const array 0..3,t_logical,1..2 of tuniint := [
      for 0 {  8 } use [[[$00,                            for others use $00],[$FF,                            for others use $00]], 
                        [[$80,                            for others use $FF],[$7F,                            for others use $00]]],
      for 1 { 16 } use [[[$00,$00,                        for others use $00],[$FF,$FF,                        for others use $00]], 
                        [[$00,$80,                        for others use $FF],[$FF,$7F,                        for others use $00]]],
      for 2 { 32 } use [[[$00,$00,$00,$00,                for others use $00],[$FF,$FF,$FF,$FF,                for others use $00]], 
                        [[$00,$00,$00,$80,                for others use $FF],[$FF,$FF,$FF,$7F,                for others use $00]]],
      for 3 { 64 } use [[[$00,$00,$00,$00,$00,$00,$00,$00,for others use $00],[$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,for others use $FF]], 
                        [[$00,$00,$00,$00,$00,$00,$00,$80,for others use $FF],[$FF,$FF,$FF,$FF,$FF,$FF,$FF,$7F,for others use $00]]]];

const
  -- index parametrů numerického typu odpovídajícímu strojovému slovu (32bit)
  cpu32_intrange_native = 2;

var
  -- velikosti run-time atributů
  cpu32_rtattribsize   : const array rtattrib of tunidata_size := [
      for rta_instance use tunidata_size($04),
      for rta_tag      use tunidata_size($04),
      for rta_size     use tunidata_size($04),
      for rta_last     use tunidata_size($04),  
      for rta_length   use tunidata_size($04)];

const
  -- velikost pointeru
  cpu32_machine_pointer_size = tunidata_size($04);

  -- maximální velikost datového typu
  cpu32_max_type_size  = tunidata_size($FFFF_FFFF);

  -- maximální celková velikost lokálních proměnných/parametrů
  cpu32_max_local_size = tunidata_size($8000_0000);

  -- implicitní zarovnání
  cpu32_default_align  = tunidata_size($01);



----- Obvyklé reálné typy --------------------------------------------------------------------------
type
  tfptype          = enum
     fp_32;
     fp_64;
     fp_80;
     end enum;

const
  cpu32_defaultfp  = fp_64;

var
  -- statické parametry
  cpu32_fpsparams  : protected array tfptype of tfloatsparams;

  -- dynamické parametry
  cpu32_fpparams   : protected array tfptype of tfloatparams;

  -- velikost
  cpu32_fpsize     : const array tfptype of tunidata_size := [
      for fp_32 use tunidata_size(32 div 8),
      for fp_64 use tunidata_size(64 div 8),
      for fp_80 use tunidata_size(80 div 8)];

end cp_def;
