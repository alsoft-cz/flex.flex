----------------------------------------------------------------------------------------------------
module public ci_fragment =
-- Překladač Flexu.
-- Metody na generování různých fragmentů kódu.
----------------------------------------------------------------------------------------------------
-- Ondra : 17.01.2003 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  standard,
  cc_def.cc_unitype,
  cx_expr,cx_expr.cx_def,
  cp_cpu.cp_32.cp_def,
  cp_cpu.cp_ia32.ci_instr,
  cg_gen.cg_ia32.ci_def,
  cg_gen.cg_ia32.ci_code,
  cg_gen.cg_ia32.ci_code.ci_operand;

----------------------------------------------------------------------------------------------------
procedure i_ensure_address (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    op             : in out c_operand);          -- operand
-- Zajistí, že operand reprezentuje adresu hodnoty uložené v paměti.
----------------------------------------------------------------------------------------------------
procedure i_ensure_value (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    op             : in out c_operand);          -- operand
-- Zajistí, že operand reprezentuje hodnotu.
----------------------------------------------------------------------------------------------------
procedure i_gen_loadreg (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    orgtyp         : in pentity_type;            -- typ původního výrazu
    op             : in out c_operand;           -- operand
    all            : in t_logical;               -- F-vynechat pro konstanty
    mode           : in iregallocmode);          -- režim alokace registrů
-- Načte operand do registru.
-- Je-li ALL=True, načte do registru i:
--   -- konstanty (io_imm),
--   -- podmínky (io_cc).
-- V opačném případě tyto typy operandů ponechá v původním tvaru. Je-li tedy
-- ALL=False, může být výsledek typu IO_REG, IO_IMM nebo IO_CC.
----------------------------------------------------------------------------------------------------
procedure i_gen_loadeax (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    op             : in out c_operand);          -- operand
-- Načte operand do EAX.
----------------------------------------------------------------------------------------------------
procedure i_gen_loadimm8cl (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    op             : in out c_operand);          -- operand
-- Načte operand do CL nebo ho ponechá const.
----------------------------------------------------------------------------------------------------
procedure i_gen_loadtemp (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    op             : in out c_operand);          -- operand
-- Načte operand do temporary proměnné nebo ho ponechá const.
-- Očekává, že velikost OP je 1, 2 nebo 4 byty.
----------------------------------------------------------------------------------------------------
procedure i_gen_loadpointer (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    oldtyp         : in pentity_type;            -- původní typ výrazu
    reg            : in t_logical;               -- T-výsledek do registru
    op             : in out c_operand);          -- operand
-- Normalizuje (=přidá/odstraní/přepočítá v něm uložené dynamické atributy)
-- operand podle typu uloženého v CONTEXTu a načte ho:
--   -- do registru, lze-li to a je-li REG=True,
--   -- ponechá v původním tvaru, pokud ho není třeba měnit,
--   -- načte do pracovní proměnné.
----------------------------------------------------------------------------------------------------
procedure i_gen_compose_pointer (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    op             : in c_operand;               -- operand s adresou
    oldbase        : in pentity_type;            -- báze původního pointeru
    outbase        : in pentity_type;            -- báze výsledného pointeru
    outrta         : in rtattribset;             -- požadované dynamické atributy
    opout          : in out c_operand);          -- pracovní proměnná
-- Ze zadaného operandu sestaví pointer. Operand musí být registr nebo přímá
-- hodnota. Všechny dynamické atributy jsou dopočítány. Výsledný pointer je
-- uložen do pracovní proměnné.
-- Operand OPOUT musí být již inicializován jako adresa nějaké pracovní
-- proměnné.
----------------------------------------------------------------------------------------------------
procedure i_gen_compute_rtattrib (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    optemppart     : in c_operand;               -- kam uložit atribut
    rta            : in rtattrib;                -- vypočítávaný atribut
    oldbase        : in pentity_type;            -- báze původního pointeru
    outbase        : in pentity_type);           -- báze výsledného pointeru
-- Vypočte chybějící run-time atribut a uloží ho do cílového pointeru.
----------------------------------------------------------------------------------------------------
procedure i_gen_lea (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    op             : in out c_operand;           -- operand
    rpref          : in iunireg);                -- preferovaný registr
-- Načte adresu danou operandem do registru.
-- Je-li RPREF<>IN_NONE, načte adresu do něj.
----------------------------------------------------------------------------------------------------
procedure i_gen_load_rtattrib_addr (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    rtaset         : in rtattribset;             -- uložené dynamické atributy
    op             : in c_operand;               -- adresa řetězce
    rta            : in rtattrib;                -- dynamický atribut
    oprta          : in out c_operand);          -- cílový operand
-- Podle EXPR/OP určí adresu dynamického atributu RTA.
-- Předpokládá se, že před atributy je uložen strojový pointer.
-- Poznámka: OPRTA není CLONEOPnutý OP, ale prostá kopie se změněným DISP,
-- takže ho není třeba uvolňovat pomocí I_FREE.
----------------------------------------------------------------------------------------------------
procedure i_gen_load_rtattrib_value (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    rtaset         : in rtattribset;             -- uložené dynamické atributy
    op             : in c_operand;               -- adresa řetězce
    rta            : in rtattrib;                -- dynamický atribut
    opreg          : in out c_operand);          -- cílový registr
-- Podle EXPR/OP načte dynamický atribut RTA.
-- Předpokládá se, že před atributy je uložen strojový pointer.
-- Registr v OPREG musí být již určen.
----------------------------------------------------------------------------------------------------
procedure i_load_this_address (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    _edtype        : in t_elementary_data_type;  -- elementární datový typ operandu
    _size          : in t_unsigned;              -- velikost výsledného operandu
    ofs            : in tunidata_addr;           -- případný offset složky
    op             : out c_operand);             -- výsledný operand
-- Načte adresu THIS pointeru na instanci do registru a přičte k ní offset složky v rámci třídy.
----------------------------------------------------------------------------------------------------
procedure i_gen_this_address (
    inst           : in out icodeinst;           -- instance
    op             : out c_operand);             -- výsledný operand
-- Sestaví adresu THIS pointeru na instanci třídy.
----------------------------------------------------------------------------------------------------
procedure i_gen_pushstack (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    op             : in c_operand);              -- operand
-- Uloží operand na stack.
----------------------------------------------------------------------------------------------------
procedure i_gen_pushnil (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    size           : in tunidata_size);          -- velikost NILu
-- Uloží NIL na stack.
----------------------------------------------------------------------------------------------------
procedure i_gen_logical_jump (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    and_then       : in t_logical;               -- T-řetěz AND THEN, F-řetěz OR ELSE
    cc             : in icond;                   -- podmínka pro True
    ttarget        : in itarget;                 -- cíl skoku při True
    ftarget        : in itarget;                 -- cíl skoku při False
    vysl           : out c_operand);             -- výsledek
-- Generování skoku podle výsledku porovnání.
----------------------------------------------------------------------------------------------------
procedure i_gen_mul_reg (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    op1            : in c_operand;               -- operand (registr)
    imm            : in timm32);                 -- konstanta
-- Násobení registru konstantou.
-- OP1 musí být 32-bitový registr.
-- Tato procedura nemá vliv na Zero Flag.
----------------------------------------------------------------------------------------------------
procedure i_gen_div_reg (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    op1            : in c_operand;               -- operand (registr)
    imm            : in timm32);                 -- konstanta
-- Dělení registru konstantou (unsigned).
-- OP1 musí být 32-bitový registr.
----------------------------------------------------------------------------------------------------
procedure i_gen_reduceop (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    op             : in out c_operand);          -- operand
-- Pokud operand používá moc registrů (=dva), vylepší to (na jeden).
-- Operand musí být typu IO_MEM, IO_STACK nebo IO_IMM.
----------------------------------------------------------------------------------------------------
procedure i_gen_move_static (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    opsrc          : in c_operand;               -- zdrojové pole
    opdst          : in c_operand;               -- cílové pole
    size           : in t_unsigned32);           -- velikost báze
-- Přesun pole velikosti SIZE bytů z OPSRC do OPDST.
-- Předpokládá se, že se pole nepřekrývají.
-- Předpokládá se (kvůli optimalizaci), že jsou pole zarovnána na hranici 4B.
-- OPSRC a OPDST musí být typu IO_MEM s redukovaným počtem registrů (= <=1).
----------------------------------------------------------------------------------------------------
procedure i_gen_pop_static (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    opdst          : in c_operand;               -- cílové pole
    size           : in t_unsigned32);           -- velikost báze
-- Jako předchozí procedura, ale předpokládá, že zdrojová data jsou uložena
-- na stacku, odkud je odstraní (se zarováním na 4).
----------------------------------------------------------------------------------------------------
procedure i_gen_move_array (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    opsrc          : in c_operand;               -- zdrojové pole
    opdst          : in c_operand;               -- cílové pole
    oplength       : in c_operand;               -- počet prvků
    basesize       : in t_unsigned32);           -- velikost báze
-- Přesun pole OPLENGTH prvků velikosti BASESIZE z OPSRC do OPDST.
-- Předpokládá se, že se pole nepřekrývají.
-- Předpokládá se (kvůli optimalizaci), že jsou pole zarovnána na hranici 4B.
-- OPSRC a OPDST musí být typu IO_MEM s redukovaným počtem registrů (= <=1),
-- a OPLENGTH musí být registr s počtem prvků pole OPDST.
----------------------------------------------------------------------------------------------------
procedure i_gen_movsd_static (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    opsrc          : in c_operand;               -- zdrojové pole
    opdst          : in c_operand;               -- cílové pole
    size           : in t_unsigned32);           -- velikost báze
-- Kopírování pole velikosti SIZE bytů pomocí REP MOVSD.
----------------------------------------------------------------------------------------------------
procedure i_gen_movsd_array (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    opsrc          : in c_operand;               -- zdrojové pole
    opdst          : in c_operand;               -- cílové pole
    opecx          : in c_operand;               -- počet prvků v ECX
    basesize       : in t_unsigned32);           -- velikost báze
-- Kopírování pole pomocí REP MOVSD.
----------------------------------------------------------------------------------------------------
procedure i_gen_fillz_static (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    opdst          : in out c_operand;           -- cílové pole
    size           : in t_unsigned32);           -- velikost pole
-- Vyplnění pole statické velikosti nulou.
-- OPDST musí být typu IO_MEM a měl by preferovaně používat EDI (pro STOSD).
----------------------------------------------------------------------------------------------------
procedure i_gen_fillz_dynamic (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    opdst          : in out c_operand;           -- cílové pole
    opsize         : in c_operand);              -- velikost pole
-- Vyplnění pole dynamické velikosti nulou.
-- OPDST musí být typu IO_MEM a měl by preferovaně používat EDI (pro STOSD).
-- OPSIZE musí být registr ECX.
----------------------------------------------------------------------------------------------------
procedure i_gen_subprogram_address (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    psubprog       : in pentity_subprogram;      -- podprogram
    relative       : in t_logical;               -- T-zajímá nás relativní adresa
    vysl           : out c_operand);             -- adresa podprogramu
-- Vygeneruje adresu podprogramu.
----------------------------------------------------------------------------------------------------
procedure i_gen_adjust_rta_position (
    rta            : in rtattrib;                -- hledaný run-time atribu
    expr           : in pexpnode;                -- související výraz
    vysl           : in out c_operand);          -- adresa podprogramu
-- Operand IO_MEM upraví tak, aby ukazoval na zadaný run-time atribut.
----------------------------------------------------------------------------------------------------

end ci_fragment;
