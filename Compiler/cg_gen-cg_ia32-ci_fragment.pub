----------------------------------------------------------------------------------------------------
module public ci_fragment =
-- P©eklada‡ Flexu.
-- Metody na generov n¡ r–zn˜ch fragment– k¢du.
----------------------------------------------------------------------------------------------------
-- Ondra : 17.01.2003 : Vytvo©il
----------------------------------------------------------------------------------------------------

with
  standard,
  cc_def.cc_unitype,
  cx_expr,cx_expr.cx_def,
  cp_cpu.cp_32.cp_def,
  cp_cpu.cp_ia32.ci_instr,
  cg_gen.cg_ia32.ci_def,
  cg_gen.cg_ia32.ci_code,
  cg_gen.cg_ia32.ci_code.ci_operand;

----------------------------------------------------------------------------------------------------
procedure i_ensure_address (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    op             : in out c_operand);          -- operand
-- Zajist¡, ‘e operand reprezentuje adresu hodnoty ulo‘en‚ v pamˆti.
----------------------------------------------------------------------------------------------------
procedure i_ensure_value (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    op             : in out c_operand);          -- operand
-- Zajist¡, ‘e operand reprezentuje hodnotu.
----------------------------------------------------------------------------------------------------
procedure i_gen_loadreg (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    orgtyp         : in pentity_type;            -- typ p–vodn¡ho v˜razu
    op             : in out c_operand;           -- operand
    all            : in t_logical;               -- F-vynechat pro konstanty
    mode           : in iregallocmode);          -- re‘im alokace registr–
-- Na‡te operand do registru.
-- Je-li ALL=True, na‡te do registru i:
--   -- konstanty (io_imm),
--   -- podm¡nky (io_cc).
-- V opa‡n‚m p©¡padˆ tyto typy operand– ponech  v p–vodn¡m tvaru. Je-li tedy
-- ALL=False, m–‘e b˜t v˜sledek typu IO_REG, IO_IMM nebo IO_CC.
----------------------------------------------------------------------------------------------------
procedure i_gen_loadeax (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    op             : in out c_operand);          -- operand
-- Na‡te operand do EAX.
----------------------------------------------------------------------------------------------------
procedure i_gen_loadimm8cl (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    op             : in out c_operand);          -- operand
-- Na‡te operand do CL nebo ho ponech  const.
----------------------------------------------------------------------------------------------------
procedure i_gen_loadtemp (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    op             : in out c_operand);          -- operand
-- Na‡te operand do temporary promˆnn‚ nebo ho ponech  const.
-- O‡ek v , ‘e velikost OP je 1, 2 nebo 4 byty.
----------------------------------------------------------------------------------------------------
procedure i_gen_loadpointer (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    oldtyp         : in pentity_type;            -- p–vodn¡ typ v˜razu
    reg            : in t_logical;               -- T-v˜sledek do registru
    op             : in out c_operand);          -- operand
-- Normalizuje (=p©id /odstran¡/p©epo‡¡t  v nˆm ulo‘en‚ dynamick‚ atributy)
-- operand podle typu ulo‘en‚ho v CONTEXTu a na‡te ho:
--   -- do registru, lze-li to a je-li REG=True,
--   -- ponech  v p–vodn¡m tvaru, pokud ho nen¡ t©eba mˆnit,
--   -- na‡te do pracovn¡ promˆnn‚.
----------------------------------------------------------------------------------------------------
procedure i_gen_compose_pointer (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    op             : in c_operand;               -- operand s adresou
    oldbase        : in pentity_type;            -- b ze p–vodn¡ho pointeru
    outbase        : in pentity_type;            -- b ze v˜sledn‚ho pointeru
    outrta         : in rtattribset;             -- po‘adovan‚ dynamick‚ atributy
    opout          : in out c_operand);          -- pracovn¡ promˆnn 
-- Ze zadan‚ho operandu sestav¡ pointer. Operand mus¡ b˜t registr nebo p©¡m 
-- hodnota. V¨echny dynamick‚ atributy jsou dopo‡¡t ny. V˜sledn˜ pointer je
-- ulo‘en do pracovn¡ promˆnn‚.
-- Operand OPOUT mus¡ b˜t ji‘ inicializov n jako adresa nˆjak‚ pracovn¡
-- promˆnn‚.
----------------------------------------------------------------------------------------------------
procedure i_gen_compute_rtattrib (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    optemppart     : in c_operand;               -- kam ulo‘it atribut
    rta            : in rtattrib;                -- vypo‡¡t van˜ atribut
    oldbase        : in pentity_type;            -- b ze p–vodn¡ho pointeru
    outbase        : in pentity_type);           -- b ze v˜sledn‚ho pointeru
-- Vypo‡te chybˆj¡c¡ run-time atribut a ulo‘¡ ho do c¡lov‚ho pointeru.
----------------------------------------------------------------------------------------------------
procedure i_gen_lea (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    op             : in out c_operand;           -- operand
    rpref          : in iunireg);                -- preferovan˜ registr
-- Na‡te adresu danou operandem do registru.
-- Je-li RPREF<>IN_NONE, na‡te adresu do nˆj.
----------------------------------------------------------------------------------------------------
procedure i_gen_load_rtattrib_addr (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    rtaset         : in rtattribset;             -- ulo‘en‚ dynamick‚ atributy
    op             : in c_operand;               -- adresa ©etˆzce
    rta            : in rtattrib;                -- dynamick˜ atribut
    oprta          : in out c_operand);          -- c¡lov˜ operand
-- Podle EXPR/OP ur‡¡ adresu dynamick‚ho atributu RTA.
-- P©edpokl d  se, ‘e p©ed atributy je ulo‘en strojov˜ pointer.
-- Pozn mka: OPRTA nen¡ CLONEOPnut˜ OP, ale prost  kopie se zmˆnˆn˜m DISP,
-- tak‘e ho nen¡ t©eba uvol¤ovat pomoc¡ I_FREE.
----------------------------------------------------------------------------------------------------
procedure i_gen_load_rtattrib_value (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    rtaset         : in rtattribset;             -- ulo‘en‚ dynamick‚ atributy
    op             : in c_operand;               -- adresa ©etˆzce
    rta            : in rtattrib;                -- dynamick˜ atribut
    opreg          : in out c_operand);          -- c¡lov˜ registr
-- Podle EXPR/OP na‡te dynamick˜ atribut RTA.
-- P©edpokl d  se, ‘e p©ed atributy je ulo‘en strojov˜ pointer.
-- Registr v OPREG mus¡ b˜t ji‘ ur‡en.
----------------------------------------------------------------------------------------------------
procedure i_load_this_address (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    _edtype        : in t_elementary_data_type;  -- element rn¡ datov˜ typ operandu
    _size          : in t_unsigned;              -- velikost v˜sledn‚ho operandu
    ofs            : in tunidata_addr;           -- p©¡padn˜ offset slo‘ky
    op             : out c_operand);             -- v˜sledn˜ operand
-- Na‡te adresu THIS pointeru na instanci do registru a p©i‡te k n¡ offset slo‘ky v r mci t©¡dy.
----------------------------------------------------------------------------------------------------
procedure i_gen_this_address (
    inst           : in out icodeinst;           -- instance
    op             : out c_operand);             -- v˜sledn˜ operand
-- Sestav¡ adresu THIS pointeru na instanci t©¡dy.
----------------------------------------------------------------------------------------------------
procedure i_gen_pushstack (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    op             : in c_operand);              -- operand
-- Ulo‘¡ operand na stack.
----------------------------------------------------------------------------------------------------
procedure i_gen_pushnil (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    size           : in tunidata_size);          -- velikost NILu
-- Ulo‘¡ NIL na stack.
----------------------------------------------------------------------------------------------------
procedure i_gen_logical_jump (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    and_then       : in t_logical;               -- T-©etˆz AND THEN, F-©etˆz OR ELSE
    cc             : in icond;                   -- podm¡nka pro True
    ttarget        : in itarget;                 -- c¡l skoku p©i True
    ftarget        : in itarget;                 -- c¡l skoku p©i False
    vysl           : out c_operand);             -- v˜sledek
-- Generov n¡ skoku podle v˜sledku porovn n¡.
----------------------------------------------------------------------------------------------------
procedure i_gen_mul_reg (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    op1            : in c_operand;               -- operand (registr)
    imm            : in timm32);                 -- konstanta
-- N soben¡ registru konstantou.
-- OP1 mus¡ b˜t 32-bitov˜ registr.
-- Tato procedura nem  vliv na Zero Flag.
----------------------------------------------------------------------------------------------------
procedure i_gen_div_reg (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    op1            : in c_operand;               -- operand (registr)
    imm            : in timm32);                 -- konstanta
-- Dˆlen¡ registru konstantou (unsigned).
-- OP1 mus¡ b˜t 32-bitov˜ registr.
----------------------------------------------------------------------------------------------------
procedure i_gen_reduceop (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    op             : in out c_operand);          -- operand
-- Pokud operand pou‘¡v  moc registr– (=dva), vylep¨¡ to (na jeden).
-- Operand mus¡ b˜t typu IO_MEM, IO_STACK nebo IO_IMM.
----------------------------------------------------------------------------------------------------
procedure i_gen_move_static (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    opsrc          : in c_operand;               -- zdrojov‚ pole
    opdst          : in c_operand;               -- c¡lov‚ pole
    size           : in t_unsigned32);           -- velikost b ze
-- P©esun pole velikosti SIZE byt– z OPSRC do OPDST.
-- P©edpokl d  se, ‘e se pole nep©ekr˜vaj¡.
-- P©edpokl d  se (kv–li optimalizaci), ‘e jsou pole zarovn na na hranici 4B.
-- OPSRC a OPDST mus¡ b˜t typu IO_MEM s redukovan˜m po‡tem registr– (= <=1).
----------------------------------------------------------------------------------------------------
procedure i_gen_pop_static (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    opdst          : in c_operand;               -- c¡lov‚ pole
    size           : in t_unsigned32);           -- velikost b ze
-- Jako p©edchoz¡ procedura, ale p©edpokl d , ‘e zdrojov  data jsou ulo‘ena
-- na stacku, odkud je odstran¡ (se zarov n¡m na 4).
----------------------------------------------------------------------------------------------------
procedure i_gen_move_array (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    opsrc          : in c_operand;               -- zdrojov‚ pole
    opdst          : in c_operand;               -- c¡lov‚ pole
    oplength       : in c_operand;               -- po‡et prvk–
    basesize       : in t_unsigned32);           -- velikost b ze
-- P©esun pole OPLENGTH prvk– velikosti BASESIZE z OPSRC do OPDST.
-- P©edpokl d  se, ‘e se pole nep©ekr˜vaj¡.
-- P©edpokl d  se (kv–li optimalizaci), ‘e jsou pole zarovn na na hranici 4B.
-- OPSRC a OPDST mus¡ b˜t typu IO_MEM s redukovan˜m po‡tem registr– (= <=1),
-- a OPLENGTH mus¡ b˜t registr s po‡tem prvk– pole OPDST.
----------------------------------------------------------------------------------------------------
procedure i_gen_movsd_static (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    opsrc          : in c_operand;               -- zdrojov‚ pole
    opdst          : in c_operand;               -- c¡lov‚ pole
    size           : in t_unsigned32);           -- velikost b ze
-- Kop¡rov n¡ pole velikosti SIZE byt– pomoc¡ REP MOVSD.
----------------------------------------------------------------------------------------------------
procedure i_gen_movsd_array (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    opsrc          : in c_operand;               -- zdrojov‚ pole
    opdst          : in c_operand;               -- c¡lov‚ pole
    opecx          : in c_operand;               -- po‡et prvk– v ECX
    basesize       : in t_unsigned32);           -- velikost b ze
-- Kop¡rov n¡ pole pomoc¡ REP MOVSD.
----------------------------------------------------------------------------------------------------
procedure i_gen_fillz_static (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    opdst          : in out c_operand;           -- c¡lov‚ pole
    size           : in t_unsigned32);           -- velikost pole
-- Vyplnˆn¡ pole statick‚ velikosti nulou.
-- OPDST mus¡ b˜t typu IO_MEM a mˆl by preferovanˆ pou‘¡vat EDI (pro STOSD).
----------------------------------------------------------------------------------------------------
procedure i_gen_fillz_dynamic (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    opdst          : in out c_operand;           -- c¡lov‚ pole
    opsize         : in c_operand);              -- velikost pole
-- Vyplnˆn¡ pole dynamick‚ velikosti nulou.
-- OPDST mus¡ b˜t typu IO_MEM a mˆl by preferovanˆ pou‘¡vat EDI (pro STOSD).
-- OPSIZE mus¡ b˜t registr ECX.
----------------------------------------------------------------------------------------------------
procedure i_gen_subprogram_address (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    psubprog       : in pentity_subprogram;      -- podprogram
    relative       : in t_logical;               -- T-zaj¡m  n s relativn¡ adresa
    vysl           : out c_operand);             -- adresa podprogramu
-- Vygeneruje adresu podprogramu.
----------------------------------------------------------------------------------------------------
procedure i_gen_adjust_rta_position (
    rta            : in rtattrib;                -- hledan˜ run-time atribu
    expr           : in pexpnode;                -- souvisej¡c¡ v˜raz
    vysl           : in out c_operand);          -- adresa podprogramu
-- Operand IO_MEM uprav¡ tak, aby ukazoval na zadan˜ run-time atribut.
----------------------------------------------------------------------------------------------------

end ci_fragment;
