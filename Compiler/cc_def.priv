----------------------------------------------------------------------------------------------------
module private cc_def =
-- Překladač Flexu.
-- Základní deklarace.
----------------------------------------------------------------------------------------------------

with
  standard.console,
  standard.conversions;

----------------------------------------------------------------------------------------------------
#separate private cc_lexsym;
-- Definice lexikálních symbolů.
----------------------------------------------------------------------------------------------------
#separate private cc_errors;
-- Seznam chybových hlášení.
----------------------------------------------------------------------------------------------------
#separate private cc_desc;
-- Popisy cílových platforem.
----------------------------------------------------------------------------------------------------
#separate private cc_env;
-- #environment proměnné.
----------------------------------------------------------------------------------------------------
#separate private cc_entity;
-- Definice tabulky symbolů.
----------------------------------------------------------------------------------------------------
#separate private cc_tree;
-- Společné deklarace pro rozklad výrazu a bloku.
----------------------------------------------------------------------------------------------------
#separate private cc_files;
-- Seznam souborů.
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure entityident_to_string =
-- Převede identifikátor na řetězec.
----------------------------------------------------------------------------------------------------
begin
  for i in ident:range loop
    result & t_char32(ident[i]);
    end loop;
  end entityident_to_string;



----------------------------------------------------------------------------------------------------
procedure string_to_entityident =
-- Převede řetězec na identifikátor.
-- Volajici uvolni vraceny identifikator.
----------------------------------------------------------------------------------------------------
begin
  new result range txt:length;
  for i in txt:range loop
    result^ & tidentchar(txt[i]);
    end loop;
  end string_to_entityident;



----------------------------------------------------------------------------------------------------
procedure entityident_to_external_entity_ident =
-- Převede identifikátor na externí identifikátor.
-- Volajici uvolni vraceny identifikator.
----------------------------------------------------------------------------------------------------
begin
  new result range ident:length;
  pentityident(result)^:=ident;
  end entityident_to_external_entity_ident;


                              
----------------------------------------------------------------------------------------------------
procedure external_entity_ident_to_string =
-- Převede identifikátor na řetězec.
----------------------------------------------------------------------------------------------------
begin
  for i in ident:range loop
    result & t_char32(ident[i]);
    end loop;
  end external_entity_ident_to_string;



----------------------------------------------------------------------------------------------------
procedure string_to_external_entity_ident =
-- Převede řetězec na identifikátor.
-- Volajici uvolni vraceny identifikator.
----------------------------------------------------------------------------------------------------
begin
  new result range txt:length;
  for i in txt:range loop
    result^ & tidentchar(txt[i]);
    end loop;
  end string_to_external_entity_ident;



----------------------------------------------------------------------------------------------------
procedure qualified_entity_ident_to_string =
-- Převede identifikátor na řetězec.
----------------------------------------------------------------------------------------------------
begin
  for i in ident:range loop
    result & t_char32(ident[i]);
    end loop;
  end qualified_entity_ident_to_string;



----------------------------------------------------------------------------------------------------
procedure string_to_qualified_entity_ident =
-- Převede řetězec na identifikátor.
-- Volajici uvolni vraceny identifikator.
----------------------------------------------------------------------------------------------------
begin
  new result range txt:length;
  for i in txt:range loop
    result^ & tidentchar(txt[i]);
    end loop;
  end string_to_qualified_entity_ident;



----------------------------------------------------------------------------------------------------
procedure qualified_entity_ident_to_external_entity_ident =
-- Převede identifikátor na řetězec.
----------------------------------------------------------------------------------------------------
begin
  new result range ident:length;
  pentityident(result)^:=ident;
  end qualified_entity_ident_to_external_entity_ident;
  


----------------------------------------------------------------------------------------------------
procedure get_partition_type_by_name =
-- Nastaví typ partition podle jeho jména. Pro neznámé typy raisne [config_error].   
----------------------------------------------------------------------------------------------------
with
  standard.strings,
  cc_def.cc_codes;
  
begin
  -- zkusit najít typ partition podle jména
  for x in t_partition_type_name:range loop
    -- souhlasí?
    if str_compare_case_insensitive(part_type_name,t_partition_type_name[x]) then
      -- ano => nastavit
      part_type:=x;
      return;
      end if;
    end loop;

  -- pokud se to dostalo až sem, je to jasně neznámý typ partition
  os.write_line('Unknown partition type');
  raise config_error;
  end get_partition_type_by_name;
  
  
  
----------------------------------------------------------------------------------------------------
procedure verify =
-- Je-li COND=False způsobí interní chybu CODE.
----------------------------------------------------------------------------------------------------
begin
  if cond then
    --write('verify '); write_line(unsigned_to_string(code));
    cc_var.ce^.seterror({CCERR=}000064,cc_codes.ce_internal);
    cc_var.ce^.setparam(unsigned_to_string(code));
    cc_var.ce^.loadtextpos;
    cc_var.ce^.raiseerror;
    end if;
  end verify;



----------------------------------------------------------------------------------------------------
procedure verifyx =
-- Je-li COND=False způsobí interní chybu CODE.
----------------------------------------------------------------------------------------------------
begin
  if cond then
    --write('verifyx '); write_line(unsigned_to_string(code));
    cc_var.ce^.seterror({CCERR=}000065,cc_codes.ce_internal);
    cc_var.ce^.setparam(unsigned_to_string(code));
    cc_var.ce^.setpos(pos);
    cc_var.ce^.raiseerror;
    end if;
  end verifyx;



----------------------------------------------------------------------------------------------------
procedure verifyc =
-- Je-li [cond]=True způsobí interní chybu [code]. Pozici nastaví na aktuální lexikální element.
----------------------------------------------------------------------------------------------------
begin
  if cond then
    --write('verifyc '); write_line(unsigned_to_string(code));
    cc_var.ce^.seterror({CCERR=}000066,cc_codes.ce_internal);
    cc_var.ce^.setparam(unsigned_to_string(code));
    cc_var.ce^.loadpos;
    cc_var.ce^.raiseerror;
    end if;
  end verifyc;



----------------------------------------------------------------------------------------------------
procedure unimplemented =
-- Způsobí chybu Neimplementováno.
----------------------------------------------------------------------------------------------------
begin
  --write_line('unimplemented');
  cc_var.ce^.seterror({CCERR=}000067,cc_codes.ce_unimplemented);
  cc_var.ce^.setparam(unsigned_to_string(code));
  cc_var.ce^.loadtextpos;
  cc_var.ce^.raiseerror;
  end unimplemented;



----------------------------------------------------------------------------------------------------
procedure unimplementedx =
-- Způsobí chybu Neimplementováno.
----------------------------------------------------------------------------------------------------
begin
  --write_line('unimplementedx');
  cc_var.ce^.seterror({CCERR=}000068,cc_codes.ce_unimplemented);
  cc_var.ce^.setparam(unsigned_to_string(code));
  cc_var.ce^.setpos(pos);
  cc_var.ce^.raiseerror;
  end unimplementedx;



end cc_def;
