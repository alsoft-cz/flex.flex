----------------------------------------------------------------------------------------------------
module public cx_util =
-- Překladač Flexu.
-- Procedury na manipulaci se stromem.
----------------------------------------------------------------------------------------------------
-- Ondra : 31.07.2001 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  cx_def;

----------------------------------------------------------------------------------------------------
procedure x_refine_binary (
    oper           : in expopertype;             -- prototyp operátoru
    t1             : in typeview;                -- typy operandů
    t2             : in typeview;                -- typy operandů
    lop            : out expopertype);           -- jazykem definovaný operátor
-- Podle typů operandů upřesní volbu jazykem definovaného bin. operátoru.
----------------------------------------------------------------------------------------------------
procedure x_refine_unary (
    oper           : in expunarytype;            -- prototyp operátoru
    t1             : in typeview;                -- typ operandu
    lop            : out expunarytype);          -- jazykem definovaný operátor
-- Podle typu operandu upřesní volbu jazykem definovaného un. operátoru.
----------------------------------------------------------------------------------------------------
procedure x_resolve (
    _t1            : in typeview;                -- typy operandů
    _t2            : in typeview;                -- typy operandů
    usefullview    : in t_logical;               -- T-nepoužít Partial view typů
    result         : out typeview);              -- zvolený typ
-- Vybere přesnější ze zadaných typů.
--   Je-li USEFULLVIEW=True a jsou-li typy operandů Partial view, pak jsou
-- dočasně zkonstruovány Full view a na nich je proveden výpočet.
----------------------------------------------------------------------------------------------------
procedure x_resolve_by_result (
    curr           : in tcontext;                -- překládaný prvek
    t1             : in typeview;                -- typ výsledku
    t2             : in typeview;                -- typ podvýrazu
    result         : out typeview);              -- zvolený typ
-- Na základě požadovaného typu výsledku (T1) a typu podvýrazu z typové
-- kontroly 1 (T2) zvolí typ podvýrazu typové kontroly 2.
-- Typy musí být kompatibilní (netestuje se).
----------------------------------------------------------------------------------------------------
procedure x_resolve_opdtype (
    expr           : in pexpoper;                -- operátor
    usefullview    : in t_logical)               -- T-nepoužít Partial view typů
                   return tdatatype;             -- společný typ operandů
-- Typ operandů upravený vzhledem k operátoru.
-- (Například výsledek porovnání je vždy univerzální logical, ale typ operandů je třeba pole.)
--   Je-li USEFULLVIEW=True a jsou-li typy operandů Partial view, pak jsou
-- dočasně zkonstruovány Full view a na nich je proveden výpočet.
----------------------------------------------------------------------------------------------------
procedure x_addunary (
    newexpr        : out pexpunary;              -- vzniklý uzel
    oldexpr        : in pexpoper;                -- původní výraz
    oper           : in expunarytype;            -- operátor
    assignable     : in t_logical;               -- T-zachovat příznak přiřazení
    sub            : in pexpnode;                -- podvýraz
    info           : in expinfo);                -- informace o průběhu analýzy
-- Doplní unární operátor. Typ a třídu uzlu převezme z původního výrazu.
----------------------------------------------------------------------------------------------------
procedure x_addui (
    newexpr        : out pexpimm;                -- vzniklý uzel
    oldexpr        : in pexpnode;                -- původní výraz
    ui             : in tuniint;                 -- konstanta
    info           : in expinfo;                 -- informace o průběhu analýzy
    is_const       : in t_logical := true);      -- T-konstanta/F-konstanta v důsledku optimalizace
-- Doplní univerzální integer. Typ uzlu převezme z původního výrazu.
-- Třídu nastaví na NC_VALUE.
----------------------------------------------------------------------------------------------------
procedure x_addul (
    newexpr        : out pexpimm;                -- vzniklý uzel
    oldexpr        : in pexpnode;                -- původní výraz
    ul             : in tunilogical;             -- konstanta
    info           : in expinfo;                 -- informace o průběhu analýzy
    is_const       : in t_logical := true);      -- T-konstanta/F-konstanta v důsledku optimalizace
-- Doplní univerzální logical. Typ uzlu převezme z původního výrazu.
-- Třídu nastaví na NC_VALUE.
----------------------------------------------------------------------------------------------------
procedure x_add_imm (
    newexpr        : out pexpimm;                -- vzniklý uzel
    oldexpr        : in pexpnode;                -- původní výraz
    info           : in expinfo;                 -- informace o průběhu analýzy
    is_const       : in t_logical := true);      -- T-konstanta/F-konstanta v důsledku optimalizace
-- Doplní konstantu. Typ uzlu převezme z původního výrazu.
-- Třídu nastaví na NC_VALUE.
----------------------------------------------------------------------------------------------------
procedure x_addop (
    curr           : in tcontext;                -- překládaný prvek
    newexpr        : out pexpoper;               -- vzniklý uzel
    expr           : in pexpoper;                -- nadřazený operátor
    el             : in pexpnode;                -- levý podvýraz
    op             : in expopertype;             -- operátor
    assignable     : in t_logical;               -- T-zachovat příznak přiřazení
    ui             : in tuniint;                 -- konstanta
    info           : in expinfo);                -- informace o průběhu analýzy
-- Doplní binární operátor EL op UI.
----------------------------------------------------------------------------------------------------
procedure x_addsysstr (
    newexpr        : out pexpimm;                -- vzniklý uzel
    oldexpr        : in pexpnode;                -- původní výraz
    s              : in t_char32ustr;            -- konstanta
    info           : in expinfo);                -- informace o průběhu analýzy
-- Doplní univerzální řetězec. Typ uzlu převezme z původního výrazu.
-- Třídu nastaví na NC_VALUE.
----------------------------------------------------------------------------------------------------
procedure x_changeop (
    curr           : in tcontext;                -- překládaný prvek
    expr           : in pexpoper;                -- vzniklý uzel
    er             : in out pexpimm;             -- pravý operand
    newop          : in expopertype;             -- nový operátor
    ui             : in tuniint;                 -- konstanta
    info           : expinfo);                   -- informace o průběhu analýzy
-- X expr^.oper ER --> X newop UI
----------------------------------------------------------------------------------------------------
procedure x_rangetotype (
 -- curr           : in out tentity;             -- překládaný prvek
    curr           : in tcontext;                -- překládaný prvek
    expr           : in pexprange;               -- rozsah
    ptyp           : out pentity_type;           -- vnizklý typ
    native         : in t_logical);              -- T-velikost alespoň strojového slovo
-- Z konstantního rozsahu udělá typ.
-- Je-li [native]=True, má výsledné číslo velikost alespoň strojového slova. V opačném případě se
-- použije nejmenší možná velikost, do které se hodnoty v daných mezích vejdou. Platí pouze pro
-- rozsahy univerzálních typů.
----------------------------------------------------------------------------------------------------
procedure x_uniarray (
 -- curr           : in out tentity;             -- překládaný prvek
    curr           : in tcontext;                -- překládaný prvek
    expr           : in pexpnode;                -- výraz
    base           : in pentity_type);           -- bázový typ
-- Nastaví typ výrazu jako univerzální pole of BASE.
----------------------------------------------------------------------------------------------------
procedure x_getconcatkind (
    curr           : in tcontext;                -- překládaný prvek
    expr           : in pexpnode;                -- výraz
    typ            : in typeview;                -- typ výrazu
    concatkind     : out nodeconcatkind);        -- způsob zřetězení
-- Způsob, jakým se zřetězuje zadaný výraz vzhledem k dodanému typu.
----------------------------------------------------------------------------------------------------
procedure x_classinstance (
    _expr          : in pexpnode;                -- výraz
    instance       : out pexpnode);              -- výraz určující instanci
-- Nalezne podvýraz určující instanci třídy.
-- EXPR je podvýraz uzlu specifikujícího volanou metodu.
----------------------------------------------------------------------------------------------------
procedure x_get_deref_nclass (
    expr           : in pexpnode)                -- výraz
                   return nodeclass;             -- třída uzlu po dereferenci
-- Pro zadaný uzel zjistí třídu uzlu po dereferenci.
----------------------------------------------------------------------------------------------------
procedure x_is_nil (
    expr           : in pexpnode)                -- výraz
                   return t_logical;             -- T-je to NIL
-- True, je-li zadaný výraz přímá hodnota NIL.
----------------------------------------------------------------------------------------------------
procedure x_is_constant (
    expr           : in pexpnode)                -- výraz                             
                   return t_logical;             -- T-je to NIL                       
-- True, je-li zadaný výraz konstantní.                                       
----------------------------------------------------------------------------------------------------
procedure x_has_static_size (
    expr           : in pexpnode)                -- výraz
                   return t_logical;             -- T-je to NIL
-- True, má-li zadaný výraz statickou velikost.
-- Tato informace se vypočítává z (ne)přítomnosti dynamického atributu :size
-- nebo :last v množině atributů využitých nadřazeným uzlem (EPXR^.RTA_LAST).
----------------------------------------------------------------------------------------------------
procedure x_has_dynamic_size (
    expr           : in pexpnode)                -- výraz
                   return t_logical;             -- T-je to NIL
-- True, má-li zadaný výraz dynamickou velikost.
-- Tato informace se vypočítává z (ne)přítomnosti dynamického atributu :size
-- nebo :last v množině atributů využitých nadřazeným uzlem (EPXR^.RTA_LAST).
----------------------------------------------------------------------------------------------------
procedure x_swap (
    el             : in out pexpnode;            -- levý operand
    er             : in out pexpnode);           -- pravý operand
-- Prohodí operandy.
----------------------------------------------------------------------------------------------------
procedure x_set_param_type (
    curr           : in tcontext;                -- překládaný prvek
    param          : in pentity_param;           -- parametr
    arg            : in pexpitem);               -- hodnota parametru
-- Určí typ skutečného parametru podle formálního parametru.
----------------------------------------------------------------------------------------------------
procedure x_set_ref_type (
    curr           : in tcontext;                -- překládaný prvek
    expr           : in pexpref);                -- reference
-- Vypočítá typ a třídu uzlu typu reference.
----------------------------------------------------------------------------------------------------
procedure x_negate_logical (
    curr           : in tcontext;                -- překládaný prvek
    newexpr        : out pexpnode;               -- negovaný výraz
    expr           : in pexpnode);               -- log. výraz
-- Neguje výraz.
----------------------------------------------------------------------------------------------------

end cx_util;
