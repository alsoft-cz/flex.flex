----------------------------------------------------------------------------------------------------
module public cx_util =
-- P©eklada‡ Flexu.
-- Procedury na manipulaci se stromem.
----------------------------------------------------------------------------------------------------
-- Ondra : 31.07.2001 : Vytvo©il
----------------------------------------------------------------------------------------------------

with
  cx_def;

----------------------------------------------------------------------------------------------------
procedure x_refine_binary (
    oper           : in expopertype;             -- prototyp oper toru
    t1             : in typeview;                -- typy operand–
    t2             : in typeview;                -- typy operand–
    lop            : out expopertype);           -- jazykem definovan˜ oper tor
-- Podle typ– operand– up©esn¡ volbu jazykem definovan‚ho bin. oper toru.
----------------------------------------------------------------------------------------------------
procedure x_refine_unary (
    oper           : in expunarytype;            -- prototyp oper toru
    t1             : in typeview;                -- typ operandu
    lop            : out expunarytype);          -- jazykem definovan˜ oper tor
-- Podle typu operandu up©esn¡ volbu jazykem definovan‚ho un. oper toru.
----------------------------------------------------------------------------------------------------
procedure x_resolve (
    _t1            : in typeview;                -- typy operand–
    _t2            : in typeview;                -- typy operand–
    usefullview    : in t_logical;               -- T-nepou‘¡t Partial view typ–
    result         : out typeview);              -- zvolen˜ typ
-- Vybere p©esnˆj¨¡ ze zadan˜ch typ–.
--   Je-li USEFULLVIEW=True a jsou-li typy operand– Partial view, pak jsou
-- do‡asnˆ zkonstruov ny Full view a na nich je proveden v˜po‡et.
----------------------------------------------------------------------------------------------------
procedure x_resolve_by_result (
    curr           : in tcontext;                -- p©ekl dan˜ prvek
    t1             : in typeview;                -- typ v˜sledku
    t2             : in typeview;                -- typ podv˜razu
    result         : out typeview);              -- zvolen˜ typ
-- Na z kladˆ po‘adovan‚ho typu v˜sledku (T1) a typu podv˜razu z typov‚
-- kontroly 1 (T2) zvol¡ typ podv˜razu typov‚ kontroly 2.
-- Typy mus¡ b˜t kompatibiln¡ (netestuje se).
----------------------------------------------------------------------------------------------------
procedure x_resolve_opdtype (
    expr           : in pexpoper;                -- oper tor
    usefullview    : in t_logical)               -- T-nepou‘¡t Partial view typ–
                   return tdatatype;             -- spole‡n˜ typ operand–
-- Typ operand– upraven˜ vzhledem k oper toru.
-- (Nap©¡klad v˜sledek porovn n¡ je v‘dy univerz ln¡ logical, ale typ operand– je t©eba pole.)
--   Je-li USEFULLVIEW=True a jsou-li typy operand– Partial view, pak jsou
-- do‡asnˆ zkonstruov ny Full view a na nich je proveden v˜po‡et.
----------------------------------------------------------------------------------------------------
procedure x_addunary (
    newexpr        : out pexpunary;              -- vznikl˜ uzel
    oldexpr        : in pexpoper;                -- p–vodn¡ v˜raz
    oper           : in expunarytype;            -- oper tor
    assignable     : in t_logical;               -- T-zachovat p©¡znak p©i©azen¡
    sub            : in pexpnode;                -- podv˜raz
    info           : in expinfo);                -- informace o pr–bˆhu anal˜zy
-- Dopln¡ un rn¡ oper tor. Typ a t©¡du uzlu p©evezme z p–vodn¡ho v˜razu.
----------------------------------------------------------------------------------------------------
procedure x_addui (
    newexpr        : out pexpimm;                -- vznikl˜ uzel
    oldexpr        : in pexpnode;                -- p–vodn¡ v˜raz
    ui             : in tuniint;                 -- konstanta
    info           : in expinfo;                 -- informace o pr–bˆhu anal˜zy
    is_const       : in t_logical := true);      -- T-konstanta/F-konstanta v d–sledku optimalizace
-- Dopln¡ univerz ln¡ integer. Typ uzlu p©evezme z p–vodn¡ho v˜razu.
-- T©¡du nastav¡ na NC_VALUE.
----------------------------------------------------------------------------------------------------
procedure x_addul (
    newexpr        : out pexpimm;                -- vznikl˜ uzel
    oldexpr        : in pexpnode;                -- p–vodn¡ v˜raz
    ul             : in tunilogical;             -- konstanta
    info           : in expinfo;                 -- informace o pr–bˆhu anal˜zy
    is_const       : in t_logical := true);      -- T-konstanta/F-konstanta v d–sledku optimalizace
-- Dopln¡ univerz ln¡ logical. Typ uzlu p©evezme z p–vodn¡ho v˜razu.
-- T©¡du nastav¡ na NC_VALUE.
----------------------------------------------------------------------------------------------------
procedure x_add_imm (
    newexpr        : out pexpimm;                -- vznikl˜ uzel
    oldexpr        : in pexpnode;                -- p–vodn¡ v˜raz
    info           : in expinfo;                 -- informace o pr–bˆhu anal˜zy
    is_const       : in t_logical := true);      -- T-konstanta/F-konstanta v d–sledku optimalizace
-- Dopln¡ konstantu. Typ uzlu p©evezme z p–vodn¡ho v˜razu.
-- T©¡du nastav¡ na NC_VALUE.
----------------------------------------------------------------------------------------------------
procedure x_addop (
    curr           : in tcontext;                -- p©ekl dan˜ prvek
    newexpr        : out pexpoper;               -- vznikl˜ uzel
    expr           : in pexpoper;                -- nad©azen˜ oper tor
    el             : in pexpnode;                -- lev˜ podv˜raz
    op             : in expopertype;             -- oper tor
    assignable     : in t_logical;               -- T-zachovat p©¡znak p©i©azen¡
    ui             : in tuniint;                 -- konstanta
    info           : in expinfo);                -- informace o pr–bˆhu anal˜zy
-- Dopln¡ bin rn¡ oper tor EL op UI.
----------------------------------------------------------------------------------------------------
procedure x_addsysstr (
    newexpr        : out pexpimm;                -- vznikl˜ uzel
    oldexpr        : in pexpnode;                -- p–vodn¡ v˜raz
    s              : in t_char32ustr;            -- konstanta
    info           : in expinfo);                -- informace o pr–bˆhu anal˜zy
-- Dopln¡ univerz ln¡ ©etˆzec. Typ uzlu p©evezme z p–vodn¡ho v˜razu.
-- T©¡du nastav¡ na NC_VALUE.
----------------------------------------------------------------------------------------------------
procedure x_changeop (
    curr           : in tcontext;                -- p©ekl dan˜ prvek
    expr           : in pexpoper;                -- vznikl˜ uzel
    er             : in out pexpimm;             -- prav˜ operand
    newop          : in expopertype;             -- nov˜ oper tor
    ui             : in tuniint;                 -- konstanta
    info           : expinfo);                   -- informace o pr–bˆhu anal˜zy
-- X expr^.oper ER --> X newop UI
----------------------------------------------------------------------------------------------------
procedure x_rangetotype (
 -- curr           : in out tentity;             -- p©ekl dan˜ prvek
    curr           : in tcontext;                -- p©ekl dan˜ prvek
    expr           : in pexprange;               -- rozsah
    ptyp           : out pentity_type;           -- vnizkl˜ typ
    native         : in t_logical);              -- T-velikost alespo¤ strojov‚ho slovo
-- Z konstantn¡ho rozsahu udˆl  typ.
-- Je-li [native]=True, m  v˜sledn‚ ‡¡slo velikost alespo¤ strojov‚ho slova. V opa‡n‚m p©¡padˆ se
-- pou‘ije nejmen¨¡ mo‘n  velikost, do kter‚ se hodnoty v dan˜ch mez¡ch vejdou. Plat¡ pouze pro
-- rozsahy univerz ln¡ch typ–.
----------------------------------------------------------------------------------------------------
procedure x_uniarray (
 -- curr           : in out tentity;             -- p©ekl dan˜ prvek
    curr           : in tcontext;                -- p©ekl dan˜ prvek
    expr           : in pexpnode;                -- v˜raz
    base           : in pentity_type);           -- b zov˜ typ
-- Nastav¡ typ v˜razu jako univerz ln¡ pole of BASE.
----------------------------------------------------------------------------------------------------
procedure x_getconcatkind (
    curr           : in tcontext;                -- p©ekl dan˜ prvek
    expr           : in pexpnode;                -- v˜raz
    typ            : in typeview;                -- typ v˜razu
    concatkind     : out nodeconcatkind);        -- zp–sob z©etˆzen¡
-- Zp–sob, jak˜m se z©etˆzuje zadan˜ v˜raz vzhledem k dodan‚mu typu.
----------------------------------------------------------------------------------------------------
procedure x_classinstance (
    _expr          : in pexpnode;                -- v˜raz
    instance       : out pexpnode);              -- v˜raz ur‡uj¡c¡ instanci
-- Nalezne podv˜raz ur‡uj¡c¡ instanci t©¡dy.
-- EXPR je podv˜raz uzlu specifikuj¡c¡ho volanou metodu.
----------------------------------------------------------------------------------------------------
procedure x_get_deref_nclass (
    expr           : in pexpnode)                -- v˜raz
                   return nodeclass;             -- t©¡da uzlu po dereferenci
-- Pro zadan˜ uzel zjist¡ t©¡du uzlu po dereferenci.
----------------------------------------------------------------------------------------------------
procedure x_is_nil (
    expr           : in pexpnode)                -- v˜raz
                   return t_logical;             -- T-je to NIL
-- True, je-li zadan˜ v˜raz p©¡m  hodnota NIL.
----------------------------------------------------------------------------------------------------
procedure x_is_constant (
    expr           : in pexpnode)                -- v˜raz                             
                   return t_logical;             -- T-je to NIL                       
-- True, je-li zadan˜ v˜raz konstantn¡.                                       
----------------------------------------------------------------------------------------------------
procedure x_has_static_size (
    expr           : in pexpnode)                -- v˜raz
                   return t_logical;             -- T-je to NIL
-- True, m -li zadan˜ v˜raz statickou velikost.
-- Tato informace se vypo‡¡t v  z (ne)p©¡tomnosti dynamick‚ho atributu :size
-- nebo :last v mno‘inˆ atribut– vyu‘it˜ch nad©azen˜m uzlem (EPXR^.RTA_LAST).
----------------------------------------------------------------------------------------------------
procedure x_has_dynamic_size (
    expr           : in pexpnode)                -- v˜raz
                   return t_logical;             -- T-je to NIL
-- True, m -li zadan˜ v˜raz dynamickou velikost.
-- Tato informace se vypo‡¡t v  z (ne)p©¡tomnosti dynamick‚ho atributu :size
-- nebo :last v mno‘inˆ atribut– vyu‘it˜ch nad©azen˜m uzlem (EPXR^.RTA_LAST).
----------------------------------------------------------------------------------------------------
procedure x_swap (
    el             : in out pexpnode;            -- lev˜ operand
    er             : in out pexpnode);           -- prav˜ operand
-- Prohod¡ operandy.
----------------------------------------------------------------------------------------------------
procedure x_set_param_type (
    curr           : in tcontext;                -- p©ekl dan˜ prvek
    param          : in pentity_param;           -- parametr
    arg            : in pexpitem);               -- hodnota parametru
-- Ur‡¡ typ skute‡n‚ho parametru podle form ln¡ho parametru.
----------------------------------------------------------------------------------------------------
procedure x_set_ref_type (
    curr           : in tcontext;                -- p©ekl dan˜ prvek
    expr           : in pexpref);                -- reference
-- Vypo‡¡t  typ a t©¡du uzlu typu reference.
----------------------------------------------------------------------------------------------------

end cx_util;
