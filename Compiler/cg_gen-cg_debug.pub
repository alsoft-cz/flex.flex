----------------------------------------------------------------------------------------------------
module public cg_debug =
-- Překladač Flexu.
-- Generátor řádkových debug informací.
----------------------------------------------------------------------------------------------------
-- Ondra : 05.04.2002 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  standard,
  cc_def.cc_lexsym;

type
  -- tagy řádkových informací
  tdebugtagtype    = enum
      dbt_unknown;                               -- neznámý -> při dumpu ignorovat
      dbt_procedure;                             -- procedura
      dbt_cmd;                                   -- přiřazovací příkaz
      dbt_if;                                    -- příkaz IF
      dbt_end_if;                                -- konec příkazu END IF
      dbt_loop;                                  -- příkaz LOOP
      dbt_until;                                 -- konec cyklu UNTIL
      dbt_end_loop;                              -- konec cyklu END LOOP
      dbt_for;                                   -- příkaz FOR
      dbt_while;                                 -- příkaz WHILE
      dbt_case;                                  -- příkaz CASE
      dbt_end_case;                              -- konec příkazu END CASE
      dbt_when;                                  -- varianta příkazu WHEN
      dbt_accept;                                -- příkaz ACCEPT
      dbt_block_begin;                           -- začátek bloku BEGIN
      dbt_block_end;                             -- konec bloku END
      dbt_block_catch;                           -- začátek části CATCH
      dbt_block_rollback;                        -- začátek části ROLLBACK
      dbt_block_commit;                          -- začátek části COMMIT
      dbt_block_leave;                           -- začátek části LEAVE
      dbt_asm;                                   -- jedna instrukce zapsaná přímo v assembleru
      dbt_break;                                 -- příkaz BREAK
      dbt_return;                                -- příkaz RETURN
      dbt_raise;                                 -- příkaz RAISE
      dbt_send;                                  -- příkaz SEND
      dbt_goto;                                  -- příkaz GOTO
      dbt_new;                                   -- příkaz NEW
      dbt_adjust;                                -- příkaz ADJUST
      dbt_discard;                               -- příkaz DISCARD
      dbt_delay;                                 -- příkaz DELAY
      end enum;

var
  tdebugtagtypetxt : const array tdebugtagtype of t_char32str := [
      for dbt_unknown        use 'unknown',
      for dbt_procedure      use 'procedure',
      for dbt_cmd            use 'cmd',
      for dbt_if             use 'if',
      for dbt_end_if         use 'end if',
      for dbt_loop           use 'loop',
      for dbt_until          use 'until',
      for dbt_end_loop       use 'end loop',
      for dbt_for            use 'for',
      for dbt_while          use 'while',
      for dbt_case           use 'case',
      for dbt_end_case       use 'end case',
      for dbt_when           use 'when',
      for dbt_accept         use 'accept',
      for dbt_block_begin    use 'begin',
      for dbt_block_end      use 'end',
      for dbt_block_catch    use 'catch',
      for dbt_block_rollback use 'rollback',
      for dbt_block_commit   use 'commit',
      for dbt_block_leave    use 'leave',
      for dbt_asm            use 'asm',
      for dbt_break          use 'break',
      for dbt_return         use 'return',
      for dbt_raise          use 'raise',
      for dbt_send           use 'send',
      for dbt_goto           use 'goto',
      for dbt_new            use 'new',
      for dbt_adjust         use 'adjust',
      for dbt_discard        use 'discard',
      for dbt_delay          use 'delay'];

type
  -- jedna položka tabulky debug informací
  tdebugrec        = record
      typ          : tdebugtagtype;              -- typ záznamu v tabulce
      ofs          : t_unsigned32;               -- offset následující instrukce v instanci
      pos          : lexposblock;                -- pozice
      ptr          : t_pointer;                  -- ukazatel do tabulky symbolů
      end record;

  -- tabulka debug informací
  tdebugtable      = string of tdebugrec;
  pdebugtable      = ^tdebugtable;
  tdebuginfo       = record
      d            : pdebugtable;                -- debug tabulka
      end record;

----------------------------------------------------------------------------------------------------
procedure adddebuginfo (
    di             : in out tdebuginfo;          -- instance
    typ            : in tdebugtagtype;           -- typ záznamu v tabulce
    ofs            : in t_unsigned32;            -- relativní offset v kódu
    pos            : in lexposblock;             -- pozice příští instrucke
    ptr            : in t_pointer);              -- pointer do tabulky symbolů
-- Na konec tabulky debug informací (privátní tabulka pro danou instanci) doplní značku 
-- soubor-řádek-sloupec-ofset příští instrukce od začátku instance
----------------------------------------------------------------------------------------------------

end cg_debug;
