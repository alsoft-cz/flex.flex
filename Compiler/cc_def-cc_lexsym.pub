----------------------------------------------------------------------------------------------------
module public {cc_def.}cc_lexsym =
-- P©eklada‡ Flexu.
-- Definice lexi ln¡ch element–.
----------------------------------------------------------------------------------------------------
-- Ondra : 26.04.2000 : Vytvo©il
-- Hynek : 29.04.2003 : Added pragma "library"
----------------------------------------------------------------------------------------------------

with
  standard,
  standard.files,
  standard.common,
  standard.common.structures;

use
  cc_unitype;

----- Datov‚ typy pro lexik ln¡ anal˜zu ------------------------------------------------------------
type
  -- lexikalni elementy
  lexsym           = enum
      ----- Z kladn¡ elementy ----------------------------------------------------------------------
      lex_nul;                 -- pr zdn˜ lexik ln¡ element
      lex_eoln;                -- konec © dku
      lex_eof;                 -- konec souboru
      lex_id;                  -- identifik tor
      lex_numi;                -- cel‚ ‡¡slo
      lex_numr;                -- re ln‚ ‡¡slo
      lex_char;                -- znakov˜ liter l
      lex_str;                 -- znakov˜ agreg t
      ----- Preprocesor ----------------------------------------------------------------------------
      lex_meta_id;             -- metaidentifik tor
      lex_meta_end;            -- #end
      lex_meta_true;           -- metap©¡kaz vedouc¡ na virtu ln¡ liter l True
      lex_meta_false;          -- metap©¡kaz vedouc¡ na virtu ln¡ liter l False
      lex_meta_and_then;       -- metaelement reprezentuj¡c¡ #and then;       
      lex_meta_or_else;        -- metaelement reprezentuj¡c¡ #or else;        
      lex_meta_for;            -- metaelement reprezentuj¡c¡ #for
      ----- Inline assembler -----------------------------------------------------------------------
      lex_asm;                 -- za‡ tek assembleru
      lex_endasm;              -- konec assembleru
      lex_asm_label;           -- n vˆ¨t¡ v assembleru
      lex_asm_instr;           -- instrukce
      lex_asm_reg;             -- registr
      lex_asm_prefix;          -- prefix
      lex_asm_pseudoinstr;     -- pseudoinstrukce
      lex_asm_directive;       -- direktiva
      ----- Speci ln¡ symboly ----------------------------------------------------------------------
      lex_mul;                 -- *
      lex_div;                 -- /
      lex_add;                 -- +
      lex_sub;                 -- -
      lex_lpar;                -- (
      lex_rpar;                -- )
      lex_lbra;                -- [
      lex_rbra;                -- ]
      lex_op1;                 -- ::
      lex_assign;              -- :=
      lex_col;                 -- :
      lex_scol;                -- ;
      lex_comma;               -- ,
      lex_ddot;                -- ..
      lex_dot;                 -- .
      lex_eq;                  -- =
      lex_le;                  -- <=
      lex_ne;                  -- <>
      lex_lt;                  -- <
      lex_ge;                  -- >=
      lex_gt;                  -- >
      lex_concat;              -- &
      lex_ptr;                 -- ^
      ----- Kl¡‡ov  slova --------------------------------------------------------------------------
      lex_abs;                 -- ABS
      lex_abstract;            -- ABSTRACT
      lex_accept;              -- ACCEPT
      lex_adjust;              -- ADJUST
   -- lex_alias;               -- ALIAS
      lex_and;                 -- AND
      lex_array;               -- ARRAY
      lex_attribute;           -- ATTRIBUTE
      lex_begin;               -- BEGIN
      lex_break;               -- BREAK
      lex_case;                -- CASE
      lex_catch;               -- CATCH
      lex_character;           -- CHARACTER
      lex_class;               -- CLASS
      lex_commit;              -- COMMIT
      lex_concurrent;          -- CONCURRENT
      lex_const;               -- CONST
      lex_current;             -- CURRENT
      lex_declare;             -- DECLARE
   -- lex_define;              -- DEFINE
      lex_delay;               -- DELAY
      lex_delta;               -- DELTA
      lex_digits;              -- DIGITS
      lex_discard;             -- DISCARD
      lex_idiv;                -- DIV
      lex_do;                  -- DO
      lex_else;                -- ELSE
      lex_elsif;               -- ELSIF
      lex_end;                 -- END
      lex_entry;               -- ENTRY
      lex_enum;                -- ENUM
      lex_exit;                -- EXIT
      lex_expose;              -- EXPOSE
      lex_extend;              -- EXTEND
      lex_float;               -- FLOAT
      lex_fixed;               -- FIXED
      lex_for;                 -- FOR
      lex_generic;             -- GENERIC
      lex_goto;                -- GOTO
      lex_if;                  -- IF
      lex_in;                  -- IN
      lex_label;               -- LABEL
      lex_leave;               -- LEAVE
      lex_logical;             -- LOGICAL
      lex_loop;                -- LOOP
      lex_macro;               -- MACRO
      lex_message;             -- MESSAGE
      lex_imod;                -- MOD
      lex_module;              -- MODULE
   -- lex_mutex;               -- MUTEX
      lex_new;                 -- NEW
      lex_nil;                 -- NIL
      lex_not;                 -- NOT
      lex_of;                  -- OF
      lex_or;                  -- OR
      lex_others;              -- OTHERS
      lex_out;                 -- OUT
      lex_overload;            -- OVERLOAD
      lex_override;            -- OVERRIDE
      lex_pred;                -- PRED
      lex_private;             -- PRIVATE
      lex_procedure;           -- PROCEDURE
      lex_program;             -- PROGRAM
      lex_protected;           -- PROTECTED
      lex_public;              -- PUBLIC
      lex_queue;               -- QUEUE
      lex_raise;               -- RAISE
      lex_range;               -- RANGE
      lex_record;              -- RECORD
      lex_ref;                 -- REF
      lex_return;              -- RETURN
      lex_reverse;             -- REVERSE
      lex_rollback;            -- ROLLBACK
      lex_send;                -- SEND
      lex_sequential;          -- SEQUENTIAL
      lex_set;                 -- SET
      lex_shl;                 -- SHL
      lex_shr;                 -- SHR
      lex_signed;              -- SIGNED
      lex_static;              -- STATIC
      lex_string;              -- STRING
      lex_succ;                -- SUCC
   -- lex_synchronized;        -- SYNCHRONIZED
      lex_tag;                 -- TAG
      lex_task;                -- TASK
      lex_then;                -- THEN
      lex_this;                -- THIS
      lex_to;                  -- TO
      lex_type;                -- TYPE
      lex_unchecked;           -- UNCHECKED
      lex_unsigned;            -- UNSIGNED
      lex_until;               -- UNTIL
      lex_use;                 -- USE
      lex_var;                 -- VAR
      lex_vector;              -- VECTOR
      lex_virtual;             -- VIRTUAL
      lex_when;                -- WHEN
      lex_while;               -- WHILE
      lex_with;                -- WITH
      lex_xor;                 -- XOR
      end enum;
  lexsymset        = set of lexsym;

const
  -- lexik ln¡ elementy, kter˜mi m–‘e za‡¡nat v˜raz
  lex_expr_start   = lexsymset:[
      lex_numi, lex_numr, lex_str, lex_nil, lex_id, lex_ptr, lex_not,
      lex_succ, lex_pred, lex_abs, lex_add, lex_sub, lex_lpar, lex_lbra,
      lex_this, lex_current, lex_adjust, lex_entry, lex_exit];

const
  -- oper tory %%TODO(???) Nˆjak generovat z cc_def.cc_entity.ooperinfo
  lex_operator     = lexsymset:[
      lex_assign, lex_add, lex_sub, lex_mul, lex_div, lex_concat, lex_idiv, 
      lex_imod, lex_shl, lex_shr, lex_lt, lex_gt, lex_le, lex_ge, lex_eq, 
      lex_ne, lex_and, lex_or, lex_xor, lex_not, lex_succ, lex_pred, lex_abs, 
      lex_op1];

var
  -- kl¡‡ov  slova
  lex_keywords     : protected lexsymset;

type
  -- ‡¡slo souboru
  lexfilenum       = private t_hash_item_id;

  -- znak jak s n¡m pracuje lexik ln¡ analyz tor
  lexchar          = protected character 32;
  lexcharustr      = protected string of lexchar;
  plexcharustr     = ^lexcharustr;
  lexcharstr       = protected lexcharustr range 63;

  -- znakov˜ agreg t
  lexaggregate     = protected string of cc_unitype.tunichar;
  plexaggregate    = ^lexaggregate;

  -- pozice
  lexline          = private t_unsigned;         -- pozice: © dek   (od 0)
  lexcolumn        = private t_unsigned;         --         sloupec (od 0)
  lexlength        = private t_unsigned;         -- d‚lka textov‚ reprezentace

  -- £rove¤ vno©en¡ lexik ln¡ho elementu
  lexlevel         = enum
      ll_curr;                                   -- aktu ln¡ element
      ll_prev;                                   -- p©edchoz¡ element
      end enum;

  -- pozice lexik ln¡ho elementu
  lexpos           = record
      line         : lexline;                    -- © dek
      col          : lexcolumn;                  -- sloupec
      len          : lexlength;                  -- d‚lka elementu
      num          : lexfilenum;                 -- ‡¡slo souboru
      end record;

  -- pozice bloku lexik ln¡ch element–
  lexposblock      = record
      b            : lexpos;                     -- za‡ tek
      e            : lexpos;                     -- konec
      end record;

var
  nullpos          : const lexposblock := nil;

type
  -- polo‘ka tabulek symbol– (konstant) pro lexikaln¡ anal˜zu
  lexdesc          = record
      txt          : tshortident{lexcharstr};    -- identifikator elementu
      lex          : lexsym;                      -- odpov¡daj¡c¡ lexik ln¡ element
      end record;

  -- hodnota lexik ln¡ho elementu
  lexval;

  -- dvojice lexik ln¡ch element–
  lexpair          = record
      l1           : lexsym;
      l2           : lexsym;
      end record;

var
  -- dvojice podobn˜ch lexik ln¡ch element–
  lexsimilar       : const array 1..4 of lexpair := [
      [for l1 use lex_scol      , for l2 use lex_col       ],
      [for l1 use lex_dot       , for l2 use lex_comma     ],
      [for l1 use lex_col       , for l2 use lex_op1       ],
      [for l1 use lex_eq        , for l2 use lex_col       ]];

var
  -- tabulka kl¡‡ov˜ch slov
  -- Pozn mka: tabulka je indexov na od 1, aby se v [lexkeywords_index] dala 0 resp. NIL
  -- pou‘¡t jako nevalidn¡ hodnota
  lexkeywords      : const array 1..98 of lexdesc := [
      [for txt use 'ABS'         , for lex use lex_abs         ],
      [for txt use 'ABSTRACT'    , for lex use lex_abstract    ],
      [for txt use 'ACCEPT'      , for lex use lex_accept      ],
   -- [for txt use 'ACCESS'      , for lex use lex_access      ],
      [for txt use 'ADJUST'      , for lex use lex_adjust      ],
   -- [for txt use 'ALIAS'       , for lex use lex_alias       ],
      [for txt use 'AND'         , for lex use lex_and         ],
      [for txt use 'ARRAY'       , for lex use lex_array       ],
      [for txt use 'ATTRIBUTE'   , for lex use lex_attribute   ],
      [for txt use 'BEGIN'       , for lex use lex_begin       ],
   -- [for txt use 'BOOLEAN'     , for lex use lex_boolean     ],
   -- [for txt use 'BODY'        , for lex use lex_body        ],
      [for txt use 'BREAK'       , for lex use lex_break       ],
      [for txt use 'CASE'        , for lex use lex_case        ],
      [for txt use 'CATCH'       , for lex use lex_catch       ],
      [for txt use 'CHARACTER'   , for lex use lex_character   ],
      [for txt use 'CLASS'       , for lex use lex_class       ],
   -- [for txt use 'COMMENT'     , for lex use lex_comment     ],
      [for txt use 'COMMIT'      , for lex use lex_commit      ],
      [for txt use 'CONCURRENT'  , for lex use lex_concurrent  ],
      [for txt use 'CONST'       , for lex use lex_const       ],
      [for txt use 'CURRENT'     , for lex use lex_current     ],
      [for txt use 'DECLARE'     , for lex use lex_declare     ],
   -- [for txt use 'DEFINE'      , for lex use lex_define      ],
      [for txt use 'DELAY'       , for lex use lex_delay       ],
      [for txt use 'DELTA'       , for lex use lex_delta       ],
      [for txt use 'DIGITS'      , for lex use lex_digits      ],
      [for txt use 'DISCARD'     , for lex use lex_discard     ],
      [for txt use 'DIV'         , for lex use lex_idiv        ],
      [for txt use 'DO'          , for lex use lex_do          ],
      [for txt use 'ELSE'        , for lex use lex_else        ],
      [for txt use 'ELSIF'       , for lex use lex_elsif       ],
      [for txt use 'END'         , for lex use lex_end         ],
      [for txt use 'ENTRY'       , for lex use lex_entry       ],
      [for txt use 'ENUM'        , for lex use lex_enum        ],
   -- [for txt use 'EXCEPTION'   , for lex use lex_except      ],
      [for txt use 'EXIT'        , for lex use lex_exit        ],
      [for txt use 'EXPOSE'      , for lex use lex_expose      ],
      [for txt use 'EXTEND'      , for lex use lex_extend      ],
   -- [for txt use 'FALSE'       , for lex use lex_false       ],
      [for txt use 'FIXED'       , for lex use lex_fixed       ],
      [for txt use 'FLOAT'       , for lex use lex_float       ],
      [for txt use 'FOR'         , for lex use lex_for         ],
   -- [for txt use 'FORWARD'     , for lex use lex_forward     ],
      [for txt use 'GENERIC'     , for lex use lex_generic     ],
      [for txt use 'GOTO'        , for lex use lex_goto        ],
      [for txt use 'IF'          , for lex use lex_if          ],
      [for txt use 'IN'          , for lex use lex_in          ],
   -- [for txt use 'INTERFACE'   , for lex use lex_interface   ],
   -- [for txt use 'INTERNAL'    , for lex use lex_internal    ],
      [for txt use 'LABEL'       , for lex use lex_label       ],
      [for txt use 'LEAVE'       , for lex use lex_leave       ],  -- pridal Ales 6.7.1996
   -- [for txt use 'LIMITED'     , for lex use lex_limited     ],
   -- [for txt use 'LOCAL'       , for lex use lex_local       ],
      [for txt use 'LOGICAL'     , for lex use lex_logical     ],
      [for txt use 'LOOP'        , for lex use lex_loop        ],
      [for txt use 'MACRO'       , for lex use lex_macro       ],
      [for txt use 'MESSAGE'     , for lex use lex_message     ],
      [for txt use 'MOD'         , for lex use lex_imod        ],
      [for txt use 'MODULE'      , for lex use lex_module      ],
   -- [for txt use 'MUTEX'       , for lex use lex_mutex       ],
      [for txt use 'NEW'         , for lex use lex_new         ],
      [for txt use 'NIL'         , for lex use lex_nil         ],
      [for txt use 'NOT'         , for lex use lex_not         ],
      [for txt use 'OF'          , for lex use lex_of          ],
      [for txt use 'OR'          , for lex use lex_or          ],
      [for txt use 'OTHERS'      , for lex use lex_others      ],
      [for txt use 'OUT'         , for lex use lex_out         ],
      [for txt use 'OVERLOAD'    , for lex use lex_overload    ],
      [for txt use 'OVERRIDE'    , for lex use lex_override    ],
   -- [for txt use 'PERSISTENT'  , for lex use lex_persistent  ],
   -- [for txt use 'POINTER'     , for lex use lex_pointer     ],
   -- [for txt use 'PRAGMA'      , for lex use lex_pragma      ],
      [for txt use 'PRED'        , for lex use lex_pred        ],
      [for txt use 'PRIVATE'     , for lex use lex_private     ],
      [for txt use 'PROCEDURE'   , for lex use lex_procedure   ],
   -- [for txt use 'PROCESS'     , for lex use lex_process     ],
      [for txt use 'PROGRAM'     , for lex use lex_program     ],
      [for txt use 'PROTECTED'   , for lex use lex_protected   ],
      [for txt use 'PUBLIC'      , for lex use lex_public      ],
      [for txt use 'QUEUE'       , for lex use lex_queue       ],
      [for txt use 'RAISE'       , for lex use lex_raise       ],
      [for txt use 'RANGE'       , for lex use lex_range       ],
      [for txt use 'RECORD'      , for lex use lex_record      ],
      [for txt use 'REF'         , for lex use lex_ref         ],
      [for txt use 'RETURN'      , for lex use lex_return      ],
      [for txt use 'REVERSE'     , for lex use lex_reverse     ],
      [for txt use 'ROLLBACK'    , for lex use lex_rollback    ],
   -- [for txt use 'SECURE'      , for lex use lex_secure      ],
   -- [for txt use 'SEMAPHORE'   , for lex use lex_semaphore   ],
      [for txt use 'SEND'        , for lex use lex_send        ],
      [for txt use 'SEQUENTIAL'  , for lex use lex_sequential  ],
      [for txt use 'SET'         , for lex use lex_set         ],
      [for txt use 'SHL'         , for lex use lex_shl         ],
      [for txt use 'SHR'         , for lex use lex_shr         ],
      [for txt use 'SIGNED'      , for lex use lex_signed      ],
      [for txt use 'STATIC'      , for lex use lex_static      ],
      [for txt use 'STRING'      , for lex use lex_string      ],
      [for txt use 'SUCC'        , for lex use lex_succ        ],
   -- [for txt use 'SYNCHRONIZED', for lex use lex_synchronized],
      [for txt use 'TAG'         , for lex use lex_tag         ],
   -- [for txt use 'TAGGED'      , for lex use lex_tagged      ],
      [for txt use 'TASK'        , for lex use lex_task        ],
      [for txt use 'THEN'        , for lex use lex_then        ],
      [for txt use 'THIS'        , for lex use lex_this        ],
      [for txt use 'TO'          , for lex use lex_to          ],
   -- [for txt use 'TRUE'        , for lex use lex_true        ],
      [for txt use 'TYPE'        , for lex use lex_type        ],
      [for txt use 'UNCHECKED'   , for lex use lex_unchecked   ],
      [for txt use 'UNSIGNED'    , for lex use lex_unsigned    ],
      [for txt use 'UNTIL'       , for lex use lex_until       ],
      [for txt use 'USE'         , for lex use lex_use         ],
      [for txt use 'VAR'         , for lex use lex_var         ],
      [for txt use 'VECTOR'      , for lex use lex_vector      ],
      [for txt use 'VIRTUAL'     , for lex use lex_virtual     ],
      [for txt use 'WHEN'        , for lex use lex_when        ],
      [for txt use 'WHILE'       , for lex use lex_while       ],
      [for txt use 'WITH'        , for lex use lex_with        ],
      [for txt use 'XOR'         , for lex use lex_xor         ]];

const
  -- metaidentifik tory
  metaid_asm       = 'ASM';                      -- #end ASM;

type
  -- vstup lexik ln¡ho analyz toru
  lexinput;
  plexinput        = ^lexinput;

----------------------------------------------------------------------------------------------------
procedure lexcharstr_to_string (
    s              : in lexcharstr)              -- textov  reprezentace lexik ln¡ho elementu
    return t_char32str;
-- P©evod textov‚ reprezentace lexik ln¡ho elementu na ©etˆzec.
----------------------------------------------------------------------------------------------------
procedure lexposblock_to_string (
    pos            : in lexposblock;             -- pozice
    align          : in t_logical := false)      -- T-zarovnan˜ tvar
    return t_char32str;
-- P©evod pozice bloku lexik ln¡ch element– na ©etˆzec.
----------------------------------------------------------------------------------------------------



----- Metap©¡kazy ----------------------------------------------------------------------------------
type
  -- metap©¡kazy
  tmetacmd         = enum
      meta_unknown;                              -- nezn m˜ metap©¡kaz
      -- jazykem definovan‚ metap©¡kazy
      meta_include;                              -- #include
      meta_option;                               -- #option
      meta_pragma;                               -- #pragma
      meta_environment;                          -- #environment
      meta_syntax;                               -- #syntax
      meta_error;                                -- #error
      meta_warning;                              -- #warning
      meta_display;                              -- #display
      meta_if;                                   -- #if
      meta_elsif;                                -- #elsif
      meta_else;                                 -- #else
      meta_end;                                  -- #end
      meta_and;                                  -- #and [ then ]
      meta_or;                                   -- #or [ else ]
      meta_declared;                             -- #declared
      meta_separate;                             -- #separate
      meta_template;                             -- #template
      meta_expand;                               -- #expand
      meta_for;                                  -- #for
      -- implementac¡ definovan‚ metap©¡kazy
      end enum;
  tmetacmdset      = set of tmetacmd;

  -- polo‘ka tabulky metap©¡kaz–
  tmetacmddesc     = record
      txt          : tshortident;                -- jm‚no metap©¡kazu
      meta         : tmetacmd;                   -- metap©¡kaz
      end record;

var
  -- tabulka metap©¡kaz–
  metacmdtab       : const array 0..18 of tmetacmddesc := [
      [for txt use '#AND'          , for meta use meta_and        ],
      [for txt use '#DECLARED'     , for meta use meta_declared   ],
      [for txt use '#DISPLAY'      , for meta use meta_display    ],
      [for txt use '#ELSE'         , for meta use meta_else       ],
      [for txt use '#ELSIF'        , for meta use meta_elsif      ],
      [for txt use '#END'          , for meta use meta_end        ],
      [for txt use '#ENVIRONMENT'  , for meta use meta_environment],
      [for txt use '#ERROR'        , for meta use meta_error      ],
      [for txt use '#EXPAND'       , for meta use meta_expand     ],
      [for txt use '#FOR'          , for meta use meta_for        ],
      [for txt use '#IF'           , for meta use meta_if         ],
      [for txt use '#INCLUDE'      , for meta use meta_include    ],
      [for txt use '#OPTION'       , for meta use meta_option     ],
      [for txt use '#OR'           , for meta use meta_or         ],
      [for txt use '#PRAGMA'       , for meta use meta_pragma     ],
      [for txt use '#SEPARATE'     , for meta use meta_separate   ],
      [for txt use '#SYNTAX'       , for meta use meta_syntax     ],
      [for txt use '#TEMPLATE'     , for meta use meta_template   ],
      [for txt use '#WARNING'      , for meta use meta_warning    ]];

const
  -- pragma
  pragma_convention  : tshortident = 'CONVENTION';
  pragma_import      : tshortident = 'IMPORT';
  pragma_export      : tshortident = 'EXPORT';
  pragma_library     : tshortident = 'LIBRARY';
  pragma_assign      : tshortident = 'ASSIGN';
  pragma_stackframe  : tshortident = 'STACKFRAME';
  pragma_no_return   : tshortident = 'NO_RETURN';
  pragma_stack_reserve : tshortident = 'STACK_RESERVE';



----------------------------------------------------------------------------------------------------
protected
----------------------------------------------------------------------------------------------------

type
  -- hodnota lexik ln¡ elementu
  lexval           = record
      ui           : cc_unitype.tuniint;         -- univerz ln¡ cel‚ ‡¡slo
      ur           : cc_unitype.tunireal;        -- univerz ln¡ re ln‚ ‡¡slo
      id           : pentityident;               -- identifik tor
      can_be_kw    : t_logical;                  -- indikace, zda identifik tor m–‘e b˜t kl¡‡. slovo
                                                 -- kl¡‡ov  slova zpravidla neobsahuj¡ znaky _, 0..9
      txt          : plexcharustr;               -- textov  reprezentace elementu
      str          : plexaggregate;              -- znakov˜ agreg t
      -- %%X To CODE se mi moc nel¡b¡. Ne¨lo by to vy©e¨it jinak ?
      code         : t_unsigned;                 -- rezervov no inline assembler
      -- optimalizace vyu‘it¡ pamˆti
      id_used      : t_logical;                  -- identifik tor byl pou‘it
      txt_used     : t_logical;                  -- textov˜ tvar byl pou‘it
      end record;

type
  -- znak ze vstupn¡ho souboru
  tinputchar       = protected character 8;
  tinputchararray  = array of tinputchar;
  pinputchararray  = ^tinputchararray;

const
  -- maxim ln¡ po‡et znak– v unget bufferu (lexik ln¡ anal˜za je LL(maxungetchar))
  maxungetchar     = 2;

type
  -- polo‘ka znakov‚ho unget bufferu
  lexinputunget    = record
      zn           : lexchar;                    -- znak p©e‡ten˜ ze vstupu
      line         : lexline;                    -- pozice: © dek
      col          : lexcolumn;                  --         sloupec
      end record;

  -- lexik ln¡ unget buffer
  lexunget         = record
      lex          : lexsym;                     -- lexik ln¡ element
      val          : lexval;                     -- hodnota lexik ln¡ho elementu
      end record;

type
  -- z sobn¡k blokov˜ch metap©¡kaz– (#if-#end if, #syntax asm-#end asm ap.)
  tmetastackitem   = record
      open         : tmetacmd;                   -- otev¡rac¡ metap©¡kaz
      pos          : lexposblock;                -- pozice otev¡rac¡ho metap©¡kazu
      flag         : t_unsigned;                 -- nˆjak˜ ‡¡ta‡ ‡i co
      id           : pentityident;               -- souvisej¡c¡ identifik tor (nap©¡klad v #syntax)
      end record;

type
  -- vstup lexik ln¡ho analyz toru
  lexinput         = record
      next         : plexinput;                  -- dal¨¡ soubor v z sobn¡ku
      f            : c_file;                     -- soubor
      fpos         : t_file_pointer;             -- pozice v souboru
      num          : lexfilenum;                 -- ‡¡slo souboru
      include      : t_logical;                  -- T-soubor je includovan˜
      -- unget buffer na lexik ln¡ elementy
      lastvalid    : t_logical;                  -- T-obsah bufferu je platn˜
      lastlex      : lexunget;                   -- buffer na 1 lexik ln¡ element (Flex je LL(1))
      lastins      : lexsym;                     -- vlo‘en˜ lexik ln¡ element
      -- buffer na pozice lexik ln¡ch element– (jsou pot©eba pozice 2 element–)
      posbuf       : array lexlevel of lexpos;   -- pozice lexik ln¡ch element–
      -- unget buffer na znaky (ji‘ konvertovan‚ na intern¡ reprezentaci LEXCHAR)
      znpos        : t_unsigned;                 -- kursor do unget bufferu
      znbuf        : array 0..maxungetchar-1 of lexinputunget; -- znakov˜ buffer
      -- buffer
      buf          : pinputchararray;            -- buffer pro ‡ten¡ ze souboru
      --%%TODO(STRING) BUFSIZE nahradit atributem BUF^:LENGTH
      bufsize      : t_unsigned;                 -- velikost bufferu
      bufpos       : t_unsigned;                 -- pozice aktu ln¡ho znaku v bufferu
      buflen       : t_unsigned;                 -- d‚lka dat v bufferu
      effective    : t_logical;                  -- T-pr vˆ zpracov van˜ © dek je efektivn¡
      -- z sobn¡k preprocesoru
      metastack    : {%%TODO(REF)} string 100 of tmetastackitem;
      end record;

var
  -- index do tabulky kl¡‡ov˜ch slov pro urychlen¡ vyhled v n¡
  lexkeywords_index: protected array 65..90{%%TODO(CHARRANGE) 'A'..'Z'} of record
      first        : lexkeywords:range:type;     -- prvn¡ kl¡‡ov‚ slovo od tohoto p¡smene
      last         : lexkeywords:range:type;     -- posledn¡ kl¡‡ov‚ slovo od tohoto p¡smene
      min_length   : t_unsigned;                 -- minim ln¡ d‚lka kl¡‡ov‚ho slova
      max_length   : t_unsigned;                 -- maxim ln¡ d‚lka kl¡‡ov‚ho slova
      end record;

end cc_lexsym;