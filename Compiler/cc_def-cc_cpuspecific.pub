----------------------------------------------------------------------------------------------------
class public abstract cc_cpuspecific =
-- Překladač Flexu.
-- Vlastnosti specifické pro konkrétní procesor.
----------------------------------------------------------------------------------------------------
-- Ondra : 16.07.2001 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  cc_def.cc_unitype,cc_def.cc_entity;

var
  maxstrhval       : protected tuniint;          -- maximální délka řetězce
  strisize         : protected tunidata_size;    -- velikost interní části řetězce
  defaultalign     : protected tunidata_size;    -- implicitní zarovnání složek typů
  classisize       : protected tunidata_size;    -- velikost interní části třídy
  class_tag        : protected tunidata_addr{%%X(OFS)};-- offset skryté složky @TAG
  class_status     : protected tunidata_addr{%%X(OFS)};-- offset skryté složky @STATUS

----------------------------------------------------------------------------------------------------
virtual abstract getdefaultord (
    stype          : in tdatatype;               -- datový typ
    bits           : out tunidata_bitsize;       -- velikost v bitech
    size           : out tunidata_size;          -- velikost v bytech
    lval           : out tuniint;                -- dolní mez
    hval           : out tuniint);               -- horní mez
-- Parametry implicitního ordinálního typu.
----------------------------------------------------------------------------------------------------
virtual abstract getdefaultreal (
  { Ondra 3.4.2003 : Zrušeno, float se nově definuje počtem bitů.
    stype          : in tfloatdeftype;           -- typ definice reálného čísla
  }
    bits           : in tunidata_bitsize;        -- velikost v bitech
    size           : out tunidata_size;          -- velikost v bytech
    params         : out tfloatparams);          -- parametry typu
-- Parametry implicitního reálného typu.
----------------------------------------------------------------------------------------------------
virtual abstract getordparams1 (
    stype          : in tdatatype;               -- datový typ
    bits           : in tunidata_bitsize;        -- velikost v bitech
    size           : out tunidata_size;          -- velikost v bytech
    lval           : out tuniint;                -- dolní mez
    hval           : out tuniint);               -- horní mez
-- Z velikosti čísla v bitech odvodí další strojově závislé hodnoty.
----------------------------------------------------------------------------------------------------
virtual abstract getordparams2 (
    stype          : in tdatatype;               -- datový typ
    bits           : out tunidata_bitsize;       -- velikost v bitech
    size           : out tunidata_size;          -- velikost v bytech
    lval           : in tuniint;                 -- dolní mez
    hval           : in tuniint;                 -- horní mez
    native         : in t_logical);              -- T-velikost alespoň strojového slovo
-- Z mezí čísla odvodí další strojově závislé hodnoty.
-- Je-li [native]=True, má výsledné číslo velikost alespoň strojového slova. V opačném případě se
-- použije nejmenší možná velikost, do které se hodnoty v daných mezích vejdou.
----------------------------------------------------------------------------------------------------
virtual abstract getrealparams (
  { Ondra 3.4.2003 : Zrušeno, float se nově definuje počtem bitů.
    stype          : in tfloatdeftype;           -- typ definice reálného čísla
  }
    bits           : in tunidata_bitsize;        -- velikost v bitech
    size           : out tunidata_size;          -- velikost v bytech
    params         : in out tfloatparams);       -- parametry typu
-- Z delta/digits odvodí další strojově závislé hodnoty. Delta/digits je zadáno pouze přibližně
-- a bude změněno.
----------------------------------------------------------------------------------------------------
virtual abstract getstrparams (
    stype          : in tdatatype;               -- datový typ
    size           : out tunidata_size;          -- velikost v bytech
    isize          : out tunidata_size;          -- velikost interní části
    bsize          : in tunidata_size;           -- velikost báze
    hval           : in tuniint);                -- horní mez (délka řetězce)
-- Z velikosti řetězce odvodí velikost.
----------------------------------------------------------------------------------------------------
virtual abstract getstrmaxhval (
    bsize          : in tunidata_size;           -- velikost báze
    maxhval        : out tuniint);               -- maximální horní mez řetězce
-- Maximální horní mez řetězce podle velikosti prvku.
----------------------------------------------------------------------------------------------------
virtual abstract getsetparams (
    items          : in tuniint;                 -- počet prvků množiny
    size           : out tunidata_size);         -- velikost množiny
-- Z počtu prvků množiny odvodí její velikost.
----------------------------------------------------------------------------------------------------
virtual abstract layoutrecitem (
    item           : in pentity_var;             -- umísťovaná položka
    align          : in tunidata_size;           -- zarovnání
    native_align   : in t_logical;               -- T-nativně zarovnávat složky menší než [align]
    varofs         : in out tunidata_addr{%%X(OFS)};-- aktuální offset
    maxofs         : in out tunidata_addr);      -- maximální dosažený offset
-- Umístění jedné položky v recordu/třídě.
----------------------------------------------------------------------------------------------------
virtual abstract forcelayoutrecitem (
    item           : in pentity_var;             -- umísťovaná položka
    pos            : in tunidata_addr;           -- předepsaná pozice
    align          : in tunidata_size;           -- zarovnání
    native_align   : in t_logical;               -- T-nativně zarovnávat složky menší než [align]
    varofs         : in out tunidata_addr{%%X(OFS)};-- aktuální offset
    maxofs         : in out tunidata_addr);      -- maximální dosažený offset
-- Předepíše umístění jedné položky v recordu/třídě na zadanou pozici.
----------------------------------------------------------------------------------------------------
virtual abstract getptrsize (
  --pclass         : in ptrclass;                -- třída pointeru
  --pbase          : in ptrbase;                 -- kompatibilita báze
    pattrib        : in rtattribset{ptrattribset}; -- atributy pointeru
  --machine        : in t_logical;               -- T-požadován machine pointer
    size           : out tunidata_size);         -- velikost pointeru
-- Velikost pointeru.
----------------------------------------------------------------------------------------------------
virtual abstract getrtattribsize (
    rta            : in rtattrib;                -- dynamický atribut
    size           : out tunidata_size);         -- jeho velikost
-- Velikost dynamického atributu.
----------------------------------------------------------------------------------------------------
virtual abstract bytestobits (
    bytes          : in tunidata_size;           -- velikost v bytech
    bits           : out tunidata_bitsize);      -- velikost v bitech
-- Převod bytu na bity (co kdyby se vyskytl 10-bitový počítač, že).
----------------------------------------------------------------------------------------------------
virtual abstract immtobinary (
    imm            : in timm_value;              -- přímá hodnota
    ptyp           : in pentity_type;            -- typ konstanty
    bin            : out unchecked;              -- binární tvar přímé hodnoty
    binsize        : in tunidata_size);          -- velikost binárního tvaru
-- Převede přímou hodnotu do binárního tvaru.
----------------------------------------------------------------------------------------------------
virtual abstract getimmstoragesize (
    imm            : in timm_value;              -- přímá hodnota
    ptyp           : in pentity_type;            -- typ konstanty
    size           : out tunidata_size);         -- velikost
-- Minimální velikost prostoru pro uložení konstanty do EXE.
-- (Pro řetězce stačí rezervovat jen tolik paměti, kolik je potřeba na
-- všechny prvky a :length; pro ostatní typy je třeba alokovat
-- ptyp^.size bytu prostoru)
----------------------------------------------------------------------------------------------------
virtual abstract setstackframe (
    proc           : in pentity_procedure;       -- procedura
    id             : in tentityident);           -- identifikátor
-- Nastaví typ stackframe procedury.
----------------------------------------------------------------------------------------------------
virtual abstract p_asm (
    curr           : in tcontext;                -- aktuální kontext
    bl             : in out class c_flex_class); -- uzel reprezentující blok v inline assembleru
-- Překlad inline assembleru
----------------------------------------------------------------------------------------------------
virtual abstract unidata_addr_to_hex_string (
    ud             : in tunidata_addr)           -- UNIDATA
    return t_char32str;                          -- hexadecimální textová reprezentace
-- Převod UNIDATA_ADDR na hexadecimální zápis v délce podporované tímto CPU.
----------------------------------------------------------------------------------------------------
virtual abstract unidata_size_to_hex_string (
    ud             : in tunidata_size)           -- UNIDATA
    return t_char32str;                          -- hexadecimální textová reprezentace
-- Převod UNIDATA_SIZE na hexadecimální zápis v délce podporované tímto CPU.
----------------------------------------------------------------------------------------------------

end cc_cpuspecific;
