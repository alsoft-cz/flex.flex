----------------------------------------------------------------------------------------------------
class public abstract cc_cpuspecific =
-- P©eklada‡ Flexu.
-- Vlastnosti specifick‚ pro konkr‚tn¡ procesor.
----------------------------------------------------------------------------------------------------
-- Ondra : 16.07.2001 : Vytvo©il
----------------------------------------------------------------------------------------------------

with
  cc_def.cc_unitype,cc_def.cc_entity;

var
  maxstrhval       : protected tuniint;          -- maxim ln¡ d‚lka ©etˆzce
  strisize         : protected tunidata_size;    -- velikost intern¡ ‡ sti ©etˆzce
  defaultalign     : protected tunidata_size;    -- implicitn¡ zarovn n¡ slo‘ek typ–
  classisize       : protected tunidata_size;    -- velikost intern¡ ‡ sti t©¡dy
  class_tag        : protected tunidata_addr{%%X(OFS)};-- offset skryt‚ slo‘ky @TAG
  class_status     : protected tunidata_addr{%%X(OFS)};-- offset skryt‚ slo‘ky @STATUS

----------------------------------------------------------------------------------------------------
virtual abstract getdefaultord (
    stype          : in tdatatype;               -- datov˜ typ
    bits           : out tunidata_bitsize;       -- velikost v bitech
    size           : out tunidata_size;          -- velikost v bytech
    lval           : out tuniint;                -- doln¡ mez
    hval           : out tuniint);               -- horn¡ mez
-- Parametry implicitn¡ho ordin ln¡ho typu.
----------------------------------------------------------------------------------------------------
virtual abstract getdefaultreal (
  { Ondra 3.4.2003 : Zru¨eno, float se novˆ definuje po‡tem bit–.
    stype          : in tfloatdeftype;           -- typ definice re ln‚ho ‡¡sla
  }
    bits           : in tunidata_bitsize;        -- velikost v bitech
    size           : out tunidata_size;          -- velikost v bytech
    params         : out tfloatparams);          -- parametry typu
-- Parametry implicitn¡ho re ln‚ho typu.
----------------------------------------------------------------------------------------------------
virtual abstract getordparams1 (
    stype          : in tdatatype;               -- datov˜ typ
    bits           : in tunidata_bitsize;        -- velikost v bitech
    size           : out tunidata_size;          -- velikost v bytech
    lval           : out tuniint;                -- doln¡ mez
    hval           : out tuniint);               -- horn¡ mez
-- Z velikosti ‡¡sla v bitech odvod¡ dal¨¡ strojovˆ z visl‚ hodnoty.
----------------------------------------------------------------------------------------------------
virtual abstract getordparams2 (
    stype          : in tdatatype;               -- datov˜ typ
    bits           : out tunidata_bitsize;       -- velikost v bitech
    size           : out tunidata_size;          -- velikost v bytech
    lval           : in tuniint;                 -- doln¡ mez
    hval           : in tuniint;                 -- horn¡ mez
    native         : in t_logical);              -- T-velikost alespo¤ strojov‚ho slovo
-- Z mez¡ ‡¡sla odvod¡ dal¨¡ strojovˆ z visl‚ hodnoty.
-- Je-li [native]=True, m  v˜sledn‚ ‡¡slo velikost alespo¤ strojov‚ho slova. V opa‡n‚m p©¡padˆ se
-- pou‘ije nejmen¨¡ mo‘n  velikost, do kter‚ se hodnoty v dan˜ch mez¡ch vejdou.
----------------------------------------------------------------------------------------------------
virtual abstract getrealparams (
  { Ondra 3.4.2003 : Zru¨eno, float se novˆ definuje po‡tem bit–.
    stype          : in tfloatdeftype;           -- typ definice re ln‚ho ‡¡sla
  }
    bits           : in tunidata_bitsize;        -- velikost v bitech
    size           : out tunidata_size;          -- velikost v bytech
    params         : in out tfloatparams);       -- parametry typu
-- Z delta/digits odvod¡ dal¨¡ strojovˆ z visl‚ hodnoty. Delta/digits je zad no pouze p©ibli‘nˆ
-- a bude zmˆnˆno.
----------------------------------------------------------------------------------------------------
virtual abstract getstrparams (
    stype          : in tdatatype;               -- datov˜ typ
    size           : out tunidata_size;          -- velikost v bytech
    isize          : out tunidata_size;          -- velikost intern¡ ‡ sti
    bsize          : in tunidata_size;           -- velikost b ze
    hval           : in tuniint);                -- horn¡ mez (d‚lka ©etˆzce)
-- Z velikosti ©etˆzce odvod¡ velikost.
----------------------------------------------------------------------------------------------------
virtual abstract getstrmaxhval (
    bsize          : in tunidata_size;           -- velikost b ze
    maxhval        : out tuniint);               -- maxim ln¡ horn¡ mez ©etˆzce
-- Maxim ln¡ horn¡ mez ©etˆzce podle velikosti prvku.
----------------------------------------------------------------------------------------------------
virtual abstract getsetparams (
    items          : in tuniint;                 -- po‡et prvk– mno‘iny
    size           : out tunidata_size);         -- velikost mno‘iny
-- Z po‡tu prvk– mno‘iny odvod¡ jej¡ velikost.
----------------------------------------------------------------------------------------------------
virtual abstract layoutrecitem (
    item           : in pentity_var;             -- um¡sŸovan  polo‘ka
    align          : in tunidata_size;           -- zarovn n¡
    varofs         : in out tunidata_addr{%%X(OFS)};-- aktu ln¡ offset
    maxofs         : in out tunidata_addr);      -- maxim ln¡ dosa‘en˜ offset
-- Um¡stˆn¡ jedn‚ polo‘ky v recordu/t©¡dˆ.
----------------------------------------------------------------------------------------------------
virtual abstract forcelayoutrecitem (
    item           : in pentity_var;             -- um¡sŸovan  polo‘ka
    pos            : in tunidata_addr;           -- p©edepsan  pozice
    align          : in tunidata_size;           -- zarovn n¡
    varofs         : in out tunidata_addr{%%X(OFS)};-- aktu ln¡ offset
    maxofs         : in out tunidata_addr);      -- maxim ln¡ dosa‘en˜ offset
-- P©edep¡¨e um¡stˆn¡ jedn‚ polo‘ky v recordu/t©¡dˆ na zadanou pozici.
----------------------------------------------------------------------------------------------------
virtual abstract getptrsize (
  --pclass         : in ptrclass;                -- t©¡da pointeru
  --pbase          : in ptrbase;                 -- kompatibilita b ze
    pattrib        : in rtattribset{ptrattribset}; -- atributy pointeru
  --machine        : in t_logical;               -- T-po‘adov n machine pointer
    size           : out tunidata_size);         -- velikost pointeru
-- Velikost pointeru.
----------------------------------------------------------------------------------------------------
virtual abstract getrtattribsize (
    rta            : in rtattrib;                -- dynamick˜ atribut
    size           : out tunidata_size);         -- jeho velikost
-- Velikost dynamick‚ho atributu.
----------------------------------------------------------------------------------------------------
virtual abstract bytestobits (
    bytes          : in tunidata_size;           -- velikost v bytech
    bits           : out tunidata_bitsize);      -- velikost v bitech
-- P©evod bytu na bity (co kdyby se vyskytl 10-bitov˜ po‡¡ta‡, ‘e).
----------------------------------------------------------------------------------------------------
virtual abstract immtobinary (
    imm            : in timm_value;              -- p©¡m  hodnota
    ptyp           : in pentity_type;            -- typ konstanty
    bin            : out unchecked;              -- bin rn¡ tvar p©¡m‚ hodnoty
    binsize        : in tunidata_size);          -- velikost bin rn¡ho tvaru
-- P©evede p©¡mou hodnotu do bin rn¡ho tvaru.
----------------------------------------------------------------------------------------------------
virtual abstract getimmstoragesize (
    imm            : in timm_value;              -- p©¡m  hodnota
    ptyp           : in pentity_type;            -- typ konstanty
    size           : out tunidata_size);         -- velikost
-- Minim ln¡ velikost prostoru pro ulo‘en¡ konstanty do EXE.
-- (Pro ©etˆzce sta‡¡ rezervovat jen tolik pamˆti, kolik je pot©eba na
-- v¨echny prvky a :length; pro ostatn¡ typy je t©eba alokovat
-- ptyp^.size bytu prostoru)
----------------------------------------------------------------------------------------------------
virtual abstract setstackframe (
    proc           : in pentity_procedure;       -- procedura
    id             : in tentityident);           -- identifik tor
-- Nastav¡ typ stackframe procedury.
----------------------------------------------------------------------------------------------------
virtual abstract p_asm (
    curr           : in tcontext;                -- aktu ln¡ kontext
    bl             : in out class c_flex_class); -- uzel reprezentuj¡c¡ blok v inline assembleru
-- P©eklad inline assembleru
----------------------------------------------------------------------------------------------------
virtual abstract unidata_addr_to_hex_string (
    ud             : in tunidata_addr)           -- UNIDATA
    return t_char32str;                          -- hexadecim ln¡ textov  reprezentace
-- P©evod UNIDATA_ADDR na hexadecim ln¡ z pis v d‚lce podporovan‚ t¡mto CPU.
----------------------------------------------------------------------------------------------------
virtual abstract unidata_size_to_hex_string (
    ud             : in tunidata_size)           -- UNIDATA
    return t_char32str;                          -- hexadecim ln¡ textov  reprezentace
-- P©evod UNIDATA_SIZE na hexadecim ln¡ z pis v d‚lce podporovan‚ t¡mto CPU.
----------------------------------------------------------------------------------------------------

end cc_cpuspecific;
