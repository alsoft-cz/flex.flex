----------------------------------------------------------------------------------------------------
module private cc_xml_dumper =
-- XML dumper
----------------------------------------------------------------------------------------------------
-- honzap : 8.12.2003 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  standard,                 
  advanced,
  advanced.xml,
  advanced.xml.xml_tokenizer;

----------------------------------------------------------------------------------------------------
class private c_xml_dumper =
-- XML dumper
-- Interface pro zápis do XML
-- Jeho implementace může provádět test, zda volaná operace neporuší správnost výsledného XML
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    static write_text_element =
    -- Zapíše <name>text</name>
    ------------------------------------------------------------------------------------------------
    begin
      -- zapsat textový element
      go_in(name);
      write_text(text);
      go_out(name);
      end write_text_element;

    end c_xml_dumper;


type
  -- stav XML dumperu
  t_xml_dumper_state = enum
      xds_out;                                   -- počáteční stav, jsme venku z elementu
      xds_in;                                    -- jsme uvnitř elementu
      end enum;


----------------------------------------------------------------------------------------------------
class private c_stream_xml_dumper = 
-- XML dumper
-- podrobněji viz public část
----------------------------------------------------------------------------------------------------
    var
      xml          : aliased c_xml_token_writer;         -- objekt pro zapisování XML dat
      writer       : p_text_writer;                      -- zapisovač
      state        : t_xml_dumper_state;                 -- stav

    ------------------------------------------------------------------------------------------------
    static init_writer =
    -- inicializace
    ------------------------------------------------------------------------------------------------
    begin
      -- inicializovat stav
      state:=xds_out;

      -- inicializovat
      this.writer:=writer;

      -- inicializovat XML zapisovač
      xml.init(writer);

      -- inicializovat stav
      state:=xds_out;
      end init_writer;



    ------------------------------------------------------------------------------------------------
    override go_in =
    -- Provede zanoření do elementu.
    ------------------------------------------------------------------------------------------------
    begin
      if state=xds_in then
        -- měnit stav
        state:=xds_out;

        -- ukončit element
        xml.put_token(xtok_end_element);

        -- odřádkovat
        xml.put_token(xtok_line_end);

        end if;

      if state=xds_out 
        then
          -- změnít stav
          state:=xds_in;

          -- zapsat začátek elementu
          xml.put_token(xtok_start_element_begin);
          xml.put_name(name);
          xml.put_character(" ");

        else
          raise xml_dumper_error;
          end if;
      end go_in;



    ------------------------------------------------------------------------------------------------
    override go_out =
    -- Provede vynoření z elementu.
    ------------------------------------------------------------------------------------------------
    begin
      -- jsme uvnitř elementu, je to element bez dětí
      if state=xds_in then
        -- zapíše />
        xml.put_token(xtok_end_empty_element);

        -- odřádkování
        xml.put_token(xtok_line_end);

        -- změnit stav
        state:=xds_out;

      -- jsme mimo element
      elsif state=xds_out then
        -- ukončovací tag
        xml.put_token(xtok_start_element_end);
        xml.put_name(name);
        xml.put_token(xtok_end_element);

        -- odřádkovat
        xml.put_token(xtok_line_end);

        -- změnit stav
        state:=xds_out;

      -- chybný stav
      else 
        raise xml_dumper_error;
        end if;
      end go_out;



    ------------------------------------------------------------------------------------------------
    override write_attribute =
    -- Zapíše atribut name="value"
    ------------------------------------------------------------------------------------------------
    begin
      -- není povolený jiný stav než xds_in
      if state<>xds_in then raise xml_dumper_error end if;

      -- zapsat atribut, stav se zapsáním atributu nemění
      xml.put_name(name);                   
      xml.put_token(xtok_eq);                    
      xml.put_string(value); 
      xml.put_character(" ");                    
      end write_attribute;



    ------------------------------------------------------------------------------------------------
    override write_text =
    -- Zapíše textovou hodnotu
    ------------------------------------------------------------------------------------------------
    begin
      -- jsme uvnitř elementu
      if state=xds_in then
        -- zapíše >
        xml.put_token(xtok_end_element);

        -- změnit stav
        state:=xds_out;
        end if;

      -- zapsat text
      xml.put_characters(text);
      end write_text;

    end c_stream_xml_dumper;

----------------------------------------------------------------------------------------------------
class private c_file_xml_dumper =
-- XML dumper
-- Interface pro zápis do XML
-- Jeho implementace může provádět test, zda volaná operace neporuší správnost výsledného XML
----------------------------------------------------------------------------------------------------

    var
      encoder      : aliased c_character_encoder_utf8;   -- dekoder - určuje kódovou stránku vstupního souboru
      writer       : aliased c_stream_text_writer;       -- čtenář
      stream       : aliased c_file_output_stream;       -- vstupní stream

    ------------------------------------------------------------------------------------------------
    static init =
    -- inicializace
    ------------------------------------------------------------------------------------------------
    begin
      -- vytvořit soubor
      stream.create(file,tfss_not_shared,true);

      -- propojit
      writer.init_text_writer(^stream,^encoder);

      -- získat interface [c_text_writer]
      init_writer(^c_text_writer:(writer));
      end init;

    end c_file_xml_dumper;


end cc_xml_dumper;
