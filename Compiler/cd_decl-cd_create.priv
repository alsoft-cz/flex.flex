----------------------------------------------------------------------------------------------------
module private cd_create =
-- Překladač Flexu.
-- Deklarace.
----------------------------------------------------------------------------------------------------
-- Ondra : 19.09.2000 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  cd_eval;

type
  -- začátek deklarace
  tdeclstart       = enum
      tds_none;                                  -- neuvedeno
      tds_id;                                    -- deklarace začíná uvedením identifikátoru
      tds_kw;                                    -- deklarace začíná uvedením klíčového slova
      end enum;

  -- maximální počet částí deklarace
  tdeclparts       = enum
      tdp_1;                                     -- Full declaration
      tdp_2;                                     -- Incomplete/Completion | Full
      tdp_3;                                     -- Incomplete/Public/Private | Incomplete/Completion | Full
      end enum;

  -- typ deklarace
  tdecltype        = enum
      tdt_public;                                -- Public body
      tdt_private;                               -- Private body
      tdt_default;                               -- Incomplete/Completion/Full declaration
      end enum;
  tdecltypeset     = set of tdecltype;

  -- typ abstraktní deklarace
  tabstractdecl    = enum
      tad_no;                                    -- není povolena abstraktní deklarace
      tad_mixed;                                 -- abstraktní deklarace s povolený obsahem
      tad_pure;                                  -- čistě abstraktní deklarace
      end enum;

type
  -- informace o deklaraci
  tdeclinfo        = record
      start        : tdeclstart;                 -- lexikální element začínající deklaraci
      parts        : tdeclparts;                 -- maximální počet částí deklarace
      iparts       : tdeclparts;                 -- maximální počet částí interní deklarace
      can_abstract : tabstractdecl;              -- T-entita smí být abstraktní
      end record;

var
  -- informace o deklaraci jednotlivých typů entit
  declinfo         : array tentitytype of tdeclinfo := [
      for et_undef     use [for start use tds_none, for parts use tdp_1, for iparts use tdp_1],
      for et_compile   use [for start use tds_none, for parts use tdp_1, for iparts use tdp_1],
      for et_program   use [for start use tds_kw  , for parts use tdp_1, for iparts use tdp_1],
      for et_module    use [for start use tds_kw  , for parts use tdp_3, for iparts use tdp_3],
      for et_special   use [for start use tds_kw  , for parts use tdp_1, for iparts use tdp_2],
      for et_procedure use [for start use tds_kw  , for parts use tdp_2, for iparts use tdp_2],
      for et_virtual   use [for start use tds_kw  , for parts use tdp_2, for iparts use tdp_2, for can_abstract use tad_pure],
      for et_static    use [for start use tds_kw  , for parts use tdp_2, for iparts use tdp_2],
      for et_task      use [for start use tds_kw  , for parts use tdp_2, for iparts use tdp_2],
      for et_override  use [for start use tds_kw  , for parts use tdp_2, for iparts use tdp_2],
      for et_macro     use [for start use tds_kw  , for parts use tdp_2, for iparts use tdp_2],
      for et_overload  use [for start use tds_kw  , for parts use tdp_1, for iparts use tdp_1],
      for et_operator  use [for start use tds_kw  , for parts use tdp_1, for iparts use tdp_1],
      for et_var       use [for start use tds_id  , for parts use tdp_1, for iparts use tdp_1],
    --for et_define    use [for start use tds_id  , for parts use tdp_1, for iparts use tdp_1],
    --for et_alias     use [for start use tds_id  , for parts use tdp_1, for iparts use tdp_1],
      for et_type      use [for start use tds_id  , for parts use tdp_2, for iparts use tdp_1],
      for et_class     use [for start use tds_kw  , for parts use tdp_3, for iparts use tdp_3, for can_abstract use tad_mixed],
      for et_const     use [for start use tds_kw  , for parts use tdp_2, for iparts use tdp_2],
      for et_enum      use [for start use tds_id  , for parts use tdp_1, for iparts use tdp_1],
      for et_param     use [for start use tds_id  , for parts use tdp_1, for iparts use tdp_1],
      for et_message   use [for start use tds_id  , for parts use tdp_1, for iparts use tdp_1],
      for et_label     use [for start use tds_id  , for parts use tdp_1, for iparts use tdp_1],
      for et_template  use [for start use tds_kw  , for parts use tdp_1, for iparts use tdp_1], 
      for et_tparam    use [for start use tds_id  , for parts use tdp_1, for iparts use tdp_1],
      for et_attribute use [for start use tds_kw  , for parts use tdp_1, for iparts use tdp_1]];

----------------------------------------------------------------------------------------------------
procedure d_create =
-- Začátek deklarace a vytvoření symbolu.
----------------------------------------------------------------------------------------------------
var
  lex              : lexsym;                     -- lexikální symbol
  id               : pentityident;               -- identifikátor
  srch             : tentitysearch;              -- hledátko
  decltype         : tdecltype;                  -- typ deklarace
  abstract_present : t_logical;                  -- T-uvedeno ABSTRACT

begin
  -- pozice deklarace začínající klíčovým slovem
  -- (pro jistotu začátek i konec)
  if declinfo[etype].start=tds_kw then getlexposall(pos,ll_curr); end if;

  -- mohlo by následovat PUBLIC/PRIVATE
  if declinfo[etype].parts=tdp_3
    then
      getlex(context,lex);
      case lex
        when lex_public  do decltype:=tdt_public;
        when lex_private do decltype:=tdt_private;
        when others do
            decltype:=tdt_default;
            ungetlex;
        end case;
    else
      decltype:=tdt_default
      end if;

  -- ošetřit abstraktní deklarace
  abstract_present:=declinfo[etype].can_abstract<>tad_no and then checklex(context,lex_abstract);

  -- přečíst identifikátor
  getlex(context,lex);
  if lex<>lex_id then
    ce^.seterror({CCERR=}000197,ce_x_id);
    ce^.loadpos;
    {%%RESUME ce^.raiseerror;}
    ce^.resumeerror;
    end if;
  id:=getlexid;

  -- pozice deklarace začínající identifikátorem
  -- (pro jistotu začátek i konec)
  if declinfo[etype].start=tds_id then getlexposall(pos,ll_curr); end if;

  -- zkusit vyhledat
  srch.find_local_all(context,id^);

  -- zvlášť ošetřit duplicitu v jiném (nadřazeném) deklarativním regionu - z této chyby se
  -- lze snadno zotavit
  if srch.psym<>nil and then srch.psym^.context.region<>context.region then
    ce^.seterror({CCERR=}000198,ce_dupid);
    ce^.setparam(entityident_to_string(id^));
    --%%X ce^.setinfo(formats(hint_dupsymbol,nptostr(prvtypename,ord(srch.psym^.etype))));
    ce^.loadpos;
    srch.set_entity(nil);
    end if;

  if srch.psym<>nil

    -- nalezen nějaký symbol
    then
      -- souhlasí typ symbolu ?
      if srch.psym^.etype<>etype then
        ce^.seterror({CCERR=}000199,ce_dupid);
        ce^.setparam(entityident_to_string(id^));
        --%%X ce^.setinfo(formats(hint_dupsymbol,nptostr(prvtypename,ord(srch.psym^.etype))));
        ce^.loadpos;
        {%%RESUME ce^.raiseerror;}
        ce^.resumeerror;
        end if;

      -- v jakém stavu je deklarace symbolu ?
      case srch.psym^.declared
        -- Incomplete declaration
        when etd_incomplete do
            -- může následovat cokoliv

        -- Public body declaration
        when etd_public  do
            -- musí následovat Private body declaration
            if decltype<>tdt_private then
              ce^.seterror({CCERR=}000200,ce_wrongdecl);
              ce^.setparam(entityident_to_string(id^));
              ce^.setinfo(hint_x_private);
              ce^.loadpos;
              {%%RESUME ce^.raiseerror;}
              ce^.resumeerror;
              end if;

        -- Full declaration
        when etd_full do
            ce^.seterror({CCERR=}000201,ce_dupdecl);
            ce^.setparam(entityident_to_string(id^));
            ce^.setinfo(hint_dupdecl);
            ce^.loadpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;

        when others do verify({VERIFY=}000151,true);
        end case;

      -- musí se shodovat specifikace abstract
      if srch.psym^.is_abstract<>abstract_present then
        ce^.seterror({CCERR=}000202,ce_abstract_must_match);
        ce^.loadpos;
        end if;

      -- teď už je jasné, že by to mělo být dokončení deklarace
      curr:=srch.psym;

      -- primární kontext
      curr_context:=sym_primary_context(curr^);

    -- symbol nenalezen
    else
      -- Musí to být úplná nebo public deklarace
      if decltype not in tdecltypeset:[tdt_default,tdt_public] then
        ce^.seterror({CCERR=}000203,ce_wrongdecl);
        ce^.setparam(entityident_to_string(id^));
        ce^.loadpos;
        {%%RESUME ce^.raiseerror;}
        ce^.resumeerror;
        end if;

      -- vytvořit a zařadit symbol
      sym_add_new_entity(context,etype,id,curr,curr_context);

      -- nastavit příznak ABSTRACT
      curr^.is_abstract:=abstract_present;

      -- pokud je deklarovaný prvek třída, nesmíme zapomenout,
      -- že je to současně i typ
      -- %%X Není tohle něco jako záplata ? Nebylo by lepší
      -- nastavovat příznak STYPE až ve vyhodnocení ?
      if etype=et_class then pentity_type(curr)^.stype:=dt_class; end if;

      -- nastavit alespoň nějakou pozici symbolu
      entity_set_position(curr^,etp_header,pos);

      -- zkontrolovat, zda entita nezastiňuje jinou, zděděnou
      if curr^.etype in tentitytypeset:[et_static,et_virtual,et_procedure,et_overload] then
        -- entita [curr] má definovaného předka
        if curr^.context.entity^.ancestor.isset then
          declare var
            srch2  : tentitysearch;              -- hledátko

          begin
            -- pokusit se vyhledat symbol v předkovi
            srch2.find_local(sym_primary_context(curr^.context.entity^.ancestor.getuentity^),id^,tentityvisibleset:[etv_public,etv_protected]);

            -- symbol byl nalezen -> nahlásit hint
            if srch2.psym<>nil then
              ce^.sethint(context,{CCERR=}000573,ch_declaration_hides_ancestor);
              ce^.setparam(entityident_to_string(id^));
              ce^.loadpos;
              end if;
            end declare;
          end if;
        end if;
      end if;

  -- jaká část deklarace se překládá
  case decltype
    -- Public body
    when tdt_public  do
        if curr^.declared=etd_none then curr^.declared:=etd_incomplete; end if;
        curr^.compiling:=etd_public;
        curr_context.region^.vsect:=etv_public;

    -- Private body
    when tdt_private do
        curr^.compiling:=etd_full;
        curr_context.region^.vsect:=etv_private;

    -- Incomplete declaration/Full body
    when tdt_default do
        -- byla již zpracována nějaká část deklarace => musí to být Full body
        if curr^.declared<>etd_none then
      {
        -- je to čistě abstraktní deklarace => musí to být Full body
        or else (curr^.is_abstract and declinfo[etype].can_abstract=tad_pure) then 
      }   curr^.compiling:=etd_full;
          end if;

    when others do verify({VERIFY=}000152,true);
    end case;

  -- vyhodnotit již zpracovanou část deklarace
  if curr^.declared<>etd_none then e_symbol(curr,pos,curr^.declared,true); end if;

  -- poznačit, že je symbol překládán
  curr^.compile+tentitycompileset:[etc_compiling];

#if #environment compiler_version;<>'4.0.3.14' then;
  declare 
    message tag_error : exception;
  begin
    if curr^.context.entity^:tag<>context.entity^:tag then
      raise tag_error;
      end if;
    end declare;
#end if;
  end d_create;



----------------------------------------------------------------------------------------------------
procedure d_create_at_position =
-- Začátek deklarace a vytvoření symbolu.
----------------------------------------------------------------------------------------------------
begin
  -- vytvořit a zařadit symbol
  sym_add_new_entity(context,etype,id,curr,curr_context);

  -- nastavit alespoň nějakou pozici symbolu
  entity_set_position(curr^,etp_header,pos);

  -- jaká část deklarace se překládá
  curr^.compiling:=etd_full;

  -- poznačit, že je symbol překládán
  curr^.compile+tentitycompileset:[etc_compiling];
  end d_create_at_position;



----------------------------------------------------------------------------------------------------
procedure d_create_without_name =
-- Začátek deklarace bez zpracování případného jména entity.
----------------------------------------------------------------------------------------------------
begin
  -- pozice deklarace začínající klíčovým slovem
  getlexposall(pos,ll_curr);

  -- vytvořit a zařadit symbol
  sym_add_new_entity(context,etype,id,curr,curr_context);

  -- nastavit alespoň nějakou pozici symbolu
  entity_set_position(curr^,etp_header,pos);

  -- jaká část deklarace se překládá
  if declinfo[etype].parts=tdp_1
    then curr^.compiling:=etd_full;
    else curr^.compiling:=etd_none{etd_incomplete};
    end if;

  -- poznačit, že je symbol překládán
  curr^.compile+tentitycompileset:[etc_compiling];
  end d_create_without_name;



----------------------------------------------------------------------------------------------------
procedure d_create_internal =
-- Začátek deklarace a vytvoření interního symbolu.
----------------------------------------------------------------------------------------------------
begin
  -- vytvořit a zařadit symbol
  sym_add_new_entity(context,etype,id,curr,curr_context);

  -- jaká část deklarace se překládá
  if declinfo[etype].iparts=tdp_1
    then curr^.compiling:=etd_full;
    else curr^.compiling:=etd_none;
    end if;

  -- poznačit, že je symbol překládán
  curr^.compile+tentitycompileset:[etc_compiling];

  -- poznačit, že se jedná o interní symbol
  curr^.compile+tentitycompileset:[etc_generated];
  end d_create_internal;



----------------------------------------------------------------------------------------------------
procedure d_create_temporary_type =
-- Vytvoří nový dočasný typ a dosadí implicitní hodnoty specifikace.
----------------------------------------------------------------------------------------------------
begin
  -- vytvořit
  d_create_at_position(context,pentity(ptyp),ptyp_context,et_type,nil,nil);

  -- počáteční naplnění entity
  ptyp^.tflags+typeflagsset:[tf_temp];

  -- dosadit implicitní hodnoty do specifikace
  ptyp^.stype:=stype;
  ptyp^.size:=dsize;
  case stype
    when dt_uniint do
        -- nic nedělat

    when dt_unireal do
        -- nic nedělat

    when dt_unilogical do
        -- nic nedělat

    when dt_unichar do
        -- nic nedělat

    when dt_uniarray do
        -- nic nedělat

    when dt_signed,dt_unsigned do
        -- velikost v bitech
        ptyp^.bits:=unidata_bytes_to_bits(dsize);

        -- doplnit meze
        cpu^.getordparams1(ptyp^.stype,ptyp^.bits,ptyp^.size,ptyp^.lval,ptyp^.hval);

    when dt_pointer do
        -- nic nedělat

    when dt_tag do
        -- nic nedělat

    when dt_string do
        -- nic nedělat
{
    when dt_signed do
        pspecsigned(ptyp^.s)^.bits:=dsize*8;
        with pspecsigned(ptyp^.s)^ do case dsize
          1 : begin iiloadl(lval,-128);       iiloadl(hval,127);        end;
          2 : begin iiloadl(lval,-32768);     iiloadl(hval,32767);      end;
          4 : begin iiloadl(lval,minlongint); iiloadl(hval,2147483647); end;
          end case;
        pspecbase(ptyp^.s)^.base:=ptyp;
        end when;
    when dt_unsigned do
        pspecunsigned(ptyp^.s)^.bits:=dsize*8;
        with pspecunsigned(ptyp^.s)^ do case dsize
          1 : begin iloadl(lval,$00);         iloadl(hval,$FF);         end;
          2 : begin iloadl(lval,$0000);       iloadl(hval,$FFFF);       end;
          4 : begin iloadl(lval,$00000000);   iloadl(hval,$FFFFFFFF);   end;
          end case;
        pspecbase(ptyp^.s)^.base:=ptyp;
        end when;
    when dt_enum do
        pspecenum(ptyp^.s)^.bits:=dsize*8;
        end when;
    when dt_char do
        pspecchar(ptyp^.s)^.bits:=dsize*8;
        with pspecchar(ptyp^.s)^ do case dsize
          1 : begin iloadl(lval,$00);         iloadl(hval,$FF);         end;
          2 : begin iloadl(lval,$0000);       iloadl(hval,$FFFF);       end;
          4 : begin iloadl(lval,$00000000);   iloadl(hval,$FFFFFFFF);   end;
          end case;
        pspecbase(ptyp^.s)^.base:=ptyp;
        end when;
    when dt_boolean     do
        pspecboolean(ptyp^.s)^.bits:=dsize*8;
        iloadl(pspecboolean(ptyp^.s)^.lval,$0);
        iloadl(pspecboolean(ptyp^.s)^.hval,$1);
        pspecbase(ptyp^.s)^.base:=ptyp;
        end when;
    when dt_string, dt_ustring do
        pspecstring(ptyp^.s)^.lsize:=lstrindex;
        end when;
    when dt_pointer     do
        pspecpointer(ptyp^.s)^.acc:=acc_data;
        end when;
    when dt_set do
        -- nic nedělat
        end when;
}
    when others do verify({VERIFY=}000001,true);
    end case;
  end d_create_temporary_type;



----------------------------------------------------------------------------------------------------
procedure d_create_implicit_type =
-- Vytvoří nový implicitně deklarovaný typ.
-- Implicitně deklarovaný typ je tagged.
----------------------------------------------------------------------------------------------------
begin
  -- vytvořit typ na uvedené pozici
  d_create_at_position(context,ptyp,ptyp_context,et_type,nil,pos);

  -- doplnit datový typ
  ptyp^.stype:=stype;

  -- odvodit druh typu
  if stype in dts_regular then ptyp^.tkind:=tk_regular;
  elsif stype in dts_singular then ptyp^.tkind:=tk_singular;
  elsif stype<>dt_undef then verify({VERIFY=}000776,true);
  end if;
  
  -- implicitně deklarovaný typ je vždy tagged
  ptyp^.tflags:=[tf_tagged];
  end d_create_implicit_type;



----------------------------------------------------------------------------------------------------
procedure d_create_region =
-- Vytvoří nový deklarativní regionu v aktuálním kontextu.
----------------------------------------------------------------------------------------------------
begin
  -- vytvořit a přidat region
  sym_add_new_region(context,region,region_context);

  -- viditelnost
  region^.vsect:=vsect;
  end d_create_region;



----------------------------------------------------------------------------------------------------
procedure d_get_attribute_context =
-- Získá atributový kontext entity. Pokud ještě neexistuje, tak ho vytvoří.
----------------------------------------------------------------------------------------------------
begin
  -- pokud ještě neexistuje, tak vytvořit
  if curr.regions[rc_attribute]=nil then
    sym_new_region(rt_attribute,curr.regions[rc_attribute]);
    end if;

  -- sestavit kontext
  attr_context:=sym_build_context(^curr,curr.regions[rc_attribute]);
  end d_get_attribute_context;



----------------------------------------------------------------------------------------------------
procedure d_next =
-- Překlad další části deklarace.
----------------------------------------------------------------------------------------------------
var
  container        : pentity;                    -- kontejner entity [curr]

begin
  verify({VERIFY=}000153,curr.compiling<>etd_none);

  -- pozice
  getlexpos(pos.e,ll_prev,true);

  -- je přeložena dopředná deklarace
  curr.declared:=etd_incomplete;

  -- bude se překládat úplná deklarace
  curr.compiling:=etd_full;

  -- dosadit pozici hlavičky
  entity_set_position(curr,etp_header,pos);

  -- vyhodnotit
  e_symbol(^curr,pos,curr.declared,true);

  -- začátek další části deklarace
  -- (pro jistotu i konec)
  getlexposall(pos,ll_curr);

  -- je to entita obsahující kód?
  if curr.etype in ets_enclosed then
    -- získat kontejner entity [curr]
    container:=sym_get_container(^curr);

    -- úplná deklarace v public části je považována za neobvyklou konstrukci
    if curr.etype in ets_enclosed and (container<>nil and then container^.compiling=etd_public) then
      ce^.setwarning(curr.context,{CCERR=}000571,cw_strange_design);
      ce^.loadpos;
      end if;
    end if;
  end d_next;



----------------------------------------------------------------------------------------------------
procedure d_next_internal =
-- Překlad další části deklarace interního symbolu.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}000559,curr.compiling<>etd_none);

  -- je přeložena dopředná deklarace
  curr.declared:=etd_incomplete;

  -- bude se překládat úplná deklarace
  curr.compiling:=etd_full;

  -- vyhodnotit
  e_symbol(^curr,nullpos,curr.declared,true);
  end d_next_internal;



----------------------------------------------------------------------------------------------------
procedure d_rollback =
-- Napraví, co provedlo D_NEXT.
----------------------------------------------------------------------------------------------------
begin
  -- překládala se dopředná deklarace
  curr.compiling:=etd_incomplete;

  -- a taky se přeložila
  curr.declared:=etd_incomplete;
  end d_rollback;



----------------------------------------------------------------------------------------------------
procedure d_end =
-- Konec deklarace symbolu.
----------------------------------------------------------------------------------------------------
begin
  -- není to čistě abstraktní deklarace ?
  if curr.is_abstract and then declinfo[curr.etype].can_abstract=tad_pure

    -- ano => nejprve odsimulovat neúplnou deklaraci
    then
      d_next(curr,pos);

    -- ne => jen zjistit aktuální pozici a dokončit deklaraci
    else
      getlexpos(pos.e,ll_curr,true);
      end if;

  -- konec deklarace
  d_end_at_position(curr,pos,true);
  end d_end;



----------------------------------------------------------------------------------------------------
procedure d_end_at_position =
-- Konec deklarace symbolu na uvedené pozici.
----------------------------------------------------------------------------------------------------
begin
  case curr.compiling
    -- neví se
    when etd_none do
        if declinfo[curr.etype].parts<>tdp_1

          -- je to jasně Incomplete declaration
          -- (jinak by D_NEXT nastavilo COMPILING=SD_FULL)
          then
            curr.declared:=etd_incomplete;

            -- pozice
            entity_set_position(curr,etp_header,pos);

          -- je to jasně Full declaration
          else
            curr.declared:=etd_full;

            -- pozice
            entity_set_position(curr,etp_def,pos);
            end if;

    -- Incomplete declaration
    when etd_incomplete  do
        curr.declared:=etd_incomplete;

        -- pozice
        entity_set_position(curr,etp_header,pos);

    -- Public body declaration
    when etd_public do
        curr.declared:=etd_public;

        -- pozice
        entity_set_position(curr,etp_spec,pos);

    -- Full declaration
    when etd_full do
        curr.declared:=etd_full;

        -- viditelnost úplné deklarace
        curr.full:=curr.context.region^.vsect;

        -- pozice
        entity_set_position(curr,etp_def,pos);

    when others do verify({VERIFY=}000154,true);
    end case;
  
  -- je požadováno vyhodnocení deklarace entity ?
  if evaluate

    -- ano => poctivě vyhodnotit
    then e_symbol(^curr,pos,curr.declared,curr.declared=etd_full);

    -- ne => prohlásit za vyhodnocené
    else sym_set_evaluated(^curr);
    end if;

  -- poznačit, že symbol již není překládán
  curr.compile-tentitycompileset:[etc_compiling];
  curr.compiling:=etd_none;
  end d_end_at_position;



----------------------------------------------------------------------------------------------------
procedure d_end_internal =
-- Konec deklarace interního symbolu.
----------------------------------------------------------------------------------------------------
begin
  case curr.compiling
    -- neví se
    when etd_none do
        if declinfo[curr.etype].iparts<>tdp_1

          -- je to jasně Incomplete declaration
          -- (jinak by D_NEXT nastavilo COMPILING=SD_FULL)
          then
            curr.declared:=etd_incomplete;

          -- je to jasně Full declaration
          else
            curr.declared:=etd_full;
            end if;

    -- Incomplete declaration
    when etd_incomplete  do
        curr.declared:=etd_incomplete;

    -- Public body declaration
    when etd_public do
        curr.declared:=etd_public;

    -- Full declaration
    when etd_full do
        curr.declared:=etd_full;

        -- viditelnost úplné deklarace
        curr.full:=curr.context.region^.vsect;

    when others do verify({VERIFY=}000560,true);
    end case;

  -- je požadováno vyhodnocení deklarace entity ?
  if evaluate

    -- ano => poctivě vyhodnotit
    then e_symbol(^curr,nullpos,curr.declared,curr.declared=etd_full);

    -- ne => prohlásit za vyhodnocené
    else sym_set_evaluated(^curr);
    end if;

  -- poznačit, že symbol již není překládán
  curr.compile-tentitycompileset:[etc_compiling];
  curr.compiling:=etd_none;
  end d_end_internal;



----------------------------------------------------------------------------------------------------
procedure d_end_temporary_type =
-- Konec deklarace dočasného typu.
----------------------------------------------------------------------------------------------------
begin
  d_end_at_position(curr,nil,false);
  end d_end_temporary_type;



----------------------------------------------------------------------------------------------------
procedure d_end_implicit_type =
-- Konec deklarace implicitně deklarovaného typu.
----------------------------------------------------------------------------------------------------
begin
  d_end_at_position(curr,pos,evaluate);
  end d_end_implicit_type;



end cd_create;
