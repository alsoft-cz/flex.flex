----------------------------------------------------------------------------------------------------
module private cx_phase =
-- P©eklada‡ Flexu.
-- Prov z n¡ jednotliv˜ch f z¡ p©ekladu.
----------------------------------------------------------------------------------------------------
-- Ondra : 29.08.2001 : Vytvo©il
----------------------------------------------------------------------------------------------------

with
  cx_form,cx_type,cx_opt,cx_final;

----------------------------------------------------------------------------------------------------
procedure dophase (
    curr           : in tcontext;                -- p©ekl dan˜ prvek
    expr           : in out pexpnode;            -- v˜raz
    ptyp           : in typeview;                -- po‘adovan˜ typ v˜razu (EP_TYPE
    usage          : in expusage;                -- pou‘it¡ v˜razu (pro EP_FINAL)
    info           : in expinfo) =               -- informace o pr–bˆhu anal˜zy
-- Proveden‚ jedn‚ f ze p©ekladu.
----------------------------------------------------------------------------------------------------
begin
  case info.phase
    when ep_form  do a_form (curr,expr,info);
    when ep_type  do a_type (curr,expr,ptyp,info);
    when ep_opt   do a_opt  (curr,expr,info);
    when ep_final do a_final(curr,expr,ptyp,usage,info);
    when others   do verify(257,true);
    end case;
  end dophase;



----------------------------------------------------------------------------------------------------
procedure x_phase_next =
-- Nad zadan˜m v˜razem provede zb˜vaj¡c¡ f ze p©ekladu po‡¡naje INFO.PHASE.
----------------------------------------------------------------------------------------------------
var
  info2            : expinfo;                    -- informace pro novˆj¨¡ f ze p©ekladu

begin
  -- prov‚st £vodn¡ f zi
  dophase(curr,expr,ptyp,usage,info);
  if expr^.zprac<info.phase then
    return;
    end if;

  -- p©ipravit informace pro dal¨¡ f ze
  info2:=info;

  while info2.phase<lastphase{info2.phase:last} loop
    -- dal¨¡ f ze
    succ info2.phase;

    -- prov‚st
    dophase(curr,expr,ptyp,usage,info2);

    -- povedlo se ?
    if expr^.zprac<info2.phase then
      return;
      end if;
    end loop;
  end x_phase_next;



----------------------------------------------------------------------------------------------------
procedure x_phase_prev =
-- Nad zadan˜m v˜razem provede v¨echny f ze p©ekladu a‘ do INFO.PHASE.
----------------------------------------------------------------------------------------------------
var
  info2            : expinfo;                    -- informace pro star¨¡ f ze p©ekladu

begin
  -- p©ipravit informace pro p©edchoz¡ f ze
  info2:=info;
  info2.phase:=succ ep_syntax;

  while info2.phase<info.phase loop
    -- prov‚st
    dophase(curr,expr,ptyp,usage,info2);

    -- povedlo se ?
    if expr^.zprac<info2.phase then
      return;
      end if;

    -- dal¨¡ f ze
    succ info2.phase;
    end loop;

  -- prov‚st koncovou f zi
  dophase(curr,expr,ptyp,usage,info);
  if expr^.zprac<info.phase then
    return;
    end if;
  end x_phase_prev;



end cx_phase;