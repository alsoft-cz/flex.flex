----------------------------------------------------------------------------------------------------
module public cc_lex =
-- Překladač Flexu.
-- Lexikální analyzátor.
----------------------------------------------------------------------------------------------------
-- Ondra : 25.04.2000 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  standard,
  cc_def,
  cc_def.cc_unitype,
  cc_base;

use
  cc_def.cc_entity;

extend
  cc_def.cc_lexsym;

type
  -- chování RESUMELEX při nalezení LEX
  tresumelex       = enum
      rl_skip;                 -- přeskočit
      rl_leave;                -- ponechat ve zdrojáku
      end enum;

  -- chování RESUMELEX při nalezení TERM
  tresumeterm  = enum
      rt_skip;                 -- přeskočit
      rt_leave;                -- ponechat ve zdrojáku
      rt_resume;               -- ponechat ve zdrojáku a RESUME_ERROR
      rt_fail;                 -- vyvolat COMPILER_ERROR
      end enum;

----------------------------------------------------------------------------------------------------
procedure getlex (
    context        : in cc_entity.tcontext;      -- aktuální kontext
    lex            : out lexsym);                -- získaný lexikální element
-- Přečte ze vstupu jeden lexikální element.
----------------------------------------------------------------------------------------------------
procedure ungetlex;
-- Posledně přečtený lexikální element vrátí zpět do vstupu.
-- Flex je LL(1), takže se lze vrátit vždy jen o jeden symbol.
----------------------------------------------------------------------------------------------------
procedure looklex (
    context        : in cc_entity.tcontext;      -- aktuální kontext
    lex            : out lexsym);
-- Přečte ze vstupu jeden lexikální element, ale neodstraní ho ze vstupu (getlex+ungetlex).
----------------------------------------------------------------------------------------------------
procedure checklex (
    context        : in cc_entity.tcontext;      -- aktuální kontext
    lex            : in lexsym)                  -- očekávaný lexikální element
    return t_logical;
-- Podívá se na následující lexikální element, a pokud je shodný se zadaným, tak vrátí True
-- a odstraní ho ze vstupu. V opačném případě vrátí False a vstup nezmění.
----------------------------------------------------------------------------------------------------
procedure ignorelex (
    context        : in cc_entity.tcontext;      -- aktuální kontext
    lex            : in lexsym);                 -- ignorovatelný lexikální element
-- Je-li následující symbol LEX, tak ho odignoruje, jinak ponechá.
----------------------------------------------------------------------------------------------------
procedure followlex (
    context        : in cc_entity.tcontext;      -- aktuální kontext
    lex            : in lexsym)                  -- očekávaný lexikální element
    return t_logical;
-- Přečte ze vstupu lexikální element a zkontroluje ho proti zadanému. Pokud se shodují, vrátí
-- False a element odstraní ze vstupu. V opačném případě vrátí True a element a) ponechá ve
-- vstupu, b) odstraní ze vstupu, pokud je podobný zadanému.
----------------------------------------------------------------------------------------------------
procedure followendkw (
    context        : in cc_entity.tcontext;      -- aktuální kontext
    kw             : in lexsym)                  -- očekávané klíčové slovo za ENDem
    return t_logical;
-- Přečte ze vstupu sekvenci "END <klíčové slovo>".
-- Procedura se chová obdobně jako FOLLOWLEX.
----------------------------------------------------------------------------------------------------
procedure followendid (
    context        : in cc_entity.tcontext;      -- aktuální kontext
    id             : in tentityident)            -- očekávaný identifikátor za ENDem
    return t_logical;
-- Přečte ze vstupu sekvenci "END <identifikátor>".
-- Procedura se chová obdobně jako FOLLOWLEX.
----------------------------------------------------------------------------------------------------
procedure resumelex (
    context        : in cc_entity.tcontext;      -- aktuální kontext
    xlex           : out lexsym;                 -- na jaký symbol to skutečně skončilo 
    lex            : in lexsym;                  -- hledany symbol                      
    rl             : in tresumelex;              -- chování při nalezení LEX            
    term           : in lexsym;                  -- terminátor                          
    rt             : in tresumeterm);            -- chování při nalezení TERM           
-- Vyčítá symboly, dokud nenarazí na hledaný symbol nebo na terminátor.       
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
procedure getlexpos (
    pos            : out lexpos;                 -- pozice
    level          : in lexlevel;                -- 1-tento, 2-předchozí
    after          : in t_logical);              -- T-znak za prvkem
-- Vrátí pozici lexikálního prvku.
----------------------------------------------------------------------------------------------------
procedure getlexposall (
    pos            : out lexposblock;            -- pozice
    level          : in lexlevel);               -- 1-tento, 2-předchozí
-- Vrátí pozici lexikálního prvku (začátek i konec).
----------------------------------------------------------------------------------------------------
procedure cmplexposb (
    pos1           : in lexpos;
    pos2           : in lexpos)
                   return t_logical;
-- True <=> POS1 < POS2
----------------------------------------------------------------------------------------------------
procedure cmplexposa (
    pos1           : in lexpos;
    pos2           : in lexpos)
                   return t_logical;
-- True <=> POS1 > POS2
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
procedure getlexid return pentityident;
-- Posledně přečtený lexikální element: identifikátor.
----------------------------------------------------------------------------------------------------
procedure getlextxt return plexcharustr;
-- Posledně přečtený lexikální element: textový tvar lexikálního elementu ze vstupu.
----------------------------------------------------------------------------------------------------
procedure getlexui return tuniint;
-- Posledně přečtený lexikální element: hodnota celočíselného literálu.
----------------------------------------------------------------------------------------------------
procedure getlexur return tunireal;
-- Posledně přečtený lexikální element: hodnota reálného literálu.
----------------------------------------------------------------------------------------------------
procedure getlexstring return plexaggregate;
-- Posledně přečtený lexikální element: hodnota znakového agregátu.
----------------------------------------------------------------------------------------------------
procedure getlexcode return t_unsigned;
-- Posledně přečtený lexikální element: hodnota doplňkového kódu.
----------------------------------------------------------------------------------------------------
procedure getlexval (
    val            : out lexval);
-- Posledně přečtený lexikální element: celá hodnota.
----------------------------------------------------------------------------------------------------
procedure setlex (
    lex            : in lexsym);
-- Změní posledně přečtený lexikální element.
----------------------------------------------------------------------------------------------------
procedure setlexid (
    id             : in pentityident);
-- Změní identifikátor související s posledně přečteným lexikálním elementem.
----------------------------------------------------------------------------------------------------
procedure setlexval (
    val            : in lexval);
-- Změní hodnotu posledně přečteného lexikálního symbolu.
----------------------------------------------------------------------------------------------------
{
----------------------------------------------------------------------------------------------------
procedure getlexval (var val : lexval) =
-- Získá hodnotu posledně přečteného prvku.
----------------------------------------------------------------------------------------------------
procedure setlexval (const val : lexval) =
-- Změní hodnotu posledně přečteného lexikálního symbolu.
----------------------------------------------------------------------------------------------------
}
----------------------------------------------------------------------------------------------------
procedure lex_set_default_lexer;
-- Rezerva do budoucna: nastaví implicitní lexikální analyzátor. Zatím pouze alokuje standardní
-- lexikální analyzátor.
----------------------------------------------------------------------------------------------------
procedure lex_pop_default_lexer;
-- Zruší implicitní lexikální analyzátor.
----------------------------------------------------------------------------------------------------



-- dopředné deklarace
class abstract c_lex_behavior; type p_lex_behavior = ^class c_lex_behavior;



----------------------------------------------------------------------------------------------------
class public abstract c_lex_behavior = 
-- Policy třída implementující modifikaci chování lexikálního analyzátoru.
----------------------------------------------------------------------------------------------------

    var
      -- režim ohlašování konců řádků (T-hlásit, F-nehlásit)
      report_eol   : protected t_logical := false;

    ------------------------------------------------------------------------------------------------
    virtual abstract search_keyword (
        txt        : in tentityident;            -- textová reprezentace klíčového slova
        lex        : in out lexsym;              -- lexikální element
        val        : in out lexval);             -- hodnota elementu
    -- Vyhledání klíčového slova podle jeho textové reprezentace.
    ------------------------------------------------------------------------------------------------
    
    end c_lex_behavior;



----------------------------------------------------------------------------------------------------
class public c_lex_behavior_flex = extend c_lex_behavior;
-- Modifikace chování lexikálního analyzátoru: Flex - nehlásí konce řádků, překládá klíčová slova.
----------------------------------------------------------------------------------------------------

    end c_lex_behavior_flex;



----------------------------------------------------------------------------------------------------
class public c_lex_behavior_plain = extend c_lex_behavior;
-- Modifikace chování lexikálního analyzátoru: Nic - hlásí konce řádků, nepřekládá klíčová slova.
----------------------------------------------------------------------------------------------------

    end c_lex_behavior_plain;


end cc_lex;
