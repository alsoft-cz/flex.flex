----------------------------------------------------------------------------------------------------
module private cx_make =
-- Překladač Flexu.
-- Vytváření kompilátorem generovaných uzlů stromu.
----------------------------------------------------------------------------------------------------
-- Ondra : 12.11.2001 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  cx_imm,cx_rta,cx_util;

----------------------------------------------------------------------------------------------------
procedure x_make_op_assign =
-- :=
----------------------------------------------------------------------------------------------------
begin
  -- alokovat uzel
  newnode(pexpnode(result),info,nt_operator);

  -- operátor
  result^.oper:=op_assign;
  result^.assign:=true;

  -- operandy
  result^.join(el,er);

  -- typ výrazu
  result^.t:=el^.t;

  -- třída
  result^.nclass:=nc_var;

  -- určit dynamické atributy
  x_rta_provided_attributes(curr,result);
  x_rta_check_attributes(curr,result);
  end x_make_op_assign;



----------------------------------------------------------------------------------------------------
procedure x_make_op_logical (
    curr           : in tcontext;                -- překládaný prvek
    info           : in expinfo;                 -- kontext
    oper           : in expopertype;             -- operátor
    el             : in pexpnode;                -- operandy
    er             : in pexpnode)                -- operandy
                   return pexpoper =             -- sestavený uzel
-- Operátor s typem výsledku Univerzální logical.
----------------------------------------------------------------------------------------------------
begin
  -- alokovat uzel
  newnode(pexpnode(result),info,nt_operator);

  -- operátor
  result^.oper:=oper;

  -- operandy
  result^.join(el,er);

  -- typ výrazu
  result^.t.init(curr,def_unilogical);

  -- třída
  result^.nclass:=nc_value;

  -- určit dynamické atributy
  x_rta_provided_attributes(curr,result);
  x_rta_check_attributes(curr,result);
  end x_make_op_logical;



----------------------------------------------------------------------------------------------------
procedure x_make_op_eq =
-- =
----------------------------------------------------------------------------------------------------
begin
  result:=x_make_op_logical(curr,info,op_eq,el,er);
  end x_make_op_eq;



----------------------------------------------------------------------------------------------------
procedure x_make_op_ne =
-- <>
----------------------------------------------------------------------------------------------------
begin
  result:=x_make_op_logical(curr,info,op_ne,el,er);
  end x_make_op_ne;



----------------------------------------------------------------------------------------------------
procedure x_make_op_and_then =
-- AND THEN
----------------------------------------------------------------------------------------------------
begin
  -- vygenerovat výraz
  result:=x_make_op_logical(curr,info,op_and_then,el,er);

  -- AND THEN je obecně n-ární příkaz
  result^.arity:=eoa_n;
  end x_make_op_and_then;



----------------------------------------------------------------------------------------------------
procedure x_make_op_unary =
-- PRED
----------------------------------------------------------------------------------------------------
begin
  -- alokovat uzel
  newnode(pexpnode(result),info,nt_unary);

  -- operátor
  result^.oper:=operator;

  -- operand
  result^.join(el);

  -- typ výrazu
  result^.t:=el^.t;

  -- třída
  result^.nclass:=nc_var;

  -- určit dynamické atributy
  x_rta_provided_attributes(curr,result);
  x_rta_check_attributes(curr,result);
  end x_make_op_unary;



----------------------------------------------------------------------------------------------------
procedure x_make_op_left (
    curr           : in tcontext;                -- překládaný prvek
    info           : in expinfo;                 -- kontext
    oper           : in expopertype;             -- bitový operátor
    el             : in pexpnode;                -- operandy
    er             : in pexpnode;                -- operandy
    assign         : in t_logical)               -- T-přiřazovací operátor
                   return pexpoper =             -- sestavený uzel
-- Operátor s typem výsledku podle levého operandu.
----------------------------------------------------------------------------------------------------
begin
  -- alokovat uzel
  newnode(pexpnode(result),info,nt_operator);

  -- operátor
  result^.oper:=oper;
  result^.assign:=assign;

  -- operandy
  result^.join(el,er);

  -- typ výrazu
  result^.t:=el^.t;

  -- třída
  result^.nclass:=nc_value;

  -- určit dynamické atributy
  x_rta_provided_attributes(curr,result);
  x_rta_check_attributes(curr,result);
  end x_make_op_left;



----------------------------------------------------------------------------------------------------
procedure x_make_op_bit_or =
-- BIT OR
----------------------------------------------------------------------------------------------------
begin
  -- vygenerovat výraz
  result:=x_make_op_left(curr,info,op_bitor,el,er,assign);

  -- BIT OR je obecně n-ární příkaz
  result^.arity:=eoa_n;
  end x_make_op_bit_or;



----------------------------------------------------------------------------------------------------
procedure x_make_op_bit_and =
-- BIT AND
----------------------------------------------------------------------------------------------------
begin
  -- vygenerovat výraz
  result:=x_make_op_left(curr,info,op_bitand,el,er,false);

  -- BIT AND je obecně n-ární příkaz
  result^.arity:=eoa_n;
  end x_make_op_bit_and;



----------------------------------------------------------------------------------------------------
procedure x_make_component_var =
-- Proměnná.
----------------------------------------------------------------------------------------------------
var
  ptyp             : pentity_type;               -- typ proměnné

begin
  -- alokovat uzel
  newnode(pexpnode(result),info,nt_component);

  -- uložit proměnnou
  result^.id:=pvar^.id;
  result^.s.set_entity(pvar);

  -- typ výrazu (proměnná nemusí mít nutně typ)
  ptyp:=pvar^.typ.getutype;
  if ptyp=nil
    then result^.t.initunchecked(nil);
    else result^.t.init(curr,ptyp);
    end if;

  -- třída
  result^.nclass:=nc_var;

  -- určit dynamické atributy
  x_rta_provided_attributes(curr,result);
  x_rta_check_attributes(curr,result);
  end x_make_component_var;



----------------------------------------------------------------------------------------------------
procedure x_make_component_type =
-- Typ.
----------------------------------------------------------------------------------------------------
begin
  -- alokovat uzel
  newnode(pexpnode(result),info,nt_component);

  -- uložit typ
  result^.id:=ptyp^.id;
  result^.s.set_entity(ptyp);

  -- typ výrazu
  if ptyp=nil
    then result^.t.initunchecked(nil);
    else result^.t.init(curr,ptyp);
    end if;

  -- třída
  result^.nclass:=nc_type;

  -- určit dynamické atributy
  x_rta_provided_attributes(curr,result);
  x_rta_check_attributes(curr,result);
  end x_make_component_type;



----------------------------------------------------------------------------------------------------
procedure x_make_component_message =
-- Zpráva.
----------------------------------------------------------------------------------------------------
begin
  -- alokovat uzel
  newnode(pexpnode(result),info,nt_component);

  -- uložit zprávu
  result^.id:=pmsg^.id;
  result^.s.set_entity(pmsg);

  -- typ výrazu
  result^.t.init(curr,pmsg^.typ.getctype);

  -- třída
  result^.nclass:=nc_message;

  -- určit dynamické atributy
  x_rta_provided_attributes(curr,result);
  x_rta_check_attributes(curr,result);
  end x_make_component_message;



----------------------------------------------------------------------------------------------------
procedure x_make_component_selector =
-- Selektor recordu/třídy.
----------------------------------------------------------------------------------------------------
begin
  -- alokovat uzel
  newnode(pexpnode(result),info,nt_component);

  -- zařadit podvýraz
  result^.sub:=el;

  -- uložit proměnnou
  result^.id:=pitem^.id;
  result^.s.set_entity(pitem);

  -- typ výrazu (složka třídy/recordu jistě nějaký typ má)
  result^.t.init(curr,pitem^.typ.getctype);

  -- třída
  result^.nclass:=el^.nclass;

  -- určit dynamické atributy
  x_rta_provided_attributes(curr,result);
  x_rta_check_attributes(curr,result);
  end x_make_component_selector;



----------------------------------------------------------------------------------------------------
procedure x_make_component_index =
-- Selektor recordu/třídy.
----------------------------------------------------------------------------------------------------
begin
  -- alokovat uzel
  newnode(pexpnode(result),info,nt_index);

  -- zařadit podvýrazy
  result^.join(prefix,index);

  -- typ výrazu
  result^.t.init(curr,prefix^.t.getctype^.base.getctype);

  -- třída
  result^.nclass:=prefix^.nclass;

  -- výsledkem je jednotlivý prvek
  result^.itype:=eix_component;

  -- určit dynamické atributy
  x_rta_provided_attributes(curr,result);
  x_rta_check_attributes(curr,result);
  end x_make_component_index;



----------------------------------------------------------------------------------------------------
procedure x_make_ref =
-- Reference.
----------------------------------------------------------------------------------------------------
begin
  -- alokovat uzel
  newnode(pexpnode(result),info,nt_ref);

  -- zařadit podvýraz
  result^.sub:=el;

  -- vypočítat typ reference a třídu výrazu
  x_set_ref_type(curr,result);

  -- určit dynamické atributy
  x_rta_provided_attributes(curr,result);
  x_rta_check_attributes(curr,result);
  end x_make_ref;



----------------------------------------------------------------------------------------------------
procedure x_make_deref =
-- Dereference.
----------------------------------------------------------------------------------------------------
begin
  -- poznamenat do podvýrazu, že bude dereferencován
  el^.nflags+nodeflagset:[nf_dereference];

  -- alokovat uzel
  newnode(pexpnode(result),info,nt_deref);

  -- zařadit podvýraz
  result^.sub:=el;

  -- typ výrazu (složka třídy/recordu jistě nějaký typ má)
  result^.t.init(curr,el^.t.getctype^.base.getctype);

  -- třída
  result^.nclass:=x_get_deref_nclass(el);

  -- určit dynamické atributy
  x_rta_provided_attributes(curr,result);
  x_rta_check_attributes(curr,result);
  end x_make_deref;



----------------------------------------------------------------------------------------------------
procedure x_make_this =
-- THIS.
----------------------------------------------------------------------------------------------------
begin
  -- alokovat uzel
  newnode(pexpnode(result),info,nt_this);

  -- typ výrazu (složka třídy/recordu jistě nějaký typ má)
  result^.t.init(curr,ptyp);

  -- třída
  result^.nclass:=nc_var;

  -- určit dynamické atributy
  x_rta_provided_attributes(curr,result);
  x_rta_check_attributes(curr,result);
  end x_make_this;



----------------------------------------------------------------------------------------------------
procedure x_make_call_spec =
-- Volání speciální metody.
----------------------------------------------------------------------------------------------------
begin
  --verify({VERIFY=}000580,not ((el<>nil) xor (pspec<>nil)));

  -- alokovat uzel
  newnode(pexpnode(result),info,nt_callspec);

  -- zařadit podvýrazy
  result^.qualified:=el<>nil;
  result^.join(el,arglist);

  -- uložit speciální metodu
  result^.spectype:=spectype;
  result^.spec:=pspec;

  -- výraz nemá typ

  -- třída: nic, nevrací hodnotu
  result^.nclass:=nc_none;

  -- určit dynamické atributy
  x_rta_provided_attributes(curr,result);
  x_rta_check_attributes(curr,result);
  end x_make_call_spec;



----------------------------------------------------------------------------------------------------
procedure x_make_call_rtl =
-- Přímé volání funkce RTL.
----------------------------------------------------------------------------------------------------
begin
  -- alokovat uzel
  newnode(pexpnode(result),info,nt_call_rtl);

  -- zařadit podvýrazy
  result^.qualified:=false;
  result^.join(nil,arglist);

  -- uložit RTL proceduru
  result^.rtl_proc:=rtl_proc;

  -- výraz nemá typ

  -- třída: nic, nevrací hodnotu
  result^.nclass:=nc_none;

  -- určit dynamické atributy
  x_rta_provided_attributes(curr,result);
  x_rta_check_attributes(curr,result);
  end x_make_call_rtl;



----------------------------------------------------------------------------------------------------
procedure x_make_send_message =
-- Sestavení zprávy (bez parametrů) pro odeslání.
----------------------------------------------------------------------------------------------------
begin
  -- alokovat uzel
  newnode(pexpnode(result),info,nt_send);

  -- zařadit podvýrazy
  result^.qualified:=true;
  result^.join(msg,nil);

  -- výraz nemá typ

  -- třída: nic, nevrací hodnotu
  result^.nclass:=nc_none;

  -- určit dynamické atributy
  x_rta_provided_attributes(curr,result);
  x_rta_check_attributes(curr,result);
  end x_make_send_message;



----------------------------------------------------------------------------------------------------
procedure x_make_attribute =
-- Jazykem definovaný atribut.
----------------------------------------------------------------------------------------------------
begin
  -- alokovat uzel
  newnode(pexpnode(result),info,nt_attrib);

  -- zařadit podvýraz
  result^.sub:=el;

  -- uložit atribute
  result^.aclass:=aclass;
  result^.atf:=atf;
  result^.ata:=ata;

  -- typ výrazu
  if ptyp=nil
    then result^.t.initunchecked(nil);
    else result^.t.init(curr,ptyp);
    end if;

  -- třída
  result^.nclass:=el^.nclass;

  -- určit dynamické atributy
  x_rta_provided_attributes(curr,result);
  x_rta_check_attributes(curr,result);
  end x_make_attribute;



----------------------------------------------------------------------------------------------------
procedure x_make_imm =
-- Přímá hodnota.
----------------------------------------------------------------------------------------------------
begin
  -- alokovat uzel
  newnode(pexpnode(result),info,nt_imm);
  result^.immkind:=immkind;

  -- uložit dodanou přímou hodnotu
  store_imm(result^.imm,imm);

  -- typ výrazu
  result^.t.init(curr,ptyp);

  -- třída
  result^.nclass:=nc_value;

  -- určit dynamické atributy
  x_rta_provided_attributes(curr,result);
  x_rta_check_attributes(curr,result);
  end x_make_imm;



----------------------------------------------------------------------------------------------------
procedure x_make_range =
-- Rozsah
----------------------------------------------------------------------------------------------------
begin
  -- alokovat uzel
  newnode(pexpnode(result),info,nt_range);

  -- meze
  result^.join(el,er);

  -- typ výrazu
  result^.rkind:=kind;

  -- typ výrazu
  result^.t.init(curr,ptyp);

  -- třída
  result^.nclass:=nc_composite;

  -- určit dynamické atributy
  x_rta_provided_attributes(curr,result);
  x_rta_check_attributes(curr,result);
  end x_make_range;



----------------------------------------------------------------------------------------------------
procedure x_make_imm_nil =
-- NIL.
----------------------------------------------------------------------------------------------------
begin
  -- alokovat uzel
  newnode(pexpnode(result),info,nt_imm);

  -- uložit NIL
  store_nil(result^.imm);

  -- typ výrazu
  result^.t.init(curr,ptyp);

  -- třída
  result^.nclass:=nc_value;

  -- určit dynamické atributy
  x_rta_provided_attributes(curr,result);
  x_rta_check_attributes(curr,result);
  end x_make_imm_nil;



----------------------------------------------------------------------------------------------------
procedure x_make_imm_uniint =
-- Univerzální integer.
----------------------------------------------------------------------------------------------------
begin
  -- alokovat uzel
  newnode(pexpnode(result),info,nt_imm);

  -- uložit číslo
  store_ordinal(result^.imm,ui);

  -- typ výrazu
  result^.t.init(curr,def_uniint);

  -- třída
  result^.nclass:=nc_value;

  -- určit dynamické atributy
  x_rta_provided_attributes(curr,result);
  x_rta_check_attributes(curr,result);
  end x_make_imm_uniint;



----------------------------------------------------------------------------------------------------
procedure x_make_param =
-- Položka seznamu výrazů typu EI_EXPR.
----------------------------------------------------------------------------------------------------
begin
  -- alokovat uzel
  newnode(pexpnode(result),info,nt_item);

  -- podvýraz
  result^.join(el,nil);

  -- doplnit údaje
  result^.itype:=ei_expr;
  result^.sym:=pparam;

  -- typ výrazu
  x_set_param_type(curr,pparam,result);

  -- třída
  result^.nclass:=el^.nclass;

  -- určit dynamické atributy
  x_rta_provided_attributes(curr,result);
  x_rta_check_attributes(curr,result);
  end x_make_param;



----------------------------------------------------------------------------------------------------
procedure x_make_task_var_slot =
-- Selektor slotu táskové proměnné.
----------------------------------------------------------------------------------------------------
begin
  -- alokovat uzel
  newnode(pexptaskvarslot(result),info,nt_task_var_slot);

  -- podvýraz
  result^.join(el);

  -- typ výrazu
  result^.settype(curr,ptyp);

  -- třída
  result^.nclass:=el^.nclass;

  -- určit dynamické atributy
  x_rta_provided_attributes(curr,result);
  x_rta_check_attributes(curr,result);
  end x_make_task_var_slot;



----------------------------------------------------------------------------------------------------
procedure x_make_fake_tag =
-- Fake tag interfacu třídy.
----------------------------------------------------------------------------------------------------
begin
  -- alokovat uzel
  newnode(pexpnode(result),info,nt_fake_tag);

  -- doplnit údaje
  result^.interface:=interface;

  -- typ výrazu
  result^.t.init(curr,inttype_tag);

  -- třída
  result^.nclass:=nc_value;

  -- určit dynamické atributy
  x_rta_provided_attributes(curr,result);
  x_rta_check_attributes(curr,result);
  end x_make_fake_tag;
end cx_make;
