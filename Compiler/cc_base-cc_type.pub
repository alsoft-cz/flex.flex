----------------------------------------------------------------------------------------------------
module public cc_type =
-- Překladač Flexu.
-- Operace s typy.
----------------------------------------------------------------------------------------------------
-- Ondra : 20.06.2001 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  standard,
  cc_def,cc_def.cc_entity,cc_def.cc_unitype;

----- %%TECH Úrovně typové kompatibility -----------------------------------------------------------
-- Pro určení typové kompatibility se používají následující stupně
-- 1. Nekompatibilní - typy jsou nekompatibilní a hodnoty nelze nijak
--        konvertovat
-- 2. Explicitně konvertibilní - konverzi hodnoty zdojového typu lze
--        explicitně provést jazykovou konstrukcí Kvalifikovaný výraz
-- 3. Konvertibilní - hodnotu zdrojového typu lze implicitně konvertovat na
--        hodnotu cílového typu za cenu změny binární reprezentace
-- 4. Dynamicky binárně shodné - hodnotu zdrojového typu lze implicitně
--        dynamicky konvertovat na hodnotu cílového typu (předat odkazem bez
--        změny binární reprezentace)
-- 5. Staticky binárně shodné - hodnotu zdrojového typu lze implicitně
--        staticky konvertovat na hodnotu cílového typu (předat hodnotou
--        bez změny binární reprezentace)
-- 6. Identické - porovnávané typy jsou stejné
----------------------------------------------------------------------------------------------------

type
  -- úrovně kompatibility
  tcomplevel       = enum
      tcl_incompatible;                          -- nekompatibilní typy
      tcl_convertible;                           -- konvertibilní
      tcl_dynamic_identical;                     -- dynamicky binárně shodné
      tcl_static_identical;                      -- staticky binárně shodné
      tcl_identical;                             -- shodné
      end enum;
  tcomplevelset    = set of tcomplevel;

type
  ----- %%TECH Třídy operací nad výrazy typů T1 a T2 -----------------------------------------------
  -- Každý operátor (a další konstrukty ve výrazu) patří do nějaké třídy
  -- operace, pro kterou jsou definována pravidla kompatibility mezi typy
  -- operandů. Třídy nejsou zavedeny pro unární operátory.
  --   Existují tři speciální třídy, které neodpovídají operátorům, ale které
  -- se používají explicitně pro určení kompatibility dvou výrazů:
  --   -- TOC_TRANSFORM: Kontrola kompatibility typy výrazu (typ T2)
  --      a očekávaného typu výrazu (typ T1). Používá se v druhé fázi typové
  --      kontroly při šíření typu shora.
  --   -- TOC_REF: Kontrola kompatibility typu výrazu (typ T2) vzhledem k typu
  --      parametru (typ T1) s módem [ IN ] OUT.
  --   -- TOC_SYMMETRIC: Skupina pravidel pro konverzi hodnot jednoduchých
  --      univerzálních typů na neuniverzální typy. Kontrola je definována
  --      jako symetrická vzhledem k typům operandů. Příklad: je-li jedna
  --      z bází řetězcového operandu operátoru & nebo := univerzální, musí
  --      být druhá kompatibilní v třídě TOC_SYMMETRIC.
  --------------------------------------------------------------------------------------------------

  -- třída operace nad výrazy typů T1 a T2
  toperclass       = enum
      toc_none;                                  -- definitoricky nekompatibilní
      -- operátory
      toc_aritm;                                 -- value(T1) Aritmetický operátor value(T2)
      toc_raritm;                                -- value(T1) Real arithmetic operator value(T2)
      toc_iaritm;                                -- value(T1) Integer aritm. oper. value(T2)
      toc_set;                                   -- value(T1) Set operator value(T2)
      toc_concat;                                -- value(T1) & value(T2)
      toc_logical;                               -- value(T1) AND/OR/XOR value(T2)
      toc_shift;                                 -- value(T1) SHL/SHR value(T2)
      toc_bit;                                   -- value(T1) BIT_AND/BIT_OR/BIT_XOR value(T2)
      toc_rel_compare;                           -- value(T1) Comparison operator value(T2)
      toc_rel_order;                             -- value(T1) Ordering operator value(T2)
      toc_rel_member;                            -- value(T1) [ not ] in value(T2)
      -- přetypování
      toc_typecast;                              -- T1(value(T2))
      toc_interface_cast;                        -- interface cast T1(var(T2))
      toc_symmetric;                             -- symetrická konverze
      -- předávání parametrů
      toc_param_class;                           -- modifikátory CLASS nebo VIRTUAL
      toc_param_unchecked;                       -- modifikátor UNCHECKED
      toc_param_in;                              -- obyčejný IN parametr
      toc_param_out;                             -- obyčejný OUT parametr
      -- transformace a přiřazení
      toc_assign;                                -- var(T1) := value(T2)
      toc_transform;                             -- transformace value(T2) --> value(T1)
      -- ostatní operace
      toc_range;                                 -- value(T1) .. value(T2)
      end enum;
  toperclassset    = set of toperclass;

{%OFF}
var
  toperclasstxt    : const array toperclass of t_char32str := [
      for toc_none            use 'none',
      for toc_aritm           use 'aritm',
      for toc_raritm          use 'raritm',
      for toc_iaritm          use 'iaritm',
      for toc_set             use 'set',
      for toc_concat          use 'concat',
      for toc_logical         use 'logical',
      for toc_shift           use 'shift',
      for toc_bit             use 'bit',
      for toc_rel_compare     use 'rel_compare',
      for toc_rel_order       use 'rel_order',
      for toc_rel_member      use 'rel_member',
      for toc_typecast        use 'typecast',
      for toc_interface_cast  use 'interface_cast',
      for toc_symmetric       use 'symmetric',
      for toc_param_class     use 'param_class',
      for toc_param_unchecked use 'param_unchecked',
      for toc_param_in        use 'param_in',
      for toc_param_out       use 'param_out',
      for toc_assign          use 'assign',
      for toc_transform       use 'transform',
      for toc_range           use 'range'];
{%ON}

const
  -- reálná aritmetika
  tocs_raritm      = toperclassset:[toc_aritm,toc_raritm];
  -- celočíselná aritmetika
  tocs_iaritm      = toperclassset:[toc_aritm,toc_iaritm];

type
  -- typ výsledku operace
  tresulttype      = enum
      trt_none;                                  -- nic
      trt_left;                                  -- typ levého operandu (T1)
      trt_right;                                 -- typ pravého operandu (T2)
      trt_resolve;                               -- rozhodnout mezi T1 a T2
      trt_uniarray_el;                           -- univerzální pole of el:type
      trt_uniarray_er;                           -- univerzální pole of er:type
      trt_unireal;                               -- univerzální real
      trt_unilogical;                            -- univerzální logical
      end enum;

{%OFF}
var
  tresulttypetxt   : const array tresulttype of t_char32str := [
      for trt_none        use 'none',
      for trt_left        use 'left',
      for trt_right       use 'right',
      for trt_resolve     use 'resolve',
      for trt_uniarray_el use 'uniarray_el',
      for trt_uniarray_er use 'uniarray_er',
      for trt_unireal     use 'unireal',
      for trt_unilogical  use 'unilogical'];
{%ON}



----------------------------------------------------------------------------------------------------
class public typeview = extend c_flex_class;
-- Pohled na typ
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    static init (
        _context   : in tcontext{tentity};       -- kontext
        _ptyp      : in pentity_type);           -- skutečný typ
    -- Sestaví pohled na zadaný typ.
    ------------------------------------------------------------------------------------------------
    static initunchecked (
        _ptyp      : in pentity_type);           -- skutečný typ
    -- Sestaví Unchecked view na zadaný typ.
    ------------------------------------------------------------------------------------------------
    static initfull (
        _ptyp      : in pentity_type);           -- skutečný typ
    -- Sestaví Full view na zadaný typ (pokud to lze, tj. jen v případě, že
    -- by to standardně bylo Partial view).
    ------------------------------------------------------------------------------------------------
    static initaggregate;
    -- Sestaví pohled na libovolný agregátní typ.
    ------------------------------------------------------------------------------------------------
    static tview return ttypeview;
    -- Typ pohledu.
    ------------------------------------------------------------------------------------------------
    static stype return tdatatype;
    -- Datový typ.
    ------------------------------------------------------------------------------------------------
    static isclass return t_logical;
    -- True, je-li typ třída.
    ------------------------------------------------------------------------------------------------
    static compat return typecompat;
    -- Determinace kompatibility.
    ------------------------------------------------------------------------------------------------
    static evaluated return tentitydeclared;
    -- Úroveň vyhodnocení typu.
    ------------------------------------------------------------------------------------------------
    static tagged return t_logical;
    -- True, je-li typ tagged.
    ------------------------------------------------------------------------------------------------
    static getutype return pentity_type;
    -- Typ (včetně NIL).
    ------------------------------------------------------------------------------------------------
    static getctype return pentity_type;
    -- Typ (NIL => internal_error).
    ------------------------------------------------------------------------------------------------
    static getancestor (
        _context   : in tcontext{tentity})       -- kontext
                   return typeview;              -- pohled na předka
    -- Předek typu (:ancestor).
    ------------------------------------------------------------------------------------------------
    static getbase (
        _context   : in tcontext{tentity})       -- kontext
                   return typeview;              -- pohled na předka
    -- Typ báze (:base).
    ------------------------------------------------------------------------------------------------
    static getrange (
        _context   : in tcontext{tentity})       -- kontext
                   return typeview;              -- pohled na předka
    -- Typ rozsahu (:range).
    ------------------------------------------------------------------------------------------------
    static is_abstract return t_logical;
    -- True, je-li typ abstraktní.
    ------------------------------------------------------------------------------------------------
    static hassize return t_logical;
    -- True, lze-li zjistit velikost typu.
    ------------------------------------------------------------------------------------------------
    static getsize return tunidata_size;
    -- Velikost typu (:size).
    ------------------------------------------------------------------------------------------------
    static getbits return tunidata_bitsize;
    -- Velikost v bitech (:bits).
    ------------------------------------------------------------------------------------------------
    static getintaritm return tintaritm;
    -- Celočíselná aritmetika.
    ------------------------------------------------------------------------------------------------
    static getpclass return ptrclass;
    -- Třída pointeru.
    ------------------------------------------------------------------------------------------------
    static getpflags return ptrflagsset;
    -- Parametry pointeru.
    ------------------------------------------------------------------------------------------------
    static getpbase return ptrbase;
    -- Kompatibilita báze pointeru.
    ------------------------------------------------------------------------------------------------
    static getpaccess return varaccess;
    -- Determinace přístupu báze pointeru.
    ------------------------------------------------------------------------------------------------
    static getpattrib return rtattribset{ptrattribset};
    -- Dynamické atributy uložené v pointeru.
    ------------------------------------------------------------------------------------------------
    static getlval return tuniint;
    -- Dolní mez (:first).
    -- Pro ordinální typy.
    ------------------------------------------------------------------------------------------------
    static gethval return tuniint;
    -- Horní mez (:last).
    -- Pro ordinální typy.
    ------------------------------------------------------------------------------------------------
    static get_fxplow return tunireal;
    -- For fixed-point types.
    ------------------------------------------------------------------------------------------------
    static get_fxphigh return tunireal;
    -- For fixed-point types.
    ------------------------------------------------------------------------------------------------
    static getlength return tuniint;
    -- Délka rozsahu (:length, :last-:first+1).
    ------------------------------------------------------------------------------------------------
    static setunchecked;
    -- Změní pohled na Unchecked view.
    ------------------------------------------------------------------------------------------------

    end typeview;

----------------------------------------------------------------------------------------------------
procedure t_gettypeview {%%TODO(COMPATIBILITY) přesunout do protected části} (
    context        : in tcontext;                -- překládaná entita
    ptyp           : in pentity_type)            -- typ
                   return ttypeview;             -- typ pohledu na typ
-- Typ pohledu na typ.
----------------------------------------------------------------------------------------------------
procedure t_gettypefullview {%%TODO(COMPATIBILITY) přesunout do protected části} (
    ptyp           : in pentity_type)            -- typ
                   return ttypeview;             -- typ pohledu na typ
-- Typ pohledu na typ. Preferuje Full view, nikdy nevrátí Partial view.
----------------------------------------------------------------------------------------------------
procedure t_equal (
    t1             : in typeview;                -- typy
    t2             : in typeview)                -- typy
                   return t_logical;             -- T-shodné
-- True, jsou-li typy shodné nezávisle na typu pohledu.
----------------------------------------------------------------------------------------------------
procedure t_equal_view (
    t1             : in typeview;                -- typy
    t2             : in typeview)                -- typy
                   return t_logical;             -- T-shodné
-- True, jsou-li to shodné pohledy na shodné typy.
----------------------------------------------------------------------------------------------------
procedure t_typecheck (
    context        : in tcontext;                -- překládaná entita
    oclass         : in toperclass;              -- třída operace
    assign         : in t_logical;               -- T-přiřazovací operátor
    t1             : in typeview;                -- typy
    t2             : in typeview;                -- typy
    level          : out tcomplevel;             -- úroveň kompatibility
    restype        : out tresulttype);           -- typ výsledeku operace
-- Typová kontrola.
----------------------------------------------------------------------------------------------------
procedure t_compatible (
    context        : in tcontext;                -- překládaná entita
    oclass         : in toperclass;              -- třída operace
    assign         : in t_logical;               -- T-přiřazovací operátor
    t1             : in typeview;                -- typy
    t2             : in typeview)                -- typy
                   return t_logical;             -- T-kompatibilní typy
-- True, jsou-li typy kompatibilní vůči požadované třídě operace.
----------------------------------------------------------------------------------------------------
procedure t_get_compatibility_level (
    context        : in tcontext;                -- překládaná entita
    oclass         : in toperclass;              -- třída operace
    assign         : in t_logical;               -- T-přiřazovací operátor
    t1             : in typeview;                -- typy
    t2             : in typeview)                -- typy
                   return tcomplevel;            -- úroveň kompatibility
-- Úroveň kompatibility typů vůči požadované třídě operace.
-- Slabá kontrola vynechá test determinace kompatibility.
----------------------------------------------------------------------------------------------------
procedure t_binary_identical (
    context        : in tcontext;                -- překládaná entita
    t1             : in typeview;                -- typy
    t2             : in typeview)                -- typy
                   return t_logical;             -- T-binárně identické
-- True, jsou-li typy binárně identické.
----------------------------------------------------------------------------------------------------
procedure t_descendant (
    context        : in tcontext;                -- překládaná entita
    t1             : in typeview;                -- typy
    t2             : in typeview)                -- typy
                   return t_logical;              -- T1 je potomek T2
-- True, je-li T1 potomek T2.
----------------------------------------------------------------------------------------------------
procedure t_ancestor (
    context        : in tcontext;                -- překládaná entita
    t1             : in typeview;                -- typy
    t2             : in typeview)                -- typy
                   return t_logical;             -- T1 je potomek T2
-- True, je-li T1 předek T2.
----------------------------------------------------------------------------------------------------
procedure t_derived (
    context        : in tcontext;                -- překládaná entita
    t1             : in typeview;                -- typy
    t2             : in typeview)                -- typy
                   return t_logical;             -- T1 je předek nebo potomek T2
-- True, je-li T1 předek nebo potomek T2.
----------------------------------------------------------------------------------------------------
procedure t_get_pointer_rtattrib (
    pbase          : in ptrbase;                 -- typ báze pointeru
    pclass         : in ptrclass;                -- třída pointeru
    base           : in pentity_type;            -- bázový typ
    pattrib        : in out rtattribset);        -- atributy
-- Ze zadaných údajů vypočítá množinu volitelných atributů pointeru.
-- Pozor: Očekává, že množina PATTRIB je již inicializovaná.
----------------------------------------------------------------------------------------------------
procedure t_is_string_of_char (
    context        : in tcontext{tentity};       -- překládaná entita
    t              : in typeview)                -- typ
                   return t_logical;             -- T-je to string of char
-- True, je-li typ unistr/string/ustring of char/unichar.
----------------------------------------------------------------------------------------------------
procedure t_is_pointer_to_object (
    t              : in typeview)                -- typ
                   return t_logical;             -- T-typ je pointer na objekt
-- True, je-li typ pointer na objekt.
----------------------------------------------------------------------------------------------------
procedure t_is_pointer_to_unconstrained (
    context        : in tcontext{tentity};       -- překládaná entita
    t              : in typeview)                -- typ
                   return t_logical;             -- T-typ je pointer na objekt
-- True, je-li typ pointer na unconstrained array/string.
----------------------------------------------------------------------------------------------------
procedure t_is_sts (
    t              : in typeview;                -- typ
    sts            : in tdatatypeset)            -- ověřované datové typy
                   return t_logical;             -- T-typ spadá do STS
-- True, je-li typ z množiny STS.
----------------------------------------------------------------------------------------------------
procedure t_is_nonmod_ordinal (
    typ            : in typeview)                -- typ
                   return t_logical;             -- T-typ s plným pohledem, ordinální a nemodulární
-- Vrací T, pokud je [typ] s plným pohledem, ordinální a příp. celočíselný bez modulární aritmetiky.
----------------------------------------------------------------------------------------------------
procedure t_is_range_inclusive (
    destt          : in typeview;                -- cílový typ
    srct           : in typeview)                -- zdrojový typ
                   return t_logical;             -- T-zdrojový typ je rozsahem pod cílovým
-- Vrací T, pokud je rozsah [srct] inkluzivně podrozsahem [destt].
----------------------------------------------------------------------------------------------------
procedure t_is_stype (
    t              : in typeview;                -- typ
    stype          : in tdatatype)               -- ověřované datové typy
                   return t_logical;             -- T-typ spadá do STS
-- True, je-li typ roven STYPE.
----------------------------------------------------------------------------------------------------
procedure t_is_composite (
    t              : in typeview)                -- typ
                   return t_logical;             -- T-je kompozitní
-- True, je-li typ kompozitní.
----------------------------------------------------------------------------------------------------
procedure t_contains_class (
    typ            : in out tentity_type)        -- zkoumaný typ
                   return t_logical;
-- True, pokud zadaný typ obsahuje instanci třídy jako subkomponentu.
-- (Nebo je sám třída.) Kašle se na viditelnost struktury typu.  
-- Výsledek si poznamená do cache přímo v typu, aby byl výpočet příště jednodušší.
----------------------------------------------------------------------------------------------------


type
  
  -- relativni poloha intervalu t1 a t2
  t_relative_range_disposition = enum
      rrd_emptyset;                              -- (t1:low<t2:low  and t1:high<t2:low)  or (t1:low>t2:high and t1:high>t2:high)
      rrd_equalset;                              -- t1:low=t2:low  and t1:high=t2:high
      rrd_superset;                              -- (t1:low<=t2:low and t1:high>t2:high) or (t1:low<t2:low and t1:high>=t2:high)
      rrd_subset;                                -- (t1:low>=t2:low and t1:high<t2:high) or (t1:low>t2:low and t1:high<=t2:high)
      rrd_overlap_left;                          -- t1:low<t2:low  and t1:high<=t2:high and t1:high>=t2:low
      rrd_overlap_right;                         -- t1:low>=t2:low and t1:low<=t2:high  and t1:high>t2:high
      end enum;

    
----------------------------------------------------------------------------------------------------
procedure t_get_relative_range_disposition (
    t1             : in typeview;
    t2             : in typeview)
                     return t_relative_range_disposition;
-- vrati relativni rozlozeni mezi typu t1 vzhledem k typu t2
-- rrd_emptyset:      (t1:low<t2:low  and t1:high<t2:low)  or (t1:low>t2:high and t1:high>t2:high)
-- rrd_equalset:       t1:low=t2:low  and t1:high=t2:high
-- rrd_superset:      (t1:low<=t2:low and t1:high>t2:high) or (t1:low<t2:low and t1:high>=t2:high)
-- rrd_subset:        (t1:low>=t2:low and t1:high<t2:high) or (t1:low>t2:low and t1:high<=t2:high)
-- rrd_overlap_left:   t1:low<t2:low  and t1:high<=t2:high and t1:high>=t2:low
-- rrd_overlap_right:  t1:low>=t2:low and t1:low<=t2:high  and t1:high>t2:high
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
#separate private typeview;
-- Pohled na typ
----------------------------------------------------------------------------------------------------

var
  --%%TODO(???) Tohle se mi vůbec nelíbí. Mělo by to být řešitelné přes nějaké
  -- Incomplete declarations proměnných, abych nemusel mít private část třídy
  -- v public části modulu.
  nulltype         : const typeview;

type
  ptypeview        = ^typeview;



----------------------------------------------------------------------------------------------------
protected
----------------------------------------------------------------------------------------------------

type
  -- akce pro určení kompatibility podle porovnání datových typů
  t_type_check     = enum
      ---- jednoduché kontroly ----
      ttc_incompatible;                          -- T1 nekompatibilní T2
      ttc_convertible;                           -- T1 identické/konvertibilní T2
                                                 -- Poznámka: pouze pro zjednodušení, byl by 
                                                 -- nahraditelný akcemi [ttc_simple_check], 
                                                 -- [ttc_iaritm_check], a [ttc_raritm_check], ale 
                                                 -- minimálně poslední dvě by se musely zabývat 
                                                 -- rozpoznáním univerzálních typů
      ttc_iaritm_check;                          -- T1 předek/potomek/identické/stejné aritmetiky/nekompatibilní T2
      ttc_modaritm_check;                        -- T1 předek/potomek/identické/nekompatibilní T2, pouze modulární aritmetika
      ttc_modaritm_left_check;                   -- T1 má modulární aritmetiku, T2 se ignoruje
      ttc_raritm_check;                          -- T1 předek/potomek/identické/stejné aritmetiky/nekompatibilní T2
      ttc_simple_check;                          -- T1 předek/potomek/identické/konvertibilní T2
      ttc_derived;                               -- T1 předek/potomek/identické/nekompatibilní T2
      ttc_identical;                             -- T1 identické/nekompatibilní T2
      ---- pole ----
      ttc_array;                                 -- T1 i T2 jsou pole
      ttc_uarray;                                -- T1 nebo T2 je unconstrained pole, zbývající pole
      ttc_order_array;                           -- jako [ttc_array] pro účely uspořádání
      ttc_order_uarray;                          -- jako [ttc_uarray] pro účely uspořádání
      ---- řetězce ----
      ttc_string;                                -- T1 i T2 jsou string nebo unconstrained string
      ttc_order_string;
      ---- univerzální pole ----
      ttc_uniarray;                              -- alespoň jeden z T1, T2 je univerzální pole, 
                                                 -- zbývající je (unconstrained) pole nebo 
                                                 -- (unconstrained) string
      ttc_order_uniarray;                        -- jako [ttc_uniarray] pro účely uspořádání
      ---- speciality pro zřetězení ----
      ttc_indexed_component;                     -- (u)string/(u)array  -- komponenta
      ttc_component_indexed;                     -- komponenta -- (u)string/(u)array
      ttc_component_component;                   -- komponenta -- komponenta
      ---- množiny ----
      ttc_set;                                   -- množina -- množina
      ttc_in_set;                                -- diskrétní IN množina
      ---- pointery ----
      ttc_pointer_assign;                        -- přiřazení pointeru
      ttc_pointer_rel;                           -- porovnání pointeru
      ttc_pointer_out;                           -- předání pointeru jako OUT parametru
      ---- interface cast ----
      ttc_icast_class;                           -- třída -- třída
      ttc_icast_pointer;                         -- pointer na třídu -- pointer na třídu
      ---- NIL ----
      ttc_nil;                                   -- univerzálně kompatibilní NIL
      end enum;
  t_type_check_set = set of t_type_check;

{%OFF}
var
  t_type_check_txt  : const array t_type_check of t_char32str := [ 
      for ttc_incompatible        use 'compatible',
      for ttc_convertible         use 'convertible',
      for ttc_iaritm_check        use 'iaritm_check',
      for ttc_modaritm_check      use 'modaritm_check',
      for ttc_modaritm_left_check use 'modaritm_left_check',
      for ttc_raritm_check        use 'raritm_check',
      for ttc_simple_check        use 'simple_check',
      for ttc_derived             use 'derived',
      for ttc_identical           use 'identical',
      for ttc_array               use 'array',
      for ttc_uarray              use 'uarray',
      for ttc_order_array         use 'order_array',
      for ttc_order_uarray        use 'order_uarray',
      for ttc_string              use 'string',
      for ttc_order_string        use 'order_string',
      for ttc_uniarray            use 'uniarray',
      for ttc_order_uniarray      use 'order_uniarray',
      for ttc_indexed_component   use 'indexed_component',
      for ttc_component_indexed   use 'component_indexed',
      for ttc_component_component use 'component_component',
      for ttc_set                 use 'set',
      for ttc_in_set              use 'in_set',
      for ttc_pointer_assign      use 'pointer_assign',
      for ttc_pointer_rel         use 'pointer_rel',
      for ttc_pointer_out         use 'pointer_out',
      for ttc_icast_class         use 'icast_class',
      for ttc_icast_pointer       use 'icast_pointer',
      for ttc_nil                 use 'nil'];
{%ON}

const
{
  -- operace, u kterých nemá smysl provádět test determinace kompatibility nebo se provádí jinak
  tocs_no_determination_check = toperclassset:[
      -- pro membership test se provádí nad dvojicí <el:type,er:base>
      toc_rel_member,
      -- pro přetypování a interface cast nemá smysl
      toc_typecast,
      toc_interface_cast];
}
  -- akce, u kterých nemá smysl provádět test determinace kompatibility nebo se provádí jinak
  ttcs_no_determination_check = t_type_check_set:[
      -- pro zřetězení řetězce s komponentou se provádí nad dvojicí <string:base,component:type>
      ttc_indexed_component,
      ttc_component_indexed,
      -- pro membership test se provádí nad dvojicí <el:type,er:base> 
      ttc_in_set,
      -- pro přetypování a interface cast nemá smysl
      ttc_icast_class,
      ttc_icast_pointer];

  -- %%TECH Poznámka: Charakter testů TTC_SIMPLE_CHECK a TTC_STRICT_SIMPLE
  -- zajišťuje automatickou kontrolu shodnosti aritmetik celočíselných typů.
  -- Důkaz: Aritmetiky nelze změnit derivací typu.

type
  -- tabulka pro kontrolu kompatibility
  t_type_check_tab = array toperclass,tdatatype,tdatatype of record
      c            : t_type_check;               -- kompatibilita/další kontrola
      r            : tresulttype;                -- typ výsledku
      a            : t_logical;                  -- T-povoleno zkrácené přiřazení
      end record;

var
  typecheck        : protected t_type_check_tab;

type
  -- akce pro určení kompatibility podle porovnání pohledů
  t_view_check     = enum
      tvc_incompatible;                          -- nekompatibilní pohledy
      tvc_partial;                               -- kontrola parciálních pohledů
      tvc_partial_descendant;                    -- kontrola parciálních pohledů, T1 předek T2
      tvc_unchecked;                             -- kontrola unchecked pohledů
      tvc_aggregate;                             -- kontrola kombinace Full view a Aggregate view
      tvc_interface;                             -- kontrola interface cast
      end enum;

{%OFF}
var
  t_view_check_txt : const array t_view_check of t_char32str := [
      for tvc_incompatible       use 'incompatible',
      for tvc_partial            use 'partial',
      for tvc_partial_descendant use 'partial_descendant',
      for tvc_unchecked          use 'unchecked',
      for tvc_aggregate          use 'aggregate',
      for tvc_interface          use 'interface'];
{%ON}

type
  -- tabulka pro kontrolu kompatibility
  t_view_check_tab = array toperclass,ttypeview,ttypeview of record
      c            : t_view_check;               -- kompatibilita/další kontrola
      r            : tresulttype;                -- typ výsledku
      end record;

var
  viewcheck        : protected t_view_check_tab;

----------------------------------------------------------------------------------------------------
procedure t_compatible_determinations (
    t1             : in typeview;                -- typ
    t2             : in typeview)                -- typ
                   return t_logical;             -- T-kompatibilní determinace
-- True, jsou-li typy kompatibilní z hlediska determinace kompatibility.
-- Oba typy musí být pointery, z nichž alespoň jeden musí být unchecked.
----------------------------------------------------------------------------------------------------
procedure t_compatible_varaccesses (
    t1             : in typeview;                -- cílový typ
    t2             : in typeview)                -- zdrojový typ
                   return t_logical;             -- T-kompatibilní determinace
-- True, jsou-li typy kompatibilní z hlediska determinace přístupu.
-- Oba typy musí být pointery. T1 musí být cílový typ operace (přiřazuje se do instance T1), T2 musí
-- být zdrojový typ (přiřazuje se z instance T2).
----------------------------------------------------------------------------------------------------
procedure t_compatible_unchecked_pointers (
    t1             : in typeview;                -- typ
    t2             : in typeview)                -- typ
                   return t_logical;             -- T-kompatibilní determinace
-- True, jsou-li typy kompatibilní z hlediska determinace kompatibility. 
-- Oba typy musí být pointery, z nichž alespoň jeden musí být unchecked.
----------------------------------------------------------------------------------------------------

end cc_type;
