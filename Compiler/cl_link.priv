----------------------------------------------------------------------------------------------------
module private cl_link =
-- Překladač Flexu.
-- Univerzální linker.
----------------------------------------------------------------------------------------------------
-- Ondra : 12.04.2002 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  standard,
  cc_def.cc_entity.cc_list;

----------------------------------------------------------------------------------------------------
#separate private cl_def;
-- Základní definice pro linker.
----------------------------------------------------------------------------------------------------
#separate public cl_map;
-- Generátor map filu.
----------------------------------------------------------------------------------------------------
#separate private cl_map;
-- Generátor map filu.
----------------------------------------------------------------------------------------------------
#separate private cl_resolver;
-- Vyhodnocovač cross-referencí a adres.
----------------------------------------------------------------------------------------------------
#separate private cl_image;
-- Generátor výstupních souborů.
----------------------------------------------------------------------------------------------------
#separate private cl_debug;
-- Generátor debug informací.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
procedure dump (name : in t_char32str; list : in tentitystring) =
----------------------------------------------------------------------------------------------------
with
  standard.console,
  cc_base,cc_base.cc_sym;

begin
  write_line('');
  write_line(name);
  if list.list<>nil then
    for i in list.list^:range loop
      write_line(sym_get_qid(list.list^[i]));
      end loop;
    end if;
  end dump;



----------------------------------------------------------------------------------------------------
procedure l_link =
-- Hlavní smyčka linkeru.
----------------------------------------------------------------------------------------------------
begin
  -- označit symboly pro linkování
  resolver.mark_all(compi);

  -- setavit
  resolver.link(image_specific);

  --dump('Code',resolver.code);
  --dump('Reloc',resolver.reloc);
  --dump('IData',resolver.idata);
  --dump('Data',resolver.data);
  --dump('Import',resolver.import);
  --dump('TypeDesc',resolver.typedesc);

  -- do listingu ještě doplnit nějaké údaje
  resolver.info;
  end l_link;



----------------------------------------------------------------------------------------------------
procedure l_build_image =
-- Sestavení výstupního souboru.
----------------------------------------------------------------------------------------------------
begin
  -- sestavit výstupní soubor
  image.create(resolver,image_specific,compi^.part_result=tpr_library);

  -- do listingu ještě doplnit nějaké údaje
  image.info;
  end l_build_image;



----------------------------------------------------------------------------------------------------
procedure l_try_add_to_flex_export_list =
-- Pokud entita splní jisté podmínky, tak ji zařadí na seznam entit exportovaných metodou Flex.
----------------------------------------------------------------------------------------------------
with
  cc_def.cc_var;

begin
  -- předně musí jít o překlad non-standalone partition
  if curr_partition_type<>part_standalone
  -- entitu je potřeba při exportu metodou Flex zpracovat v linkeru
  and then entity^.etype in ets_export_flex
  -- entita je globálně viditelná
  and then etc_globaly_visible in entity^.compile
  -- pro některé entity žádné omezení není
  and then (entity^.etype not in ets_type+tentitytypeset:[et_var]
  -- z typů jsou povoleny jen non-temporary tagged typy
  or else (entity^.etype in ets_type and then tf_tagged in pentity_type(entity)^.tflags 
                                     and then tf_temp not in pentity_type(entity)^.tflags)
  -- z proměnných jen ty globální
  or else (entity^.etype=et_var and then pentity_var(entity)^.mclass in mcs_global)) then
    flex_export_list.add(entity);
    end if;
  end l_try_add_to_flex_export_list;



end cl_link;
