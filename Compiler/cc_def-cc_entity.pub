----------------------------------------------------------------------------------------------------
module public cc_entity =
-- P©eklada‡ Flexu.
-- Definice tabulky symbol–.
----------------------------------------------------------------------------------------------------
-- Ondra : 27.04.2000 : Vytvo©il
----------------------------------------------------------------------------------------------------

with
  cc_def.cc_unitype;

use
  cc_def.cc_lexsym;

----------------------------------------------------------------------------------------------------
-- Dop©edn‚ deklarace
----------------------------------------------------------------------------------------------------
type
  -- entity
  tentity;                   pentity                   = ^class tentity;
  tentity_code;              pentity_code              = ^class tentity_code;
  tentity_compile;           pentity_compile           = ^class tentity_compile;
  tentity_program;           pentity_program           = ^class tentity_program;
  tentity_module;            pentity_module            = ^class tentity_module;
  tentity_init;              pentity_init              = ^class tentity_init;
  tentity_value;             pentity_value             = ^class tentity_value;
  tentity_param;             pentity_param             = ^class tentity_param;
  tentity_var;               pentity_var               = ^class tentity_var;
  tentity_const;             pentity_const             = ^class tentity_const;
  tentity_enum;              pentity_enum              = ^class tentity_enum;
  tentity_type;              pentity_type              = ^class tentity_type;
  tentity_subprogram;        pentity_subprogram        = ^class tentity_subprogram;
  tentity_static_subprogram; pentity_static_subprogram = ^class tentity_static_subprogram;
  tentity_procedure;         pentity_procedure         = ^class tentity_procedure;
  tentity_static;            pentity_static            = ^class tentity_static;
  tentity_virtual;           pentity_virtual           = ^class tentity_virtual;
  tentity_task;              pentity_task              = ^class tentity_task;
  tentity_special;           pentity_special           = ^class tentity_special;
  tentity_macro;             pentity_macro             = ^class tentity_macro;
  tentity_override;          pentity_override          = ^class tentity_override;
  tentity_overload0;         pentity_overload0         = ^class tentity_overload0;
  tentity_overload;          pentity_overload          = ^class tentity_overload;
  tentity_operator;          pentity_operator          = ^class tentity_operator;
  tentity_attribute;         pentity_attribute         = ^class tentity_attribute;
  tentity_message;           pentity_message           = ^class tentity_message;
  tentity_label;             pentity_label             = ^class tentity_label;
--tentity_alias;             pentity_alias             = ^class tentity_alias;
  tentity_template;          pentity_template          = ^class tentity_template;
  tentity_tparam;            pentity_tparam            = ^class tentity_tparam;

  -- deklarativn¡ region
  tregion;
  pregion          = ^tregion;



----------------------------------------------------------------------------------------------------
-- Intern¡ tvar p©¡m‚ hodnoty
----------------------------------------------------------------------------------------------------
type
  -- t©¡da konstanty (p©¡m‚ hodnoty)
  timmclass        = enum
      ic_undef;                                  -- nedefinov no
      ic_ordinal;                                -- ordin ln¡ hodnota (diskr‚tn¡ typ)
      ic_real;                                   -- re ln‚ ‡¡slo
      ic_nil;                                    -- nil
      ic_condensed;                              -- ©etˆzec
      ic_array;                                  -- agreg t pole
      ic_record;                                 -- agreg t recordu
      ic_set;                                    -- agreg t mno‘iny
   -- ic_bin;                                    -- bin rn¡ data
   -- ic_relo;                                   -- relokabiln¡ symbol
      end enum;
  timmclassset     = set of timmclass;

  -- druh p©¡m‚ hodnoty podle zp–sobu zad n¡
  timmentrykind     = enum
      iek_none;                                  -- syntetick  hodnota, zad no nep©¡mo
      iek_integer_literal;                       -- celo‡¡seln˜ liter l
      iek_real_literal;                          -- re ln˜ liter l
      iek_character_literal;                     -- znakov˜ liter l
      iek_nil_literal;                           -- NIL
      iek_character_aggregate;                   -- znakov˜ agreg t
      iek_logical_metaliteral;                   -- logick˜ metaliter l
      end enum;

#if debug then;{%OFF}
var
  timmclasstxt     : const array timmclass of t_char32str := [
      for ic_undef     use 'undef',
      for ic_ordinal   use 'ordinal',
      for ic_real      use 'real',
      for ic_nil       use 'NIL',
      for ic_condensed use 'condensed',
      for ic_array     use 'array',
      for ic_record    use 'record',
      for ic_set       use 'set'];
   -- for ic_bin       use 'bin',
   -- for ic_relo      use 'relo');
#end if;{%ON}

type
  -- dop©edn‚ deklarace;
  timm_array;      pimm_array       = ^timm_array;
  timm_record;     pimm_record      = ^timm_record;
  timm_set;        pimm_set         = ^timm_set;

  -- kondenzovan˜ tvar ©etˆzce
  timm_condensed   = record
      len          : t_unsigned;                 -- po‡et prvk–
      isize        : t_unsigned;                 -- velikost jednoho prvku
      items        : p_unsigned8array;           -- prvky
      end record;

  -- cel  p©¡m  hodnota
  timm_value       = record
      ic           : timmclass;                  -- t©¡da konstanty
      ui           : tuniint;                    -- ordin ln¡ hodnota (diskr‚tn¡ typ)
      ur           : tunireal;                   -- re ln‚ ‡¡slo
      citems       : timm_condensed;             -- slo‘ky kondenzovan‚ho agreg tu
      {%%X Pro‡ CITEMS nen¡ pointer, kdy‘ ostatn¡ jsou ? }
      aitems       : pimm_array;                 -- slo‘ky pole
      ritems       : pimm_record;                -- slo‘ky recordu
      sitems       : pimm_set;                   -- slo‘ky mno‘iny
      codegen      : p_flex_record;              -- data gener toru k¢du
      end record;
  pimm_value       = ^timm_value;

  -- slo‘ky pole
  timm_array_item  = record
      lval         : tuniint;                    -- doln¡ mez
      hval         : tuniint;                    -- horn¡ mez
      val          : timm_value;                 -- hodnota
      end record;
  timm_array_items = string of timm_array_item;
  timm_array       = record
      list         : ^timm_array_items;          -- hodnoty slo‘ek
      othersval    : timm_value;                 -- hodnota OTHERS
      end record;

  -- slo‘ky recordu
  timm_record_item = record
      item         : pentity_var;                -- souvisej¡c¡ slo‘ka
      val          : timm_value;                 -- hodnota
      end record;
  timm_record_items= string of timm_record_item;
  timm_record      = record
      list         : ^timm_record_items;         -- hodnoty slo‘ek
      othersval    : timm_value;                 -- hodnota OTHERS
      end record;

  -- slo‘ky mno‘iny
  timm_set_item    = record
      lval         : tuniint;                    -- doln¡ mez
      hval         : tuniint;                    -- horn¡ mez
      end record;
  timm_set_items   = string of timm_set_item;
  timm_set         = record
      list         : ^timm_set_items;            -- hodnoty slo‘ek
      end record;

type
  -- oper tory porovn n¡ dvou p©¡m˜ch hodnot
  tcmpoper         = enum
      cmp_none;                                  -- nic
      cmp_eq;                                    -- =
      cmp_ne;                                    -- <>
      cmp_lt;                                    -- <
      cmp_le;                                    -- <=
      cmp_gt;                                    -- >
      cmp_ge;                                    -- >=
      end enum;



----------------------------------------------------------------------------------------------------
-- P©et¡‘iteln‚ oper tory
----------------------------------------------------------------------------------------------------
type
  -- p©et¡‘¡teln˜ oper tor
  tooperator       = enum
      oop_none;                                  -- nic
      oop_assign;                                -- :=
      oop_add;                                   -- + (bin rn¡ i un rn¡)
      oop_sub;                                   -- - (bin rn¡ i un rn¡)
      oop_mul;                                   -- *
      oop_div;                                   -- /
      oop_concat;                                -- &
      oop_idiv;                                  -- DIV
      oop_imod;                                  -- MOD
      oop_shl;                                   -- SHL
      oop_shr;                                   -- SHR
      oop_lt;                                    -- <
      oop_gt;                                    -- >
      oop_le;                                    -- <=
      oop_ge;                                    -- >=
      oop_eq;                                    -- =
      oop_ne;                                    -- <>
      oop_and;                                   -- AND
      oop_or;                                    -- OR
      oop_xor;                                   -- XOR
      oop_not;                                   -- NOT
      oop_succ;                                  -- SUCC
      oop_pred;                                  -- PRED
      oop_abs;                                   -- ABS
      oop_op1;                                   -- ::
      end enum;

  -- arita p©et¡‘iteln‚ho oper toru
  tooperarity      = enum
      toa_unary;                                 -- un rn¡
      toa_binary;                                -- bin rn¡
      end enum;
  tooperarityset = set of tooperarity;

  -- informace o oper toru
  tooperinfo       = record
      lex          : cc_lexsym.lexsym;           -- odpov¡daj¡c¡ lexik ln¡ symbol
      txt          : tshortident;                -- textov  reprezentace
      arity        : tooperarityset;             -- povolen  arita oper toru
      end record;

var
  ooperinfo        : const array tooperator of tooperinfo := [
      -- %%TECH Textov˜ tvar oper toru dan‚ho kl¡‡ov˜m slovem je z mˆrnˆ
      -- mal˜mi p¡smeny - aby bylo v browseru na prvn¡ pohled vidˆt, ‘e to je
      -- oper tor a ne identifik tor nˆjak‚ jin‚ entity.
      for oop_none     use [for lex use cc_lexsym.lex_nul   , for txt use ''    , for arity use tooperarityset:[                    ]],
      for oop_assign   use [for lex use cc_lexsym.lex_assign, for txt use ':='  , for arity use tooperarityset:[          toa_binary]],
      for oop_add      use [for lex use cc_lexsym.lex_add   , for txt use '+'   , for arity use tooperarityset:[toa_unary,toa_binary]],
      for oop_sub      use [for lex use cc_lexsym.lex_sub   , for txt use '-'   , for arity use tooperarityset:[toa_unary,toa_binary]],
      for oop_mul      use [for lex use cc_lexsym.lex_mul   , for txt use '*'   , for arity use tooperarityset:[          toa_binary]],
      for oop_div      use [for lex use cc_lexsym.lex_div   , for txt use '/'   , for arity use tooperarityset:[          toa_binary]],
      for oop_concat   use [for lex use cc_lexsym.lex_concat, for txt use '&'   , for arity use tooperarityset:[          toa_binary]],
      for oop_idiv     use [for lex use cc_lexsym.lex_idiv  , for txt use 'div' , for arity use tooperarityset:[          toa_binary]],
      for oop_imod     use [for lex use cc_lexsym.lex_imod  , for txt use 'mod' , for arity use tooperarityset:[          toa_binary]],
      for oop_shl      use [for lex use cc_lexsym.lex_shl   , for txt use 'shl' , for arity use tooperarityset:[          toa_binary]],
      for oop_shr      use [for lex use cc_lexsym.lex_shr   , for txt use 'shr' , for arity use tooperarityset:[          toa_binary]],
      for oop_lt       use [for lex use cc_lexsym.lex_lt    , for txt use '<'   , for arity use tooperarityset:[          toa_binary]],
      for oop_gt       use [for lex use cc_lexsym.lex_gt    , for txt use '>'   , for arity use tooperarityset:[          toa_binary]],
      for oop_le       use [for lex use cc_lexsym.lex_le    , for txt use '<='  , for arity use tooperarityset:[          toa_binary]],
      for oop_ge       use [for lex use cc_lexsym.lex_ge    , for txt use '>='  , for arity use tooperarityset:[          toa_binary]],
      for oop_eq       use [for lex use cc_lexsym.lex_eq    , for txt use '='   , for arity use tooperarityset:[          toa_binary]],
      for oop_ne       use [for lex use cc_lexsym.lex_ne    , for txt use '<>'  , for arity use tooperarityset:[          toa_binary]],
      for oop_and      use [for lex use cc_lexsym.lex_and   , for txt use 'and' , for arity use tooperarityset:[          toa_binary]],
      for oop_or       use [for lex use cc_lexsym.lex_or    , for txt use 'or'  , for arity use tooperarityset:[          toa_binary]],
      for oop_xor      use [for lex use cc_lexsym.lex_xor   , for txt use 'xor' , for arity use tooperarityset:[          toa_binary]],
      for oop_not      use [for lex use cc_lexsym.lex_not   , for txt use 'not' , for arity use tooperarityset:[toa_unary           ]],
      for oop_succ     use [for lex use cc_lexsym.lex_succ  , for txt use 'succ', for arity use tooperarityset:[toa_unary           ]],
      for oop_pred     use [for lex use cc_lexsym.lex_pred  , for txt use 'pred', for arity use tooperarityset:[toa_unary           ]],
      for oop_abs      use [for lex use cc_lexsym.lex_abs   , for txt use 'abs' , for arity use tooperarityset:[toa_unary           ]],
      for oop_op1      use [for lex use cc_lexsym.lex_op1   , for txt use '::'  , for arity use tooperarityset:[          toa_binary]]];


----------------------------------------------------------------------------------------------------
-- Identifik tory p©eddefinovan˜ch a intern¡ch entity
----------------------------------------------------------------------------------------------------
var
  -- identifik tory p©eddefinovan˜ch objekt– 
  id_flex          : const tshortident := 'FLEX';        -- jazykem definovan  run-time knihovna        
  id_result        : const tshortident := 'RESULT';      -- identifik tor n vratov‚ hodnoty funkce      

  -- intern¡ identifik tory 
  id_int_tag       : const tshortident := '@TAG';        -- identifik tor intern¡ slo‘ky t©¡dy @TAG     
  id_int_status    : const tshortident := '@STATUS';     -- identifik tor intern¡ slo‘ky t©¡dy @STATUS  
  id_compilation   : const tshortident := '@COMPILATION';-- identifik tor kompila‡n¡ jednotky       
  id_init          : const tshortident := '@INIT';
  id_entry         : const tshortident := '@ENTRY';
  id_exit          : const tshortident := '@EXIT';
  id_adjust        : const tshortident := '@ADJUST';
  id_rollback      : const tshortident := '@ROLLBACK';
  id_commit        : const tshortident := '@COMMIT';
  id_int_temp      : const tshortident := '^TEMP_';      -- prefix identifik toru kompil trem gen. sym.
  id_int_param     : const tshortident := '@PARAM';      -- parametr intern¡ metody typu (viz CA_TYPE)
  id_int_forvar    : const tshortident := '@I';          -- ©¡d¡c¡ promˆnn  cyklu

const
  id_entry_lex     = 'ENTRY';                    -- identifik tor metody entry bez @            
  id_exit_lex      = 'EXIT';                     -- identifik tor metody return bez @             
  id_adjust_lex    = 'ADJUST';                   -- identifik tor metody adjust bez @           
  id_rollback_lex  = 'ROLLBACK';                 -- identifik tor metody rollback bez @
  id_commit_lex    = 'COMMIT';                   -- identifik tor metody commit bez @



----------------------------------------------------------------------------------------------------
-- Spole‡n‚ vlastnosti entit
----------------------------------------------------------------------------------------------------
type
  -- viditelnost symbolu
  tentityvisible   = enum
      etv_public;                                -- viditeln˜ obecnˆ
      etv_protected;                             -- viditeln˜ pouze potomk–m
      etv_private;                               -- viditeln˜ pouze uvnit© deklarace
      end enum;
  tentityvisibleset= set of tentityvisible;

const
  -- v¨echny £rovnˆ
  etvs_all         = tentityvisibleset:full;

type
  -- pr–bˆh p©ekladu deklarace
  tentitydeclared  = enum
      etd_none;                                  -- dosud nep©elo‘ena ‘ dn  ‡ st deklarace
      etd_incomplete;                            -- Incomplete declaration
      etd_public;                                -- Public body declaration
      etd_full;                                  -- Full declaration
      end enum;

  -- vyhodnocen¡ symbolu
  tentityeval      = enum
      ete_none;                                  -- dosud netestov no
      ete_generic;                               -- symbol je genericky z visl˜
      ete_evaluated;                             -- symbol je plnˆ vyhodnocen
      ete_unevaluated;                           -- symbol se nepovedlo vyhodnotit a nem  cenu
                                                 -- to zkou¨et znova
      end enum;
  tentityevalset   = set of tentityeval;

  -- re‘im p©ekladu symbolu
  tentitycompile   = enum
   -- etc_internal;                              -- intern¡ symbol vypl˜vaj¡c¡ ze s‚mantiky
      etc_generated;                             -- symbol generovan˜ kompil torem
      -- do‡asn‚ modifik tory
      etc_compiling;                             -- symbol je p©ekl d n
      etc_evaluating;                            -- symbol je vyhodnocov n
      -- permanentn¡ modifik tory
      etc_generic;                               -- generick  deklarace (tato nebo nad©azen )
      etc_macro;                                 -- makro deklarace (tato nebo nad©azen )
      end enum;
  tentitycompileset= set of tentitycompile;

const
  -- maska permanentn¡ch modifik tor–
  etcs_modemask    = tentitycompileset:[etc_generic,etc_macro];

type
  -- pozice entity
  tentityposition  = enum
      etp_header;                                -- hlavi‡ka (dop©edn  deklarace)
      etp_spec;                                  -- specifikace
      etp_def;                                   -- definice
      end enum;
  tentitypositions = array tentityposition of cc_def.cc_lexsym.lexposblock;

type
  -- pamˆŸov  t©¡da promˆnn‚
  memclass         = enum
      mc_static;                                 -- statick  promˆnn  na datasegmentu
      mc_auto;                                   -- automatick  promˆnn  na stacku
      mc_task;                                   -- statick  promˆnn  tasku
      mc_class;                                  -- slo‘ka t©¡dy
      mc_record;                                 -- slo‘ka recordu
      end enum;
  memclassset      = set of memclass;

var
  memclasstxt      : const array memclass of t_char32str := [
      for mc_static    use 'static',
      for mc_auto      use 'automatic',
      for mc_task      use 'task',
      for mc_class     use 'class',
      for mc_record    use 'record'];

const
  -- "lok ln¡" promˆnn‚
  mcs_local        = memclassset:[mc_auto];
  -- "statick‚" promˆnn‚
  mcs_static       = memclassset:[mc_static,mc_task];
  -- "class" promˆnn‚
  mcs_class        = memclassset:[mc_class];
  -- "glob ln¡" promˆnn‚
  mcs_global       = mcs_static+mcs_class;
  -- slo‘ky strukturovan˜ch objekt–
  mcs_offset       = memclassset:[mc_class,mc_record];

type
  -- typ speci ln¡ metody
  tspectype        = enum
      -- %%TECH nemˆnit po©ad¡ tˆchto slo‘ek, kompil tor podle nich generuje
      -- virtu ln¡ tabulky.
      tst_init     for ord use 0;                -- statick  inicializace
      tst_entry    for ord use 1;                -- entry (konstruktor)
      tst_exit     for ord use 2;                -- return (destruktor)
      tst_adjust   for ord use 3;                -- adjust (kop¡rov n¡)
      tst_rollback for ord use 4;                -- rollback (zru¨en¡ transakce)
      tst_commit   for ord use 5;                -- commit (potvrzen¡ transakce)
      end enum;
  tspectypeset     = set of tspectype;

type
  -- stav sestaven¡ symbolu
  linkstatus       = enum
      ls_undef;                                  -- dosud nen¡ zn mo
      ls_used;                                   -- symbol byl pou‘it
    --ls_resolved;                               -- jsou vyhodnoceny relokabiln¡ odkazy
      ls_linked;                                 -- je sestaveno
      end enum;

type
  -- stav glob ln¡ anal˜zy 
  analyzestatus    = enum
      as_none;                                   -- nic                                         
      as_analyzing;                              -- pr vˆ prob¡h                                
      as_analyzed;                               -- analyzov no                                 
      end enum;



----------------------------------------------------------------------------------------------------
#separate public cc_ref;
#separate private cc_ref;
-- Odkazy na entity a dal¨¡ elementy
----------------------------------------------------------------------------------------------------
#separate public cc_list;
#separate private cc_list;
-- Seznamy entit a p©¡m˜ch hodnot.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
-- Deklarativn¡ regiony
----------------------------------------------------------------------------------------------------
type
  -- typ regionu
  tregiontype      = enum
      rt_primary;                                -- prim rn¡ region
      rt_component;                              -- komponentov˜ region
      rt_enumeration;                            -- v˜‡tov˜ region
      rt_attribute;                              -- atributov˜ region
      rt_meta;                                   -- metaregion (#template)
      end enum;

  -- kategorie regionu
  tregioncategory  = enum
      rc_primary;
      rc_attribute;
      rc_meta;
      end enum;

  -- prim rn¡ regiony
  tprimaryregiontype = tregiontype range rt_primary..rt_enumeration;

  -- seznam deklarativn¡ch region–
  tregionlist      = t_flex_record with record
      first        : pregion;                    -- prvn¡ region
      last         : pregion;                    -- posledn¡ region
      end record;

  -- seznam entit
  tentitylist      = t_flex_record with record
      first        : pentity;                    -- prvn¡ entita
      last         : pentity;                    -- posledn¡ entita
      end record;

  -- tabulka identifik tor–
  tidnode;
  pidnode          = ^tidnode;
  tidnode          = t_flex_record with record
      left         : pidnode;                    -- lev˜ podstrom (left^.id <= id)
      right        : pidnode;                    -- prav˜ podstrom (right^.id > id)
      id           : pentityident;               -- identifik tor entity
      entity       : pentity;                    -- souvisej¡c¡ entita
      -- intern¡ £daje
      vaha         : t_signed;                   -- vyv ‘enost (v˜¨ka(lev˜)-v˜¨ka(prav˜))
    --hash         : t_unsigned32;               -- hash k¢d
      end record;

  -- kontext deklarace
  tcontext         = record                      -- kontext deklarace
      entity       : pentity;                    -- entita, ve kter‚ je tato entita deklarov na
      region       : pregion;                    -- deklarativn¡ region, ve kter‚m je entita deklarov na
      end record;

type
  ---- tabulka pou‘it˜ch modul– ---
 
  -- re‘im vazby
  twithmode    = enum
      twm_use;                                   -- USE
      twm_with;                                  -- WITH
      end enum;
  twithmodeset = set of twithmode;

  -- typ vazby
  twithtype    = enum
      twt_partial;                               -- ‡ ste‡n 
      twt_all;                                   -- £pln 
      end enum;
  twithtypeset = set of twithtype;
  
  -- tabulka pou‘it˜ch modul–
  twithtable   = ^string of record
      mode     : twithmode;                      -- re‘im vazby
      typ      : twithtype;                      -- typ vazby
      entity   : cc_ref.refentity;               -- symbol
      end record;

type
  -- deklarativn¡ region
  tregion          = t_flex_record with record
      rtype        : tregiontype;                -- typ deklarativn¡ho regionu
      regions      : tregionlist;                -- seznam pod©¡zen˜ch (vno©en˜ch) deklarativn¡ch region–
      entities     : tentitylist;                -- seznam entit deklarovan˜ch v tomto regionu
      idtable      : pidnode;                    -- tabulka identifik tor–
      withtable    : twithtable;                 -- tabulka pou‘it˜ch modul–                    
      vsect        : tentityvisible;             -- implicitn¡ viditelnost vno©en˜ch prvk–
      context      : tcontext;                   -- kontext: entita a region, do kter˜ch pat©¡ tento region
      prev         : pregion;                    -- p©edchoz¡ region
      next         : pregion;                    -- n sleduj¡c¡ region
      end record;

  -- top-level deklarativn¡ regiony
  ttoplevelregions = array tregioncategory of pregion;



----------------------------------------------------------------------------------------------------
-- Typy entit
----------------------------------------------------------------------------------------------------
type
  -- typ prvku
  tentitytype      = enum
      et_undef;        -- nen¡ definov no
      et_compile;      -- kompila‡n¡ jednotka
      et_program;      -- program
      et_module;       -- modul
      et_special;      -- speci ln¡ metoda
      et_procedure;    -- procedura
      et_static;       -- statick  metoda
      et_virtual;      -- virtu ln¡ metoda
      et_task;         -- task
      et_override;     -- p©et¡‘en¡ virtu ln¡ procedury
      et_macro;        -- makro
      et_overload;     -- p©et¡‘en¡
      et_operator;     -- oper tor
      et_var;          -- promˆnn 
      et_type;         -- typ
      et_class;        -- t©¡da
      et_const;        -- konstanta
      et_enum;         -- prvek v˜‡tov‚ho typu
      et_param;        -- form ln¡ parametr
      et_message;      -- zpr va
      et_label;        -- n vˆ¨t¡
      et_template;     -- #template;
      et_tparam;       -- parametr #template
      et_attribute;    -- atribut
      end enum;
  tentitytypeset   = set of tentitytype;

const
  -- prvky obsahuj¡c¡ prvky obsahuj¡c¡ k¢d
  ets_enclosed     = tentitytypeset:[et_program,et_module,et_class,et_special,et_procedure,
                     et_static,et_virtual,et_task,et_override];
  -- podprogramy
  ets_subprogram   = tentitytypeset:[et_special,et_procedure,et_static,et_virtual,et_task,
                     et_override];
  -- statick‚ podprogramy
  ets_static_subprogram = tentitytypeset:[et_procedure,et_static];
  -- podprogramy volateln‚ standardn¡m zp–dobem
  ets_callable     = tentitytypeset:[et_special,et_procedure,et_static,et_virtual];
  -- typy
  ets_type         = tentitytypeset:[et_type,et_class];
  -- prvky obsahuj¡c¡ p©¡kazovou ‡ st
  ets_body         = ets_subprogram + tentitytypeset:[et_program];
  -- prvky obsahuj¡c¡ kod
  ets_code         = ets_body + tentitytypeset:[et_compile];
  -- modul rn¡ entity
  ets_modular      = tentitytypeset:[et_module,et_class];
  -- prvky definuj¡c¡ vlastnosti vno©en˜ch deklarac¡
  ets_container    = tentitytypeset:[et_module,et_program,et_compile,et_class];
  -- prvky obaluj¡c¡ deklarace
  ets_enclosing    = ets_container + ets_subprogram;
  -- prvky s run-time atributy (jen odvozen‚ od TENTITY_VALUE)
  ets_rtattrib     = tentitytypeset:[et_var];

type
  -- popis typu entity
  tentitydesc      = record
      name         : t_char32str;                -- popisn‚ jm‚no typi entity
      id           : t_char32str;                -- identifik tor typu entity
      region       : tprimaryregiontype;         -- typ prim rn¡ho regionu
      end record;

var
  entitydesc       : const array tentitytype of tentitydesc := [
      for et_undef     use [for name use '<?>',                for id use '*undef'   , for region use rt_primary    ],
      for et_compile   use [for name use 'Compilation unit',   for id use 'compile'  , for region use rt_primary    ],
      for et_program   use [for name use 'Program',            for id use 'program'  , for region use rt_primary    ],
      for et_module    use [for name use 'Module',             for id use 'module'   , for region use rt_primary    ],
      for et_special   use [for name use 'Special method',     for id use 'special'  , for region use rt_primary    ],
      for et_procedure use [for name use 'Procedure',          for id use 'procedure', for region use rt_primary    ],
      for et_static    use [for name use 'Static method',      for id use 'static'   , for region use rt_primary    ],
      for et_virtual   use [for name use 'Virtual method',     for id use 'virtual'  , for region use rt_primary    ],
      for et_task      use [for name use 'Task',               for id use 'task'     , for region use rt_primary    ],
      for et_override  use [for name use 'Override',           for id use 'override' , for region use rt_primary    ],
      for et_macro     use [for name use 'Macro',              for id use 'macro'    , for region use rt_primary    ],
      for et_overload  use [for name use 'Overload',           for id use 'overload' , for region use rt_primary    ],
      for et_operator  use [for name use 'Operator',           for id use 'operator' , for region use rt_primary    ],
      for et_var       use [for name use 'Varibale',           for id use 'var'      , for region use rt_primary    ],
      for et_type      use [for name use 'Type',               for id use 'type'     , for region use rt_component  ],
      for et_class     use [for name use 'Class',              for id use 'class'    , for region use rt_primary    ],
      for et_const     use [for name use 'Constant',           for id use 'const'    , for region use rt_primary    ],
      for et_enum      use [for name use 'Enumeration item',   for id use 'enum'     , for region use rt_enumeration],
      for et_param     use [for name use 'Parameter',          for id use 'param'    , for region use rt_primary    ],
      for et_message   use [for name use 'Message',            for id use 'message'  , for region use rt_component  ],
      for et_label     use [for name use 'Label',              for id use 'label'    , for region use rt_primary    ],
      for et_template  use [for name use 'Template',           for id use '#template', for region use rt_component  ],
      for et_tparam    use [for name use 'Template parameter', for id use 'tparam'   , for region use rt_primary    ],
      for et_attribute use [for name use 'Attribute',          for id use 'attribute', for region use rt_primary    ]];
{%ON}



----------------------------------------------------------------------------------------------------
-- Datov‚ typy
----------------------------------------------------------------------------------------------------
type
  -- datov‚ typy
  tdatatype        = enum
      -- pseudotypy
      dt_undef;        -- nezn m˜ typ
      -- univerz ln¡ typy
      dt_uniint;       -- univerz ln¡ cel‚ ‡¡slo
      dt_unireal;      -- univerz ln¡ re ln‚ ‡¡slo
      dt_unilogical;   -- univerz ln¡ logical
      dt_unichar;      -- univerz ln¡ znak
      dt_uniarray;     -- univerz ln¡ pole
      dt_uninil;       -- univerz ln¡ NIL
      -- regul rn¡ typy
      dt_ordinal;      -- generick˜ ordin ln¡ typ
      dt_signed;       -- typ cel‚ ‡¡slo se znam‚nkem
      dt_unsigned;     -- typ cel‚ ‡¡slo bez znam‚nka
      dt_float;        -- typ re ln‚ ‡¡slo
      dt_char;         -- typ znak
      dt_logical;      -- typ logical
      dt_string;       -- typ ©etˆzec
      dt_ustring;      -- typ neomezen˜ ©etˆzec
      dt_array;        -- typ pole
      dt_uarray;       -- typ neomezen‚ pole
      dt_record;       -- typ z znam
      dt_class;        -- typ t©¡da
   -- dt_interface;    -- typ interface
      dt_enum;         -- typ v˜‡et
      dt_set;          -- typ mno‘ina
      dt_pointer;      -- typ pointer
      dt_tag;          -- typ tag
      -- singul rn¡ typy
      dt_message;      -- typ zpr va
      dt_procedure;    -- typ podprogram
      dt_task;         -- typ task
      end enum;
  tdatatypeset     = set of tdatatype;

const
  -- v¨echny typy
  dts_all            = tdatatypeset:full;
  -- speci ln¡ hodnoty
  dts_special        = tdatatypeset:[dt_undef{,dt_unchecked,dt_hidden}];
  -- univerz ln¡ typy
  dts_unitype        = tdatatypeset:[dt_uniint,dt_unireal,dt_unilogical,dt_unichar,{dt_unistr,}dt_uniarray,dt_uninil];
  -- intern¡ typy
  dts_internal       = dts_special + dts_unitype;
  -- singul rn¡ typy
  dts_singular       = tdatatypeset:[dt_message,dt_procedure,dt_task];
  -- regul rn¡ typy
  dts_regular        = dts_all-dts_internal-dts_singular;
  -- unconstrained typy
  dts_unconstrained  = tdatatypeset:[dt_ustring,dt_uarray];
  -- constrained typy
  dts_constrained    = dts_regular - dts_unconstrained;
  -- ordin ln¡ typy
  dts_ordinal        = tdatatypeset:[dt_ordinal,dt_signed,dt_unsigned,dt_logical,dt_char,dt_enum];
  dts_u_ordinal      = dts_ordinal + tdatatypeset:[dt_uniint,dt_unilogical,dt_unichar];
  -- znakov‚ typy
  dts_char           = tdatatypeset:[dt_char];
  dts_u_char         = dts_char + tdatatypeset:[dt_unichar];
  -- celo‡¡seln‚ typy
  dts_integer        = tdatatypeset:[dt_signed,dt_unsigned];
  dts_u_integer      = dts_integer + tdatatypeset:[dt_uniint];
  -- logick‚ typy
  dts_logical        = tdatatypeset:[dt_logical];
  dts_u_logical      = dts_logical + tdatatypeset:[dt_unilogical];
  -- v˜‡tov‚ typy
  dts_enum           = tdatatypeset:[dt_enum];
  dts_u_enum         = dts_enum;
  -- re ln‚ typy
  dts_real           = tdatatypeset:[dt_float];
  dts_u_real         = dts_real + tdatatypeset:[dt_unireal];
  -- ‡¡seln‚ typy
  dts_numeric        = dts_integer + dts_real;
  dts_u_numeric      = dts_u_integer + dts_u_real;
  -- typy s b zov˜m typem
  dts_base           = {dts_ordinal +} tdatatypeset:[dt_string,dt_ustring,dt_array,dt_uarray,dt_pointer,dt_set];
  dts_u_base         = dts_base + tdatatypeset:[{dt_unistr}dt_uniarray];
  -- mno‘inov‚ typy
  dts_set            = tdatatypeset:[dt_set];
  dts_u_set          = dts_set;
  -- ©etˆzcov‚ typy
  dts_string         = tdatatypeset:[dt_string,dt_ustring];
  dts_u_string       = dts_string + tdatatypeset:[{dt_unistr}dt_uniarray];
  -- pole
  dts_array          = tdatatypeset:[dt_array,dt_uarray];
  dts_u_array        = dts_array + tdatatypeset:[{dt_unistr}dt_uniarray];
  -- typy s indexovan˜mi komponentami
  dts_index          = dts_string + dts_array;
  dts_u_index        = dts_u_string + dts_u_array;
  -- neindexovan‚ regul rn¡ typy
  dts_unindexed      = dts_regular-dts_index;
  dts_u_unindexed    = dts_unindexed + dts_unitype - tdatatypeset:[dt_uniarray];
  -- agreg tn¡
  dts_aggregate      = dts_array + dts_string + tdatatypeset:[dt_record,dt_set];
  -- t©¡dy
  dts_class          = tdatatypeset:[dt_class];
  -- kompozitn¡ typy
  dts_composite      = dts_aggregate + dts_class;
  -- typy s komponentami
  dts_component      = dts_array + dts_string + tdatatypeset:[dt_class,dt_record];
  -- pointery
  dts_pointer        = tdatatypeset:[dt_pointer];
  dts_u_pointer      = dts_pointer;
  -- zpr vy
  dts_message        = tdatatypeset:[dt_message];
  dts_u_message      = dts_message;
  -- tagy
  dts_tag            = tdatatypeset:[dt_tag];
  dts_u_tag          = dts_tag;

var
  -- datove typy
  tdatatypename    : const array tdatatype of t_char32str := [
      for dt_undef      use '<nezn m˜>',
      for dt_uniint     use 'Universal integer',     
      for dt_unireal    use 'Universal real',
      for dt_unilogical use 'Universal logical',
      for dt_unichar    use 'Universal character',
      for dt_uniarray   use 'Universal array',
      for dt_uninil     use 'Universal NIL',
      for dt_ordinal    use 'Integer',   
      for dt_signed     use 'Signed integer',
      for dt_unsigned   use 'Unsigned integer',
      for dt_float      use 'Float',
      for dt_char       use 'Character',
      for dt_logical    use 'Logical',
      for dt_string     use 'String',
      for dt_ustring    use 'Unconstrained string',
      for dt_array      use 'Array',
      for dt_uarray     use 'Unconstrained array',
      for dt_record     use 'Record',
      for dt_class      use 'Class',
   -- for dt_interface  use 'Interface',
      for dt_enum       use 'Enumeration',
      for dt_set        use 'Set',
      for dt_pointer    use 'Pointer',
      for dt_tag        use 'Tag',
      for dt_message    use 'Message',
      for dt_procedure  use 'Subprogram',
      for dt_task       use 'Task'];

{%OFF}
var
  -- datove typy
  tdatatypetxt     : const array tdatatype of t_char32str := [
      for dt_undef      use '*undef',
      for dt_uniint     use 'uniint',
      for dt_unireal    use 'unireal',
      for dt_unilogical use 'unilogical',
      for dt_unichar    use 'unichar',
      for dt_uniarray   use 'uniarray',
      for dt_uninil     use 'uninil',
      for dt_ordinal    use 'ordinal',
      for dt_signed     use 'signed',
      for dt_unsigned   use 'unsigned',
      for dt_float      use 'float',
      for dt_char       use 'char',
      for dt_logical    use 'logical',
      for dt_string     use 'string',
      for dt_ustring    use 'ustring',
      for dt_array      use 'array',
      for dt_uarray     use 'uarray',
      for dt_record     use 'record',
      for dt_class      use 'class',
   -- for dt_interface  use 'interface',
      for dt_enum       use 'enum',
      for dt_set        use 'set',
      for dt_pointer    use 'pointer',
      for dt_tag        use 'tag',
      for dt_message    use 'message',
      for dt_procedure  use 'procedure',
      for dt_task       use 'task'];
{%ON}



----------------------------------------------------------------------------------------------------
-- Entita
----------------------------------------------------------------------------------------------------
type
  -- 
  t_var_cache      = array tspectype of memclassset;

  -- entita
  tentity          = t_flex_record with record
      ---- z kladn¡ vlastnosti entity ----
      etype        : tentitytype;                -- typ entity
      id           : pentityident;               -- identifik tor entity
      ---- kontext -----
      prev         : pentity;                    -- p©edchoz¡ entita
      next         : pentity;                    -- n sleduj¡c¡ entita
      regions      : ttoplevelregions;           -- seznam region–
      context      : tcontext;                   -- kontext: entita a region, do kter˜ch pat©¡ tato entita
      ancestor     : cc_ref.refentity;           -- p©edek
      ---- p©¡znaky entity a stavov‚ promˆnn‚ ----
      visible      : tentityvisible;             -- viditelnost prvku
      full         : tentityvisible;             -- viditelnost £pln‚ deklarace
      declared     : tentitydeclared;            -- pr–bˆh p©ekladu deklarace
      evaluated    : tentitydeclared;            -- vyhodnocen‚ ‡ sti deklarace
      compiling    : tentitydeclared;            -- p©ekl dan  ‡ st deklarace
      eval         : tentityeval{set};           -- vyhodnocen¡ symbolu
      compile      : tentitycompileset;          -- re‘im p©ekladu
      pos          : tentitypositions;           -- pozice symbolu
      compv        : tcompvar;                   -- parametry p©ekladu
      is_abstract  : t_logical;                  -- entita je abstraktn¡ (m  smysl jen pro nˆkter‚ typy entit)
      ---- informace p©idan‚ glob ln¡ anal˜zou ----
      analyzed     : analyzestatus;              -- stav glob ln¡ anal˜zy
      loc_var_cache: t_var_cache;                -- lok ln¡ p©¡znak vol n¡ spec. metod pro promˆnn‚
      tra_var_cache: t_var_cache;                -- tranzitivn¡ p©¡znak vol n¡ spec. metod pro prom.
      ---- generov n¡ k¢du ----
      codegen      : p_flex_record;              -- p©¡davn‚ informace pro gener tor k¢du
      ---- linkov n¡ ----
      linked       : linkstatus;                 -- stav slinkov n¡ entity
      debugstat    : analyzestatus;              -- stav generov n¡ debug informace
      ---- statistiky ---- 
      stat_usage   : t_unsigned;                 -- po‡et pou‘it¡
      end record;

----------------------------------------------------------------------------------------------------
procedure entity_set_position (
    entity         : in out tentity;             -- entita
    level          : in tentityposition;         -- pro jakou pozici a‘ nastavovat
    pos            : in cc_def.cc_lexsym.lexposblock); -- pozice ve zdroj ku
-- Nastav¡ v¨echny dosud nenastaven‚ pozice zadan‚ entity a‘ do pozice LEVEL v‡etnˆ na uvedenou
-- pozici POS.
----------------------------------------------------------------------------------------------------
procedure entity_set_position_all (
    entity         : in out tentity;             -- entita
    pos            : in cc_def.cc_lexsym.lexposblock); -- pozice ve zdroj ku
-- Nastav¡ v¨echny pozice zadan‚ entity na uvedenou pozici POS.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
-- Entita obsahuj¡c¡ k¢d
----------------------------------------------------------------------------------------------------
type
  tentity_code     = tentity with record
      bl           : cc_ref.refblock;            -- blok p©¡kaz–
      nesting      : t_unsigned;                 -- £rove¤ vno©en¡ podprogramu
      end record;



----------------------------------------------------------------------------------------------------
-- Kompila‡n¡ jednotka
----------------------------------------------------------------------------------------------------
type
  tentity_compile  = tentity_code with record
      end record;



----------------------------------------------------------------------------------------------------
-- Program
----------------------------------------------------------------------------------------------------
type
  tentity_program  = tentity_code with record
      end record;



----------------------------------------------------------------------------------------------------
-- Modul
----------------------------------------------------------------------------------------------------
type
  tentity_module   = tentity with record
      lib_info     : p_flex_record;              -- informace knihovnika
      end record;



----------------------------------------------------------------------------------------------------
-- Objekt s inici ln¡ hodnotou
----------------------------------------------------------------------------------------------------
type
  tentity_init     = tentity with record
      init         : cc_ref.refimm;              -- inicializa‡n¡ v˜raz
      end record;



----------------------------------------------------------------------------------------------------
-- Prvek s promˆnnou hodnotou
----------------------------------------------------------------------------------------------------
type
  ----- %%TECH Run-time atributy -------------------------------------------------------------------
  -- Run-time atributy jsou ulo‘eny v pamˆti v po©ad¡ definovan‚m deklarac¡
  -- datov‚ho typu RTATTRIB (=> nemˆnit), tedy:
  --
  --                +-----------+
  --                | :last     |  +n
  --                +-----------+
  --                | :size     |
  --                +-----------+
  --                | :tag      |
  --                +-----------+
  --                | ^instance |  +0
  --                +-----------+
  --
  --------------------------------------------------------------------------------------------------

  -- run-time atributy (POZOR: nemˆnit po©ad¡)
  rtattrib         = enum
      rta_instance for ord use 0;                -- ^instance
      rta_tag      for ord use 1;                -- atribut :tag
      rta_size     for ord use 2;                -- atribut :size
      rta_last     for ord use 3;                -- atribut :last
      end enum;
  rtattribset      = set of rtattrib;

const
  -- dynamick‚ atributy t©¡dy
  rtas_class       = rtattribset:[rta_tag,rta_size];

type
  tentity_value    = tentity_init with record
      typ          : cc_ref.reftype;             -- typ promenne
      rta_avail    : rtattribset;                -- teoreticky poskytovan‚ dynamick‚ atributy
      rta_used     : rtattribset;                -- fakticky pou‘it‚ dynamick‚ atributy
      rta_fixed    : t_logical;                  -- T-mno‘ina pou‘it˜ch dynamick˜ch atribut– je
                                                 -- fixovan  a nelze ji ji‘ mˆnit
      end record;


----------------------------------------------------------------------------------------------------
-- Form ln¡ parametr
----------------------------------------------------------------------------------------------------
type
  -- m¢d parametru
  parammode        = enum
      pm_in;                                     -- IN
      pm_out;                                    -- OUT
      pm_inout;                                  -- IN OUT
      end enum;
  parammodeset     = set of parammode;

  -- p©ed v n¡ parametru
  parampass        = enum
      pp_default;                                -- implicitn¡
      pp_value;                                  -- hodnotou
      pp_ref;                                    -- odkazem
      pp_unchecked;                              -- odkazem, bez typov‚ kontroly
      pp_class;                                  -- odkazem, v‡etnˆ odvozen˜ch typ–
      pp_virtual;                                -- odkazem, ©¡d¡c¡ parametr virtu ln¡ho vol n¡
      end enum;
  parampassset     = set of parampass;

const
  -- p©ed n¡ hodnotou
  pps_value        = parampassset:[pp_value];
  -- p©ed n¡ odkazem
  pps_ref          = parampassset:[pp_ref,pp_unchecked,pp_class,pp_virtual];
  -- tagged p©ed n¡
  pps_tagged       = parampassset:[pp_class,pp_virtual];

type
  -- definice form ln¡ho parametru
  tentity_param    = tentity_value with record
      mode         : parammode;                  -- m¢d parametru
      pass         : parampass;                  -- zp–sob p©ed n¡ parametru
      size         : tunidata_size;              -- velikost (s p©ihl‚dnut¡m k zp–sobu p©ed n¡)
      num          : t_unsigned;                 -- po©ad¡ parametru
      end record;



----------------------------------------------------------------------------------------------------
-- Promˆnn 
----------------------------------------------------------------------------------------------------
type
  ----- %%TECH -------------------------------------------------------------------------------------
  -- Pojem pamˆŸov  t©¡da z hlediska jazyka a p©eklada‡e je rozd¡ln˜.
  -- PamˆŸov  t©¡da definovan  jazykem ur‡uje vlastnosti promˆnn‚, pamˆŸov 
  -- t©¡da definovan  p©eklada‡em ur‡uje oblast pamˆti, v n¡‘ je promˆnn 
  -- ulo‘ena. Dal¨¡ vlastnosti definovan‚ pamˆŸovou t©¡dou jazyka jsou
  -- reprezentov ny dal¨¡mi p©¡znaky promˆnn‚.
  --------------------------------------------------------------------------------------------------

  -- p©¡znaky promˆnn‚
  varflags         = enum
    --vf_persistent;                             -- persistentn¡ promˆnn 
    --vf_secure;                                 -- zabezpe‡en  promˆnn 
      vf_;
      end enum;
  varflagset       = set of varflags;

  -- m¢d p©¡stupu k promˆnn‚
  varmode          = enum
      vm_direct;                                 -- p©¡mo
      vm_ref;                                    -- p©es referenci
      end enum;

  -- determinace p©¡stupu
  varaccess        = enum
      va_norm;                                   -- bez omezen¡
      va_protected;                              -- ‡ ste‡nˆ read-only
      va_const;                                  -- read-only
      end enum;
  varaccessset     = set of varaccess;

  -- definice promenne
  tentity_var      = tentity_value with record
      mclass       : memclass;                   -- t©¡da promˆnn‚
      vflags       : varflagset;                 -- dal¨¡ p©¡znaky
      vmode        : varmode;                    -- m¢d p©¡stupu k promˆnn‚
      vaccess      : varaccess;                  -- determinace p©¡stupu
      addr         : tunidata_addr;              -- adresa promenne
      pparam       : pentity_param;              -- souvisej¡c¡ parametr
      -- program torem p©edefinovateln‚ atributy
      attr_position: cc_ref.refexpr;             -- pozice slo‘ky recordu
      end record;



----------------------------------------------------------------------------------------------------
-- Konstanta.
----------------------------------------------------------------------------------------------------
type
  -- modifik tory konstanty
  constflags       = enum
      cf_typed;                                  -- explicitnˆ uveden˜ typ konstanty
      end enum;
  constflagset     = set of constflags;

  -- konstanta
  tentity_const    = tentity_value with record
      cflags       : constflagset;               -- modifik tory
      end record;



----------------------------------------------------------------------------------------------------
-- Podprogram
----------------------------------------------------------------------------------------------------

  ----- %%TECH Adresn¡ t©¡dy a volac¡ konvence podprogram– -----------------------------------------
  -- Zp–sob vol n¡ podprogramu je ur‡en adresn¡ t©¡dou a volac¡ konvenc¡.
  -- Adresn¡ t©¡da vych z¡ z typu podprogramu, volac¡ konvence je z le‘itost¡
  -- procesoru/opera‡n¡ho syst‚mu a nen¡ ur‡ena jakyzem. Adresn¡ t©¡da ©¡k ,
  -- jak m  b˜t podprogram spu¨tˆn - p©¡m˜m vol n¡m, intern¡m vol n¡m
  -- hostitelsk‚ho syst‚mu, paralelnˆ, volac¡ tabulkou - a jak‚ skryt‚
  -- parametry (to se net˜k  atribut– skute‡n˜ch parametr–, ale jen ‡istˆ
  -- provozn¡ch informac¡) se mu p©ed vaj¡ - instance t©¡dy. Volac¡ konvence
  -- up©es¤uje zp–sob p©ed n¡ parametr– - na stacku, v registrech, jejich
  -- po©ad¡ - a zp–sob p©ed n¡ n vratov‚ hodnoty.
  --------------------------------------------------------------------------------------------------

  ----- %%TECH Vno©en‚ podprogramy -----------------------------------------------------------------
  -- Pokud podprogram obsahuje vno©en‚ podprogramy, pak je o tom p©i glob ln¡
  -- anal˜ze sestavena informace, kter  je k dispozici gener toru k¢du. Je
  -- vypo‡¡t na £rove¤ vno©en¡ podprogramu, p©i‡em‘ 1 znamen  top-level, 2 je
  -- prvn¡ vno©en˜ podprogram atd. Hodnota 0 je rezervov na a znamen , ‘e
  -- podprogram je samostatn˜ a ani neobsahuje ‘ dn‚ dal¨¡ vno©en‚
  -- podprogramy.
  --   Tento mechanismus identifikace jsem zvolil jednak kv–li snadnosti
  -- implementace a nav¡c to p©¡mo odpov¡d  s‚mantice instrukce ENTER jako je
  -- implementov na na IA-32 procesorech, co‘ sice zav n¡ jistou orientac¡ na
  -- konkr‚tn¡ platformu, ale moc rozumn˜ch zp–sob–, jak to dˆlat jinak, mˆ
  -- nenapad .
  --   Pozn mka: Promˆnn  NESTING, kter  obsahuje tento £daj, je deklarov na
  -- ji‘ v TENTITY_CODE, proto‘e nap©¡klad p©et¡‘en¡ virtu ln¡ metody je norm ln¡
  -- podprogram, ale nem  vlastnosti jako TENTITY_SUBPROGRAM a tud¡‘ od nˆj nen¡
  -- odvozen.
  --------------------------------------------------------------------------------------------------

type
  -- p©ed v n¡ instance
  tinstancepass    = enum
      tip_none;                                  -- nep©ed vat
      tip_optional;                              -- p©ed vat; nen¡-li, tak NIL
      tip_pass;                                  -- p©ed vat
      tip_dispatch;                              -- p©ed vat, ©¡d¡c¡ parametr virtu ln¡ho vol n¡
      end enum;

  -- podprogram
  tentity_subprogram = tentity_code with record
      instance     : tinstancepass;              -- p©ed v n¡ instance
      typ          : cc_ref.reftype;             -- typ podprogramu
      end record;

  -- statick˜ podprogram
  tentity_static_subprogram = tentity_subprogram with record
      -- hinty (%%TODO(?) p©edˆlat na mno‘inu ?)
      no_return    : t_logical;                  -- T-z tohoto podprogramu se to ji‘ nevr t¡
      end record;

----------------------------------------------------------------------------------------------------
-- Procedura
----------------------------------------------------------------------------------------------------
type
  tentity_procedure = tentity_static_subprogram with record
      import_info  : p_flex_record;              -- informace pro import
      export_info  : p_flex_record;              -- informace pro export
      end record;



----------------------------------------------------------------------------------------------------
-- Statick  metoda
----------------------------------------------------------------------------------------------------
type
  tentity_static   = tentity_static_subprogram with record
      end record;



----------------------------------------------------------------------------------------------------
-- Virtu ln¡ metoda
----------------------------------------------------------------------------------------------------
type
  -- typ virtu ln¡ho vol n¡ 
  tvcalltype       = enum
      tvct_simple_index;                         -- jednoduch‚ vol n¡ indexem do CLD            
      tvct_complex;                              -- komplexn¡ vol n¡ podle typ– parametr–       
      end enum;

  -- virtu ln¡ tabulka
  tvirtualtable    = string of pentity_subprogram;
  pvirtualtable    = ^tvirtualtable;

  -- index virtu ln¡ metoda
  tvirtualindex    = tvirtualtable:range;

  -- virtu ln¡ metda
  tentity_virtual  = tentity_subprogram with record
      vcall        : tvcalltype;                 -- typ virtu ln¡ho vol n¡                      
      vindex       : tvirtualindex;              -- index virtu ln¡ metody                      
      end record;



----------------------------------------------------------------------------------------------------
-- Speci ln¡ metoda
----------------------------------------------------------------------------------------------------
var
  -- jm‚na speci ln¡ch metod
  tspectypetxt     : const array tspectype of tshortident := [
      for tst_init     use id_init,
      for tst_entry    use id_entry_lex,
      for tst_exit     use id_exit_lex,
      for tst_adjust   use id_adjust_lex,
      for tst_rollback use id_rollback_lex,
      for tst_commit   use id_commit_lex];

  -- virtu ln¡ identifik tory speci ln¡ch metod 
  tspectypeid      : protected array tspectype of pentityident {%%TODO(INIT)};

type
  -- program torem specifikovateln‚ speci ln¡ metody
  tuserspectype    = tspectype range tst_entry..tspectype:last;

  -- objekt, ke kter‚mu se speci ln¡ metoda vztahuje
  tspecobject      = enum
      tso_class;                                 -- k instanci t©¡dy
      tso_module;                                -- k modulu
      tso_type;                                  -- k instanci typu jin‚ho ne‘ t©¡dy
      end enum;

  -- tabulka speci ln¡ch metod
  tspectable       = array tspectype of cc_ref.refentity;

type
  -- definice speci ln¡ metody
  tentity_special  = tentity_subprogram with record
      spectype     : tspectype;                  -- typ speci ln¡ metody
      specobj      : tspecobject;                -- objekt, ke kter‚mu se spec. metoda vztahuje
      end record;



----------------------------------------------------------------------------------------------------
-- Task
----------------------------------------------------------------------------------------------------
type
  tentity_task     = tentity_subprogram with record
      end record;



----------------------------------------------------------------------------------------------------
-- Makro
----------------------------------------------------------------------------------------------------
type
  tentity_macro    = tentity_subprogram with record
      end record;



----------------------------------------------------------------------------------------------------
-- P©et¡‘en¡ virtu ln¡ metody
----------------------------------------------------------------------------------------------------
type
  tentity_override = tentity_code with record
      virt         : cc_ref.refentity;           -- souvisej¡c¡ virtu ln¡ metoda                
      end record;



----------------------------------------------------------------------------------------------------
-- Spole‡n˜ z klad p©et¡‘en¡ a oper toru
----------------------------------------------------------------------------------------------------
type
  -- %%TECH Pro jednoduchost se pou‘¡v  stejn˜ seznam procedur pro p©et¡‘en¡
  -- i pro oper tory, i kdy‘ ve variantˆ pro p©et¡‘en¡ obsahuje irelevantn¡
  -- £daje.
  
  -- popis jednoho p©et¡‘en¡
  toverloaddesc    = record
      psym         : cc_ref.refentity;           -- symbol
      arity        : tooperarity;                -- arita oper toru
      assign       : t_logical;                  -- T-oper tor pro zkr cen‚ p©i©azen¡
      end record;               
  poverloaddesc    = ^toverloaddesc;

  -- tabulka p©et¡‘en¡
  toverloadtable   = string of toverloaddesc;
  poverloadtable   = ^toverloadtable;

  -- p©et¡‘en¡ nebo oper tor
  tentity_overload0 = tentity with record
      table        : poverloadtable;             -- tabulka p©et¡‘en˜ch procedur
      end record;



----------------------------------------------------------------------------------------------------
-- P©et¡‘en¡
----------------------------------------------------------------------------------------------------
type
  tentity_overload = tentity_overload0 with record
      end record;



----------------------------------------------------------------------------------------------------
-- Oper tor
----------------------------------------------------------------------------------------------------
type
  tentity_operator = tentity_overload0 with record
      oop          : tooperator;                 -- p©et¡‘iteln˜ oper tor
      end record;



----------------------------------------------------------------------------------------------------
-- Prvek v˜‡tov‚ho typu.
----------------------------------------------------------------------------------------------------
type
  ---- definice prvku v˜‡tov‚ho typu ----
  tentity_enum     = tentity with record
      typ          : pentity_type;               -- souvisej¡c¡ v˜‡tov˜ typ
      order        : t_unsigned;                 -- po©ad¡ deklarace
      ordinal      : tuniint;                    -- ordin ln¡ hodnota
      -- program torem p©edefinovateln‚ atributy
      attr_ord     : cc_ref.refexpr;             -- :ord
      end record;



----------------------------------------------------------------------------------------------------
-- Typ
----------------------------------------------------------------------------------------------------
type
  -- druh typu
  typekind         = enum
      tk_unknown;                                -- dosud nezn m˜
      tk_regular;                                -- regul rn¡
      tk_singular;                               -- singul rn¡
      end enum;

  -- pohledy na typ
  ttypeview        = enum
      tview_null;                                -- pr zdn˜ pohled, typ nen¡ k dispozici
      tview_aggregate;                           -- libovoln˜ agreg tn¡ typ
      tview_incomplete;                          -- Incomplete view
      tview_partial;                             -- Partial view
      tview_full;                                -- Full view
      tview_unchecked;                           -- Unchecked view
      end enum;
  ttypeviewset     = set of ttypeview;

  -- determinace kompatibility
  typecompat       = enum
      tc_norm;                                   -- bez omezen¡
      tc_protected;                              -- protected
      tc_private;                                -- private
      end enum;

  -- typ derivace
  typederive       = enum
      td_root;                                   -- root typ
      td_unconstrained;                          -- trivi ln¡ derivace
      td_constrained;                            -- type constraint
      td_extension;                              -- type extension
      td_private_extension;                      -- private extension
      end enum;
{
  -- typov  informace
  typetaginfo      = enum
      tag_static;                                -- statick 
      tag_dynamic;                               -- dynamick 
      end enum;
}
  -- p©¡znaky typu
  typeflags        = enum
      tf_tagged;                                 -- typ je tagged
      tf_temp;                                   -- typ je do‡asn˜
      end enum;
  typeflagsset     = set of typeflags;

  -- zp–sob inicializace instance typu
  typeinit         = enum
      ti_normal;                                 -- standardn¡ inicializace
      ti_complex;                                -- kompexn¡ inicializace vol n¡m metody INIT
      end enum;

  -- typ celo‡¡seln‚ aritmetiky
  tintaritm        = enum
      tia_normal;                                -- norm ln¡
      tia_modular;                               -- modul rn¡
      end enum;

{ Ondra 3.4.2003 : Zru¨eno, float se novˆ definuje po‡tem bit–.
  -- typ definice re ln‚ho ‡¡sla
  tfloatdeftype    = enum
      fdt_delta;
      fdt_digits;
      end enum;
}
  -- statick‚ parametry re ln‚ho ‡¡sla (nezmˆniteln‚ u‘ivatelem)
  tfloatsparams    = record
      low          : tunireal;                   -- nejmen¨¡ ‡¡slo
      high         : tunireal;                   -- nejvˆt¨¡ ‡¡slo
      small        : tunireal;                   -- nejmen¨¡ ‡¡slo vˆt¨¡ ne‘ 0
    { Tot‚‘ co DELTA:
      epsilon      : tunireal;                   -- nejmen¨¡ kladn‚ ‡¡slo takov‚, ‘e 1+eps>1
    }
   -- radix        : tuniint;                    -- z klad exponentu
   -- mantissa     : tuniint;                    -- po‡et m¡st mantisy (?)
      emin         : tuniint;                    -- nejmen¨¡ exponent
      emax         : tuniint;                    -- nejvˆt¨¡ exponent
      szeros       : tunilogical;                -- T-rozli¨uje se +/- 0
      pinf         : tunireal;                   -- Positive Infinity
      ninf         : tunireal;                   -- Negative Infinity
      pzero        : tunireal;                   -- Positive Zero
      nzero        : tunireal;                   -- Negative Zero
      nan          : tunireal;                   -- Not a Number
      end record;
  pfloatsparams    = ^tfloatsparams;

  -- parametry re ln‚ho ‡¡sla (definovan‚ nebo zmˆniteln‚ u‘ivatelem)
  tfloatparams     = record
      fdelta       : tunireal;                   -- p©esnost
      fdigits      : tuniint;                    -- po‡et m¡st
      rounding     : tunilogical;                -- T-zaokrouhlov n¡
      -- %%X Zaokrouhlen¡ mohou b˜t ‡ty©i:
      --  - k nejbli‘¨¡mu ‡¡slu (norm ln¡)
      --  - k nule (o©¡znut¡)
      --  - k +inf (nahoru)
      --  - k -inf (dol–)
      oflw         : tunilogical;                -- T-p©ete‡en¡ zp–sob¡ CONSTRAINT_ERROR
      sparams      : pfloatsparams;              -- statick‚ parametry
      end record;

  ----- %%LANG Pointery ve Flexu -------------------------------------------------------------------
  -- Ve Flexu jsou ‡ty©i typy pointer–:
  --   -- na data,
  --   -- na podprogram (proceduru nebo metodu),
  --   -- na task,
  --   -- na zpr vu.
  -- Z klad pointeru je z visl˜ na jeho typu -- obsahuje buƒ pointer na data,
  -- pointer na podprogram, ID tasku nebo ‡¡slo zpr vy. D le m–‘e obsahovat
  -- r–zn‚ voliteln‚ parametry:
  --   -- atribut :tag, byl-li deklarov n s modifik torem CLASS,
  --   -- atribut :size, je-li CLASS nebo UNCHECKED nebo je-li to pointer
  --      na neomezen˜ typ,
  --   -- pointer na instanci, je-li to pointer na podprogram.
  --------------------------------------------------------------------------------------------------

  -- t©¡da pointeru
  ptrclass         = enum
      pc_data;                                   -- p©¡stup k dat–m
      pc_subprogram;                             -- p©¡stup k podprogramu
      pc_task;                                   -- p©¡stup k tasku
      pc_message;                                -- p©¡stup ke zpr vˆ
      end enum;
  ptrclassset      = set of ptrclass;

  -- kompatibilita b ze
  ptrbase          = enum
      pb_strict;                                 -- pouze identick‚ b ze
      pb_class;                                  -- pouze odvozen‚ b ze
      pb_unchecked;                              -- libovoln‚ b ze
      end enum;
  ptrbaseset       = set of ptrbase;
{
  -- nepovinn‚ atributy pointeru
  ptrattrib        = enum
      pa_tag;                                    -- :tag
      pa_size;                                   -- :size
      pa_instance;                               -- ^instance
      end enum;
  ptrattribset     = set of ptrattrib;
}
  -- modifik tory pointeru
  ptrflags         = enum
    --pf_type;                                   -- pointer obsahuje typovou identifikaci
    --pf_unchecked;                              -- pointer je univerz lnˆ kompatibiln¡
    --pf_const;                                  -- pointer odkazuje na konstantn¡ objekt
      pf_machine;                                -- machine pointer
      end enum;
  ptrflagsset      = set of ptrflags;

  -- parametry typu procedura
  procflags        = enum
      rf_virtual;                                -- obsahuje ©¡d¡c¡ parametry virtu ln¡ho vol n¡
      end enum;
  procflagset      = set of procflags;

  -- p©¡znak, zda typ obsahuje instanci t©¡dy
  tcontainsclass = enum
      tcc_unknown;                               -- dosud nezji¨tˆno
      tcc_yes;                                   -- ano
      tcc_no;                                    -- ne
      end enum;

  -- typ
  tentity_type     = tentity_init with record
      ----- %%TECH Upozornˆn¡ ----------------------------------------------------------------------
      -- P©i p©id v n¡ nov‚ slo‘ky nezapome¤ doplnit jej¡ kop¡rov n¡ nebo
      -- jinou p©¡slu¨nou akci do CD_EVAL.E_TYPE_DERIVED.
      ----------------------------------------------------------------------------------------------
      -- specifikace obecn‚ho typu
      tkind        : typekind;                   -- druh typu
      stype        : tdatatype;                  -- o jak˜ typ se jedn 
      {%%X m  smysl udr‘ovat oddˆlen‚ EVAL a SEVAL ? }
      seval        : tentityeval{set};           -- vyhodnocen¡ specifikace
      size         : tunidata_size;              -- velikost typu
      derive       : typederive;                 -- typ derivace
      defview      : ttypeview;                  -- default view typu
      extofs       : tunidata_addr{%%X(OFS)};    -- posunut¡ extension
      tflags       : typeflagsset;               -- flagy typu
      compat       : typecompat;                 -- determinace kompatibility
      expr         : cc_ref.refexpr;             -- souvisej¡c¡ v˜raz
      align        : tunidata_size;              -- zarovn n¡ slo‘ek typu
      tinit        : typeinit;                   -- zp–sob inicializace typu
      stable       : tspectable;                 -- tabulka speci ln¡ch metoda
      -- %%TECH CCLASS slou‘¡ jako cache na v˜sledek v˜po‡tu procedury         
      -- CC_TYPE.T_CONTAINS_CLASS
      cclass       : tcontainsclass;-- p©¡znak, zda typ obsahuje instanci t©¡dy
      -- specifikace typu s b zov˜m typem
      base         : cc_ref.reftype;             -- b zov˜ typ
      -- specifikace ordin ln¡ho typu
      lval         : tuniint;                    -- ordinalni hodnota dolni meze
      hval         : tuniint;                    -- ordinalni hodnota horni meze
      bits         : tunidata_bitsize;           -- velikost v bitech
      -- specifikace celo‡¡seln‚ho typu
      intaritm     : tintaritm;                  -- typ celo‡¡seln‚ aritmetiky
      -- specifikace typu re ln‚ ‡¡slo
    { Ondra 3.4.2003 : Zru¨eno, float se novˆ definuje po‡tem bit–.
      dtype        : tfloatdeftype;              -- typ definice re ln‚ho ‡¡sla
    }
      fp           : tfloatparams;               -- parametry re ln‚ho ‡¡sla
      -- specifikace typu s rozsahem
      srange       : cc_ref.reftype;             -- rozsah
      -- specifikace typu string
    --lsize        : tunidata_size;              -- velikost d‚lky ©etˆzce
      -- specifikace typu pointer
      pflags       : ptrflagsset;                -- modifik tory
      pclass       : ptrclass;                   -- c¡lov˜ objekt
      pbase        : ptrbase;                    -- kompatibilita b ze
      pattrib      : rtattribset{ptrattribset};  -- atributy pointeru
      paccess      : varaccess;                  -- p©¡stup k objektu
      -- specifikace typu procedura nebo zprava
      rflags       : procflagset;                -- dal¨¡ parametry
      result       : pentity_param;              -- n vratov  hodnota funkce
      insize       : tunidata_size;              -- celkova velikost vstupnich parametru
      parcount     : t_unsigned;                 -- po‡et parametr–
      -- specifikace t©¡dy
      vtable       : pvirtualtable;              -- virtu ln¡ tabulka
      exposed      : cc_list.trefentitystring;   -- exposeovan‚ interfacy
      -- run-time informace
    --rta_tag      : tunitag;                    -- tag (typova informace)
      -- program torem p©edefinovateln‚ atributy
      attr_align   : cc_ref.refexpr;             -- :alignment
      attr_size    : cc_ref.refexpr;             -- :size
      attr_mptr    : cc_ref.refexpr;             -- :machine_pointer
      end record;



----------------------------------------------------------------------------------------------------
-- Atribut
----------------------------------------------------------------------------------------------------
type
  tentity_attribute = tentity_value with record
      end record;




----------------------------------------------------------------------------------------------------
-- Zpr va
----------------------------------------------------------------------------------------------------
type
  tentity_message  = tentity with record
      typ          : cc_ref.reftype;             -- typ zpr vy
      num          : tunimsg;                    -- ‡¡slo zpr vy
      end record;



----------------------------------------------------------------------------------------------------
-- N vˆ¨t¡
----------------------------------------------------------------------------------------------------
type
  tentity_label    = tentity with record
      num          : t_unsigned;                 -- cislo navesti
    --addr         : tuniprg;                    -- adresa navesti
      reachable    : t_logical;                  -- p©¡stupn‚ jako c¡l skoku
      placed       : t_logical;                  -- n vˆ¨t¡ bylo um¡stˆno
      level        : t_unsigned;                 -- £rove¤ um¡stˆn¡ n vˆ¨t¡
      end record;



----------------------------------------------------------------------------------------------------
-- Alias
----------------------------------------------------------------------------------------------------
--type
--  tentity_alias    = tentity with record
--      typ          : cc_ref.reftype;             -- typ                                         
--      read         : cc_ref.refentity;           -- metoda pro ‡ten¡ (OUT)                      
--      write        : cc_ref.refentity;           -- metoda pro z pis (IN)                       
--      end record;


----------------------------------------------------------------------------------------------------
-- Parametr ¨ablony
----------------------------------------------------------------------------------------------------
  ---- definice parametru textov‚ substituce ----
  tentity_tparam   = tentity with record
      end record;



----------------------------------------------------------------------------------------------------
-- ›ablona
----------------------------------------------------------------------------------------------------
type
  -- reprezentace lexik ln¡ho elementu p©e‡ten‚ho ze vstupu
  tlexnode;
  plexnode         = ^class tlexnode;
  tlexnode         = record
      prev         : plexnode;                   -- p©edchoz¡ lexik ln¡ symbol
      next         : plexnode;                   -- n sleduj¡c¡ lexik ln¡ symbol
      _tag         : enum _tag_param; _tag_lex; end enum; -- %%TODO(TAG)
      end record;

  -- lexik ln¡ element ur‡uj¡c¡ form ln¡ parametr
  tlexnode_param   = tlexnode with record
      pparam       : pentity_tparam;             -- souvisej¡c¡ parametr
      end record;
  plexnode_param   = ^class tlexnode_param;

  -- lexik ln¡ element s m o sobˆ
  tlexnode_lex     = tlexnode with record
      xlex         : cc_lexsym.lexsym;           -- lexik ln¡ symbol
      xval         : cc_lexsym.lexval;           -- hodnota symbolu
      xline        : cc_lexsym.lexline;          -- radek na kterem je prvek
      xcol         : cc_lexsym.lexcolumn;        -- sloupec na kterem je prvek
      xlength      : cc_lexsym.lexlength;        -- delka prvku
      end record;
  plexnode_lex     = ^class tlexnode_lex;

  -- #template 
  tentity_template = tentity with record
      plex         : plexnode;                   -- obsah metasymbolu
      end record;

end cc_entity;