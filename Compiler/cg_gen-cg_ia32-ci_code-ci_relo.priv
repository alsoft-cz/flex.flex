----------------------------------------------------------------------------------------------------
module private ci_relo =
-- Překladač Flexu.
-- Vyhodnocování relokací.
----------------------------------------------------------------------------------------------------
-- Ondra : 05.04.2002 : Vytvořil
----------------------------------------------------------------------------------------------------

with 
  cc_def.cc_gc,
  cc_base,
  cc_base.cc_options;

----------------------------------------------------------------------------------------------------
procedure adjust_r (
    inst           : in out icodeinst) =
----------------------------------------------------------------------------------------------------
var
  r                : inst.r:type;

begin
  if inst.r=nil then 
    new inst.r range ireloinit;

    -- zaregistruj do globalniho gc
    c_garbage_collector.get_instance^.register_memblock(inst.r);

  elsif inst.r^:length=inst.r^:last then
    --%%TODO(ADJUST) adjust inst.r range inst.r^:last+irelodelta;
    new r range inst.r^:last*2{+irelodelta};

    -- zaregistruj do globalniho gc
    c_garbage_collector.get_instance^.register_memblock(r);

    r^:=inst.r^;

    -- odregistruj z globalniho gc
    c_garbage_collector.get_instance^.unregister_memblock(inst.r);

    discard inst.r;
    inst.r:=r;
    end if;
  end adjust_r;



----------------------------------------------------------------------------------------------------
procedure adjust_u (
    info           : in out igeninfo) =
----------------------------------------------------------------------------------------------------
var
  u                : info.unres:type;

begin
  if info.unres=nil then 
    new info.unres range iunresinit;

    -- zaregistruj do globalniho gc
    c_garbage_collector.get_instance^.register_memblock(info.unres);

  elsif info.unres^:length=info.unres^:last then
    --%%TODO(ADJUST) adjust info.unres range info.unres^:last+iunresdelta;
    new u range info.unres^:last*2{+iunresdelta};

    -- zaregistruj do globalniho gc
    c_garbage_collector.get_instance^.register_memblock(u);

    u^:=info.unres^;

    -- odregistruj z globalniho gc
    c_garbage_collector.get_instance^.unregister_memblock(info.unres);
    
    discard info.unres;
    info.unres:=u;
    end if;
  end adjust_u;



----------------------------------------------------------------------------------------------------
procedure adjust_t (
    info           : in out igeninfo) =
----------------------------------------------------------------------------------------------------
var
  t                : info.target:type;

begin
  if info.target=nil then 
    new info.target range itargetinit;

    -- zaregistruj do globalniho gc
    c_garbage_collector.get_instance^.register_memblock(info.target);

  elsif info.target^:length=info.target^:last then
    --%%TODO(ADJUST) adjust info.target range info.target^:last+itargetdelta;
    new t range info.target^:last*2{+itargetdelta};

    -- zaregistruj do globalniho gc
    c_garbage_collector.get_instance^.register_memblock(t);

    t^:=info.target^;

    -- odregistruj z globalniho gc
    c_garbage_collector.get_instance^.unregister_memblock(info.target);

    discard info.target;
    info.target:=t;
    end if;
  end adjust_t;



----------------------------------------------------------------------------------------------------
procedure addrelo =
-- Doplní relokaci.
----------------------------------------------------------------------------------------------------
var
  chyba            : t_logical;
  _relo            : inst.r^:base;

begin
  verify({VERIFY=}000552,_relo_info.rtype=irt_entity and then pentity(_relo_info.rentity)^.etype=et_type and then tf_tagged not in pentity_type(_relo_info.rentity)^.tflags);

  -- (re)alokovat paměť
  adjust_r(inst);

  -- doplnit relokaci
  _relo.relo_info:=_relo_info;
  _relo.nextip   :=_nextip;
  _relo.disp     :=_disp;
  _relo.absolute :=_absolute;
  inst.r^ & _relo; {%%TODO(AGGREGATE)}
  end addrelo;



----------------------------------------------------------------------------------------------------
procedure addunres =
-- Doplní lokální relokaci.
----------------------------------------------------------------------------------------------------
var
  _unres           : info.unres^:base;

begin
  -- (re)alokovat paměť
  adjust_u(info);

  -- poznamenat relokaci
  _unres.target:=target;
  _unres.nextip:=nextip;
  _unres.disp:=disp;
  _unres.len:=_len;
  _unres.absolute:=absolute;
  info.unres^ & _unres; {%%TODO(AGGREGATE)}
  end addunres;



----------------------------------------------------------------------------------------------------
procedure newtarget =
-- Alokuje cíl skoku.
----------------------------------------------------------------------------------------------------
begin
  -- (re)alokovat paměť
  adjust_t(info);

  -- alokovat číslo cíle
  info.target^ & iunknownaddr;
  target:=info.target^:length;
  end newtarget;



----------------------------------------------------------------------------------------------------
procedure settarget =
-- Přiřadí adresu cíle skoku.
----------------------------------------------------------------------------------------------------
with
  standard.conversions,
  cc_base,cc_base.cc_debug;

begin
  verify({VERIFY=}000095,(target<1) or (target>info.target^:length) or (info.target^[target]<>iunknownaddr));
  info.target^[target]:=addr;
#if dump then;
  if o_is_option_by_entity(opt_dump_code,info.entity^) then debug_dump('label ' & unsigned_to_string(target) & ':'); end if;
#end if;
  end settarget;



----------------------------------------------------------------------------------------------------
procedure gettarget =
-- Zjistí adresu cíle skoku.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}000093,(target<1) or (target>info.target^:length));
  addr:=info.target^[target];
  end gettarget;



----------------------------------------------------------------------------------------------------
procedure localresolve =
-- Vyhodnotí lokální relokace.
----------------------------------------------------------------------------------------------------
with
  cc_def.cc_codes,
  cc_def.cc_var;

var
  ofs              : aliased tuniint;
  ui               : tuniint;

begin
  --return;

  -- není co řesit
  if info.unres=nil then return; end if;

  -- vyhodnotit lokální relokace
  if info.unres^:length>0 then 
    for i in info.unres^:range loop
      -- %%X Tady by se zcela správně mělo dělat SETADDR, takhle se nová hodnota
      -- nepřičte k té nule co už v instrukci je (co kdyby to nebyla nula, že).

      -- vypočítat skutečný offset
      ofs:=unsigned_to_uniint(info.target^[info.unres^[i].target]);
      if not info.unres^[i].absolute then
        ofs-unsigned_to_uniint(info.unres^[i].nextip);
        end if;

      -- %%X Záplata, opravit.
      if info.unres^[i].len=0 then
        info.unres^[i].len:=4;
        end if;

      -- vejde se ?
      verify({VERIFY=}000232,{%%TODO(IN) info.unres.list^[i].len not in [1,2,4]}
                 info.unres^[i].len<>1 and info.unres^[i].len<>2 and info.unres^[i].len<>4);
      if uniint_test_shrink(ofs,info.unres^[i].len,true) then
        ce^.seterror({CCERR=}000376,ce_g_invalid);
        ce^.raiseerror;
        end if;

      -- uložit %%TODO(SLICE)
      case info.unres^[i].len
        when 1 do p_signed8 (^inst.c^[info.unres^[i].disp+1]:unchecked)^:=p_signed8 (^ofs:unchecked)^;
        when 2 do p_signed16(^inst.c^[info.unres^[i].disp+1]:unchecked)^:=p_signed16(^ofs:unchecked)^;
        when 4 do p_signed32(^inst.c^[info.unres^[i].disp+1]:unchecked)^:=p_signed32(^ofs:unchecked)^;
        when others do verify({VERIFY=}000231,true);
        end case;

      -- pro absolutní odkaz generovat ještě globální relokaci
      if info.unres^[i].absolute then
        declare var
          _rinfo   : ireloinfo;
        begin
          -- %%TODO(AGGREGATE)
          _rinfo.rtype     :=irt_entity;
          _rinfo.rentity   :=^curr;
          _rinfo.rpartition:=curr.partition_id;
          addrelo(inst,_rinfo,info.unres^[i].nextip,info.unres^[i].disp,info.unres^[i].absolute);
          end declare;
        end if;
      end loop;
    end if;
  end localresolve;



end ci_relo;
