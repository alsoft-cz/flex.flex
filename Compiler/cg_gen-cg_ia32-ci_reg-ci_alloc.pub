----------------------------------------------------------------------------------------------------
module public ci_alloc =
-- Překladač Flexu.
-- Alokátor registrů.
----------------------------------------------------------------------------------------------------
-- Ondra : 14.04.2003 : Oddělil z [cg_gen.cg_ia32.ci_reg].
----------------------------------------------------------------------------------------------------

----- %%TECH Princip přidělování registrů ----------------------------------------------------------
-- Registry se přidělují dvěma metodami:
--   -- dynamicky (I_ALLOC),
--   -- staticky (I_USE), pokud použitá instrukce vyžaduje konkrétní registr.
-- Informace o použití registrů je uložena v CONTEXT. V typické situaci se
-- používá jedna struktura CONTEXT lokální pro generovaný podstrom (resp.
-- jednu jeho úroveň - uzel), přičemž volající procedura (nadřazená úroveň
-- stromu) má vlastní strukturu CONTEXT a pro každý generovaný podstrom se
-- odvozuje nová struktura CONTEXT.
--   V CONTEXT jsou uloženy čtyři druhy informací o registrech:
--   -- mapování registrů: při alokaci je registru přiděleno číslo, které se
--      používá jako indentifikátor registru při přemapování,
--   -- stavový příznak registru:
--         irs_local  -- registr je volně k dispozici pro tento uzel,
--         irs_used   -- registr obsahuje platnou hodnotu, která má význam v
--                       nadřazeném kontextu - bude-li ho potřeba použít,
--                       musí se uložit na stack,
--         irs_pushed -- registr, který byl původně ve stavu IRS_USED, byl
--                       odswapován na stack a použit jako lokální,
--   -- počet použití registru v aktuálním kontextu - jeden registr lze
--      použít vícekrát, protože jednou je například potřeba v operandu
--      IO_MEM a současně v operandu IO_REG, aby se s ním dalo manipulovat
--      přímo,
--   -- historie uložení registrů na stack,
--
-- Algoritmus statického přidělování:
--   1. Je-li STATUS vybraného registru IRS_USED, uloží se na stack, zapíše
--      do historie PUSHORDER a změní se na IRS_PUSHED
--   2. Je-li STATUS IRS_LOCAL, změní se na IRS_USED.
--   3. Inkrementuje se USED.
--
-- Algoritmus dynamického přidělování:
--   1. Existuje-li registr ve stavu IRS_LOCAL, použije se přednostně.
--   2. Jinak se použije registr ve stavu IRS_USED.
--   3. Pokud jsou všechny registry ve stavu IRS_PUSHED, nastala interní
--      chyba.
--   4. Dále se postupuje jako při statickém přidělování.
--
-- Typické použití:
--   1. Při vstupu do procedury je v CONTEXT nastaveno:
--        -- nejsou mapovány žádné registry,
--        -- STATUS každého registru na IRS_LOCAL nebo IRS_USED,
--        -- USED všech registrů na nulu,
--        -- PUSHORDER je prázdné.
--
--   2. Generování podvýrazů:
--        -- vygeneruje se nový kontext pomocí I_NEWCONTEXT.
--        -- zavolá se I_LOAD s novým kontextem,
--        -- provede se I_RETRIEVE, které zařadí registry použité ve výsledku
--           výpočtu mezi použité registry a podle historie PUSHORDER
--           v kontextu podvýrazu připraví informace o přemapování registrů
--           nebo aktualizuje vlastní PUSHORDER.
--
--   3. Pomocí I_REFRESH se pro každý operand obnoví registry ze stacku
--      a aktualizuje mapování.
--
--   4. Provede se vlastní výpočet. Zde lze pomocí I_ALLOC a I_FREE alokovat
--      pracovní registry a uvolňovat již nepotřebné registry.
--
-- Každý registr by měl být přidělen buď pomocí I_ALLOC nebo pomocí I_USE
-- a pokud již není pro další výpočty potřeba, uvolněn pomocí I_FREE (a to
-- i když je používán vícekrát). Opuštěním oblasti platnosti daného kontextu
-- se informace o použití registrů ztrácejí a musí se zavolat I_RETREIVE, aby
-- šlo výsledek používat i v nadřazeném kontextu.
----------------------------------------------------------------------------------------------------

with
  standard,
  cp_cpu.cp_ia32.ci_instr,
  ci_def;

----------------------------------------------------------------------------------------------------
procedure i_reg_alloc (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    opreg          : in out ioperreg;            -- registr, tak jak je v operandu
    size           : in t_unsigned;              -- požadovaná velikost registru
    mode           : in iregallocmode);          -- režim alokace registru
-- Alokace registru (libovolného).
----------------------------------------------------------------------------------------------------
procedure i_reg_use (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    reg            : in ireg;                    -- požadovaný registr
    opreg          : in out ioperreg;            -- registr, tak jak je v operandu
    size           : in t_unsigned);             -- požadovaná velikost registru
-- Alokace konkrétního registru.
----------------------------------------------------------------------------------------------------
procedure i_reg_free (
    info           : in igeninfo;                -- informace o překladu
    context        : in out iexprcontext;        -- kontext generování výrazu
    opreg          : in ioperreg);               -- registr, tak jak je v operandu
-- Uvolnění registru použitého operandem.
----------------------------------------------------------------------------------------------------
procedure i_reg_retrieve (
    inst           : in out icodeinst;           -- instance
    info           : in igeninfo;                -- informace o překladu
    subcontext     : in iexprcontext;            -- kontext podvýrazu
    context        : in out iexprcontext;        -- aktuální kontext výrazu
    opreg1         : in out ioperreg;            -- registr 1, tak jak je v operandu
    opreg2         : in out ioperreg);           -- registr 2, tak jak je v operandu
-- Převede registry jednoho operandu z podřízeného kontextu do nadřazeného.
----------------------------------------------------------------------------------------------------
procedure i_reg_refresh (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- aktuální kontext výrazu
    opreg          : in out ioperreg);           -- registr, tak jak je v operandu
-- Aktualizuje jména registrů v operandu.
----------------------------------------------------------------------------------------------------

end ci_alloc;
