----------------------------------------------------------------------------------------------------
class private cc_listing =
-- P©eklada‡ Flexu.
-- Listing.
----------------------------------------------------------------------------------------------------
-- Ondra : 03.02.2003 : Vytvo©il
----------------------------------------------------------------------------------------------------

with
  standard.files,
  standard.streams,
  standard.characters,
  cc_def,
  cc_def.cc_var;

var
#if #environment compiler_version;='4.0.3.10' then;
  listing          : aliased c_buffered_file_output_stream;       -- soubor s listingem
#else;
  listing          : aliased c_file_output_stream;       -- soubor s listingem
#end if;
  sections         : t_listing_section_set;      -- mno‘ina sekc¡ skute‡nˆ zahrnovan˜ch do listingu
  current_section  : t_listing_section;          -- aktu ln¡ sekce

var
  -- jm‚na sekc¡
  section_name     : static const array t_listing_section of t_char32str := [
     for tls_setup           use 'Setup',
     for tls_compilation     use 'Compilation',
     for tls_global_analysis use 'Global Analysis',
     for tls_code_generation use 'Code Generation',
     for tls_linking         use 'Linking',
     for tls_image           use 'Image creation',
     for tls_summary         use 'Summary'];

var
  text_writer      : aliased c_stream_text_writer;       -- souvisej¡c¡ v˜stupn¡ textov˜ stream
  -- %%X Udˆlat parametrizovateln‚
  encoder          : aliased c_character_encoder_utf8; -- k¢dova‡ textu

----------------------------------------------------------------------------------------------------
static create =
-- Otev©e listing v uveden‚m souboru.
----------------------------------------------------------------------------------------------------
begin
  if cfg_listing then
    -- vytvo©it soubor s listingem
    listing.create(file_name,tfss_shared_read,true);

    -- p©ipravit v˜stupn¡ textov˜ stream
    listing.set_lazy_buffer(true);
  #if #environment compiler_version;='4.0.3.10' then;
    text_writer.init_text_writer(^c_output_stream:(listing),^encoder);
  #else;
    text_writer.init_text_writer(^listing,^encoder);
  #end if;

    -- incializovat listing
    --%%TODO(ANCESTOR) this:ancestor.create(...);
    p_listing(^this)^.create(^c_text_writer:(text_writer),100,2,32);
    end if;

  -- poznamenat si mno‘inu sekc¡ zapisovan˜ch do listingu
  this.sections:=sections;
  end create;



----------------------------------------------------------------------------------------------------
static close =
----------------------------------------------------------------------------------------------------
begin
  -- zav©¡t soubor
  text_writer.flush;
  listing.close;
  end close;



----------------------------------------------------------------------------------------------------
static start_section =
-- Vstup do uveden‚ sekce [section].
----------------------------------------------------------------------------------------------------
begin
  -- poznamenat si aktu ln¡ sekci
  current_section:=section;

  -- hlavi‡ka
  if cfg_listing and then current_section in sections then
    --%%TODO(ANCESTOR) this:ancestor.start_section(section_name[current_section]);
    --%%TODO(TYPECAST) c_listing(this).start_section(section_name[current_section]);
    p_listing(^this)^.start_section(section_name[current_section]);
    end if;
  end start_section;



----------------------------------------------------------------------------------------------------
static get_output_text_stream =
-- Vr t¡ souvisej¡c¡ textov˜ stream.
----------------------------------------------------------------------------------------------------
begin
  result:=^c_text_writer:(text_writer);
  end get_output_text_stream;


{ %%TODO(ANCESTOR)
------------------------------------------------------------------------------------------------
override write_header_item =
-- Outputs a single header item into the listing. 
------------------------------------------------------------------------------------------------
begin 
  if cfg_listing and then current_section in sections then
    this:ancestor.write_header_item(name,value);
    end if;
  end write_header_item;



------------------------------------------------------------------------------------------------
override end_header =
-- Ends the header part of a section.
------------------------------------------------------------------------------------------------
begin 
  if cfg_listing and then current_section in sections then
    this:ancestor.end_header;
    end if;
  end end_header;



------------------------------------------------------------------------------------------------
override write_line =
-- Outputs a single line of text into the listing. The text is indented according the current
-- indentation level.
------------------------------------------------------------------------------------------------
begin 
  if cfg_listing and then current_section in sections then
    this:ancestor.write_line(text);
    end if;
  end write_line;



------------------------------------------------------------------------------------------------
override skip_line =
-- Produces an empty line in the listing. Multiple calls to [skip_line] produce adequate number
-- of empty lines in the output.
------------------------------------------------------------------------------------------------
begin 
  if cfg_listing and then current_section in sections then
    this:ancestor.skip_line;
    end if;
  end skip_line;
}


end cc_listing;
