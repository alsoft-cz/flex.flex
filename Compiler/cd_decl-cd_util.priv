----------------------------------------------------------------------------------------------------
module private cd_util =
-- Překladač Flexu.
-- Pomocné procedury pro překlad částí deklarací.
----------------------------------------------------------------------------------------------------
-- Ondra : 07.11.2001 : Vytvořil
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure p_varaccess =
-- Překlad determinate přístupu.
----------------------------------------------------------------------------------------------------
var
  lex              : lexsym;                     -- lexikální symbol
  psym             : pentity;

begin
  -- předpokládejme bez omezení
  vaccess:=va_norm;

  getlex(curr,lex);
  case lex
    -- PROTECTED
    when lex_protected do
        -- dovoleno pouze v modulu a třídě
        psym:=sym_get_enclosing_or_self_ex(curr.entity,ets_enclosing);
        if psym=nil or psym^.etype not in ets_modular then
          ce^.seterror({CCERR=}000334,ce_i_varaccess);
          ce^.setinfo(hint_protected_in_module);
          ce^.loadpos;
          {%%RESUME ce^.raiseerror;}
          return;
          end if;

        -- a to jen v části PUBLIC/PROTECTED
        if curr.region^.vsect=etv_private then
          ce^.seterror({CCERR=}000335,ce_i_varaccess);
          ce^.setinfo(hint_protected_in_private);
          ce^.loadpos;
          {%%RESUME ce^.raiseerror;}
          return;
          end if;

        -- poznamenat
        vaccess:=va_protected;

    -- CONST
    when lex_const do 
        -- const lze použít všude
        vaccess:=va_const;

    -- neuvedeno, zvolit default
    when others do
        -- vrátit poslední prvek do vstupu
        ungetlex;
    end case;
  end p_varaccess;



----------------------------------------------------------------------------------------------------
procedure p_aliased_access =
-- Překlad determinace aliased přístupu;
----------------------------------------------------------------------------------------------------
begin
  valiased:=checklex(curr,lex_aliased);
  end p_aliased_access;



----------------------------------------------------------------------------------------------------
procedure p_gensinglelocvar (
    proc           : in tcontext;                -- překládaný prvek
    pparam         : in pentity_param;           -- parametr
    ptyp           : in pentity_type) =          -- typ parametru
-- Pro zadaný parametr a jeho typ vygeneruje lokální proměnnou
----------------------------------------------------------------------------------------------------
with
  cd_decl.cd_create,
  cx_expr,
  cx_expr.cx_imm;

var
  pvar             : pentity_var;                -- proměnná
  pvar_context     : tcontext;                   -- kontext proměnné

begin
  -- založit nový symbol
  d_create_at_position(proc,pentity(pvar),pvar_context,et_var,pparam^.id,pparam^.pos[etp_header]);

  -- zkopírovat příznak kompilátorem generované entity
  if etc_generated in pparam^.compile then pvar^.compile+tentitycompileset:[etc_generated]; end if;
 
  -- související parametr
  pvar^.vimplements:=vi_parameter;
  pvar^.imp_param:=pparam;

  -- typ proměnné
  pvar^.typ.settype(ptyp);

  -- paměťová třída
  pvar^.mclass:=mc_auto;

  -- povolení aliased přístupu
  pvar^.valiased:=pparam^.paliased;

  -- způsob předání
  if pparam^.pass in pps_ref
    -- odkazem
    then pvar^.vmode:=vm_ref
    -- hodnotou
    else pvar^.vmode:=vm_direct
    end if;

  -- determinace přístupu
  if pparam^.mode=pm_in
    then pvar^.vaccess:=va_const;
    else pvar^.vaccess:=va_norm;
    end if;

  -- počáteční hodnota OUT parametru
  if pparam^.mode=pm_out and then pparam^.init.isset then
    store_imm(pvar^.init.getundefimm^,pparam^.init.getimm^);
    end if;

  -- dynamické atributy
  pvar^.rta_avail:=pparam^.rta_avail;
  pvar^.rta_used:=pparam^.rta_used;

  -- pozice symbolu
  pvar^.pos:=pparam^.pos;

  -- konec deklarace
  d_end_at_position(pvar^,pparam^.pos[etp_def],true);
  end p_gensinglelocvar;



----------------------------------------------------------------------------------------------------
procedure p_genlocvar =
-- Podle parametrů procedury vygeneruje lokální proměnné.
----------------------------------------------------------------------------------------------------
var
  srch             : tentitysearch;              -- vyhledávání v tabulce symbolů
  ptyp             : pentity_type;               -- typ procedury
  pvar             : pentity_var;                -- proměnná
  proc_context     : tcontext;                   -- primární kontext podprogramu

begin
  -- typ procedury
  ptyp:=proc.typ.getctype;

  -- sestavit primární kontext
  proc_context:=sym_primary_context(proc);

  -- zpracovat všechny parametry
  srch.find_et_first(ptyp,rc_primary,et_param,[]);
  while srch.psym<>nil loop
    -- odvodit lokální proměnnou
    p_gensinglelocvar(proc_context,pentity_param(srch.psym),pentity_param(srch.psym)^.typ.getutype);

    -- další parametr
    srch.find_et_next;
    end loop;
  end p_genlocvar;



----------------------------------------------------------------------------------------------------
procedure p_genlocvar_override =
-- Podle parametrů procedury vygeneruje lokální proměnné.
----------------------------------------------------------------------------------------------------
var
  srch             : tentitysearch;              -- vyhledávání v tabulce symbolů
  ptyp             : pentity_type;               -- typ procedury
  pvar             : pentity_var;                -- proměnná
  partyp           : pentity_type;               -- typ parametru
  proc_context     : tcontext;                   -- primární kontext podprogramu

begin
  -- typ procedury
  ptyp:=pentity_virtual(proc.virt.getcentity)^.typ.getctype;

  -- sestavit primární kontext
  proc_context:=sym_primary_context(proc);

  -- zpracovat všechny parametry
  srch.find_et_first(ptyp,rc_primary,et_param,[]);
  while srch.psym<>nil loop
    -- dohledat přetížený typ
    {%%X}partyp:=pentity_param(srch.psym)^.typ.getutype;

    -- vygenerovat odpovídající lokální proměnnou
    p_gensinglelocvar(proc_context,pentity_param(srch.psym),partyp);

    -- další parametr
    srch.find_et_next;
    end loop;
  end p_genlocvar_override;



end cd_util;
