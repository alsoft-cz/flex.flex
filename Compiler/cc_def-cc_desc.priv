----------------------------------------------------------------------------------------------------
module private{cc_def.}cc_desc =
-- Překladač.
-- Popisy cílových platforem.
----------------------------------------------------------------------------------------------------
-- TomasH : 09.07.2003 : Vytvoril a Pridal kostru na podporu jinych platforem
----------------------------------------------------------------------------------------------------

with 
  standard.strings,
  cc_def.cc_codes,
  cc_def.cc_var;



----------------------------------------------------------------------------------------------------
procedure set_os_family =
-- nastavi OS family, raise config_error pokud je neznama nebo nepodporovana
----------------------------------------------------------------------------------------------------
begin
  for family in os_family:range loop
    if str_compare_case_insensitive(os_name, os_family[family]) then
      if os_family_features[family].supported then
        env_target_system:=sdbase_list[family];
        return;
      else
        ostream.write_line('Unsupported OS family');
        raise config_error;
        end if;
      end if 
    end loop;
  ostream.write_line('Unknown OS family');
  raise config_error;
  end set_os_family;



----------------------------------------------------------------------------------------------------
procedure set_os_type =
-- nastavi OS type, raise config_error pokud je nezname nebo neni platne pro danou family
----------------------------------------------------------------------------------------------------
begin
  for ostype in os_type:range loop
    if str_compare_case_insensitive(os_type_name, os_type[ostype]) then 
      if ostype in os_family_features[env_target_system.os_family].os_type_set then
        env_target_system.os_type:=ostype;
        return;
      else
        ostream.write_line('Unsupported OS type for this family');
        raise config_error;
        end if
      end if;
    end loop;
  ostream.write_line('Unknown OS type');
  raise config_error;
  end set_os_type;



----------------------------------------------------------------------------------------------------
procedure set_os_subsystem =
-- Nastavi OS subsystem, raise config_error pokud je nezname nebo neni platne pro danou family
----------------------------------------------------------------------------------------------------
begin
  for subsys in os_subsystem:range loop
    if str_compare_case_insensitive(os_subsystem_name, os_subsystem[subsys]) then 
      if subsys in os_family_features[env_target_system.os_family].os_subsystem_set then
        env_target_system.os_subsystem_type:=subsys;
        return;
      else
        ostream.write_line('Unsupported OS subsystem for this family');
        raise config_error;
        end if
      end if;
    end loop;
  ostream.write_line('Unknown OS subsystem');
  raise config_error;
  end set_os_subsystem;



----------------------------------------------------------------------------------------------------
procedure set_cpu_architecture =
-- nastavi pozadovanou CPU architekturu, raise config_error pokud je neznama nebo neni platna pro danou family
----------------------------------------------------------------------------------------------------
begin
  for cpuarch in machine_architecture:range loop
    if str_compare_case_insensitive(cpu_architecture_name, machine_architecture[cpuarch]) then 
      if cpuarch in os_family_features[env_target_system.os_family].cpu_architecture_set then
        env_target_system.machine_architecture:=cpuarch;
        return;
      else
        ostream.write_line('Unsupported CPU architecture for this family');
        raise config_error;
        end if
      end if;
    end loop;
  ostream.write_line('Unknown CPU architecture');
  raise config_error;
  end set_cpu_architecture;



----------------------------------------------------------------------------------------------------
procedure get_os_family_name =
-- vrati jmeno prave zkonfigurovane OS family
----------------------------------------------------------------------------------------------------
begin
  result:=os_family[env_target_system.os_family];
  end get_os_family_name;



----------------------------------------------------------------------------------------------------
procedure get_os_type_name =
-- vrati jmeno prave zkonfigurovaneho OS typu
----------------------------------------------------------------------------------------------------
begin
  result:=os_type[env_target_system.os_type];
  end get_os_type_name;



----------------------------------------------------------------------------------------------------
procedure get_os_subsystem_name =
-- vrati jmeno prave zkonfigurovaneho OS subsystemu
----------------------------------------------------------------------------------------------------
begin
  result:=os_subsystem[env_target_system.os_subsystem_type];
  end get_os_subsystem_name;



----------------------------------------------------------------------------------------------------
procedure get_cpu_architecture_name =
-- vrati jmeno prave zkonfigurovane CPU architektury
----------------------------------------------------------------------------------------------------
begin
  result:=machine_architecture[env_target_system.machine_architecture];
  end get_cpu_architecture_name;



end cc_desc;
