----------------------------------------------------------------------------------------------------
module private cp_def =
-- Překladač Flexu.
-- Definice základních charakteristik.
----------------------------------------------------------------------------------------------------
-- Ondra : 25.03.2002 : Vytvořil
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure imm32_to_unidata_addr =
-- Neznaménkově převede IMM32 na UNIDATA.
----------------------------------------------------------------------------------------------------
begin
  t_unsigned(result):=t_unsigned(x);
  end imm32_to_unidata_addr;



----------------------------------------------------------------------------------------------------
procedure imm32_to_uniint =
-- Neznaménkově převede IMM32 na UNIINT.
----------------------------------------------------------------------------------------------------
begin
  result:=unsigned_to_uniint(x);
  end imm32_to_uniint;



----------------------------------------------------------------------------------------------------
procedure imm32_to_unsigned =
-- Převod IMM32 na UNSIGNED.
----------------------------------------------------------------------------------------------------
begin
  result:=result:type(x);
  end imm32_to_unsigned;



----------------------------------------------------------------------------------------------------
procedure imm32_to_signed =
-- Převod IMM32 na UNSIGNED.
----------------------------------------------------------------------------------------------------
begin
  result:=result:type(x:unchecked);
  end imm32_to_signed;



----------------------------------------------------------------------------------------------------
procedure signed_to_imm32  =
-- Převod SIGNED na IMM32.
----------------------------------------------------------------------------------------------------
begin
  -- pretypovanu rangecheck-sensitive
  if x<0 
    then result:=result:last-t_unsigned(-x)+1;
    else result:=timm32(x);
    end if;
  end signed_to_imm32;



----------------------------------------------------------------------------------------------------
procedure unsigned_to_imm32  =
-- Převod UNSIGNED na IMM32.
----------------------------------------------------------------------------------------------------
begin
  result:=timm32(x);
  end unsigned_to_imm32;



----------------------------------------------------------------------------------------------------
procedure uniint_to_imm32 =
-- Převod TUNIINT na TIMM32.
----------------------------------------------------------------------------------------------------
begin
  result:=uniint_to_unsigned(ui);
  end uniint_to_imm32;



----------------------------------------------------------------------------------------------------
procedure unidata_size_to_imm32 =
-- Převod TUNIDATA_SISE na TIMM32.
----------------------------------------------------------------------------------------------------
begin
  result:=t_unsigned(ud);
  end unidata_size_to_imm32;



----------------------------------------------------------------------------------------------------
procedure unidata_bitsize_to_imm32 =
-- Převod TUNIDATA_BITSIZE na TIMM32.
----------------------------------------------------------------------------------------------------
begin
  result:=t_unsigned(ud);
  end unidata_bitsize_to_imm32;



----------------------------------------------------------------------------------------------------
procedure unidata_addr_to_imm32 =
-- Převod TUNIDATA_ADDR na TIMM32.
----------------------------------------------------------------------------------------------------
begin
  result:=t_unsigned(ud);
  end unidata_addr_to_imm32;



----------------------------------------------------------------------------------------------------
procedure imm32_is_power_of_2 =
-- A = 2^N ([res]=True, je-li A nějaká mocnina dvojky. Exponent je vrácen v N.)
----------------------------------------------------------------------------------------------------
with
  advanced,
  advanced.low_level,
  advanced.low_level.bit_operations;

begin
  res:=bit_count(a)=1;
  if res then
    n:=t_unsigned32(bit_search_first_one(a));
    end if;
  end imm32_is_power_of_2;



----------------------------------------------------------------------------------------------------
procedure imm32_signed_ge =
-- Znaménkové A >= B.
----------------------------------------------------------------------------------------------------
begin
  result:=t_signed32(a:unchecked)>=b;
  end imm32_signed_ge;



----------------------------------------------------------------------------------------------------
procedure imm32_signed_le =
-- Znaménkové A <= B.
----------------------------------------------------------------------------------------------------
begin
  result:=t_signed32(a:unchecked)<=b;
  end imm32_signed_le;



----------------------------------------------------------------------------------------------------
procedure prg32_to_unidata_addr =
-- Neznaménkově převede PRG32 na UNIDATA.
----------------------------------------------------------------------------------------------------
begin
  t_unsigned(result):=t_unsigned(x);
  end prg32_to_unidata_addr;



const
  -- reálná čísla podle Pentium Processor Family Developer's Manual, str. 6-6
  fpu4_low         = -3.40e38;
  fpu4_high        =  3.40e38;
  fpu4_delta       =  1.18e-38;
  fpu4_epsilon     =  1.2e-7;
  fpu4_digits      =  6;
  fpu8_low         = -1.79e308;
  fpu8_high        =  1.79e308;
  fpu8_delta       =  2.23e-308;
  fpu8_epsilon     =  2.2e-16;
  fpu8_digits      = 15;
  fpu10_low        = -1.18e4932;
  fpu10_high       =  1.18e4932;
  fpu10_delta      =  3.37e-4932;
  fpu10_epsilon    =  1.1e-19;
  fpu10_digits     = 19;


----------------------------------------------------------------------------------------------------
entry =
-- Inicializace.
----------------------------------------------------------------------------------------------------
begin
  --%%X pres promenne je to tak trochu zaplata; az bude revize s floating-point
  --    aritmetikou, upravit nejak rozumneji...  (pres [float_to_unireal], nebo neco takoveho)

  ---- 32-bit ------------------------------------------------------------
  declare var
    fp32           : t_float32;

  begin
    fp32:=fpu4_delta;
    unireal_load_float(cpu32_fpparams[fp_32].fdelta,fp32,4);
    fp32:=fpu4_low;
    unireal_load_float(cpu32_fpsparams[fp_32].low,fp32,4);
    fp32:=fpu4_high;
    unireal_load_float(cpu32_fpsparams[fp_32].high,fp32,4);
    fp32:=fpu4_epsilon;
    unireal_load_float(cpu32_fpsparams[fp_32].small,fp32,4);
    cpu32_fpsparams[fp_32].positive_inf:=ur_inf;
    cpu32_fpsparams[fp_32].negative_inf:=ur_minus_inf;
    cpu32_fpsparams[fp_32].positive_zero:=ur_0;
    cpu32_fpsparams[fp_32].negative_zero:=ur_minus_0;
    cpu32_fpsparams[fp_32].not_a_number:=ur_nan;
    cpu32_fpparams[fp_32].fdigits:=unsigned_to_uniint(fpu4_digits);
    cpu32_fpparams[fp_32].sparams:=^cpu32_fpsparams[fp_32];
    end declare;

  ---- 64-bit ------------------------------------------------------------
  declare var
    fp64           : t_float64;

  begin
    fp64:=fpu8_delta;
    unireal_load_float(cpu32_fpparams[fp_64].fdelta,fp64,8);
    fp64:=fpu8_low;
    unireal_load_float(cpu32_fpsparams[fp_64].low,fp64,8);
    fp64:=fpu8_high;
    unireal_load_float(cpu32_fpsparams[fp_64].high,fp64,8);
    fp64:=fpu8_epsilon;
    unireal_load_float(cpu32_fpsparams[fp_64].small,fp64,8);
    cpu32_fpsparams[fp_64].positive_inf:=ur_inf;
    cpu32_fpsparams[fp_64].negative_inf:=ur_minus_inf;
    cpu32_fpsparams[fp_64].positive_zero:=ur_0;
    cpu32_fpsparams[fp_64].negative_zero:=ur_minus_0;
    cpu32_fpsparams[fp_64].not_a_number:=ur_nan;
    cpu32_fpparams[fp_64].fdigits:=unsigned_to_uniint(fpu8_digits);
    cpu32_fpparams[fp_64].sparams:=^cpu32_fpsparams[fp_64];
    end declare;

  ---- 80-bit ------------------------------------------------------------
  declare var
    fp80           : t_float80;

  begin
    fp80:=fpu10_delta;
    unireal_load_float(cpu32_fpparams[fp_80].fdelta,fp80,10);
    fp80:=fpu10_low;
    unireal_load_float(cpu32_fpsparams[fp_80].low,fp80,10);
    fp80:=fpu10_high;
    unireal_load_float(cpu32_fpsparams[fp_80].high,fp80,10);
    fp80:=fpu10_epsilon;
    unireal_load_float(cpu32_fpsparams[fp_80].small,fp80,10);
    cpu32_fpsparams[fp_80].positive_inf:=ur_inf;
    cpu32_fpsparams[fp_80].negative_inf:=ur_minus_inf;
    cpu32_fpsparams[fp_80].positive_zero:=ur_0;
    cpu32_fpsparams[fp_80].negative_zero:=ur_minus_0;
    cpu32_fpsparams[fp_80].not_a_number:=ur_nan;
    cpu32_fpparams[fp_80].fdigits:=unsigned_to_uniint(fpu10_digits);
    cpu32_fpparams[fp_80].sparams:=^cpu32_fpsparams[fp_80];
    end declare;
  end entry;



end cp_def;
