----------------------------------------------------------------------------------------------------
module private cl_resolver =
-- Překladač Flexu.
-- Vyhodnocovač cross-referencí a adres.
----------------------------------------------------------------------------------------------------
-- Ondra : 12.04.2002 : Vytvořil
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
class private abstract linkresolver =
-- Vyhodnocovač cross-referencí a adres.
----------------------------------------------------------------------------------------------------

    with
      standard.classes,
      standard.classes.lists,
      standard.classes.hash_tables,
      cx_expr,
      cx_expr.cx_imm,
      cc_def,
      cc_def.cc_var;

    ------------------------------------------------------------------------------------------------
    static mark_single =
    -- Fáze 1: Označení jedné entity pro linkování.
    ------------------------------------------------------------------------------------------------
    with
      cc_base,
      cc_base.cc_sym;

        --------------------------------------------------------------------------------------------
        procedure mark_type =
        -- Označení typu/třídy na vyhodnocení.
        --------------------------------------------------------------------------------------------
        begin
          verify({VERIFY=}000823,tf_temp in pentity_type(curr)^.tflags);
          verify({VERIFY=}000824,tf_tagged not in pentity_type(curr)^.tflags);

          -- zařadit předka na vyhodnocení (pokud je též tagged)
          if curr^.ancestor.isset then
            declare var
              ancestor : pentity_type;           -- předek vyhodnocovaného typu
            begin
              pentity(ancestor):=curr^.ancestor.getcentity;
              if tf_tagged in ancestor^.tflags then mark_single(ancestor); end if;
              end declare;
            end if;

          -- zařadit na vyhodnocení bázový typ
          -- Pozor, takový "^unchecked" žádnou bázi nemá.
          if pentity_type(curr)^.stype in dts_base and then pentity_type(curr)^.base.isset then
            mark_single(pentity_type(curr)^.base.getctype);
            end if;
          
          -- zařadit na vyhodnocení typ rozsahu
          if pentity_type(curr)^.stype in dts_index then
            mark_single(pentity_type(curr)^.srange.getctype);
            end if;
          
          -- zařadit na vyhodnocení interfacy
          if curr^.etype=et_class then
            declare var
              it            : c_list_iterator;     -- iterátor přes interfacy
              exposed_iface : p_class_interface;   -- interface třídy

            begin
              pentity_type(curr)^.interfaces^.get_exposed_interfaces(it);
              while it.get(exposed_iface) loop
                mark_single(exposed_iface^.refclass.getcentity);
                end loop;
              end declare;
            end if;

          -- zařadit na seznam entit, pro které se generují metadata
          this.metadata.add(curr);

          -- zařadit na vyhodnocení všechny speciální metody
          for tst in pentity_type(curr)^.stable:range loop
            if pentity_type(curr)^.stable[tst].isset then
              mark_single(pentity_type(curr)^.stable[tst].getcentity);
              end if;
            end loop;  
          end mark_type;

    begin
      -- zajímají nás pouze entity z aktuální parition
      if curr^.partition_id<>curr_partition then return end if;

      -- již označenými symboly se nezabývat
      if curr^.linked<>ls_undef then return; end if;

      -- označit symbol jako použitý
      curr^.linked:=ls_used;

      -- proměnná
      if curr^.etype=et_var then
        case pentity_var(curr)^.mclass
          -- statická
          when mc_static do
              -- zařadit do příslušného datového segmentu
              if pentity_var(curr)^.init.isset and not imm_isnil(pentity_var(curr)^.init.getimm^)
                -- inicializovaná proměnná
                then this.idata.add(curr)
                -- neinicializovaná proměnná
                else this.data.add(curr)
                end if;

          -- tasková
          when mc_task do 
              -- zařadit do příslušného datového segmentu - neinicializovaná proměnná
              this.data.add(curr)

          when mc_class do { nic nedelat }

          when others do verify({VERIFY=}000191,true);
          end case;

      -- prvek obsahující kód
      elsif curr^.etype in ets_code then
        if curr^.etype=et_procedure{in ets_subprog} and then pentity_procedure{subprog}(curr)^.import_info<>nil

          -- externí symbol
          then
            this.import.add(curr);

           -- normální symbol
          else
            verify({VERIFY=}000584,pentity_code(curr)^.codegen=nil);

            -- symbol zařadit pro pozdější vyhodnocení
            this.code.add(curr);

            -- trasovat tabulku relokací
            this.trace(curr);
            end if;

      -- typ
      elsif curr^.etype=et_type then
        -- zařadit na vyhodnocení
        mark_type;

      -- třída
      elsif curr^.etype=et_class then     
        -- zařadit na vyhodnocení
        mark_type;

        -- zařadit na vyhodnocení všechny metody z tabulky virtuálních metod
        declare var
          it       : c_list_iterator;            -- iterátor
          interface: p_class_interface;          -- interface třídy

        begin
          -- připravit iterátor
          pentity_type(curr)^.interfaces^.get_all_interfaces(it);

          -- zpracovat všechny interfacy
          while it.get(interface) loop
            if interface^.vtable<>nil then
              for i in interface^.vtable^:range loop
                if interface^.vtable^[i]<>nil then
                  mark_single(interface^.vtable^[i]);
                  end if;
                end loop;
              end if;  
            end loop;
          end declare;

      -- zpráva
      elsif curr^.etype=et_message then
        -- zařadit předka na vyhodnocení (pokud je též tagged)
        if curr^.ancestor.isset then
          mark_single(curr^.ancestor.getcentity);
          end if;

        -- zařadit typ zprávy na vyhodnocení
        mark_single(pentity_message(curr)^.typ.getctype);

        -- zařadit na seznam entit, pro které se generují metadata
        this.metadata.add(curr);

      -- další prvky
      elsif curr^.etype in ets_enclosed then

      -- nic jiného tu nemá co dělat
      else 
        verify({VERIFY=}000032,true);
        end if;

    {
      -- projít lokální tabulku symbolů
      p:=curr^.symtab;
      while p<>nil loop
        if p^.etype in ets_code+ets_enclosed{-[et_module]} then mark(p); end if;
        p:=p^.next;
        end loop;
    }
      end mark_single;


    
    ------------------------------------------------------------------------------------------------
    static mark_exports (
        export     : in tentitystring) =         -- seznam exportovaných entit
    -- Označí pro linkování všechny exportované entity.
    ------------------------------------------------------------------------------------------------
    begin
      -- je co exportovat?
      if export.list=nil then return; end if;

      -- označit všechny exporované entity
      for i in export.list^:range loop
        mark_single(export.list^[i]);
        end loop;
      end mark_exports;

 
    
    ------------------------------------------------------------------------------------------------
    static mark_all =
    -- Fáze 1: Označení všech entit pro linkování.
    ------------------------------------------------------------------------------------------------
    with
      standard.console;

    begin
      if flex_export_list.list<>nil and then flex_export_list.list^:length>0 then
        write_line('! flex export list not empty');
        end if;

      if sys_export_list.list<>nil and then sys_export_list.list^:length>0 then
        write_line('! sys export list not empty');
        end if;

      -- označit entity podle seznamu entit exportovaných metodou Flex
      mark_exports(flex_export_list);

      -- označit entity podle seznamu entit exportovaných metodou System
      mark_exports(sys_export_list);

      -- označit entity podle přirozené hierarchie volání
      mark_single(curr);
      end mark_all;

    

    ------------------------------------------------------------------------------------------------
    class c_partition_relocation_list = extend c_hash_table_item;
    -- Seznam relokačních informací pro jednu partition.
    ------------------------------------------------------------------------------------------------

        var
          -- vlastní seznam relokací
          relocations : p_relocations;

        --------------------------------------------------------------------------------------------
        static add_relocation (
            address     : in t_unsigned;         -- absolutní adresa relokabilního pole
            disposition : in t_relo_disposition) = -- dispozice relokace (relativní, absolutní,...)
        -- Doplní relokaci do seznamu.
        --------------------------------------------------------------------------------------------
        begin
          -- realokovat paměť
          if relocations=nil then
            new relocations range 255;
          elsif relocations^:length=relocations^:last then
            -- %%TODO(ADJUST)
            declare var
              _ : relocations:type;
            begin
              new _ range relocations^:last*2;
              _^:=relocations^;
              discard relocations;
              relocations:=_;
              end declare;
            end if;

          -- přidat na konec seznamu %%TODO(AGGREGATE)
          declare var
            _new_relo : t_relocations:base;
          begin
            _new_relo.disposition:=disposition;
            _new_relo.address    :=address;
            relocations^ & _new_relo;
            end declare;

        {
          if relocaddrs=nil then
            -- alokuj novy seznam relokaci
            new relocaddrs range 255;
            end if;
          
          -- pokud prazdny
          if relocaddrs^:length=0 then
            --rovnou napln
            relocaddrs^ & relocaddr;
            return;
            end if;

          -- pokud jiz v seznamu
          if relocaddrs^[relocaddrs^:length]=relocaddr then
            -- nezarazuj
            return;
            end if;

          -- realokuj pokud treba
          if relocaddrs^:length=relocaddrs^:last then
            -- naalokuj 2x vic pameti nez ma puvodni seznam
            new ptempaddrlist range relocaddrs^:last*2;
            
            -- a prekopiruj puvodni seznam do nove alokovaneho seznamu
            ptempaddrlist^:=relocaddrs^;

            -- stary seznam uz nebudeme potrebovat
            discard relocaddrs;
            relocaddrs:=ptempaddrlist;
            end if;

          -- pridej adresu na konec uz sortnuteho seznamu
          relocaddrs^ & relocaddr;

          -- posledni prvek sortni tam kam patri - od nejmensiho k nejvetsimu
          for i in reverse relocaddrs^:range loop
            -- neni prvni prvek a mensi nez predchozi?
            if i>1 and relocaddrs^[i]<relocaddrs^[i-1] 
            
              -- ano - swapni
              then
                tempaddr:=relocaddrs^[i-1];
                relocaddrs^[i-1]:=relocaddrs^[i];
                relocaddrs^[i]:=tempaddr;
              
              -- ne - vse setrideno, muzeme ukoncit loop
              else
                break;
                end if;
            end loop;
        } 
          end add_relocation;



        --------------------------------------------------------------------------------------------
        static get_sorted_relocations (
            relocations : out p_relocations) =   -- setříděný seznam relokací
        -- Setřídí seznam relokací a předá ho ven.
        --------------------------------------------------------------------------------------------
        with
          standard.console,
          standard.conversions;

        var
          zmena    : t_logical;                  -- příznak změny při třídění
          i        : t_unsigned;                 

        begin
          -- připravit si návratovou hodnotu
          relocations:=this.relocations;

          -- jestliže je prázdný, není co řešit
          if relocations=nil then return end if;

          -- setřídit
          i:=relocations^:length;
          loop
            zmena:=false;
            for j in relocations^:first..i-1 loop
              if relocations^[j].address>relocations^[j+1].address then
                declare var
                  item : relocations^:base;
                begin
                  item:=relocations^[j];
                  relocations^[j]:=relocations^[j+1];
                  relocations^[j+1]:=item;
                  end declare;
                zmena:=true;
                end if;
              end loop;
            pred i;
            until not zmena or i=relocations^:first;
{
          for j in relocations^:range loop
            write_line(unsigned_to_string(relocations^[j].address));
            end loop;
}
          end get_sorted_relocations;

        end c_partition_relocation_list;

    type
      p_partition_relocation_list = ^class c_partition_relocation_list;



    ------------------------------------------------------------------------------------------------
    class c_partitioned_relocations_list = extend c_hash_table;
    -- Seznam relokačních informací rozdělený podle kompilačních partition.
    ------------------------------------------------------------------------------------------------

        --------------------------------------------------------------------------------------------
        static get_reloc_list_by_partition_id (
            partition  : in t_partition_id;      -- ID cílové partition
            reloc_list : out p_partition_relocation_list; -- odpovídající seznam relokací
            create     : in t_logical := true) = -- T-neexistuje-li seznam, tak ho založit
        -- Podle identifikátoru partition dohledá odpovídající seznam relokací.
        --------------------------------------------------------------------------------------------
        begin
          -- zkusit nalézt existující senzam
          find(t_hash_item_id(partition),reloc_list);

          -- nenašel-li se, tak založit nový
          if reloc_list=nil and then create then
            begin
              -- alokovat paměť
              new reloc_list;

              -- přidělit hash ID
              reloc_list^.item_id:=t_hash_item_id(partition);

              -- zařadit do hash tabulky
              store(reloc_list);

            rollback
              discard reloc_list;
              end;
            end if;
          end get_reloc_list_by_partition_id;



        --------------------------------------------------------------------------------------------
        override assign_hash_id =
        --------------------------------------------------------------------------------------------
        begin
          -- v této hash tabulce se identifikátory přidělují zásadně ručně
          verify({VERIFY=}001233);
          end assign_hash_id;



        --------------------------------------------------------------------------------------------
        entry =
        --------------------------------------------------------------------------------------------
        begin
          init(37,c_partition_relocation_list:tag,true);
          end entry;

        end c_partitioned_relocations_list;



    var
      -- seznam relokačních informací rozdělený podle kompilačních partition
      part_reloc   : c_partitioned_relocations_list;

    ------------------------------------------------------------------------------------------------
    static add_relocation = 
    -- Zařadí adresu a dispozici relokabilního pole do seznamu relokací do cílové parition.
    ------------------------------------------------------------------------------------------------
    var
      reloc_list   : p_partition_relocation_list;
      
    begin
      verify({VERIFY=}000725,address<unicode_addr_to_unsigned(getaddrbase));
      verify({VERIFY=}001234,disposition=trd_relative and then partition=curr_partition);

      -- zvolit vhodnou tabulku
      part_reloc.get_reloc_list_by_partition_id(partition,reloc_list);

      -- přidat do ní relokaci
      reloc_list^.add_relocation(address,disposition);
      end add_relocation;

    

    ------------------------------------------------------------------------------------------------
    static get_sorted_relocations_by_partition_id =
    -- Vrátí seznam relokabilních adres, které směřují do uvedené cílové partition
    ------------------------------------------------------------------------------------------------
    var
      reloc_list   : p_partition_relocation_list;

    begin
      -- zvolit vhodnou tabulku
      part_reloc.get_reloc_list_by_partition_id(partition,reloc_list,for create use false);
      
      -- nenašel-li se, tak se nedá nic dělat a končíme
      if reloc_list=nil then return end if;

      -- seznam setřídit a předat ven
      reloc_list^.get_sorted_relocations(relocations);
      end get_sorted_relocations_by_partition_id;
{    
    ------------------------------------------------------------------------------------------------
    static getrelocaddrs =
    -- vrati seznam adres na kterych je treba provest relokaci
    ------------------------------------------------------------------------------------------------
    begin
      result:=relocaddrs;
      end getrelocaddrs;
}    
    end linkresolver;



----------------------------------------------------------------------------------------------------
procedure ffillz (
    os             : in p_stream_binary_writer;
    size           : in t_unsigned) =
-- Zapíše do souboru zadaný počet nulových bytů.
----------------------------------------------------------------------------------------------------
with
  standard.numerics;

var
  -- výplň: nuly
  fill_zeros       : const array t_unsigned8 of t_unsigned8 := nil;

var
  i                : t_unsigned;
  j                : t_unsigned;

begin
  i:=size;
  while i>0 loop
    j:=min_unsigned(i,fill_zeros:size);
    os^.write_unchecked_part(fill_zeros,j);
    i-j;
    end loop;
  end ffillz;



----------------------------------------------------------------------------------------------------
#separate private cl_ia32;
-- Vyhodnocovač cross-referencí a adres: IA-32.
----------------------------------------------------------------------------------------------------

end cl_resolver;