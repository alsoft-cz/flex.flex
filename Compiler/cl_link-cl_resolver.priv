----------------------------------------------------------------------------------------------------
module private cl_resolver =
-- P©eklada‡ Flexu.
-- Vyhodnocova‡ cross-referenc¡ a adres.
----------------------------------------------------------------------------------------------------
-- Ondra : 12.04.2002 : Vytvo©il
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
class private abstract linkresolver =
-- Vyhodnocova‡ cross-referenc¡ a adres.
----------------------------------------------------------------------------------------------------

    with
      cx_expr,
      cx_expr.cx_imm,
      cc_def,
      cc_def.cc_var;



    --------------------------------------------------------------------------------------------
    static domark (
        curr       : in pentity) =               -- symbol
    -- Vlastni marknuti
    --------------------------------------------------------------------------------------------
    with
      cc_base,
      cc_base.cc_sym;

        --------------------------------------------------------------------------------------------
        procedure marktype =
        -- Ozna‡en¡ typu/t©¡dy na vyhodnocen¡.
        --------------------------------------------------------------------------------------------
        var
          ancestor : pentity_type;               -- p©edek vyhodnocovan‚ho typu

        begin
          verify(388,tf_tagged not in pentity_type(curr)^.tflags);

          -- za©adit p©edka na vyhodnocen¡ (pokud je t‚‘ tagged)
          if curr^.ancestor.isset then
            pentity(ancestor):=curr^.ancestor.getcentity;
            if tf_tagged in ancestor^.tflags then mark(ancestor); end if;
            end if;

          -- za©adit na vyhodnocen¡ v¨echny speci ln¡ metody
          for tst in pentity_type(curr)^.stable:range loop
            if pentity_type(curr)^.stable[tst].isset then
              mark(pentity_type(curr)^.stable[tst].getcentity);
              end if;
            end loop;  

          -- za©adit typ na vyhodnocen¡
          this.typedesc.add(curr);
          end marktype;

        
    var
      srch         : tentitysearch;              -- hled tko

    begin

      -- ji‘ ozna‡en˜mi symboly se nezab˜vat
      if curr^.linked<>ls_undef then return; end if;

      -- ozna‡it symbol jako pou‘it˜
      curr^.linked:=ls_used;

      -- promˆnn 
      if curr^.etype=et_var then
        case pentity_var(curr)^.mclass
          -- statick 
          when mc_static do
              -- za©adit do p©¡slu¨n‚ho datov‚ho segmentu
              if pentity_var(curr)^.init.isset and not imm_isnil(pentity_var(curr)^.init.getimm^)
                -- inicializovan  promˆnn 
                then this.idata.add(curr)
                -- neinicializovan  promˆnn 
                else this.data.add(curr)
                end if;

          -- taskov 
          when mc_task do unimplemented(1);

          when mc_class do { nic nedelat }

          when others do verify(191,true);
          end case;

      -- prvek obsahuj¡c¡ k¢d
      elsif curr^.etype in ets_code then
        if curr^.etype=et_procedure{in ets_subprog} and then pentity_procedure{subprog}(curr)^.import_info<>nil

          -- extern¡ symbol
          then
            this.import.add(curr);

           -- norm ln¡ symbol
          else
            verify(584,pentity_code(curr)^.codegen=nil);

            -- symbol za©adit pro pozdˆj¨¡ vyhodnocen¡
            this.code.add(curr);

            -- trasovat tabulku relokac¡
            this.trace(curr);
            end if;

      -- typ
      elsif curr^.etype=et_type then
        -- za©adit na vyhodnocen¡
        marktype;

      -- t©¡da
      elsif curr^.etype=et_class then
        
        -- za©adit na vyhodnocen¡
        marktype;

        -- za©adit na vyhodnocen¡ v¨echny metody z tabulky virtu ln¡ch metod
        if pentity_type(curr)^.vtable<>nil then
          for i in pentity_type(curr)^.vtable^:range loop
            if pentity_type(curr)^.vtable^[i]<>nil then
              mark(pentity_type(curr)^.vtable^[i]);
              end if;
            end loop;
          end if;  
      {
        -- za©adit na vyhodnocen¡ v¨echny speci ln¡ metody
        srch.find_et_first(curr,et_special,tesearchflagset:[]);
        while srch.psym<>nil loop
          mark(srch.psym);
          srch.find_et_next;
          end loop;
      }

      -- zpr va
      elsif curr^.etype=et_message then
        succ this.msgnum;
        pentity_message(curr)^.num:=this.msgnum;
        --unimplemented(3);

      -- dal¨¡ prvky
      elsif curr^.etype in ets_enclosed then

      -- nic jin‚ho tu nem  co dˆlat
      else 
        verify(32,true);
        end if;

    {
      -- proj¡t lok ln¡ tabulku symbol–
      p:=curr^.symtab;
      while p<>nil loop
        if p^.etype in ets_code+ets_enclosed{-[et_module]} then mark(p); end if;
        p:=p^.next;
        end loop;
    }

      end domark;


    
    ------------------------------------------------------------------------------------------------
    static mark_exports =
    -- oznaceni exportu
    ------------------------------------------------------------------------------------------------
    begin
      -- je co exportovat?
      if export_list.list=nil then return; end if;

      -- markni vsechny entity v seznamu exportu
      for i in export_list.list^:range loop
        domark(export_list.list^[i]);
        end loop;
      end mark_exports;

 
    
    ------------------------------------------------------------------------------------------------
    static mark =
    -- F ze 1: Ozna‡en¡ symbol– pro linkov n¡.
    ------------------------------------------------------------------------------------------------
    begin
      mark_exports;
      domark(curr);
      end mark;



    ------------------------------------------------------------------------------------------------
    virtual link =
    -- F ze 2: Vlastn¡ sestaven¡.
    ------------------------------------------------------------------------------------------------
    begin
      end link;



    ------------------------------------------------------------------------------------------------
    virtual info =
    -- V˜pis souhrnn˜ch informac¡ do listingu.
    ------------------------------------------------------------------------------------------------
    begin
      end info;



    ------------------------------------------------------------------------------------------------
    virtual getaddrbase =
    -- Adresa, ke kter‚ se vztahuj¡ relokace.
    ------------------------------------------------------------------------------------------------
    begin
      end getaddrbase;



    ------------------------------------------------------------------------------------------------
    virtual getentrypoint =
    -- Entrypoint programu.
    ------------------------------------------------------------------------------------------------
    begin
      end getentrypoint;



    ------------------------------------------------------------------------------------------------
    virtual checkseg =
    -- True, pokud se m  zadan˜ segment zahrnout do EXE.
    ------------------------------------------------------------------------------------------------
    begin
      end checkseg;



    ------------------------------------------------------------------------------------------------
    virtual getsegbase =
    -- B zov  adresa segmentu.
    ------------------------------------------------------------------------------------------------
    begin
      end getsegbase;



    ------------------------------------------------------------------------------------------------
    virtual getsegtotal =
    -- Celkov  velikost segmentu.
    ------------------------------------------------------------------------------------------------
    begin
      end getsegtotal;



    ------------------------------------------------------------------------------------------------
    virtual writesegment =
    -- Do v˜stupn¡ho souboru zap¡¨e zadan˜ segment.
    ------------------------------------------------------------------------------------------------
    begin
      end writesegment;



    ------------------------------------------------------------------------------------------------
    virtual trace = 
    -- Projde tabulku relokac¡ symbolu CURR a pro ka‘d˜ symbol zavol¡ MARK.
    ------------------------------------------------------------------------------------------------
    begin
      end trace;



    ------------------------------------------------------------------------------------------------
    virtual linkimport =
    -- P©¡prava pro linkov n¡ importovan˜ch funkc¡.
    ------------------------------------------------------------------------------------------------
    begin
      end linkimport;



    ------------------------------------------------------------------------------------------------
    virtual linkexport =
    -- P©¡prava pro linkov n¡ exportovan˜ch funkc¡.
    ------------------------------------------------------------------------------------------------
    begin
      end linkexport;
    
    

    ------------------------------------------------------------------------------------------------
    procedure insertrelocaddrsorted = 
    -- Zatridi relocaddr do seznamu relocaddrs
    ------------------------------------------------------------------------------------------------

    var
      ptempaddrlist     : relocaddrs:type;       -- docasny seznam
      tempaddr          : t_unsigned;            -- pomocna promenna
      
      procedure debug(reloclist : in trelocs) =
      var
        length : t_unsigned32;
        size   : t_unsigned32;
        last   : t_unsigned32;

      begin
        length:=reloclist:length;
        size:=reloclist:size;
        last:=reloclist:last;
        end debug;

    begin
      if relocaddrs=nil then
        -- alokuj novy seznam relokaci
        new relocaddrs range 255;
        end if;

      -- chyba?
      if relocaddrs=nil then 
        raise memory_error;
        end if;
      
      -- pokud jiz v seznamu
      if relocaddrs^[relocaddrs^:length]=relocaddr then
        debug(relocaddrs^);
        -- nezarazuj
        return;
        end if;

      -- pokud prazdny
      if relocaddrs^:length=0 then
        --rovnou napln
        relocaddrs^ & relocaddr;
        return;
        end if;
      
      -- realokuj pokud treba
      if relocaddrs^:length=relocaddrs^:last then
        debug(relocaddrs^);
        -- naalokuj 2x vic pameti nez ma puvodni seznam
        new ptempaddrlist range relocaddrs^:last*2;
        if ptempaddrlist=nil then raise memory_error; end if;
        
        -- a prekopiruj puvodni seznam do nove alokovaneho seznamu
        ptempaddrlist^:=relocaddrs^;

        debug(relocaddrs^);
        
        -- stary seznam uz nebudeme potrebovat
        discard relocaddrs;
        relocaddrs:=ptempaddrlist;
        end if;

      -- pridej adresu na konec uz sortnuteho seznamu
      relocaddrs^ & relocaddr;

      debug(relocaddrs^);
      
      -- posledni prvek sortni tam kam patri - od nejmensimu k nejvetsimu
      for i in reverse relocaddrs^:range loop
        
        -- neni prvni prvek a mensi nez predchozi?
        if i>1 and relocaddrs^[i]<relocaddrs^[i-1] 
        
        -- ano - swapni
        then
          tempaddr:=relocaddrs^[i-1];
          relocaddrs^[i-1]:=relocaddrs^[i];
          relocaddrs^[i]:=tempaddr;
        
        -- ne - vse setrideno, muzeme ukoncit loop
        else
          break;
          end if;
        end loop;

      debug(relocaddrs^);
      
      end insertrelocaddrsorted;
    

    
    ------------------------------------------------------------------------------------------------
    procedure getrelocaddrs =
    -- vrati seznam adres na kterych je treba provest relokaci
    ------------------------------------------------------------------------------------------------
    begin
      result:=relocaddrs;
      end getrelocaddrs;
    
    end linkresolver;



----------------------------------------------------------------------------------------------------
procedure ffillz (
    os             : in p_output_stream;
    size           : in t_unsigned) =
-- Zap¡¨e do souboru zadan˜ po‡et nulov˜ch byt–.                              
----------------------------------------------------------------------------------------------------
with
  standard.numerics;

var
  -- v˜pl¤: nuly 
  fill_zeros       : const array t_unsigned8 of t_unsigned8 := nil;
                                               
var
  i                : t_unsigned;
  j                : t_unsigned;

begin
  i:=size;
  while i>0 loop
    j:=min_unsigned(i,fill_zeros:size);
    os^.writex(fill_zeros,j);
    i-j;
    end loop;
  end ffillz;



----------------------------------------------------------------------------------------------------
#separate private cl_ia32;
-- Vyhodnocova‡ cross-referenc¡ a adres: IA-32.
----------------------------------------------------------------------------------------------------

end cl_resolver;