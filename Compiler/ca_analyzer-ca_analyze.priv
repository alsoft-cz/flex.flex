----------------------------------------------------------------------------------------------------
module private ca_analyze =
-- Překladač Flexu.
-- Globální analýza programu.
----------------------------------------------------------------------------------------------------
-- Ondra : 12.11.2001 : Vytvořil
-- Hynek : 23.06.2003 : Pridana pro knihovny
----------------------------------------------------------------------------------------------------

with
  standard,
  standard.console,
  cc_def.cc_var,
  cc_def.cc_unitype,
  cc_base,
  cc_base.cc_type,
  cc_base.cc_sym,
  cc_base.cc_debug,
  cb_block,
  cb_block.cb_def,
  cb_block.cb_make,
  cx_expr,
  cx_expr.cx_def,
  cx_expr.cx_make,
  ca_analyzer.ca_var,
  ca_analyzer.ca_block,
  ca_analyzer.ca_util,
  ca_analyzer.ca_type;

 

-- %%X Nejdřív jsem si myslel, že inicializace proměnných se bude dělat 
-- zvláštní procedurou v generátoru. Pak jsem ale radši začal vkládat
-- do stromu kompilátorem generované uzly. Díky tomu se vždy nejdříve
-- volá A_SCAN_VARIABLES a pak se stejným způsobem tabulka protrasuje,
-- aby se mohly generovat ty speciální uzly. Teď se mi nechce
-- přemýšlet, jestli je to potřeba, nebo zda to jde v jednom průchodu.

#if dump then;
----------------------------------------------------------------------------------------------------
procedure dumpmemclass (
    prefix         : in t_char32str;
    mclass         : in memclassset) =
----------------------------------------------------------------------------------------------------
var
  s                : t_char32str;

begin
  s:='';
  for m in memclass loop
    if m in mclass then s & memclasstxt[m] & ', '; end if;
    end loop;
  if s:length>0 then
    s:length-2;
    debug_dump(prefix & s);
    end if;
  end dumpmemclass;
#end if;



----------------------------------------------------------------------------------------------------
procedure a_scan_variables (
    curr           : in tcontext) =              -- aktuální kontext      
-- Naplní proměnné LOC_ENTRY, LOC_EXIT, TRA_ENTRY, TRA_EXIT.
-- Rekurzivně prohledává třídy a podprogramy.
----------------------------------------------------------------------------------------------------
with
  advanced,
  advanced.low_level,
  advanced.low_level.bit_operations;

    ------------------------------------------------------------------------------------------------
    #template update_var_cache(cache,spectype);
    -- Zařadí paměťovou třídu proměnné [p] do [cache] aktuální entity pro volání metody [spectype].
    ------------------------------------------------------------------------------------------------
      --%%TODO(UNION) zatím neumíme sjednocení množin
      bit_set(curr.entity^.cache[spectype],t_bit_index(pentity_var(p)^.mclass:ord));
      #end update_var_cache;

    ------------------------------------------------------------------------------------------------
    #template update_transitive_closure(mask);
    -- Aktualizuje tranzitivní uzávěr aktuální entity o tranzitivní uzávěr entity [p] přes [mask]u.
    ------------------------------------------------------------------------------------------------
      for spectype in tspectype loop
        curr.entity^.tra_var_cache[spectype]+p^.tra_var_cache[spectype]*mask;
        end loop;
      #end update_transitive_closure;

var
  p                : pentity;                    -- právě zpracovávaný symbol
  region           : pregion;                    -- právě zpracovávaný region

begin
  -- projít všechny entity v tomto regionu
  p:=curr.region^.entities.first;
  while p<>nil loop
    -- proměnná
    if p^.etype=et_var then
      -- je to lokální proměnná ?
      if pentity_var(p)^.mclass in mcs_local then
        -- inicializují se lokální proměnné a OUT parametry podprogramu
        if pentity_var(p)^.vimplements<>vi_parameter or else pentity_var(p)^.imp_param^.mode=pm_out then
          update_var_cache(loc_var_cache,tst_init);
          end if;

        -- není to třída ?
        if pentity_var(p)^.typ.isset and t_contains_class(pentity_var(p)^.typ.getctype^) then
          -- ENTRY se volá pro lokální proměnné a OUT parametry
          if pentity_var(p)^.vimplements<>vi_parameter or else pentity_var(p)^.imp_param^.mode=pm_out then
            update_var_cache(loc_var_cache,tst_entry);
            end if;

          -- EXIT se volá pro lokální proměnné a IN STATIC parametry
          if pentity_var(p)^.vimplements<>vi_parameter or else (pentity_var(p)^.imp_param^.mode=pm_in and pentity_var(p)^.imp_param^.pass=pp_value) then
            update_var_cache(loc_var_cache,tst_exit);
            end if;
          end if;

      -- je to globální proměnná ?
      elsif pentity_var(p)^.mclass in mcs_global then
        -- globální promměnné se inicializují (parametr to být nemůže)
        update_var_cache(tra_var_cache,tst_init);

        -- není to tásková proměnná ?
        if pentity_var(p)^.mclass=mc_task then
          -- volá se INIT a EXIT
          update_var_cache(tra_var_cache,tst_init);
          update_var_cache(tra_var_cache,tst_exit);

        -- není to třída ?
        elsif pentity_var(p)^.typ.isset and t_contains_class(pentity_var(p)^.typ.getctype^) then
          -- volá se ENTRY i EXIT (parametr to být nemůže)
          update_var_cache(tra_var_cache,tst_entry);
          update_var_cache(tra_var_cache,tst_exit);
          end if;
        end if;

    -- podprogram
    elsif p^.etype in ets_subprogram then
      -- analyzovat proměnné
      a_scan_variables(sym_primary_context(p^));

      -- rozšířit tranzitivní uzávěr
      update_transitive_closure(memclassset:full);

    -- třída
    elsif p^.etype=et_class then
      -- analyzovat proměnné
      a_scan_variables(sym_primary_context(p^));

      -- přispívá do tranzitivního uzávěru vším, kromě paměťové třídy CLASS
      update_transitive_closure(mcs_static);
      end if;

    -- ostatní symboly jsou nezajímavé (nemají vliv na tranzitivní uzávěr)

    -- další symbol
    p:=p^.next;
    end loop;

  -- projít všechny vnořené regiony
  region:=curr.region^.regions.first;
  while region<>nil loop
    -- projít tento region
    a_scan_variables(sym_build_context(curr.entity,region));

    -- další region
    region:=region^.next;
    end loop;
    
#if dump then; {
  if curr.entity^.loc_init+curr.entity^.tra_init+curr.entity^.loc_entry+curr.entity^.loc_exit+curr.entity^.tra_entry+curr.entity^.tra_exit<>memclassset:[] then
    debug_dump('scan variables: ' & sym_get_qid(curr.entity));
    dumpmemclass('  loc_init:  ',curr.entity^.loc_init);
    dumpmemclass('  tra_init:  ',curr.entity^.tra_init);
    dumpmemclass('  loc_entry: ',curr.entity^.loc_entry);
    dumpmemclass('  loc_exit:  ',curr.entity^.loc_exit);
    dumpmemclass('  tra_entry: ',curr.entity^.tra_entry);
    dumpmemclass('  tra_exit:  ',curr.entity^.tra_exit);
    end if;
} #end if;
  end a_scan_variables;



----------------------------------------------------------------------------------------------------
procedure a_program (
    curr           : in out tentity_program) =   -- analyzovaný symbol
-- Analýza programu.
----------------------------------------------------------------------------------------------------
begin
  -- vygenerovat inicializaci a finalizaci proměnných
  a_block_process_vars(sym_primary_context(curr),pblblock(curr.bl.getcblock),mc_static,true,true);
  a_block_process_vars(sym_primary_context(curr),pblblock(curr.bl.getcblock),mc_auto,true,true);
  a_block_process_vars(sym_primary_context(curr),pblblock(curr.bl.getcblock),mc_task,true,true); 

  -- analyzovat příkazy
  a_block(curr,pblblock(curr.bl.getcblock));
  end a_program;



----------------------------------------------------------------------------------------------------
procedure a_subprogram (
    curr           : in out class tentity_code) =-- analyzovaný symbol
-- Analýza podprogramu.
----------------------------------------------------------------------------------------------------

with
  cc_base.cc_rtl,
  cx_expr.cx_make;

    ------------------------------------------------------------------------------------------------
    procedure calcnesting (
        curr       : in out class tentity_code) =-- analyzovan? symbol                
    -- Výpočet úrovně vnoření podprogramu.                                    
    ------------------------------------------------------------------------------------------------
    begin
      -- %%TECH Musí být rekurzivní, protože globální analýza nemusí obecně
      -- symboly zpracovávat v hierarchickém pořadí.

      if curr.context.entity<>nil and then curr.context.entity^.etype in ets_subprogram

        -- podle nadřazeného prvku
        then
          -- vypočítat pro nadřazený
          if pentity_code(curr.context.entity)^.nesting=0 then
            calcnesting(pentity_code(curr.context.entity)^);
            end if;

          -- úroveň vnoření tohoto podprogramu
          curr.nesting:=pentity_code(curr.context.entity)^.nesting+1;

        -- přímo
        else
          if curr.nesting=0 then curr.nesting:=1; end if;
          end if;
      end calcnesting;

begin
  -- není to abstraktní podprogram ?
  if curr.is_abstract
   
    -- ano => vygenerovat "raise abstract_error"
    then
      declare var
        curr_context : tcontext;                 -- kontext podprogramu (pro zjednodušení)
        binfo      : blinfo;                     -- kontext generování příkazů
        xinfo      : expinfo;                    -- kontext generování výrazu
        bl         : pblblock;                   -- blok příkazů
        msg        : pentity_message;            -- zpráva [abstract_error]

      begin
        -- pro zjednodušení kontext podprogramu
        curr_context:=sym_primary_context(curr);
        
        -- inicializovat kontexty generování příkazů a výrazů
        a_prepare_info(binfo,xinfo);

        -- vytvořit prázdný blok
        bl:=b_make_block(sym_primary_context(curr),binfo);

        -- asociovat s procedurou
        curr.bl.setblock(bl);

        -- budeme potřebovat zprávu [abstract_error]
        rtl_get_entity(rtl_abstract_error,pentity(msg));

        -- RAISE abstract_error
        a_list_append(bl^.sub,
          b_make_raise(curr_context,binfo,
            x_make_send_message(curr_context,xinfo,
              x_make_component_message(curr_context,xinfo,msg)
              )
            )
          );
        end declare;

    -- ne => normální zpracování
    else
      -- vypočítat úroveň vnoření podpro	gramu (ovšem pouze pokud je jisté,
      -- že toto je vnořený podprogram - jinak musí NESTING zůstat 0)
      if curr.nesting=0 and then curr.context.entity<>nil and then curr.context.entity^.etype in ets_subprogram then
        calcnesting(curr);
        end if;

      -- analyzovat proměnné
      -- Ondra 7.8.2002 : Zrušeno, provádí se rekurzivně z modulu, programu a kompilační jednotky
      -- a_scan_variables(sym_primary_context(curr));

      -- vygenerovat inicializaci a finalizaci proměnných
      a_block_process_vars(sym_primary_context(curr),pblblock(curr.bl.getcblock),mc_auto,false,false);
      a_block_process_vars(sym_primary_context(curr),pblblock(curr.bl.getcblock),mc_task,false,false);
      end if;

  -- analyzovat příkazy
  a_block(curr,pblblock(curr.bl.getcblock));
  end a_subprogram;



----------------------------------------------------------------------------------------------------
procedure a_static_subprogram (
    curr           : in out class tentity_static_subprogram) = -- analyzovaný symbol
-- Analýza statického podprogramu.
----------------------------------------------------------------------------------------------------
with
  cc_binding;
  
begin
  -- analyzovat lze jen podprogramy, které skutečně máme definované ve zdrojáku
  if not is_imported(^curr) then
    a_subprogram(curr);
    end if;
  end a_static_subprogram;
 



----------------------------------------------------------------------------------------------------
procedure a_special (
    curr           : in out tentity_special) =   -- analyzovaný symbol
-- Analýza speciální metody.
----------------------------------------------------------------------------------------------------
var
  binfo            : blinfo;                     -- kontext
  xinfo            : expinfo;                    -- kontext
  mclass           : memclass;                   -- paměťová třída "globálních" proměnných
  classonly        : t_logical;                  -- T-inicializovat jen prom. obsahující třídy
  typ              : pentity_type;               -- shortcut na typ  
  crange           : texecuterange;              -- rozsah provádění
  range_low        : pentity_var;                -- spodni mez rozsahu 
  range_high       : pentity_var;                -- horni mez rozsahu 

begin
  -- analyzovat proměnné
  -- Ondra 7.8.2002 : Zrušeno, provádí se rekurzivně z modulu, programu a kompilační jednotky
  -- a_scan_variables(sym_primary_context(curr));

  -- připravit kontexty
  a_prepare_info(binfo,xinfo);

  -- jakou třídu proměnných budeme inicializovat ?
  case curr.context.entity^.etype
    when et_module do mclass:=mc_static; classonly:=true;
    when et_class  do mclass:=mc_class;  classonly:=false;
    when others do verify({VERIFY=}000612,true);
    end case;

  -- máme informace o rozsahu, které je možno předat dále?
  typ:=pentity_type(curr.context.entity);
  if typ<>nil and (typ^.stype in dts_index) then
    -- dohledat proměnnou odpovídající dolní a horní mezi rozsahu
    a_find_executing_range(curr.context,range_low,range_high);

    -- pokud nalezeno, sestavit rozsah provádění
    if range_low<>nil and range_high<>nil then
      crange.low:=x_make_component_var(curr.context,xinfo,range_low);
      crange.high:=x_make_component_var(curr.context,xinfo,range_high);
      end if;
    end if;

  -- ze všeho nejdřív zavolat ENTRY/ADJUST/COMMIT předka
  if curr.context.entity^.etype=et_class and curr.spectype in tspectypeset:[tst_entry,tst_adjust,tst_commit] then
    a_list_append(pblblock(curr.bl.getcblock)^.binit,
      a_type_make_call_ancestor(pentity_type(curr.context.entity)^,binfo,xinfo,crange,curr.spectype)
      );
    end if;

  ---- inicializace ----
  -- inicializace globálních proměnných
  if curr.spectype=tst_entry then
    a_var_init(curr.context,pblblock(curr.bl.getcblock)^.binit,binfo,xinfo,mclass{mc_class},true,{for classonly use}classonly{false});
    end if;

  -- inicializace automatických lokálních proměnných
  a_var_init(sym_primary_context(curr),pblblock(curr.bl.getcblock)^.binit,binfo,xinfo,mc_auto,false,false);

  -- inicializace task proměnných
  if curr.spectype=tst_entry {tst_init} and curr.context.entity^.etype=et_module then
    a_var_init(curr.context,pblblock(curr.bl.getcblock)^.binit,binfo,xinfo,mc_task,true,classonly);
    end if;

  ---- ENTRY/ADJUST/COMMIT ----
  case curr.spectype
    -- zavolat adjust globálních proměnných
    when tst_adjust do a_var_adjust(curr.context,pblblock(curr.bl.getcblock)^.bentry,binfo,xinfo,mc_class,true);

    -- zavolat entry globálních proměnných
    when tst_entry  do a_var_entry(curr.context,pblblock(curr.bl.getcblock)^.bentry,binfo,xinfo,mclass{mc_class},{for recursive use}true);

    -- zavolat commit globálních proměnných
    when tst_commit do a_var_commit(curr.context,pblblock(curr.bl.getcblock)^.bentry,binfo,xinfo,mc_class,true);
    
    -- jiné speciální metody nás v tuto chvíli nezajímají
    when others do -- nic nedělat
    end case;

  -- zavolat entry automatických lokálních proměnných
  a_var_entry(sym_primary_context(curr),pblblock(curr.bl.getcblock)^.bentry,binfo,xinfo,mc_auto,false);

  -- zavolat exit automatických lokálních proměnných
  a_var_exit(sym_primary_context(curr),pblblock(curr.bl.getcblock)^.bexit,binfo,xinfo,mc_auto,false);

  ---- EXIT/ROLLBACK ----
  case curr.spectype
    -- zavolat exit globálních proměnných
    when tst_exit do 
        a_var_exit(curr.context,pblblock(curr.bl.getcblock)^.bexit,binfo,xinfo,mclass{mc_class},{for recursive use}true);
        if curr.context.entity^.etype=et_module then 
          a_var_exit(curr.context,pblblock(curr.bl.getcblock)^.bexit,binfo,xinfo,mc_task,{for recursive use}true);
          end if;
    
    -- zavolat rollback globálních proměnných
    when tst_rollback do a_var_exit(curr.context,pblblock(curr.bl.getcblock)^.bexit,binfo,xinfo,mc_class,true);
    
    -- jiné speciální metody nás v tuto chvíli nezajímají
    when others do -- nic nedělat
    end case;

  -- úplně na konec zavolat EXIT/ROLLBACK předka
  if curr.context.entity^.etype=et_class and curr.spectype in tspectypeset:[tst_exit,tst_rollback] then
    a_list_append(pblblock(curr.bl.getcblock)^.bexit,
      a_type_make_call_ancestor(pentity_type(curr.context.entity)^,binfo,xinfo,crange,curr.spectype)
      );
    end if;

  -- analyzovat příkazy
  a_block(curr,pblblock(curr.bl.getcblock));
  end a_special;



----------------------------------------------------------------------------------------------------
procedure a_pre_module (
    curr           : in out tentity_module) =    -- analyzovaný symbol
-- Před-analýza modulu.
----------------------------------------------------------------------------------------------------
with
  cc_def.cc_lexsym,cc_def.cc_var,
  cd_decl,cd_decl.cd_create;

var
  curr_context     : tcontext;                   -- primární kontext analyzovaného modulu

    ------------------------------------------------------------------------------------------------
    procedure make_special (
        spectype   : in tspectype) =             -- požadovaný typ metody
    -- Vygeneruje speciální metodu.
    ------------------------------------------------------------------------------------------------
    var
      pspec        : pentity_special;            -- vytvořená speciální metoda
      pspec_context: tcontext;                   -- kontext vytvořené speciální metody
      binfo        : blinfo;                     -- kontext generování příkazů
      xinfo        : expinfo;                    -- kontext generování výrazu

    begin
      -- existuje-li již, tak ji pochopitelně negenerovat
      if sym_check_special(curr_context,spectype) then return; end if;

      -- vygenerovat prázdnou speciální metodu
      d_create_internal(curr_context,pentity(pspec),pspec_context,et_special,tspectypeid[spectype]);
      pspec^.spectype:=spectype;
      pspec^.specobj:=tso_module;
      pspec^.instance:=tip_none;
      a_prepare_info(binfo,xinfo);
      pspec^.bl.setblock(b_make_block(pspec_context,binfo));
      d_end_internal(pspec^,true);
      
      -- trik: speciální metoda musí být nejlépe public, aby se správně vyexportovala do metadat
      -- %%X No, zrovna čistá praktika to není... Nešlo by to nějak jinak?
      pspec^.visible:=etv_public;
      pspec^.full   :=etv_public;
      sym_set_globaly_visible(pspec,for force use true);
      end make_special;

begin
  -- primární kontext 
  curr_context:=sym_primary_context(curr);

  -- analyzovat proměnné
  a_scan_variables(curr_context);

  -- pokud je to potřeba, tak vygenerovat ENTRY
  if tracecheck_init(^curr,mc_static) or tracecheck_entry(^curr,mc_static)
  or tracecheck_init(^curr,mc_task)  {or tracecheck_entry(^curr,mc_task)}{!!!} then
    make_special(tst_entry);
    end if;

  -- pokud je to potřeba, tak vygenerovat EXIT
  if tracecheck_exit(^curr,mc_static) or tracecheck_exit(^curr,mc_task) then
    make_special(tst_exit);
    end if;
  end a_pre_module;



----------------------------------------------------------------------------------------------------
procedure a_pre_class (
    curr           : in out tentity_type) =      -- analyzovaný symbol
-- Před-analýza třídy.
----------------------------------------------------------------------------------------------------
with
  standard.classes.lists,
  cc_def.cc_lexsym,cc_def.cc_var,
  cd_decl,cd_decl.cd_create;

var
  curr_context     : tcontext;                   -- primární kontext analyzované třídy

    ------------------------------------------------------------------------------------------------
    procedure make_special (
        spectype   : in tspectype) =             -- požadovaný typ metody
    -- Vygeneruje speciální metodu.
    ------------------------------------------------------------------------------------------------
    var
      pspec        : pentity_special;            -- vytvořená speciální metoda
      pspec_context: tcontext;                   -- kontext vytvořené speciální metody
      binfo        : blinfo;                     -- kontext generování příkazů
      xinfo        : expinfo;                    -- kontext generování výrazu

    begin
      -- existuje-li již, tak ji pochopitelně negenerovat
      if sym_check_special(curr_context,spectype) then return; end if;

      -- vygenerovat prázdnou speciální metodu
      d_create_internal(curr_context,pentity(pspec),pspec_context,et_special,tspectypeid[spectype]);
      pspec^.spectype:=spectype;
      pspec^.specobj:=tso_class;
      pspec^.instance:=tip_pass;
      a_prepare_info(binfo,xinfo);
      pspec^.bl.setblock(b_make_block(pspec_context,binfo));
      d_end_internal(pspec^,true);
      curr.stable[spectype].setentity(pspec);
      
      -- trik: speciální metoda musí být nejlépe public, aby se správně vyexportovala do metadat
      -- %%X No, zrovna čistá praktika to není... Nešlo by to nějak jinak?
      pspec^.visible:=etv_public;
      pspec^.full   :=etv_public;
      sym_set_globaly_visible(pspec,for force use true);
      end make_special;



    ------------------------------------------------------------------------------------------------
    procedure make_field (
        id         : in pentityident;            -- identifikátor pole
        typ        : in pentity_type;            -- typ pole
        addr       : in tunidata_addr) =         -- offset pole v rámci instance
    -- Vygeneruje služební pole v třídě.
    ------------------------------------------------------------------------------------------------
    var
      pitem        : pentity_var;                -- složka třídy
      pitem_context: tcontext;                   -- kontext složky třídy

    begin
      d_create_internal(curr_context,pentity(pitem),pitem_context,et_var,id);
      pitem^.mclass:=mc_class;
      pitem^.addr:=addr;
      pitem^.typ.settype(typ);
      d_end_internal(pitem^,true);
      
      -- trik: skrytá složka musí být nejlépe public, aby se správně vyexportovala do metadat
      -- %%X No, zrovna čistá praktika to není... Nešlo by to nějak jinak?
      pitem^.visible:=etv_public;
      pitem^.full   :=etv_public;
      sym_set_globaly_visible(pitem,for force use true);
      end make_field;

begin
  -- primární kontext 
  curr_context:=sym_primary_context(curr);

  -- pokud třída nemá předka, tak doplnit interní složky
  if not curr.ancestor.isset then
    declare var
      old_vsect    : tentityvisible;             -- původní nastavení viditelnosti vnořených entit

    begin
      -- na chvíli změnit viditelnost nově založených vnořených entity na public
      old_vsect:=curr_context.region^.vsect;
      curr_context.region^.vsect:=etv_public; -- Ondra 16.4.2002 & 23.2.2004 : Interní složky musí být viditelné
      
      -- zařadit složku @TAG
      make_field(^id_int_tag,inttype_tag,cpu^.class_tag);

      -- zařadit složku @STATUS
      make_field(^id_int_status,inttype_status,cpu^.class_status);

    leave
      -- opět vrátit zpět viditelnost nově založených vnořených entit na původní hodnotu
      curr_context.region^.vsect:=old_vsect;
      end declare;
    end if;

  -- pokud je to potřeba, tak vygenerovat ENTRY
  if tracecheck_init(^curr,mc_class) or tracecheck_entry(^curr,mc_class) then
    make_special(tst_entry);
    end if;

  -- pokud je to potřeba tak vygenerovat ADJUST
  if tracecheck_adjust(^curr,mc_class) then
    make_special(tst_adjust);
    end if;

  -- pokud je to potřeba tak vygenerovat EXIT
  if tracecheck_exit(^curr,mc_class) then
    make_special(tst_exit);
    end if;

  -- pokud je to potřeba tak vygenerovat ROLLBACK
  if tracecheck_rollback(^curr,mc_class) then
    make_special(tst_rollback);
    end if;

  -- pokud je to potřeba tak vygenerovat COMMIT
  if tracecheck_commit(^curr,mc_class) then
    make_special(tst_commit);
    end if;

  -- analyzovat interfacy
  declare var
    it             : c_list_iterator;            -- iterátor přes interfacy
    exposed_iface  : p_class_interface;          -- interface třídy

  begin
    curr.interfaces^.get_exposed_interfaces(it);
    while it.get(exposed_iface) loop
      a_entity(exposed_iface^.refclass.getcentity);
      end loop;
    end declare;

  -- analyzovat proměnné
  -- Ondra 7.8.2002 : Zrušeno, provádí se rekurzivně z modulu, programu a kompilační jednotky
  -- a_scan_variables(sym_primary_context(curr));
  end a_pre_class;



----------------------------------------------------------------------------------------------------
procedure a_pre_program (
    curr           : in out tentity_program) =   -- analyzovaný program
-- Před-analýza programu.
----------------------------------------------------------------------------------------------------
begin
  -- analyzovat proměnné
  a_scan_variables(sym_primary_context(curr));
  end a_pre_program;



----------------------------------------------------------------------------------------------------
procedure a_pre_compile (
    curr           : in out tentity_compile) =   -- analyzovaná kompilační jednotka
-- Před-analýza kompilační jednotky.
----------------------------------------------------------------------------------------------------
begin
  -- analyzovat proměnné
  a_scan_variables(sym_primary_context(curr));
  end a_pre_compile;



----------------------------------------------------------------------------------------------------
procedure a_pre_override (
    curr           : in out tentity_override) =  -- analyzovaný symbol
-- Před-analýza přetížení virtuální metody.
----------------------------------------------------------------------------------------------------
begin
  -- analyzovat základní virtuální metodu
  a_entity(curr.virt.getcentity);
  end a_pre_override;



----------------------------------------------------------------------------------------------------
procedure a_context (
    context        : in tcontext) =              -- analyzovaný kontext
-- Analýza kontextu (regionu).
----------------------------------------------------------------------------------------------------
var
  p                : pentity;                    -- analyzovaná entita
  region           : pregion;                    -- analyzovaný region          

begin
  -- analyzovat WITH/USE
  if context.region^.withtable<>nil then
    for i in context.region^.withtable^:range loop
      a_entity(context.region^.withtable^[i].entity.getcentity);
      end loop;
    end if;

  -- analyzovat všechny podsymboly
  if context.entity^.etype in ets_enclosing then
    p:=context.region^.entities.first;
    while p<>nil loop
      if p^.etype=et_type
        -- typy se analyzují jinak (poznámka: tímto způsobem se neprovede
        -- analýza všech typů, ale to vůbec nevadí, protože zbývající se
        -- analyzují rekurzivně v analýze typu nebo v analýze proměnné)
        then a_type(p)
        -- ostatní entity
        else a_entity(p);
        end if;
      p:=p^.next;
      end loop;
    end if;
  
  -- analyzovat všechny podregiony
  region:=context.region^.regions.first;
  while region<>nil loop
    -- analyzovat 
    a_context(sym_build_context(context.entity,region));

    -- další region
    region:=region^.next;
    end loop;
  end a_context;



----------------------------------------------------------------------------------------------------
procedure a_entity =
-- Analýza jedné entity.
----------------------------------------------------------------------------------------------------
with
  cl_link;

begin
  -- prolog analýzy
#if #environment compiler_version;='4.0.4.6' then;
  #display 'Už by mělo být možné používat rozvoj šablony, opravit';
  -- a_analyze_prolog(sym^);
#end if;

  -- .... Tady začíná kód nahraditelný šablonou [a_analyze_prolog] ....

  -- zajímají nás pouze entity z aktuální partition
  if sym^.partition_id<>curr_partition then return end if;

  -- analyzovat jen dosud neanalyzované symboly
  if sym^.analyzed<>as_none then return; end if;

  -- symbol je právě analyzován
  sym^.analyzed:=as_analyzing;

  -- analyzovat předka
  if sym^.ancestor.isset then
    -- Poznámka: nemusíme rozlišovat, jestli je to typ nebo ne, protože do [a_entity] se stejně
    -- žádné typy nedostanou (viz též [verify] níže).
    a_entity(sym^.ancestor.getcentity);
    end if;

  -- ^^^^ Tady končí kód nahraditelný šablonou [a_analyze_prolog] ^^^^ 

  -- některé symboly vyžadují před-analýzu
  case sym^.etype
    -- modul
    when et_module    do a_pre_module(pentity_module(sym)^);

    -- třída
    when et_class     do a_pre_class(pentity_type(sym)^);

    -- override
    when et_override  do a_pre_override(pentity_override(sym)^);
    
    -- program
    when et_program   do a_pre_program(pentity_program(sym)^);

    -- kompilační jednotka
    when et_compile   do a_pre_compile(pentity_compile(sym)^);
    
    -- jiné entity nás v tuto chvíli nezajímají
    when others do -- nic nedělat
    end case;

  -- analyzovat všechny kontexty
  for rcategory in tregioncategory loop
    if sym^.regions[rcategory]<>nil then
      a_context(sym_build_context(sym,sym^.regions[rcategory]));
      end if;
    end loop;

  -- analyzovat tento symbol
  case sym^.etype
    -- program
    when et_program   do a_program(pentity_program(sym)^);

    -- task
    when et_task      do unimplemented({UNIMP=}000124);

    -- procedura
    when et_procedure do a_static_subprogram(pentity_static_subprogram(sym)^);

    -- statická metoda
    when et_static    do a_static_subprogram(pentity_static_subprogram(sym)^);

    -- virtuální metoda
    when et_virtual   do a_subprogram(pentity_subprogram(sym)^);

    -- přetížení virtuální metody
    when et_override  do a_subprogram(pentity_code(sym)^);

    -- speciální metoda
    when et_special   do a_special(pentity_special(sym)^);

    -- typ se sem nesmí dostat
    when et_type      do verify({VERIFY=}000575,true);

    -- %%TECH Dalším kandidátem na globální analýzu jsou typy, ale ta se provádí
    -- pouze na vyžádání při generování inicializace/finalizace instance typu.

    -- na ostatních entitách není co zkoumat
    when others       do -- nic nedělat
    end case;

  -- prolog analýzy
#if #environment compiler_version;='4.0.4.6' then;
  #display 'Už by mělo být možné používat rozvoj šablony, opravit';
  -- a_analyze_epilog(sym^);
#end if;

  -- .... Tady začíná kód nahraditelný šablonou [a_analyze_epilog] ....

  -- pro non-standalone partition entitu zařadit na seznam exportovaných entit metodou Flex
  l_try_add_to_flex_export_list(sym);

  -- symbol byl analyzován
  sym^.analyzed:=as_analyzed;

  -- ^^^^ Tady končí kód nahraditelný šablonou [a_analyze_epilog] ^^^^ 
  end a_entity;



----------------------------------------------------------------------------------------------------
procedure a_analyze =
-- Globální analýza programu.
----------------------------------------------------------------------------------------------------
#if #declared ondra; #and then; ondra then;
with
  standard.console,
  standard.conversions;
#end if;

begin
  a_entity(compi);

#if #declared ondra; #and then; ondra then; {
  write('loop:  '); write_line(unsigned_to_string(bl_metrics[bt_loop]-bl_loop_until));
  write('for:   '); write_line(unsigned_to_string(bl_metrics[bt_for]));
  write('while: '); write_line(unsigned_to_string(bl_metrics[bt_while]));
  write('until: '); write_line(unsigned_to_string(bl_loop_until));
} #end if;
  end a_analyze;



----------------------------------------------------------------------------------------------------
procedure a_entity_out_of_order =
-- Analýza jedné entity mimo primární hierarchii analýzy.
-- Pokud je entita typ, použije pro skutečnou analýzu [a_type], jinak [a_entity].
----------------------------------------------------------------------------------------------------
begin
  if entity^.etype=et_type
    -- typy se analyzují jinak 
    then a_type(entity)
    -- ostatní entity
    else a_entity(entity);
    end if;
  end a_entity_out_of_order;



end ca_analyze;
