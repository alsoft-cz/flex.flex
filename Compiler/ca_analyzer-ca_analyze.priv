----------------------------------------------------------------------------------------------------
module private ca_analyze =
-- P©eklada‡ Flexu.
-- Glob ln¡ anal˜za programu.
----------------------------------------------------------------------------------------------------
-- Ondra : 12.11.2001 : Vytvo©il
-- Hynek : 23.06.2003 : Pridana pro knihovny
----------------------------------------------------------------------------------------------------

with
  cc_base,cc_base.cc_type,cc_base.cc_sym,cc_base.cc_debug,
  cb_block,cb_block.cb_def,cb_block.cb_make,
  cx_expr,cx_expr.cx_def,cx_expr.cx_make,
  ca_var,ca_block,ca_util,ca_type,cc_def.cc_var,standard.console;

 

-- %%X Nejd©¡v jsem si myslel, ‘e inicializace promˆnn˜ch se bude dˆlat 
-- zvl ¨tn¡ procedurou v gener toru. Pak jsem ale rad¨i za‡al vkl dat
-- do stromu kompil torem generovan‚ uzly. `D¡ky tomu se v‘dy nejd©¡ve
-- vol  A_SCAN_VARIABLES a pak se stejn˜m zp–sobem tabulka protrasuje,
-- aby se mohly generovat ty speci ln¡ uzly. Teƒ se mi nechce
-- p©em˜¨let, jestli je to pot©eba, nebo zda to jde v jednom pr–chodu.

#if dump then;
----------------------------------------------------------------------------------------------------
procedure dumpmemclass (
    prefix         : in t_char32str;
    mclass         : in memclassset) =
----------------------------------------------------------------------------------------------------
var
  s                : t_char32str;

begin
  s:='';
  for m in memclass loop
    if m in mclass then s & memclasstxt[m] & ', '; end if;
    end loop;
  if s:length>0 then
    s:length-2;
    debug_dump(prefix & s);
    end if;
  end dumpmemclass;
#end if;



----------------------------------------------------------------------------------------------------
procedure a_scan_variables (
    curr           : in tcontext) =              -- aktu ln¡ kontext      
-- Napln¡ promˆnn‚ LOC_ENTRY, LOC_EXIT, TRA_ENTRY, TRA_EXIT.
-- Rekurzivnˆ prohled v  t©¡dy a podprogramy.
----------------------------------------------------------------------------------------------------
with
  advanced,
  advanced.low_level,
  advanced.low_level.bit_operations;

    ------------------------------------------------------------------------------------------------
    #template update_var_cache(cache,spectype);
    -- Za©ad¡ pamˆŸovou t©¡du promˆnn‚ [p] do [cache] aktu ln¡ entity pro vol n¡ metody [spectype].
    ------------------------------------------------------------------------------------------------
      --%%TODO(UNION) zat¡m neum¡me sjednocen¡ mno‘in
      bit_set(curr.entity^.cache[spectype],t_bit_index(pentity_var(p)^.mclass:ord));
      #end update_var_cache;

    ------------------------------------------------------------------------------------------------
    #template update_transitive_closure(mask);
    -- Aktualizuje tranzitivn¡ uz vˆr aktu ln¡ entity o tranzitivn¡ uz vˆr entity [p] p©es [mask]u.
    ------------------------------------------------------------------------------------------------
      for spectype in tspectype loop
        curr.entity^.tra_var_cache[spectype]+p^.tra_var_cache[spectype]*mask;
        end loop;
      #end update_transitive_closure;

var
  p                : pentity;                    -- pr vˆ zpracov van˜ symbol
  region           : pregion;                    -- pr vˆ zpracov van˜ region

begin
  -- proj¡t v¨echny entity v tomto regionu
  p:=curr.region^.entities.first;
  while p<>nil loop
    -- promˆnn 
    if p^.etype=et_var then
      -- je to lok ln¡ promˆnn  ?
      if pentity_var(p)^.mclass in mcs_local then
        -- inicializuj¡ se lok ln¡ promˆnn‚ a OUT parametry podprogramu
        if pentity_var(p)^.vimplements<>vi_parameter or else pentity_var(p)^.imp_param^.mode=pm_out then
          update_var_cache(loc_var_cache,tst_init);
          end if;

        -- nen¡ to t©¡da ?
        if pentity_var(p)^.typ.isset and t_contains_class(pentity_var(p)^.typ.getctype^) then
          -- ENTRY se vol  pro lok ln¡ promˆnn‚ a OUT parametry
          if pentity_var(p)^.vimplements<>vi_parameter or else pentity_var(p)^.imp_param^.mode=pm_out then
            update_var_cache(loc_var_cache,tst_entry);
            end if;

          -- EXIT se vol  pro lok ln¡ promˆnn‚ a IN STATIC parametry
          if pentity_var(p)^.vimplements<>vi_parameter or else (pentity_var(p)^.imp_param^.mode=pm_in and pentity_var(p)^.imp_param^.pass=pp_value) then
            update_var_cache(loc_var_cache,tst_exit);
            end if;
          end if;

      -- je to glob ln¡ promˆnn  ?
      elsif pentity_var(p)^.mclass in mcs_global then
        -- glob ln¡ prommˆnn‚ se inicializuj¡ (parametr to b˜t nem–‘e)
        update_var_cache(tra_var_cache,tst_init);

        -- nen¡ to t skov  promˆnn  ?
        if pentity_var(p)^.mclass=mc_task then
          -- vol  se INIT a EXIT
          update_var_cache(tra_var_cache,tst_init);
          update_var_cache(tra_var_cache,tst_exit);

        -- nen¡ to t©¡da ?
        elsif pentity_var(p)^.typ.isset and t_contains_class(pentity_var(p)^.typ.getctype^) then
          -- vol  se ENTRY i EXIT (parametr to b˜t nem–‘e)
          update_var_cache(tra_var_cache,tst_entry);
          update_var_cache(tra_var_cache,tst_exit);
          end if;
        end if;

    -- podprogram
    elsif p^.etype in ets_subprogram then
      -- analyzovat promˆnn‚
      a_scan_variables(sym_primary_context(p^));

      -- roz¨¡©it tranzitivn¡ uz vˆr
      update_transitive_closure(memclassset:full);

    -- t©¡da
    elsif p^.etype=et_class then
      -- analyzovat promˆnn‚
      a_scan_variables(sym_primary_context(p^));

      -- p©isp¡v  do tranzitivn¡ho uz vˆru v¨¡m, kromˆ pamˆŸov‚ t©¡dy CLASS
      update_transitive_closure(mcs_static);
      end if;

    -- ostatn¡ symboly jsou nezaj¡mav‚ (nemaj¡ vliv na tranzitivn¡ uz vˆr)

    -- dal¨¡ symbol
    p:=p^.next;
    end loop;

  -- proj¡t v¨echny vno©en‚ regiony
  region:=curr.region^.regions.first;
  while region<>nil loop
    -- proj¡t tento region
    a_scan_variables(sym_build_context(curr.entity,region));

    -- dal¨¡ region
    region:=region^.next;
    end loop;
    
#if dump then; {
  if curr.entity^.loc_init+curr.entity^.tra_init+curr.entity^.loc_entry+curr.entity^.loc_exit+curr.entity^.tra_entry+curr.entity^.tra_exit<>memclassset:[] then
    debug_dump('scan variables: ' & sym_get_qid(curr.entity));
    dumpmemclass('  loc_init:  ',curr.entity^.loc_init);
    dumpmemclass('  tra_init:  ',curr.entity^.tra_init);
    dumpmemclass('  loc_entry: ',curr.entity^.loc_entry);
    dumpmemclass('  loc_exit:  ',curr.entity^.loc_exit);
    dumpmemclass('  tra_entry: ',curr.entity^.tra_entry);
    dumpmemclass('  tra_exit:  ',curr.entity^.tra_exit);
    end if;
} #end if;
  end a_scan_variables;



----------------------------------------------------------------------------------------------------
procedure a_program (
    curr           : in out tentity_program) =   -- analyzovan˜ symbol
-- Anal˜za programu.
----------------------------------------------------------------------------------------------------
begin
  -- vygenerovat inicializaci a finalizaci promˆnn˜ch
  a_block_process_vars(sym_primary_context(curr),pblblock(curr.bl.getcblock),mc_static,true,true);
  a_block_process_vars(sym_primary_context(curr),pblblock(curr.bl.getcblock),mc_task,true,true); 

  -- analyzovat p©¡kazy
  a_block(curr,pblblock(curr.bl.getcblock));
  end a_program;



----------------------------------------------------------------------------------------------------
procedure a_subprogram (
    curr           : in out class tentity_code) =-- analyzovan˜ symbol
-- Anal˜za podprogramu.
----------------------------------------------------------------------------------------------------

with
  cc_base.cc_rtl,
  cx_expr.cx_make;

    ------------------------------------------------------------------------------------------------
    procedure calcnesting (
        curr       : in out class tentity_code) =-- analyzovan? symbol                
    -- V˜po‡et £rovnˆ vno©en¡ podprogramu.                                    
    ------------------------------------------------------------------------------------------------
    begin
      -- %%TECH Mus¡ b˜t rekurzivn¡, proto‘e glob ln¡ anal˜za nemus¡ obecnˆ
      -- symboly zpracov vat v hierarchick‚m po©ad¡.

      if curr.context.entity<>nil and then curr.context.entity^.etype in ets_subprogram

        -- podle nad©azen‚ho prvku
        then
          -- vypo‡¡tat pro nad©azen˜
          if pentity_code(curr.context.entity)^.nesting=0 then
            calcnesting(pentity_code(curr.context.entity)^);
            end if;

          -- £rove¤ vno©en¡ tohoto podprogramu
          curr.nesting:=pentity_code(curr.context.entity)^.nesting+1;

        -- p©¡mo
        else
          if curr.nesting=0 then curr.nesting:=1; end if;
          end if;
      end calcnesting;

begin
  -- nen¡ to abstraktn¡ podprogram ?
  if curr.is_abstract
   
    -- ano => vygenerovat "raise abstract_error"
    then
      declare var
        curr_context : tcontext;                 -- kontext podprogramu (pro zjednodu¨en¡)
        binfo      : blinfo;                     -- kontext generov n¡ p©¡kaz–
        xinfo      : expinfo;                    -- kontext generov n¡ v˜razu
        bl         : pblblock;                   -- blok p©¡kaz–
        msg        : pentity_message;            -- zpr va [abstract_error]

      begin
        -- pro zjednodu¨en¡ kontext podprogramu
        curr_context:=sym_primary_context(curr);
        
        -- inicializovat kontexty generov n¡ p©¡kaz– a v˜raz–
        a_prepare_info(binfo,xinfo);

        -- vytvo©it pr zdn˜ blok
        bl:=b_make_block(sym_primary_context(curr),binfo);

        -- asociovat s procedurou
        curr.bl.setblock(bl);

        -- budeme pot©ebovat zpr vu [abstract_error]
        rtl_get_entity(rtl_abstract_error,pentity(msg));

        -- RAISE abstract_error
        a_list_append(bl^.sub,
          b_make_raise(curr_context,binfo,
            x_make_send_message(curr_context,xinfo,
              x_make_component_message(curr_context,xinfo,msg)
              )
            )
          );
        end declare;

    -- ne => norm ln¡ zpracov n¡
    else
      -- vypo‡¡tat £rove¤ vno©en¡ podprogramu (ov¨em pouze pokud je jist‚,
      -- ‘e toto je vno©en˜ podprogram - jinak mus¡ NESTING z–stat 0)
      if curr.nesting=0 and then curr.context.entity<>nil and then curr.context.entity^.etype in ets_subprogram then
        calcnesting(curr);
        end if;

      -- analyzovat promˆnn‚
      -- Ondra 7.8.2002 : Zru¨eno, prov d¡ se rekurzivnˆ z modulu, programu a kompila‡n¡ jednotky
      -- a_scan_variables(sym_primary_context(curr));

      -- vygenerovat inicializaci a finalizaci promˆnn˜ch
      a_block_process_vars(sym_primary_context(curr),pblblock(curr.bl.getcblock),mc_auto,false,false);
      a_block_process_vars(sym_primary_context(curr),pblblock(curr.bl.getcblock),mc_task,false,false);
      end if;

  -- analyzovat p©¡kazy
  a_block(curr,pblblock(curr.bl.getcblock));
  end a_subprogram;



----------------------------------------------------------------------------------------------------
procedure a_procedure (
    curr           : in out tentity_procedure) = -- analyzovan˜ symbol
-- Anal˜za podprogramu.
----------------------------------------------------------------------------------------------------
var
  entity           : pentity;

begin
  -- analyzovat lze jen procedury, kter‚ skute‡nˆ m me definovan‚ ve zdroj ku
  if curr.import_info=nil then
    a_subprogram(curr);
    end if;

  -- exportovany symbol?
  if curr.export_info<>nil then
    
    -- zarad symbol pro export
    export_list.add(^curr);
    end if;
  end a_procedure;
 



----------------------------------------------------------------------------------------------------
procedure a_special (
    curr           : in out tentity_special) =   -- analyzovan˜ symbol
-- Anal˜za speci ln¡ metody.
----------------------------------------------------------------------------------------------------
var
  binfo            : blinfo;                     -- kontext
  xinfo            : expinfo;                    -- kontext
  mclass           : memclass;                   -- pamˆŸov  t©¡da "glob ln¡ch" promˆnn˜ch
  classonly        : t_logical;                  -- T-inicializovat jen prom. obsahuj¡c¡ t©¡dy
  typ              : pentity_type;               -- shortcut na typ  
  crange           : texecuterange;              -- rozsah prov dˆn¡
  range_low        : pentity_var;                -- spodni mez rozsahu 
  range_high       : pentity_var;                -- horni mez rozsahu 

begin
  -- analyzovat promˆnn‚
  -- Ondra 7.8.2002 : Zru¨eno, prov d¡ se rekurzivnˆ z modulu, programu a kompila‡n¡ jednotky
  -- a_scan_variables(sym_primary_context(curr));

  -- p©ipravit kontexty
  a_prepare_info(binfo,xinfo);

  -- jakou t©¡du promˆnn˜ch budeme inicializovat ?
  case curr.context.entity^.etype
    when et_module do mclass:=mc_static; classonly:=true;
    when et_class  do mclass:=mc_class;  classonly:=false;
    when others do verify({VERIFY=}000612,true);
    end case;

  -- m me informace o rozsahu, kter‚ je mo‘no p©edat d le?
  typ:=pentity_type(curr.context.entity);
  if typ<>nil and (typ^.stype in dts_index) then
    -- dohledat promˆnnou odpov¡daj¡c¡ doln¡ a horn¡ mezi rozsahu
    a_find_executing_range(curr.context,range_low,range_high);

    -- pokud nalezeno, sestavit rozsah prov dˆn¡
    if range_low<>nil and range_high<>nil then
      crange.low:=x_make_component_var(curr.context,xinfo,range_low);
      crange.high:=x_make_component_var(curr.context,xinfo,range_high);
      end if;
    end if;

  -- ze v¨eho nejd©¡v zavolat ENTRY/ADJUST/COMMIT p©edka
  if curr.context.entity^.etype=et_class and curr.spectype in tspectypeset:[tst_entry,tst_adjust,tst_commit] then
    a_list_append(pblblock(curr.bl.getcblock)^.binit,
      a_type_make_call_ancestor(pentity_type(curr.context.entity)^,binfo,xinfo,crange,curr.spectype)
      );
    end if;

  ---- inicializace ----
  -- inicializace glob ln¡ch promˆnn˜ch
  if curr.spectype=tst_entry then
    a_var_init(curr.context,pblblock(curr.bl.getcblock)^.binit,binfo,xinfo,mclass{mc_class},true,{for classonly use}classonly{false});
    end if;

  -- inicializace automatick˜ch lok ln¡ch promˆnn˜ch
  a_var_init(sym_primary_context(curr),pblblock(curr.bl.getcblock)^.binit,binfo,xinfo,mc_auto,false,false);

  -- inicializace task promˆnn˜ch
  if curr.spectype=tst_entry {tst_init} and curr.context.entity^.etype=et_module then
    a_var_init(curr.context,pblblock(curr.bl.getcblock)^.binit,binfo,xinfo,mc_task,true,classonly);
    end if;

  ---- ENTRY/ADJUST/COMMIT ----
  case curr.spectype
    -- zavolat adjust glob ln¡ch promˆnn˜ch
    when tst_adjust do a_var_adjust(curr.context,pblblock(curr.bl.getcblock)^.bentry,binfo,xinfo,mc_class,true);

    -- zavolat entry glob ln¡ch promˆnn˜ch
    when tst_entry  do a_var_entry(curr.context,pblblock(curr.bl.getcblock)^.bentry,binfo,xinfo,mclass{mc_class},{for recursive use}true);

    -- zavolat commit glob ln¡ch promˆnn˜ch
    when tst_commit do a_var_commit(curr.context,pblblock(curr.bl.getcblock)^.bentry,binfo,xinfo,mc_class,true);
    end case;

  -- zavolat entry automatick˜ch lok ln¡ch promˆnn˜ch
  a_var_entry(sym_primary_context(curr),pblblock(curr.bl.getcblock)^.bentry,binfo,xinfo,mc_auto,false);

  -- zavolat exit automatick˜ch lok ln¡ch promˆnn˜ch
  a_var_exit(sym_primary_context(curr),pblblock(curr.bl.getcblock)^.bexit,binfo,xinfo,mc_auto,false);

  ---- EXIT/ROLLBACK ----
  case curr.spectype
    -- zavolat exit glob ln¡ch promˆnn˜ch
    when tst_exit do 
        a_var_exit(curr.context,pblblock(curr.bl.getcblock)^.bexit,binfo,xinfo,mclass{mc_class},{for recursive use}true);
        if curr.context.entity^.etype=et_module then 
          a_var_exit(curr.context,pblblock(curr.bl.getcblock)^.bexit,binfo,xinfo,mc_task,{for recursive use}true);
          end if;
    
    -- zavolat rollback glob ln¡ch promˆnn˜ch
    when tst_rollback do a_var_exit(curr.context,pblblock(curr.bl.getcblock)^.bexit,binfo,xinfo,mc_class,true);
    end case;

  -- £plnˆ na konec zavolat EXIT/ROLLBACK p©edka
  if curr.context.entity^.etype=et_class and curr.spectype in tspectypeset:[tst_exit,tst_rollback] then
    a_list_append(pblblock(curr.bl.getcblock)^.bexit,
      a_type_make_call_ancestor(pentity_type(curr.context.entity)^,binfo,xinfo,crange,curr.spectype)
      );
    end if;

  -- analyzovat p©¡kazy
  a_block(curr,pblblock(curr.bl.getcblock));
  end a_special;



----------------------------------------------------------------------------------------------------
procedure a_var (
    curr           : in out tentity_var) =       -- analyzovan˜ symbol
-- Anal˜za speci ln¡ metody.
----------------------------------------------------------------------------------------------------
begin
  -- exportovany symbol?
  if curr.export_info<>nil then
    
    -- zarad symbol pro export
    export_list.add(^curr);
    end if;
  end a_var;



----------------------------------------------------------------------------------------------------
procedure a_pre_module (
    curr           : in out tentity_module) =    -- analyzovan˜ symbol
-- P©ed-anal˜za modulu.
----------------------------------------------------------------------------------------------------
with
  cc_def.cc_lexsym,cc_def.cc_var,
  cd_decl,cd_decl.cd_create;

var
  curr_context     : tcontext;                   -- prim rn¡ kontext analyzovan‚ho modulu

    ------------------------------------------------------------------------------------------------
    procedure make_special (
        spectype   : in tspectype) =             -- po‘adovan˜ typ metody
    -- Vygeneruje speci ln¡ metodu.
    ------------------------------------------------------------------------------------------------
    var
      pspec        : pentity_special;            -- vytvo©en  speci ln¡ metoda
      pspec_context: tcontext;                   -- kontext vytvo©en‚ speci ln¡ metody
      binfo        : blinfo;                     -- kontext generov n¡ p©¡kaz–
      xinfo        : expinfo;                    -- kontext generov n¡ v˜razu

    begin
      -- existuje-li ji‘, tak ji pochopitelnˆ negenerovat
      if sym_check_special(curr_context,spectype) then return; end if;

      -- vygenerovat pr zdnou speci ln¡ metodu
      d_create_internal(curr_context,pentity(pspec),pspec_context,et_special,tspectypeid[spectype]);
      pspec^.spectype:=spectype;
      pspec^.specobj:=tso_module;
      pspec^.instance:=tip_none;
      a_prepare_info(binfo,xinfo);
      pspec^.bl.setblock(b_make_block(pspec_context,binfo));
      d_end_internal(pspec^,true);
      end make_special;

begin
  -- prim rn¡ kontext 
  curr_context:=sym_primary_context(curr);

  -- analyzovat promˆnn‚
  a_scan_variables(curr_context);

  -- pokud je to pot©eba, tak vygenerovat ENTRY
  if tracecheck_init(^curr,mc_static) or tracecheck_entry(^curr,mc_static)
  or tracecheck_init(^curr,mc_task)  {or tracecheck_entry(^curr,mc_task)}{!!!} then
    make_special(tst_entry);
    end if;

  -- pokud je to pot©eba, tak vygenerovat EXIT
  if tracecheck_exit(^curr,mc_static) or tracecheck_exit(^curr,mc_task) then
    make_special(tst_exit);
    end if;
  end a_pre_module;



----------------------------------------------------------------------------------------------------
procedure a_pre_class (
    curr           : in out tentity_type) =      -- analyzovan˜ symbol
-- P©ed-anal˜za t©¡dy.
----------------------------------------------------------------------------------------------------
with
  standard.classes.lists,
  cc_def.cc_lexsym,cc_def.cc_var,
  cd_decl,cd_decl.cd_create;

var
  curr_context     : tcontext;                   -- prim rn¡ kontext analyzovan‚ t©¡dy

    ------------------------------------------------------------------------------------------------
    procedure make_special (
        spectype   : in tspectype) =             -- po‘adovan˜ typ metody
    -- Vygeneruje speci ln¡ metodu.
    ------------------------------------------------------------------------------------------------
    var
      pspec        : pentity_special;            -- vytvo©en  speci ln¡ metoda
      pspec_context: tcontext;                   -- kontext vytvo©en‚ speci ln¡ metody
      binfo        : blinfo;                     -- kontext generov n¡ p©¡kaz–
      xinfo        : expinfo;                    -- kontext generov n¡ v˜razu

    begin
      -- existuje-li ji‘, tak ji pochopitelnˆ negenerovat
      if sym_check_special(curr_context,spectype) then return; end if;

      -- vygenerovat pr zdnou speci ln¡ metodu
      d_create_internal(curr_context,pentity(pspec),pspec_context,et_special,tspectypeid[spectype]);
      pspec^.spectype:=spectype;
      pspec^.specobj:=tso_class;
      pspec^.instance:=tip_pass;
      a_prepare_info(binfo,xinfo);
      pspec^.bl.setblock(b_make_block(pspec_context,binfo));
      d_end_internal(pspec^,true);
      curr.stable[spectype].setentity(pspec);
      end make_special;

var
  pitem            : pentity_var;                -- slo‘ka t©¡dy
  pitem_context    : tcontext;                   -- kontext slo‘ky t©¡dy
                                                          
begin
  -- prim rn¡ kontext 
  curr_context:=sym_primary_context(curr);

  -- pokud t©¡da nem  p©edka, tak doplnit intern¡ slo‘ky
  if not curr.ancestor.isset then
    -- za©adit slo‘ku @TAG
    d_create_internal(curr_context,pentity(pitem),pitem_context,et_var,^id_int_tag);
    pitem^.compile+tentitycompileset:[etc_generated];
    pitem^.visible:=etv_public; -- Ondra 16.4.2002 : Mus¡ b˜t viditeln 
    pitem^.mclass:=mc_class;
    pitem^.addr:=cpu^.class_tag;
    pitem^.typ.settype(inttype_tag);
    d_end_internal(pitem^,true);

    -- za©adit slo‘ku @STATUS
    d_create_internal(curr_context,pentity(pitem),pitem_context,et_var,^id_int_status);
    pitem^.compile+tentitycompileset:[etc_generated];
    pitem^.visible:=etv_public; -- Ondra 16.4.2002 : Mus¡ b˜t viditeln 
    pitem^.mclass:=mc_class;
    pitem^.addr:=cpu^.class_status;
    pitem^.typ.settype(inttype_status);
    d_end_internal(pitem^,true);
    end if;

  -- pokud je to pot©eba, tak vygenerovat ENTRY
  if tracecheck_init(^curr,mc_class) or tracecheck_entry(^curr,mc_class) then
    make_special(tst_entry);
    end if;

  -- pokud je to pot©eba tak vygenerovat ADJUST
  if tracecheck_adjust(^curr,mc_class) then
    make_special(tst_adjust);
    end if;

  -- pokud je to pot©eba tak vygenerovat EXIT
  if tracecheck_exit(^curr,mc_class) then
    make_special(tst_exit);
    end if;

  -- pokud je to pot©eba tak vygenerovat ROLLBACK
  if tracecheck_rollback(^curr,mc_class) then
    make_special(tst_rollback);
    end if;

  -- pokud je to pot©eba tak vygenerovat COMMIT
  if tracecheck_commit(^curr,mc_class) then
    make_special(tst_commit);
    end if;

  -- analyzovat interfacy
  declare var
    it             : c_list_iterator;            -- iter tor p©es interfacy
    exposed_iface  : p_class_interface;          -- interface t©¡dy

  begin
    curr.interfaces^.get_exposed_interfaces(it);
    while it.get(exposed_iface) loop
      a_entity(exposed_iface^.refclass.getcentity);
      end loop;
    end declare;

  -- analyzovat promˆnn‚
  -- Ondra 7.8.2002 : Zru¨eno, prov d¡ se rekurzivnˆ z modulu, programu a kompila‡n¡ jednotky
  -- a_scan_variables(sym_primary_context(curr));
  end a_pre_class;



----------------------------------------------------------------------------------------------------
procedure a_pre_program (
    curr           : in out tentity_program) =   -- analyzovan˜ program
-- P©ed-anal˜za programu.
----------------------------------------------------------------------------------------------------
begin
  -- analyzovat promˆnn‚
  a_scan_variables(sym_primary_context(curr));
  end a_pre_program;



----------------------------------------------------------------------------------------------------
procedure a_pre_compile (
    curr           : in out tentity_compile) =   -- analyzovan  kompila‡n¡ jednotka
-- P©ed-anal˜za kompila‡n¡ jednotky.
----------------------------------------------------------------------------------------------------
begin
  -- analyzovat promˆnn‚
  a_scan_variables(sym_primary_context(curr));
  end a_pre_compile;



----------------------------------------------------------------------------------------------------
procedure a_pre_override (
    curr           : in out tentity_override) =  -- analyzovan˜ symbol
-- P©ed-anal˜za p©et¡‘en¡ virtu ln¡ metody.
----------------------------------------------------------------------------------------------------
begin
  -- analyzovat z kladn¡ virtu ln¡ metodu
  a_entity(curr.virt.getcentity);
  end a_pre_override;



----------------------------------------------------------------------------------------------------
procedure a_context (
    context        : in tcontext) =              -- analyzovan˜ kontext
-- Anal˜za kontextu (regionu).
----------------------------------------------------------------------------------------------------
var
  p                : pentity;                    -- analyzovan  entita
  region           : pregion;                    -- analyzovan˜ region          

begin
  -- analyzovat WITH/USE
  if context.region^.withtable<>nil then
    for i in context.region^.withtable^:range loop
      a_entity(context.region^.withtable^[i].entity.getcentity);
      end loop;
    end if;

  -- analyzovat v¨echny podsymboly
  if context.entity^.etype in ets_enclosing then
    p:=context.region^.entities.first;
    while p<>nil loop
      if p^.etype=et_type
        -- typy se analyzuj¡ jinak (pozn mka: t¡mto zp–sobem se neprovede
        -- anal˜za v¨ech typ–, ale to v–bec nevad¡, proto‘e zb˜vaj¡c¡ se
        -- analyzuj¡ rekurzivnˆ v anal˜ze typu nebo v anal˜ze promˆnn‚)
        then a_type(pentity_type(p)^)
        -- ostatn¡ entity
        else a_entity(p);
        end if;
      p:=p^.next;
      end loop;
    end if;
  
  -- analyzovat v¨echny podregiony
  region:=context.region^.regions.first;
  while region<>nil loop
    -- analyzovat 
    a_context(sym_build_context(context.entity,region));

    -- dal¨¡ region
    region:=region^.next;
    end loop;
  end a_context;



----------------------------------------------------------------------------------------------------
procedure a_entity =
-- Anal˜za jedn‚ entity.
----------------------------------------------------------------------------------------------------
with
  standard,console;

begin
  -- analyzovat jen dosud neanalyzovan‚ symboly
  if sym^.analyzed<>as_none then return; end if;

  -- symbol je pr vˆ analyzov n
  sym^.analyzed:=as_analyzing;

  {if sym^.id<>nil then write_line(entityident_to_string(sym^.id^)); end if;}

  -- analyzovat p©edka
  if sym^.ancestor.isset then
    -- Pozn mka: nemus¡me rozli¨ovat, jestli je to typ nebo ne, proto‘e do [a_entity] se stejnˆ
    -- ‘ dn‚ typy nedostanou (viz t‚‘ [verify] n¡‘e).
    a_entity(sym^.ancestor.getcentity);
    end if;

  -- nˆkter‚ symboly vy‘aduj¡ p©ed-anal˜zu
  case sym^.etype
    -- modul
    when et_module    do a_pre_module(pentity_module(sym)^);

    -- t©¡da
    when et_class     do a_pre_class(pentity_type(sym)^);

    -- override
    when et_override  do a_pre_override(pentity_override(sym)^);
    
    -- program
    when et_program   do a_pre_program(pentity_program(sym)^);

    -- kompila‡n¡ jednotka
    when et_compile   do a_pre_compile(pentity_compile(sym)^);
    end case;

  -- analyzovat v¨echny kontexty
  for rcategory in tregioncategory loop
    if sym^.regions[rcategory]<>nil then
      a_context(sym_build_context(sym,sym^.regions[rcategory]));
      end if;
    end loop;

  -- analyzovat tento symbol
  case sym^.etype
    -- program
    when et_program   do a_program(pentity_program(sym)^);

    -- task
    when et_task      do unimplemented({UNIMP=}000124);

    -- procedura
    when et_procedure do a_procedure(pentity_procedure(sym)^);

    -- statick  metoda
    when et_static    do a_subprogram(pentity_subprogram(sym)^);

    -- virtu ln¡ metoda
    when et_virtual   do a_subprogram(pentity_subprogram(sym)^);

    -- p©et¡‘en¡ virtu ln¡ metody
    when et_override  do a_subprogram(pentity_code(sym)^);{unimplemented({UNIMP=}000163);}

    -- speci ln¡ metoda
    when et_special   do a_special(pentity_special(sym)^);

    -- promenna
    when et_var       do a_var(pentity_var(sym)^);

    -- typ se sem nesm¡ dostat
    when et_type      do verify({VERIFY=}000575,true);

    -- %%TECH Dal¨¡m kandid tem na glob ln¡ anal˜zu jsou typy, ale ta se prov d¡
    -- pouze na vy‘ d n¡ p©i generov n¡ inicializace/finalizace instance typu.

    -- na ostatn¡ch symbolech nen¡ co zkoumat
    end case;

  -- symbol byl analyzov n
  sym^.analyzed:=as_analyzed;
  end a_entity;



----------------------------------------------------------------------------------------------------
procedure a_analyze =
-- Glob ln¡ anal˜za programu.
----------------------------------------------------------------------------------------------------
#if #declared ondra; #and then; ondra then;
with
  standard.console,
  standard.conversions;
#end if;

begin
  a_entity(compi);

#if #declared ondra; #and then; ondra then; {
  write('loop:  '); write_line(unsigned_to_string(bl_metrics[bt_loop]-bl_loop_until));
  write('for:   '); write_line(unsigned_to_string(bl_metrics[bt_for]));
  write('while: '); write_line(unsigned_to_string(bl_metrics[bt_while]));
  write('until: '); write_line(unsigned_to_string(bl_loop_until));
} #end if;
  end a_analyze;



end ca_analyze;
