----------------------------------------------------------------------------------------------------
module private cb_compile =
-- P©eklada‡ Flexu.
-- Interface na p©eklada‡ bloku p©¡kaz– a n vazn‚ operace.
----------------------------------------------------------------------------------------------------
-- Ondra : 07.11.2001 : Vytvo©il
----------------------------------------------------------------------------------------------------

with
  cc_base,cc_base.cc_debug,
  cb_parse,cb_form,cb_opt;

----------------------------------------------------------------------------------------------------
procedure b_block =
-- P©eklad bloku p©¡kaz–.
----------------------------------------------------------------------------------------------------
var
  info             : blinfo;                     -- informace o pr–bˆhu anal˜zy

begin
#if dump then;{%OFF}
  if opt_dump in curr.entity^.compv.opts then debug_dump('---- Prvni pruchod ------------------------------------------------------------'); end if;
#end if;{%ON}

  -- inicializovat informace o pr–bˆhu anal˜zy
  info.init({false,}false{final});

  -- F ze 1: rozklad v˜razu
#if dump then;{%OFF}
  if opt_dump in curr.entity^.compv.opts then debug_dump('---- Faze 1: Rozklad prikazu --------------------------------------------------'); end if;
#end if;{%ON}
  info.phase:=bp_syntax;
  b_body(curr,pblblock(bl),info);
#if dump then;
  if opt_dump in curr.entity^.compv.opts then dumptree(bl); end if;
#end if;
  end b_block;



----------------------------------------------------------------------------------------------------
procedure b_evaluate =
-- Vyhodnocen¡ bloku.
-- O‡ek v  ji‘ rozlo‘en˜ blok. Jednotliv‚ f ze p©ekladu se prov dˆj¡ jako
-- druh˜ pr–chod.
-- Je-li FINAL=True, budou v¨echny nejasnosti ohl ¨eny jako chyby.
----------------------------------------------------------------------------------------------------
var
  info             : blinfo;                     -- informace o pr–bˆhu anal˜zy

begin
#if dump then;{%OFF}
  if opt_dump in curr.entity^.compv.opts then debug_dump('---- Druhy pruchod ------------------------------------------------------------'); end if;
#end if;{%ON}

  -- inicializovat informace o pr–bˆhu anal˜zy
  info.init({true,}true{final});

  -- F ze 2: form ln¡ kontrola
#if dump then;{%OFF}
  if opt_dump in curr.entity^.compv.opts then debug_dump('---- Faze 2: Formalni kontrola ------------------------------------------------'); end if;
#end if;{%ON}
  info.phase:=bp_form;
  b_form(curr,bl,info);
#if dump then;
  if opt_dump in curr.entity^.compv.opts then dumptree(bl); end if;
#end if;

  -- F ze 2: optimalizace
#if dump then;{%OFF}
  if opt_dump in curr.entity^.compv.opts then debug_dump('---- Faze 3: Optimalizace -----------------------------------------------------'); end if;
#end if;{%ON}
  info.phase:=bp_opt;
  b_opt(curr,bl,info);
#if dump then;
  if opt_dump in curr.entity^.compv.opts then dumptree(bl); end if;
#end if;

  -- p©edat vyhodnocen¡
  eval:=info.eval;
  end b_evaluate;



end cb_compile;