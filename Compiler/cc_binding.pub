----------------------------------------------------------------------------------------------------
module public cc_binding =
-- Překladač Flexu.
-- Dynamické vazby mezi parititionami (importy a exporty entit).
----------------------------------------------------------------------------------------------------

with
  standard,
  standard.classes.hash_tables,
  cc_def,
  cc_def.cc_entity;

----------------------------------------------------------------------------------------------------
class public c_import_info_registry = extend c_hash_table;
-- Registry importních informací pro entity z cízích partition.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    static add_import_info (
        entity     : in pentity;                 -- entita, ke které se vztahují
        import_info : in p_flex_record);         -- importní informace
    -- Zařadí importní informace do registry.    
    ------------------------------------------------------------------------------------------------
    static get_import_info ( 
        entity     : in pentity)                 -- entita, jejíž importní informace nás zajímají
        return p_flex_record;                    -- pointer na importní informace
    -- Dohledá importní informace pro zadanou entitu.    
    ------------------------------------------------------------------------------------------------
   
    end c_import_info_registry;

type
  p_import_info_registry = ^c_import_info_registry;

----------------------------------------------------------------------------------------------------
procedure export_entity (
    entity         : in pentity;                 -- exportovaná entita
    external_name  : in t_external_entity_ident := ''; -- externí jméno, pod klerým entitu exportovat
    traverse       : in t_logical := true);      -- T-trasovat vnořené entity
-- Exportuje zadanou entitu pod uvedeným externím jménem.
-- Exportovat je možné procedury, statické metody, kompilační jednotku a proměnné. Pokud je dodán 
-- modul, třída, nebo kompilační jednotka a [traverse] je True, tak rekurzivně trasuje strom entit 
-- a exportuje všechny viditelné exportovatelné entity.
----------------------------------------------------------------------------------------------------
procedure import_entity (
    entity         : in pentity;                 -- importovaná entita
    library_name   : in t_external_entity_ident; -- jméno knihovny
    external_name  : in t_external_entity_ident := ''; -- externí jméno, pod klerým entitu importovat
    traverse       : in t_logical := true);      -- T-trasovat vnořené entity
-- Importuje zadanou entitu pod uvedeným externím jménem.
-- Importovat je možné procedury, statické metody, kompilační jednotku a proměnné. Pokud je dodán 
-- modul, třída, nebo kompilační jednotka a [traverse] je True, tak rekurzivně trasuje strom entit 
-- a importuje všechny viditelné importovatelné entity.
----------------------------------------------------------------------------------------------------
procedure get_export_info (
    entity         : in pentity)                 -- exportovaná entita
    return p_flex_record;                        -- pointer na exportní informace
-- Získá pointer na exportní informace zadané entity.
----------------------------------------------------------------------------------------------------
procedure is_exported (
    entity         : in pentity)                 -- testovaná entita
    return t_logical;                            -- T-entita je exportovaná
-- True, pokud je entita exportovaná. Pro neexportovatelné entity vrací False.
----------------------------------------------------------------------------------------------------
procedure get_import_info (
    entity         : in pentity;                 -- importovaná entita
    aux_registry   : in p_import_info_registry := nil) -- přídavné registry importních informací
    return p_flex_record;                        -- pointer na importní informace
-- Získá pointer na importní informace zadané entity.
-- Pokud je zadáno přídavné registry importní informací [aux_registry], preferovaně hledá importní
-- informace v něm. Tento mechanismus je určen pro technické statické linkování význačných entit
-- z cizích partition a mimo linker a image producer nemá uplatnění.
----------------------------------------------------------------------------------------------------
procedure is_imported (
    entity         : in pentity;                 -- testovaná entita
    aux_registry   : in p_import_info_registry := nil) -- přídavné registry importních informací
    return t_logical;                            -- T-entita je importovaná
-- True, pokud je entita importovaná. Pro neimportovatelné entity vrací False.
----------------------------------------------------------------------------------------------------

supervised

----------------------------------------------------------------------------------------------------
procedure set_import_info (
    entity         : in pentity;                 -- importovaná entita
    import_info    : in p_flex_record);          -- importní informace
-- Do entity dosadí bez dalších formálních kontrol předpřipravené importní informace
----------------------------------------------------------------------------------------------------

end cc_binding;