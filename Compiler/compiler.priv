----------------------------------------------------------------------------------------------------
module private compiler =
-- Překladač Flexu.
----------------------------------------------------------------------------------------------------
-- TomasH : 10.07.2003 : Odpojil metodu [init] od [entry], ne vsechno se da udelat hned na zacatku.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
class private c_flex_compiler =
-- Překladač Flexu.
----------------------------------------------------------------------------------------------------

    with
      standard.conversions,
      standard.names,
      standard.files,
      standard.strings,
      cc_def,
      cc_def.cc_var,
      cc_def.cc_gc,
      cc_def.cc_entity,
      cc_def.cc_desc,
      cc_def.cc_unitype,
      cc_base,
      cd_decl,
      ca_analyzer.ca_analyze,
      cp_cpu,
      cp_os,
      cg_gen,
      cl_link,
      cl_link.cl_resolver,
      cl_link.cl_image,
      cc_io.cc_ctm,
      cc_base.cc_sym,
      cc_io.cc_xml.cc_entity;

    use
      cc_def.cc_env,
      cc_def.cc_codes,
      cc_base.cc_text,
      cp_cpu.cp_ia32,
      cp_os.cp_win32,
      cg_gen.cg_ia32,
      cg_gen.cg_ia32.ci_gen,
      cl_link.cl_image.cl_pe,
      cl_link.cl_resolver.cl_ia32;

    var
      listing      : ^cc_base.cc_listing;        -- listing


    
    ------------------------------------------------------------------------------------------------
    static build_file_name (
        directory  : in t_text_name;
        file_name  : in t_text_name;
        file_ext   : in t_text_name)
        return p_text_name =
    -- sestavi jmeno souboru
    ------------------------------------------------------------------------------------------------
    with
      standard.names;

    var
      name         : c_name;                     -- dekomponované jméno
      full_name    : c_name;                     -- jméno včetně adresáře
      file_name_component : p_name_component_file_or_folder; -- jediná komponenta jména souboru

    begin
      -- rozložit původní jméno
      name.decompose_name(file_name,tnt_unspecified);

      -- poslední komponenta je vlastní jméno souboru
      file_name_component:=name.components.get_last;

      -- nahradit příponu
      file_name_component^.append_extension(file_ext);

      -- sestavit
      -- adresar?
      if directory:length>0 
        -- sestav jmeno s adresarem
        then
          full_name.decompose_name(directory,tnt_unspecified);
          full_name.components.insert(name.components.remove_last);
          full_name.compose_name(result);
        
        -- jmeno bez adresare
        else
          name.compose_name(result);
          end if;

      end build_file_name;
     
    
    
    ------------------------------------------------------------------------------------------------
    static compile =
    -- Překlad programu.
    ------------------------------------------------------------------------------------------------
    with
      standard.datetime;
    
    var
      compi        : pentity_compile;            -- kompilační jednotka
      calendar     : c_gregorian_calendar;       -- kalendář pro výpisy času
      provider     : c_system_datetime_provider; -- poskytovatel aktuálního systémového času
      time_start   : t_timespan;                 -- čas začátku kompilace (uptime, ticků)
      time_end     : t_timespan;                 -- čas konce kompilace (uptime, ticků)

    begin
      -- nastavit stream pro zápis průběhu překladu
      cc_var.output:=^os;
      
      -- inicializovat listing
      new listing;
      listing^.create(lst_name,listing^.t_listing_section_set:full);
      cc_var.listing:=listing;

      begin
        ----- (0) opsat do listing^. konfiguraci překladu ------------------------------------------
        listing^.start_section(listing^.tls_setup);
        

        ----- (1) překlad  -------------------------------------------------------------------------

        -- poznamenat do listing^. začátek překladu
        listing^.start_section(listing^.tls_compilation);
        listing^.write_header_item('Partition type:',t_partition_type_txt[part_type]);
        listing^.write_header_item('Source code:',src_name);
        listing^.write_header_item('Listing:',lst_name);
        listing^.write_header_item('Date and time of compilation:',calendar.composed_datim_to_string(provider.get_datetime));
        listing^.end_header;
        time_start:=provider.get_machine_uptime;

        begin
          -- otevřít soubor
          cc_text.text_open(src_name,false);

          -- oznámit začátek překladu
          if cfg_verbosity=vl_low then os.write_line('Compiling...'); end if;

          -- přeložit partition
          p_compile_partition(compi,sec_level,sec_required,part_type,part_result,part_extid,part_userid);

        leave
          -- zavřít poslední soubor
          cc_text.text_close;
          end;               

        -- informuj o uspechu kompilace
        listing^.skip_line;
        case compi^.part_result
          when tpr_library do listing^.write_header_item('Compiled library:',src_name);
          when tpr_program do listing^.write_header_item('Compiled program:',src_name);
          when others do verify({VERIFY=}000671,true);
          end case;       

        -- konec, pokud je požadována pouze syntaktická kontrola nebo nastala nějaká chyba
        if ce^.testerror or cfg_syntax_check_only then
          return;
          end if;

        -- vynechat prázdný řádek, vypadá to lépe
        if cfg_verbosity>=vl_default then os.write_line(''); end if;


        ----- (2) globální analýza  ----------------------------------------------------------------

        -- poznamenat na obrazovku a do listing^.
        os.write_line('Analyzing...');
        listing^.start_section(listing^.tls_global_analysis);

        -- globální analýza
        a_analyze(compi);

        -- konec, pokud nastala nějaká chyba
        if ce^.testerror then
          return;
          end if;


        ----- (3) generování kódu  -----------------------------------------------------------------

        -- poznamenat na obrazovku a do listing^.
        os.write_line('Generating code...');
        listing^.start_section(listing^.tls_code_generation);

        -- generování kódu
        cg_gen.cg_ia32.ci_gen.i_codegen(compi);

        -- konec, pokud nastala nějaká chyba
        if ce^.testerror then
          return;
          end if;


        declare var
          resolver       : cl_link.cl_resolver.p_link_resolver;
          image_specific : cl_link.cl_resolver.p_link_resolver_image_specific;
        
        begin
          ----- (4) linkování  ---------------------------------------------------------------------

          -- poznamenat na obrazovku a do listingu
          os.write_line('Linking...');
          listing^.start_section(listing^.tls_linking);

          -- připravit vyhodnocovač
          new resolver tag cl_link.cl_resolver.cl_ia32.c_link_resolver_ia32_win32:tag;
          cl_link.cl_resolver.cl_ia32.p_link_resolver_ia32_win32(resolver)^.init(compi,cc_def.cc_var.os^.getimagebase(compi^),4096,4096,32{16},4);
          
          -- připravit image-specifickou část
          new image_specific tag cl_link.cl_image.cl_pe.c_link_resolver_image_specific_pe:tag;
          cl_link.cl_image.cl_pe.p_link_resolver_image_specific_pe(image_specific)^.init(cc_def.cc_var.os^.getimagebase(compi^));
          
          -- provést vlastní linkování
          l_link(compi,resolver^,image_specific^);

          -- konec, pokud nastala nějaká chyba
          if ce^.testerror then
            return;
            end if;


          ----- (5) sestavení výstupního souboru  --------------------------------------------------
          declare var
            image_name : p_text_name;            -- jmeno vysledneho image (alias k dodanému jménu)
            image      : cl_link.cl_image.p_link_image;

          begin
            -- poznamenat na obrazovku a do listingu
            os.write_line('Creating image...');
            listing^.start_section(listing^.tls_image);

            -- zvolit jméno image podle výsledného tvaru partition
            case compi^.part_result
              when tpr_library do image_name:=^lib_name;
              when tpr_program do image_name:=^exe_name;
              when others do verify({VERIFY=}000668,true);
              end case;

            -- sestavit výstupní soubor
            new image tag cl_link.cl_image.cl_pe.c_link_image_pe:tag;
            cl_link.cl_image.cl_pe.p_link_image_pe(image)^.init(image_name^);
            l_build_image(compi,resolver^,image_specific^,image^);

            -- konec, pokud nastala nějaká chyba
            if ce^.testerror then
              return;
              end if;

            -- %%FLEX
            -- #option Code_Alignment(<num>);
            -- #option Global_Data_Alignment(<num>);
            -- #option Executable_Extension(<string>);

            -- poznamenat do listingu jméno sestaveného image
            listing^.skip_line;
            listing^.write_header_item('Created image:',image_name^);

          leave
            discard image;            
            end declare;

        leave
          -- uvolnit paměť
          discard resolver;
          discard image_specific;
          end declare;
          

        ----- (6) sestavení compile-time metadat  --------------------------------------------------
        declare var
          output   : aliased c_buffered_file_output_stream; -- výstupní soubor
          writer   : c_ctm_writer;               -- zapisovač metada

        begin
          if cfg_ctm_level=ctml_public then
            -- poznamenat na obrazovku a do listing^.
            os.write_line('Creating compile-time metadata...');
            listing^.start_section(listing^.tls_ctm);

            -- vytvořit výstupní soubor
            output.create(ctm_name);

            -- zapsat do něj metadata
            writer.ctm_save(compi,^c_output_stream:(output),ctdl_public);

            -- zavřít soubor
            output.close;
            end if;
          end declare;


        ----- (7) dump entit do xml  ---------------------------------------------------------------
        declare var
          esearch  : tentitysearch;              -- hledatko
          file_name : t_char32str;

        begin
          if cfg_xml_dump_root_entity<>nil then
            -- poznamenat na obrazovku a do listing^.
            os.write('Creating XML dump...');

            -- najit entitu
            declare var
              qid : p_qualified_entity_ident;
            begin -- %%TODO(QID) 
              qid:=string_to_qualified_entity_ident(str_to_upper(cfg_xml_dump_root_entity^));
              esearch.find_global_by_qid(compi^,qid^);
            leave
              discard qid;
              end declare;

            -- naslo se?
            if esearch.psym=nil
              then
                os.write(' failed! Entity ');
                os.write(cfg_xml_dump_root_entity^);
                os.write_line(' not found!');
              else
                declare var
                  outfile  : p_char32ustr;

                begin
                  -- sestav jmeno souboru - <output directory>\<qid bez prvni tecky>.xml
                  file_name:=str_trim(cfg_xml_dump_root_entity^,".",[se_left]);
                  outfile:=build_file_name(output_dir,file_name,'xml');

                  -- dump
                  dump_entity_to_file(esearch.psym,outfile^);
                
                leave
                  discard outfile;
                  end declare;
                end if;

            end if;
          end declare;

               
      catch
        -- chyby při překladu
        when cc_codes.flex_error do -- v tuto chvíli již nic nedělat

      leave
        -- připravit se na další parition
        succ curr_partition;

                                                                                                 
        ----- (8) výsledek překladu ----------------------------------------------------------------
        time_end:=provider.get_machine_uptime;
        listing^.start_section(listing^.tls_summary);

        -- vynechat prázdný řádek, vypadá to lépe
        os.write_line('');

        -- zobrazit počet přeložených řádků a dobu kompilace
        os.write('Total of '); 
        os.write(unsigned_to_string(cc_var.total_lines));
        os.write(' (');
        os.write(unsigned_to_string(cc_var.effective_lines));
      #if flex_product=flex_jitflex then;
        os.write(' effective) lines JITed in ');
      #else;
        os.write(' effective) lines compiled in ');
      #end if;
        os.write(unsigned_to_string(t_unsigned(time_end-time_start)));
        os.write_line(' ms'{' (user: %%TODO ms, kernel: %%TODO ms)'});

        -- vynechat prázdný řádek, vypadá to lépe
        os.write_line('');
        end;
      end compile;



    ------------------------------------------------------------------------------------------------
    static load =
    -- Načtení compile-time metadat jedné partition.
    ------------------------------------------------------------------------------------------------
    var
      compi        : pentity_compile;            -- kompilační jednotka

    begin
      -- nastavit stream pro zápis průběhu překladu
      cc_var.output:=^os;
      
      -- inicializovat listing
      new listing;
      listing^.create(lst_name,listing^.t_listing_section_set:full);
      cc_var.listing:=listing;


      ---- (0) opsat do listingu konfiguraci překladu ----
      listing^.start_section(listing^.tls_setup);

      
      ---- (6) sestavení compile-time metadat  ----
      declare var
        input    : aliased c_buffered_file_input_stream; -- vstupní soubor
        reader   : c_ctm_reader;                 -- čteč metadat

      begin
        -- poznamenat na obrazovku a do listingu
        os.write_line('Reading compile-time metadata...');
        listing^.start_section(listing^.tls_ctm);

        -- vytvořit výstupní soubor
        input.open(ctm_name);

        -- načíst z něj metadata
        reader.ctm_load(compi,^c_input_stream:(input));
        
      leave
        -- zavřít soubor
        input.close;
        end declare;

    catch
      -- chyby při překladu
      when cc_codes.flex_error do
          -- v tuto chvíli již nic nedělat
          
    leave      
      -- připravit se na další parition
      succ curr_partition;
      end load;



    ------------------------------------------------------------------------------------------------
    static get_listing_writer =
    -- Vrátí text writer pro zápis do listingu.
    ------------------------------------------------------------------------------------------------
    begin
      result:=listing^.get_output_text_stream;
      end get_listing_writer;



    ------------------------------------------------------------------------------------------------
    static finalize_partition =
    -- Uklidí po překladu. Zejména zavře listingu.
    ------------------------------------------------------------------------------------------------
    begin
      -- zresetovat globální proměnné překladače
      cc_var.reset_global_variables;

      -- zavřít listing
      listing^.close;
      discard listing;
      end finalize_partition;


    
    ------------------------------------------------------------------------------------------------
    static init =
    -- Inicializace pote co zname pozadovanou platformu.
    ------------------------------------------------------------------------------------------------
    begin      
      -- upřesnit verzi překladače
      env_compiler.c_ver:=c_ver;
      
      -- nastavit parametry cílové platformy
      -- %%TODO(PLATFORM) - podle nastavene platformy v sysdesc alokovat spravny objekt pro dany OS a CPU
      new cpu tag cp_cpu.cp_ia32.ci_cpuspecific:tag;
      new os tag cp_os.cp_win32.cp_osspecific:tag;

      -- inicializovat environment proměnné
      cc_def.cc_env.env_init_var;
      end init;



    ------------------------------------------------------------------------------------------------
    entry =
    -- Inicializace.
    ------------------------------------------------------------------------------------------------
    with
      cc_lex;

    begin
      -- zvolit platformu
      env_compiler:=env_compiler_default;
      env_target_system:=sdbase_list[tos_win32];   -- default
--    sysdesc.os_subsystem_type:=os_subsystem_console; --sdbase_win32 ma default sybsystem_console

      -- inicializovat seznam jmen použitých souborů
      new cc_var.used_files;

      -- inicializovat seznam chyb
      new cc_var.ce;

      -- inicializovat lexikální analyzátor
      lex_set_default_lexer;
      end entry;



    ------------------------------------------------------------------------------------------------
    exit =
    -- exit
    ------------------------------------------------------------------------------------------------
    begin
      -- uklidit po sobe
      discard cc_var.used_files;
      discard cc_var.ce;
      end exit;

    end c_flex_compiler;

end compiler;