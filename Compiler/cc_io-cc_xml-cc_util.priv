----------------------------------------------------------------------------------------------------
module private cc_util =
-- Překladač Flexu.
-- Pomocné funkce
----------------------------------------------------------------------------------------------------
-- honzap : 24.11.2003 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  standard.files, 
  standard.streams,
  standard.characters,
  standard.conversions,
  advanced,
  advanced.xml,
  advanced.xml.xml_tokenizer,
  cc_def.cc_lexsym,
  cc_base.cc_attr,
  cc_def.cc_unitype;


----------------------------------------------------------------------------------------------------
procedure xml_dump_position =
----------------------------------------------------------------------------------------------------
begin
  if not dump_positions then return end if;
  xml^.go_in(name);
  xml^.write_attribute('line',unsigned_to_string(pos.line));
  xml^.write_attribute('col',unsigned_to_string(pos.col));
  xml^.write_attribute('len',unsigned_to_string(pos.len));
  xml^.write_attribute('num',unsigned_to_string(pos.num));
  xml^.go_out(name);
  end xml_dump_position;



----------------------------------------------------------------------------------------------------
procedure xml_dump_lex_pos_block =
----------------------------------------------------------------------------------------------------
begin
  if not dump_positions then return end if;
  xml^.go_in(name);
  xml_dump_position(xml,'begin',posblock.b);
  xml_dump_position(xml,'end',posblock.e);
  xml^.go_out(name);
  end xml_dump_lex_pos_block;



----------------------------------------------------------------------------------------------------
procedure dump_rtattribs =
-- Zapíše uzel stromu výrazu do XML
----------------------------------------------------------------------------------------------------
begin

  -- jsou vůbec nějaké atributy k dispozici ?
--      if rta_avail=rtattribset:[] then 
--        verify({VERIFY=}000943,rta_used<>rtattribset:[]);
--        return;
--        end if;

  -- obalující element
  xml^.go_in(child);

  -- jednotlivé atributy
  for rta in rtattrib loop
    -- zajímají nás jen dostupné atributy
    if rta in rta_avail then
      -- element pro jeden runtime atribut

      xml^.go_in('attrib');
      xml^.write_attribute('name',rtattrib_export_id[rta]);
      xml^.write_attribute('used',t_logical_export_id[rta in rta_used]);
--          xml^.write_attribute('mode',t_rtattrib_mode[rta_modes[rta]]);

      -- konec elementu
      xml^.go_out('attrib');
      end if;
    end loop;

  -- konec obalujícího elementu
  xml^.go_out(child);
  end dump_rtattribs;



----------------------------------------------------------------------------------------------------
procedure rtattribset_to_string =
----------------------------------------------------------------------------------------------------
begin
  if rta_instance in value then result & 'instance ';end if;
  if rta_tag      in value then result & 'tag ';end if;
  if rta_size     in value then result & 'size ';end if;
  if rta_last     in value then result & 'last ';end if;
  end rtattribset_to_string;


end cc_util;

