----------------------------------------------------------------------------------------------------
module public ci_abi =
-- Překladač Flexu.
-- Popis aplikačního binárního rozhraní (ABI) IA-32.
----------------------------------------------------------------------------------------------------
-- Ondra : 04.04.2002 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  ci_instr;

type
  -- volací konvence
  icallconvention  = enum
      icc_default;                               -- <default> (obvykle to samé jako Flex)
      icc_flex;                                  -- Flex
      icc_system;                                -- volací konvence operačního systému (Win32: stdcall)
      icc_cdecl;                                 -- volací konvence C/C++ (stdcall bez odstranění parametrů)
      icc_pascal;                                -- volací konvence Pascal (jako Flex, bez run-time atributů)
      end enum;
  icallconvetionset= set of icallconvention;

{%OFF}
var
  icallconventiontxt : const array icallconvention of tshortident := [
      for icc_default use '<default>',
      for icc_flex    use 'FLEX',
      for icc_system  use 'SYSTEM',
      for icc_cdecl   use 'CDECL',
      for icc_pascal  use 'PASCAL'];
{%ON}

const
  -- volací konvence s opačným pořadím argumentů
  iccs_reverse     = icallconvetionset:[icc_system,icc_cdecl];
  -- volací konvence vracející hodnotu na stacku
  iccs_ret_stack   = icallconvetionset:[icc_default,icc_flex];
  -- volací konvence vracející hodnotu v EAX
  iccs_ret_eax     = icallconvetionset:[icc_system,icc_cdecl,icc_pascal];
  -- volací konvence ponechávající parametry na stacku
  iccs_leave_params= icallconvetionset:[icc_cdecl];
  -- volací konvence nepodporující předávání dynamických atributů
  iccs_no_rtattrib = icallconvetionset:[icc_system,icc_cdecl,icc_pascal];
  -- volací konvence entrypointů z cizího světa
  iccs_entrypoint  = icallconvetionset:[icc_system,icc_cdecl,icc_pascal];
  -- volací konvence vyžadující uložení "systémových registrů" (ESI, EDI, EBX, Flags.DF)
  iccs_save_regs   = icallconvetionset:[icc_system,icc_cdecl,icc_pascal];

type
  ----- %%TECH Stack-frame -------------------------------------------------------------------------
  -- Lokální proměnné a parametry lze adresovat dvěma metodami:
  --   1) relativně k aktuálnímu Stack Pointer,
  --   2) relativně k Frame Pointer, které se během provádění procedury nemění. 
  -- V prvním případě musí kompilátor sledovat změny SPtr (PUSH/POP)
  -- a přepočítávat relativní adresy proměnných a parametrů. Výhodou je, že
  -- se sníží počet instrukcí (ušetří se MOV FPtr,SPtr) a FPtr lze použít pro
  -- výpočty.
  --   Druhá varianta je jednodušší na generování a v některých případech
  -- i jediná možná. Konkrétně pokud procedura obsahuje kód citlivý na
  -- výjimky (finalizace) nebo výjimky ošetřuje příkazem CATCH, musí se
  -- použít tato varianta.
  --   Rozložení dat na stacku je popsáno v run-time knihovně FLEX.EXCEPTIONS.
  --------------------------------------------------------------------------------------------------

  -- typ stack-frame
  istackframe      = enum
      isf_default;                               -- default
      isf_sptr;                                  -- SPtr-relativní
      isf_fptr;                                  -- FPtr-relativní
      end enum;

{%OFF}
var
  istackframetxt   : const array istackframe of tshortident := [
      for isf_default use '<default>',
      for isf_sptr    use 'STACK_POINTER_RELATIVE',
      for isf_fptr    use 'FRAME_POINTER_RELATIVE'];
{%ON}

var
  -- velikost stack-frame
  istackframesize  : const array istackframe of t_unsigned32 := [
      for isf_default use 0,                     --
      for isf_sptr    use 4,                     -- na stacku: EIP
      for isf_fptr    use 8];                    -- na stacku: EIP, EBP

  -- řídící registr stack-frame
  istackframereg   : const array istackframe of ireg := [
      for isf_default use ir_none,
      for isf_sptr    use ir_esp,
      for isf_fptr    use ir_ebp];

{%%TODO(ABSTRACT) změnit z pointerů na abstraktní procedury
----------------------------------------------------------------------------------------------------
procedure abstract i_prepare (
    curr           : in tentity);                -- generovaný symbol
-- Příprava symbolu před generováním.
----------------------------------------------------------------------------------------------------
procedure abstract i_set_convention (
    curr           : in tentity;                 -- generovaný symbol
    call           : in ticallconvention);       -- volací konvence
-- Přiřadí default volací konvenci.
----------------------------------------------------------------------------------------------------
procedure abstract i_get_convention (
    curr           : in tentity)                 -- generovaný symbol
    return ticallconvention;                     -- volací konvence
-- Volací konvence zadané procedury; není-li přiřazena, vrátí icc_default.
----------------------------------------------------------------------------------------------------
procedure abstract i_set_stackframe (
    curr           : in tentity;                 -- generovaný symbol
    frame          : in tistackframe);           -- stackframe
-- Přiřadí default typ stackframe.
----------------------------------------------------------------------------------------------------
procedure abstract i_get_stackframe (
    curr           : in tentity)                 -- generovaný symbol
    return tistackframe;                         -- stackframe
-- Typ stackframe zadané procedury; není-li přiřazen, vrátí isf_default.
----------------------------------------------------------------------------------------------------
}

----------------------------------------------------------------------------------------------------
procedure i_id_to_convention (
    id             : in tentityident;            -- identifikátor volací konvence
    call           : out icallconvention);       -- volací konvence
-- Převede identifikátor na volací konvenci, při neúspěchu vrátí icc_default.
----------------------------------------------------------------------------------------------------
var i_set_convention_subprogram : ^procedure (
    subprog        : in out class tentity_subprogram;  -- generovaný symbol
    call           : in icallconvention);        -- volací konvence
-- Přiřadí default volací konvenci.
----------------------------------------------------------------------------------------------------
var i_get_convention_subprogram : ^procedure (
    subprog        : in class tentity_subprogram)-- generovaný symbol
    return icallconvention;                      -- volací konvence
-- Volací konvence zadané procedury; není-li přiřazena, vrátí icc_default.
----------------------------------------------------------------------------------------------------
var i_set_convention_proctype : ^procedure (
    proctype       : in out class tentity_type;  -- generovaný symbol
    call           : in icallconvention);        -- volací konvence
-- Přiřadí default volací konvenci.
----------------------------------------------------------------------------------------------------
var i_get_convention_proctype : ^procedure (
    proctype       : in class tentity_type)      -- generovaný symbol
    return icallconvention;                      -- volací konvence
-- Volací konvence zadané procedury; není-li přiřazena, vrátí icc_default.
----------------------------------------------------------------------------------------------------
procedure i_id_to_stackframe (
    id             : in tentityident;            -- identifikátor typu stackframe
    frame          : out istackframe);           -- typ stackframe
-- Převede identifikátor na typ stackframe, při neúspěchu vrátí isf_default.
----------------------------------------------------------------------------------------------------
var i_set_stackframe : ^procedure (
    curr           : in out class tentity_code;  -- generovaný symbol
    frame          : in istackframe);            -- stackframe
-- Přiřadí default typ stackframe.
----------------------------------------------------------------------------------------------------
var i_get_stackframe : ^procedure (
    curr           : in class tentity_code)      -- generovaný symbol
    return istackframe;                          -- stackframe
-- Typ stackframe zadané procedury; není-li přiřazen, vrátí isf_default.
----------------------------------------------------------------------------------------------------

end ci_abi;
