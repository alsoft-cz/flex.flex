----------------------------------------------------------------------------------------------------
module public ci_abi =
-- P©eklada‡ Flexu.
-- Popis aplika‡n¡ho bin rn¡ho rozhran¡ (ABI) IA-32.
----------------------------------------------------------------------------------------------------
-- Ondra : 04.04.2002 : Vytvo©il
----------------------------------------------------------------------------------------------------

with
  ci_instr;

type
  -- volac¡ konvence
  icallconvention  = enum
      icc_default;                               -- <default> (obvykle to sam‚ jako Flex)
      icc_flex;                                  -- Flex
      icc_system;                                -- volac¡ konvence opera‡n¡ho syst‚mu (Win32: stdcall)
      icc_cdecl;                                 -- volac¡ konvence C/C++ (stdcall bez odstranˆn¡ parametr–)
      icc_pascal;                                -- volac¡ konvence Pascal (jako Flex, bez run-time atribut–)
      end enum;
  icallconvetionset= set of icallconvention;

{%OFF}
var
  icallconventiontxt : const array icallconvention of tshortident := [
      for icc_default use '<default>',
      for icc_flex    use 'FLEX',
      for icc_system  use 'SYSTEM',
      for icc_cdecl   use 'CDECL',
      for icc_pascal  use 'PASCAL'];
{%ON}

const
  -- volac¡ konvence s opa‡n˜m po©ad¡m argument–
  iccs_reverse     = icallconvetionset:[icc_system];
  -- volac¡ konvence vracej¡c¡ hodnotu na stacku
  iccs_ret_stack   = icallconvetionset:[icc_default,icc_flex];
  -- volac¡ konvence vracej¡c¡ hodnotu v EAX
  iccs_ret_eax     = icallconvetionset:[icc_system,icc_cdecl,icc_pascal];
  -- volac¡ konvence ponech vaj¡c¡ parametry na stacku
  iccs_leave_params= icallconvetionset:[icc_cdecl];
  -- volac¡ konvence nepodporuj¡c¡ p©ed v n¡ dynamick˜ch atribut–
  iccs_no_rtattrib = icallconvetionset:[icc_system,icc_cdecl,icc_pascal];

type
  ----- %%TECH Stack-frame -------------------------------------------------------------------------
  -- Lok ln¡ promˆnn‚ a parametry lze adresovat dvˆma metodami:
  --   1) relativnˆ k aktu ln¡mu Stack Pointer,
  --   2) relativnˆ k Frame Pointer, kter‚ se bˆhem prov dˆn¡ procedury nemˆn¡. 
  -- V prvn¡m p©¡padˆ mus¡ kompil tor sledovat zmˆny SPtr (PUSH/POP)
  -- a p©epo‡¡t vat relativn¡ adresy promˆnn˜ch a parametr–. V˜hodou je, ‘e
  -- se sn¡‘¡ po‡et instrukc¡ (u¨et©¡ se MOV FPtr,SPtr) a FPtr lze pou‘¡t pro
  -- v˜po‡ty.
  --   Druh  varianta je jednodu¨¨¡ na generov n¡ a v nˆkter˜ch p©¡padech
  -- i jedin  mo‘n . Konkr‚tnˆ pokud procedura obsahuje k¢d citliv˜ na
  -- v˜jimky (finalizace) nebo v˜jimky o¨et©uje p©¡kazem CATCH, mus¡ se
  -- pou‘¡t tato varianta.
  --   Rozlo‘en¡ dat na stacku je pops no v run-time knihovnˆ FLEX.EXCEPTIONS.
  --------------------------------------------------------------------------------------------------

  -- typ stack-frame
  istackframe      = enum
      isf_default;                               -- default
      isf_sptr;                                  -- SPtr-relativn¡
      isf_fptr;                                  -- FPtr-relativn¡
      end enum;

{%OFF}
var
  istackframetxt   : const array istackframe of tshortident := [
      for isf_default use '<default>',
      for isf_sptr    use 'STACK_POINTER_RELATIVE',
      for isf_fptr    use 'FRAME_POINTER_RELATIVE'];
{%ON}

var
  -- velikost stack-frame
  istackframesize  : const array istackframe of t_unsigned32 := [
      for isf_default use 0,                     --
      for isf_sptr    use 4,                     -- na stacku: EIP
      for isf_fptr    use 8];                    -- na stacku: EIP, EBP

  -- ©¡d¡c¡ registr stack-frame
  istackframereg   : const array istackframe of ireg := [
      for isf_default use ir_none,
      for isf_sptr    use ir_esp,
      for isf_fptr    use ir_ebp];

{%%TODO(ABSTRACT) zmˆnit z pointer– na abstraktn¡ procedury
----------------------------------------------------------------------------------------------------
procedure abstract i_prepare (
    curr           : in tentity);                -- generovan˜ symbol
-- P©¡prava symbolu p©ed generov n¡m.
----------------------------------------------------------------------------------------------------
procedure abstract i_set_convention (
    curr           : in tentity;                 -- generovan˜ symbol
    call           : in ticallconvention);       -- volac¡ konvence
-- P©i©ad¡ default volac¡ konvenci.
----------------------------------------------------------------------------------------------------
procedure abstract i_get_convention (
    curr           : in tentity)                 -- generovan˜ symbol
    return ticallconvention;                     -- volac¡ konvence
-- Volac¡ konvence zadan‚ procedury; nen¡-li p©i©azena, vr t¡ icc_default.
----------------------------------------------------------------------------------------------------
procedure abstract i_set_stackframe (
    curr           : in tentity;                 -- generovan˜ symbol
    frame          : in tistackframe);           -- stackframe
-- P©i©ad¡ default typ stackframe.
----------------------------------------------------------------------------------------------------
procedure abstract i_get_stackframe (
    curr           : in tentity)                 -- generovan˜ symbol
    return tistackframe;                         -- stackframe
-- Typ stackframe zadan‚ procedury; nen¡-li p©i©azen, vr t¡ isf_default.
----------------------------------------------------------------------------------------------------
}

----------------------------------------------------------------------------------------------------
procedure i_id_to_convention (
    id             : in tentityident;            -- identifik tor volac¡ konvence
    call           : out icallconvention);       -- volac¡ konvence
-- P©evede identifik tor na volac¡ konvenci, p©i ne£spˆchu vr t¡ icc_default.
----------------------------------------------------------------------------------------------------
var i_set_convention : ^procedure (
    curr           : in out class tentity_code;  -- generovan˜ symbol
    call           : in icallconvention);        -- volac¡ konvence
-- P©i©ad¡ default volac¡ konvenci.
----------------------------------------------------------------------------------------------------
var i_get_convention : ^procedure (
    curr           : in class tentity_code)      -- generovan˜ symbol
    return icallconvention;                      -- volac¡ konvence
-- Volac¡ konvence zadan‚ procedury; nen¡-li p©i©azena, vr t¡ icc_default.
----------------------------------------------------------------------------------------------------
procedure i_id_to_stackframe (
    id             : in tentityident;            -- identifik tor typu stackframe
    frame          : out istackframe);           -- typ stackframe
-- P©evede identifik tor na typ stackframe, p©i ne£spˆchu vr t¡ isf_default.
----------------------------------------------------------------------------------------------------
var i_set_stackframe : ^procedure (
    curr           : in out class tentity_code;  -- generovan˜ symbol
    frame          : in istackframe);            -- stackframe
-- P©i©ad¡ default typ stackframe.
----------------------------------------------------------------------------------------------------
var i_get_stackframe : ^procedure (
    curr           : in class tentity_code)      -- generovan˜ symbol
    return istackframe;                          -- stackframe
-- Typ stackframe zadan‚ procedury; nen¡-li p©i©azen, vr t¡ isf_default.
----------------------------------------------------------------------------------------------------

end ci_abi;