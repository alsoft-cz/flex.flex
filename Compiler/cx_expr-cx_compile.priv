----------------------------------------------------------------------------------------------------
module private cx_compile =
-- Překladač Flexu.
-- Interface na překladač výrazu a návazné operace.
----------------------------------------------------------------------------------------------------
-- Ondra : 18.07.2001 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  cc_debug,cc_attr,
  cx_imm,
  cc_options;

----------------------------------------------------------------------------------------------------
procedure x_vyraz =
-- Překlad výrazu.
-- Provede pouze syntaktickou analýzu.
----------------------------------------------------------------------------------------------------
with
#if #declared advanced_resuming; #and then; advanced_resuming then;
  cc_syntax,
#end if;
  cx_parse;
  
var
  info             : expinfo;                    -- informace o průběhu analýzy

begin
  expr:=nil;

#if #declared dump; #and then; dump then;{%OFF}
  if o_is_option_by_context(opt_dump,curr) then
    debug_dump('---- Prvni pruchod ------------------------------------------------------------');
    end if;
#end if;{%ON}

  -- inicializovat informace o průběhu analýzy
  info.init(nil{typ},false{final});

  -- Fáze 1: rozklad výrazu
#if #declared advanced_resuming; #and then; advanced_resuming then;
  declare var
    sr             : c_sr_expression;

  begin
    -- svázat s aktuálním kontextem
    sr.bind(curr);
#end if;

  #if #declared dump; #and then; dump then;{%OFF}
    if o_is_option_by_context(opt_dump,curr) then
      debug_dump('---- Faze 1: Rozklad vyrazu ---------------------------------------------------');
      end if;
  #end if;{%ON}
    
    -- syntaktická analýza
    info.phase:=ep_syntax;
    case syntax
      when es_expr   do a_vyraz(curr,expr,info);
      when es_range  do a_rozsah(curr,expr,info);
      when es_choice do a_vyber(curr,expr,info);
      when es_name   do a_jmeno(curr,expr,info);
      when es_cmd    do a_prikaz(curr,expr,info);
      when others    do verify({VERIFY=}000243,true);
      end case;

  #if #declared dump; #and then; dump then;
    if o_is_option_by_context(opt_dump,curr) then
      dumptree(expr);
      end if;
  #end if;

#if #declared advanced_resuming; #and then; advanced_resuming then;
    end declare;
#end if;

  -- označit vrcholový uzel
  if expr<>nil then
    expr^.nflags+nodeflagset:[nf_top];
    end if;

catch
  when resume_error do
      newnode(expr,info,nt_none);
      raise;
  end x_vyraz;



----------------------------------------------------------------------------------------------------
procedure x_evaluate =
-- Vyhodnocení výrazu.
-- Očekává již rozložený výraz.
----------------------------------------------------------------------------------------------------
with
  cx_form,cx_type,cx_opt,cx_final;
  
var
  info             : expinfo;                    -- informace o průběhu analýzy
  t                : typeview;                   -- pohled na typ

    ------------------------------------------------------------------------------------------------
    procedure is_procedure return t_logical =
    -- T-výraz je procedura.
    ------------------------------------------------------------------------------------------------
    begin
              -- je to procedura
      result:=(expr^.nclass in ncs_formal_subprogram)
              -- je to komponenta
              {%% a co když proceduru získám nějakým atributem ? }
              and (expr^.ntype=nt_component)
              -- a symbol je k dispozici
              and (pexpcomponent(expr)^.s.psym<>nil) and (pexpcomponent(expr)^.s.psym^.etype=et_procedure);
      end is_procedure;



    ------------------------------------------------------------------------------------------------
    procedure is_proctype return t_logical =
    -- T-vyraz je proceduralni typ
    ------------------------------------------------------------------------------------------------
    begin     -- je to typ
      result:=(expr^.nclass=nc_type)
              -- je to komponenta
              and (expr^.ntype=nt_component)
              -- a symbol je k dispozici
              and (pexpcomponent(expr)^.s.psym<>nil) and (pexpcomponent(expr)^.s.psym^.etype=et_type)
              -- a typ je proceduralni
              and (pentity_type(pexpcomponent(expr)^.s.psym)^.stype=dt_procedure);
      end is_proctype;



    ------------------------------------------------------------------------------------------------
    procedure is_static_subprogram return t_logical =
    -- T-výraz je procedura.
    ------------------------------------------------------------------------------------------------
    begin
              -- je to procedura
      result:=(expr^.nclass in ncs_formal_subprogram)
              -- je to komponenta
              {%% a co když proceduru získám nějakým atributem ? }
              and (expr^.ntype=nt_component)
              -- a symbol je k dispozici
              and (pexpcomponent(expr)^.s.psym<>nil) and (pexpcomponent(expr)^.s.psym^.etype in ets_static_subprogram);
      end is_static_subprogram;



    ------------------------------------------------------------------------------------------------
    procedure is_virtual_procedure return t_logical =
    -- T-výraz je virtuální procedura.
    ------------------------------------------------------------------------------------------------
    begin
              -- je to procedura
      result:=(expr^.nclass in ncs_formal_subprogram)
              -- je to komponenta
              {%% a co když proceduru získám nějakým atributem ? }
              and (expr^.ntype=nt_component)
              -- a symbol je k dispozici
              and (pexpcomponent(expr)^.s.psym<>nil) and (pexpcomponent(expr)^.s.psym^.etype=et_virtual);
      end is_virtual_procedure;



    ------------------------------------------------------------------------------------------------
    procedure is_var return t_logical =
    -- T-výraz je proměnná.
    ------------------------------------------------------------------------------------------------
    begin
              -- je to proměnná
      result:=(expr^.nclass=nc_var)
              -- je to komponenta 
              {%% a co když proměnnou získám nějakým atributem ? }
              and (expr^.ntype=nt_component)
              -- a symbol je k dispozici 
              and (pexpcomponent(expr)^.s.psym<>nil) and (pexpcomponent(expr)^.s.psym^.etype=et_var);
      end is_var;



begin
  -- prázdný  
  if (expr<>nil) and (expr^.ntype=nt_none) then
    return;
    end if;

  -- připravit pohled na typ
  t.init(curr,typ);

#if #declared dump; #and then; dump then;{%OFF}
  if o_is_option_by_context(opt_dump,curr) then
    debug_dump('---- Druhy pruchod ------------------------------------------------------------');
    end if;
#end if;{%ON}

  -- inicializovat informace o průběhu analýzy
  info.init(typ,final);
  info.kind:=kind;

  -- Fáze 2: formální kontrola
#if #declared dump; #and then; dump then;{%OFF}
  if o_is_option_by_context(opt_dump,curr) then
    debug_dump('---- Faze 2: Formalni kontrola ------------------------------------------------');
    end if;
#end if;{%ON}
  info.phase:=ep_form;
  a_form(curr,expr,info,catch_mode);
#if #declared dump; #and then; dump then;
  if o_is_option_by_context(opt_dump,curr) then
    dumptree(expr);
    end if;
#end if;

  -- Fáze 3: typová kontrola
#if #declared dump; #and then; dump then;{%OFF}
  if o_is_option_by_context(opt_dump,curr) then
    debug_dump('---- Faze 3: Typova kontrola --------------------------------------------------');
    end if;
#end if;{%ON}
  info.phase:=ep_type;
  a_type(curr,expr,t,info,catch_mode);
#if #declared dump; #and then; dump then;
  if o_is_option_by_context(opt_dump,curr) then
    dumptree(expr);
    end if;
#end if;

  -- Fáze 4: optimalizace
#if #declared dump; #and then; dump then;{%OFF}
  if o_is_option_by_context(opt_dump,curr) then
    debug_dump('---- Faze 4: Optimalizace -----------------------------------------------------');
    end if;
#end if;{%ON}
  info.phase:=ep_opt;
  a_opt(curr,expr,info);
#if #declared dump; #and then; dump then;
  if o_is_option_by_context(opt_dump,curr) then
    dumptree(expr);
    end if;
#end if;

  -- optimalizací může někdy zmizet celý strom
  if (kind=ek_assign) and (expr=nil) then
    eval:=ete_evaluated;
    return;
    end if;

  -- Fáze 5: finalizace
#if #declared dump; #and then; dump then;{%OFF}
  if o_is_option_by_context(opt_dump,curr) then
    debug_dump('---- Faze 5: Finalizace -------------------------------------------------------');
    end if;
#end if;{%ON}
  info.phase:=ep_final;
  a_final(curr,expr,t,usage,info);
#if #declared dump; #and then; dump then;
  if o_is_option_by_context(opt_dump,curr) then
    dumptree(expr);
    end if;
#end if;

  -- podařilo se výraz vyhodnotit ? 
  if expr^.zprac=ep_final 
    then eval:=ete_evaluated;
    else eval:=ete_none;
    end if;

  if eval=ete_evaluated then
    -- je to očekávaný typ výrazu ?
    case kind
      -- libovolný 
      when ek_any do { je to jedno };
    {
      -- s uvedený typem
      when ek_type do { zařídila typová kontrola };
    }
      -- jméno typu 
      when ek_typename do 
          if expr^.nclass<>nc_type then
            ce^.seterror({CCERR=}000394,ce_x_ex_typename);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- jméno typu nebo celočíselná konstanta
      when ek_typename_or_const_integer do
          if not (expr^.nclass=nc_type or (expr^.ntype=nt_imm and then t_is_sts(expr^.t,dts_u_integer))) then
            ce^.seterror({CCERR=}000395,ce_x_ex_typename_const_int);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- jméno diskrétního typu nebo const. rozsah
      when ek_rangetype do
          if not (
          -- typ 
          (expr^.nclass=nc_type and t_is_sts(expr^.t,dts_ordinal))
          -- konstantaní rozsah 
          or ((expr^.ntype=nt_range) and (pexprange(expr)^.rkind in erks_const))
          ) then
            ce^.seterror({CCERR=}000396,ce_x_ex_rangetype);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- rozsah nebo jméno diskrétního typu
      when ek_range do
          if not (
          -- typ
          (expr^.nclass=nc_type and t_is_sts(expr^.t,dts_ordinal))
          -- konstantaní rozsah
          or ((expr^.ntype=nt_range) {and (pexprange(expr)^.rkind in erks_const)})
          -- dynamický atribut rozsahu
          or ((expr^.ntype=nt_attrib) and (pexpattrib(expr)^.aclass=atc_dynamic) and (pexpattrib(expr)^.atf=atf_range))
          ) then
            ce^.seterror({CCERR=}000397,ce_x_ex_range);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- přiřazení/volání
      when ek_assign do
          if not (
          -- je to přiřazení 
          ((expr^.ntype in nodetypeset:[nt_operator,nt_unary]) and pexpnoper(expr)^.assign)
          -- je to volání procedury, která nevrací hodnotu
          or ((expr^.ntype=nt_call) and (expr^.nclass=nc_none))
          ) then
            ce^.seterror({CCERR=}000398,ce_x_assignment);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- podmínka
      when ek_cond do
          if not (
          -- je to hodnota 
          (expr^.nclass in ncs_value)
          -- je logického typu 
          and t_is_sts(expr^.t,dts_u_logical)
          ) then
            ce^.seterror({CCERR=}000399,ce_x_ex_cond);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- symbol - libovolný
      when ek_sym do
          if not (
          -- je to komponenta 
          (expr^.ntype=nt_component)
          -- a symbol je k dispozici 
          and (pexpcomponent(expr)^.s.psym<>nil)
          ) then
            ce^.seterror({CCERR=}000400,ce_x_ex_sym);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- symbol - procedura
      when ek_sym_proc do
          if not is_procedure then
            ce^.seterror({CCERR=}000401,ce_x_ex_sym_proc);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- symbol - procedura nebo proceduralni typ
      when ek_sym_proc_proctype do
          if not (is_procedure or is_proctype) then
            ce^.seterror({CCERR=}000557,ce_x_ex_sym_proc_proctype);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- symbol - statický podprogram
      when ek_sym_static_subprogram do
          if not is_static_subprogram then
            ce^.seterror({CCERR=}000402,ce_x_ex_sym_proc);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;
      
      -- symbol - proměnná nebo procedura
      when ek_sym_var_proc do
          if not (is_procedure or is_var) then
            ce^.seterror({CCERR=}000403,ce_x_ex_sym_var_proc);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- symbol - virtuální metoda
      when ek_sym_virtual do
          if not is_virtual_procedure then
            ce^.seterror({CCERR=}000404,ce_x_ex_sym_virtual);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- proměnná typu pointer
      when ek_var_pointer do
          if not (
          -- je to proměnná 
          {is_var} (expr^.nclass=nc_var) {%% Jaký test je správně ? }
          -- typu pointer na objekt 
          and t_is_pointer_to_object(expr^.t)
          ) then
            ce^.seterror({CCERR=}000405,ce_x_ex_var_pointer);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- proměnná diskrétního typu
      when ek_var_ordinal do
          if not (
          -- je to proměnná 
          {is_var} (expr^.nclass=nc_var) {%% Jaký test je správně ? }
          -- diskrétního typu
          and t_is_sts(expr^.t,dts_ordinal)
          ) then
            ce^.seterror({CCERR=}000406,ce_x_ex_var_ordinal);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- výraz diskrétního typu
      when ek_expr_ordinal do
          if not (
          -- je to hodnota 
          (expr^.nclass in ncs_value)
          -- diskrétního typu 
          and t_is_sts(expr^.t,dts_ordinal)
          ) then
            ce^.seterror({CCERR=}000407,ce_x_ex_expr_ordinal);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- celočíselný výraz bez znaménka
      when ek_expr_integer do
          if not (
          -- je to hodnota 
          (expr^.nclass in ncs_value)
          -- diskrétního typu 
          and t_is_sts(expr^.t,dts_u_integer)
          ) then
            ce^.seterror({CCERR=}000408,ce_x_ex_expr_integer);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- výraz typu TAG
      when ek_expr_tag do
          if not (
          -- je to hodnota ? 
          (expr^.nclass in ncs_value)
          -- diskrétního typu 
          and t_is_sts(expr^.t,dts_tag)
          ) then
            ce^.seterror({CCERR=}000409,ce_x_ex_expr_tag);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- konstantní
      when ek_const do
          verify({VERIFY=}000827,expr^.ntype<>nt_imm and nf_const in expr^.nflags);

          -- nekonstantní výraz
          if expr^.ntype<>nt_imm
          -- konstantní výraz v důsledku optimalizace
          or else nf_const not in expr^.nflags
            then
            ce^.seterror({CCERR=}000410,ce_x_ex_const);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- konstantní - ordinální
      when ek_const_ord do
          verify({VERIFY=}000828,expr^.ntype<>nt_imm and nf_const in expr^.nflags);

          -- nekonstantní výraz
          if expr^.ntype<>nt_imm
          -- konstantní výraz ne ordinálního typu
          or else not t_is_sts(expr^.t,dts_u_ordinal)
          -- konstantní výraz v důsledku optimalizace
          or else nf_const not in expr^.nflags
            then
            ce^.seterror({CCERR=}000411,ce_x_ex_const_ord);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- konstantní - celočíselný
      when ek_const_int do
          verify({VERIFY=}000829,expr^.ntype<>nt_imm and nf_const in expr^.nflags);

          -- nekonstantní výraz
          if expr^.ntype<>nt_imm
          -- konstantní výraz ne celočíselného typu
          or else not t_is_sts(expr^.t,dts_u_integer)
          -- konstantní výraz v důsledku optimalizace
          or else nf_const not in expr^.nflags
            then
            ce^.seterror({CCERR=}000412,ce_x_ex_const_int);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- konstantní - logický
      when ek_const_logical do
          verify({VERIFY=}000830,expr^.ntype<>nt_imm and nf_const in expr^.nflags);

          -- nekonstantní výraz
          if expr^.ntype<>nt_imm
          -- konstantní výraz ne reálného typu
          or else not t_is_sts(expr^.t,dts_u_logical)
          -- konstantní výraz v důsledku optimalizace
          or else nf_const not in expr^.nflags
            then
            ce^.seterror({CCERR=}000413,ce_x_ex_const_logical);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- konstantní - reálný
      when ek_const_real do
          verify({VERIFY=}000831,expr^.ntype<>nt_imm and nf_const in expr^.nflags);

          -- nekonstantní výraz
          if expr^.ntype<>nt_imm
          -- konstantní výraz ne reálného typu
          or else not t_is_sts(expr^.t,dts_u_float)
          -- konstantní výraz v důsledku optimalizace
          or else nf_const not in expr^.nflags
            then
            ce^.seterror({CCERR=}000414,ce_x_ex_const_real);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- konstantní - string of char
      when ek_const_str do
          verify({VERIFY=}000832,expr^.ntype<>nt_imm and nf_const in expr^.nflags);

          if not (
          -- konstanta
          (expr^.ntype=nt_imm)
          -- string of char 
          and t_is_string_of_char(curr,expr^.t)
          {%%X a co když to bude 'X' - to je přeci CHAR }
          )
          or nf_const not in expr^.nflags
            then
            ce^.seterror({CCERR=}000415,ce_x_ex_const_str);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- kontext - EXTEND modul/třída
      when ek_context_extend do
          if not (
          -- je to komponenta 
          (expr^.ntype=nt_component)
          -- a symbol je k dispozici
          and (pexpcomponent(expr)^.s.psym<>nil)
          -- a je to modul-modul nebo třída-třída 
          and (((curr.entity^.etype=et_module) and (pexpcomponent(expr)^.s.psym^.etype=et_module))
          or ((curr.entity^.etype=et_class) and (pexpcomponent(expr)^.s.psym^.etype=et_class)))
          ) then
            ce^.seterror({CCERR=}000416,ce_x_ex_sym_mod_class);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- kontext - EXPOSE třída
      when ek_context_expose do
          if not (
          -- je to komponenta 
          expr^.ntype=nt_component
          -- a symbol je k dispozici
          and then pexpcomponent(expr)^.s.psym<>nil
          -- a je to třída-třída 
          and then curr.entity^.etype=et_class and then pexpcomponent(expr)^.s.psym^.etype=et_class
          ) then
            ce^.seterror({CCERR=}000417,ce_x_ex_sym_class);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- kontext - WITH nebo USE
      when ek_context_with, ek_context_use do
          if not (
          -- je to komponenta 
          expr^.ntype=nt_component
          -- a symbol je k dispozici 
          and pexpcomponent(expr)^.s.psym<>nil
          -- a je to modul nebo třída
          and pexpcomponent(expr)^.s.psym^.etype in ets_modular
          ) then
            ce^.seterror({CCERR=}000418,ce_x_ex_sym_mod_class);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- kotext - zpráva
      when ek_context_message do
          if not (
          -- je to komponenta 
          (expr^.ntype=nt_component)
          -- a symbol je k dispozici 
          and (pexpcomponent(expr)^.s.psym<>nil)
          -- a je to zpráva
          and (pexpcomponent(expr)^.s.psym^.etype=et_message)
          ) then
            ce^.seterror({CCERR=}000419,ce_x_ex_sym_message);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      -- kontext - SEND zpráva
      when ek_context_send do
          if expr^.ntype<>nt_send then
            ce^.seterror({CCERR=}000420,ce_x_message_send);
            expr^.errpos;
            ce^.resumeerror;
            end if;

      -- kontext - ACCEPT zpráva
      when ek_context_accept do
          if expr^.ntype<>nt_accept then
            ce^.seterror({CCERR=}000421,ce_x_message_accept);
            expr^.errpos;
            ce^.resumeerror;
            end if;

      -- kontext - konstantní výběr v CASE
      when ek_context_case do
          -- kompatibilitu zařídila typová kontrola, ještě že je konstantní
          if not (
          -- je to konstanta
          (expr^.ntype=nt_imm)
          -- typ
          or (expr^.nclass=nc_type)
          -- konstantaní nebo nulový rozsah
          or ((expr^.ntype=nt_range) and (pexprange(expr)^.rkind in erks_const+exprangekindset:[erk_null]))
          ) then
            ce^.seterror({CCERR=}000422,ce_x_ex_const_choice);
            expr^.errpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
            end if;

      when others do verify({VERIFY=}000016,true);
      end case;
    end if;
  end x_evaluate;



----------------------------------------------------------------------------------------------------
procedure x_select =
-- Přeloží seznam výrazů.                                                     
----------------------------------------------------------------------------------------------------
with
  cc_lex;
  
const
  exprlistinit     = 1;
  exprlistdelta    = 4;

var
  _list            : list:type;
  expr             : pexpnode;

begin
  loop
    -- realokovat paměť 
    if list=nil then
      new list range exprlistinit;
    elsif list^:length=list^:last then
      --%%TODO(ADJUST) adjust list range list^:last+exprlistdelta;
      new _list range list^:last+exprlistdelta;
      _list^:=list^;
      discard list;
      list:=_list;
      end if;

    -- přeložit
    x_vyraz(curr,expr,syntax);

    -- zařadit na seznam
    list^ & expr;

    until not checklex(curr,lex_comma);
  end x_select;



----------------------------------------------------------------------------------------------------
procedure x_const_imm =
-- Hodnota konstantního výrazu.                                               
----------------------------------------------------------------------------------------------------
begin
  -- je to konstantní výraz ? 
  if (expr^.ntype<>nt_imm) then
    ce^.seterror({CCERR=}000423,ce_x_ex_const);
    {%%RESUME ce^.raiseerror;}
    ce^.resumeerror;
    end if;

  -- načíst hodnotu 
  store_imm(imm,pexpimm(expr)^.imm);
  end x_const_imm;



----------------------------------------------------------------------------------------------------
procedure x_const_int =
-- Hodnota konstantního celočíselného výrazu.                                 
----------------------------------------------------------------------------------------------------
begin
  -- načíst hodnotu 
  load_uniint(pexpimm(expr)^.imm,ui);
  end x_const_int;



----------------------------------------------------------------------------------------------------
procedure x_const_real =
-- Hodnota konstantního reálného výrazu.                                      
----------------------------------------------------------------------------------------------------
begin
  -- načíst hodnotu 
  load_unireal(pexpimm(expr)^.imm,ur);
  end x_const_real;



----------------------------------------------------------------------------------------------------
procedure x_const_logical =
-- Hodnota konstantního logického výrazu.                                     
----------------------------------------------------------------------------------------------------
begin
  -- načíst hodnotu 
  load_unilogical(pexpimm(expr)^.imm,ub);
  end x_const_logical;



----------------------------------------------------------------------------------------------------
procedure x_const_range =
-- Hodnota konstantního rozsahu.
----------------------------------------------------------------------------------------------------
var
  el               : pexpnode;
  er               : pexpnode;

begin
  -- přímo jméno typu 
  if expr^.nclass=nc_type then
    lval:=expr^.t.getlval;
    hval:=expr^.t.gethval;

  -- rozsah
  elsif expr^.ntype=nt_range then
    verify({VERIFY=}000244,not (pexprange(expr)^.rkind in erks_const));
    pexprange(expr)^.get(el,er);
    load_uniint(pexpimm(el)^.imm,lval);
    load_uniint(pexpimm(er)^.imm,hval);

  else
    verify({VERIFY=}000242,true);
    end if;
  end x_const_range;



----------------------------------------------------------------------------------------------------
procedure x_const_sysstr =
-- Hodnota konstantního znakového výrazu typu systémový řetězec.              
----------------------------------------------------------------------------------------------------
begin
  -- načíst hodnotu 
  load_sysstr(pexpimm(expr)^.imm,s);
  end x_const_sysstr;



----------------------------------------------------------------------------------------------------
procedure x_get_type =
-- Typ výrazu nebo typ definovaný rozsahem.
----------------------------------------------------------------------------------------------------
with
  cx_util;
  
begin
  -- přímo specifikovaný rozsah
  if expr^.ntype=nt_range then
    -- co je typ zač?
    if t_is_sts(expr^.t,dts_ordinal)

      -- regulární ordinální typ rozvnou převzít
      then ptyp:=expr^.t.getctype;

      -- z konstantního rozsahu univerzálního ordinálního typu odvodit regulární ordinální typ
      else x_rangetotype(curr,pexprange(expr),ptyp,native);
      end if;

  -- nepřímo specifikovaný rozsah (např. jméno typu nebo :range)
  elsif expr^.nclass in ncs_range then
    ptyp:=expr^.t.getutype;

  else
    verify({VERIFY=}000065,true);
    end if;
  end x_get_type;



----------------------------------------------------------------------------------------------------
procedure x_get_symbol =
-- Symbol související s výrazem.
----------------------------------------------------------------------------------------------------
begin
  psym:=expr^.getsymbol;
  verify({VERIFY=}000087,psym=nil);
  end x_get_symbol;



----------------------------------------------------------------------------------------------------
procedure x_get_context =
-- Entita definující kontext top-level uzlu zadaného výrazu. Není-li kontext k dispozici, vrátí
-- nil. Jestliže v podvýrazu není uvedena žádná entita, použije se typ výrazu.
--
-- Příklady:
--   var_p_class^:type.virtual_method => var_p_class^:type -> p_class^:type -> c_class
--   c_class.virtual_method => c_class
--   virtual_method         => nil
----------------------------------------------------------------------------------------------------
begin
  if expr^.sub<>nil then
    psym:=expr^.sub^.getsymbol;
    if psym=nil then
      psym:=expr^.sub^.t.getctype;
      end if;
    end if;
  end x_get_context;



end cx_compile;
