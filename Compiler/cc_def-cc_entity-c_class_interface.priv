----------------------------------------------------------------------------------------------------
class private c_class_interface =
-- Interface třídy.
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
static init =
-- Inicializuje interface třídy na zadanou třídu [pexpr]/[pclass].
-- Parametr [org_interface] reprezentuje původní pohled na tento interface u předka nadřazené třídy.
-- Jestliže toto je první pohled na tuto instanci interfacu v hierarchii nadřazené třídy, musí být
-- nil.
----------------------------------------------------------------------------------------------------
begin
  -- doplnit údaje
  refclass.setexpr(pexpr);
  refclass.setentity(pclass);
{
                     ^^^^^^
  Tady to chcípne na interní chybu 177, protože [pclass] je pointer na typ, který byl zatím jen dopředně
  deklarovaný a tudíž u pointeru není k dispozici předek báze (testuje se, protože pentity = ^CLASS tentity
  a setentity má právě parametr typu pentity).

  Opravit interní chybu a deklaraci [c_class_interface] dokončit až za deklarací [tentity_type].
}

  -- zjistit, zda je toto exposovaný nebo nativní interface
  -- pozná se to tak, že to není nativní interface související třídy; dotázat se přímo na exposovaný
  -- interface v tuto chvíli není možné; navíc je-li seznam interfaců zatím prázdný, je tento 
  -- interface určitě nativní, protože nativní interface je vždy první zařazovaný do seznamu
  is_exposed:=not pclass^.interfaces^.is_empty and pclass^.interfaces^.get_native_interface<>^this;

  -- zapamatovat si původní pohled na tuto instanci interfacu
  this.org_interface:=org_interface;

  -- zapamatovat si přidělené číslo interfacu
  this.interface_index:=interface_index;
  verify({VERIFY=}001005,org_interface<>nil and then org_interface^.interface_index<>interface_index);
  end init;



----------------------------------------------------------------------------------------------------
static get_ancestor return pentity_type =
-- Vrátí "předka" k tomuto interfacu. Pro nativní interface je to skutečný předek související třídy,
-- pro exposovaný interface je to související třída sama o sobě, protože na úrovni práce s interfacy
-- záleží na fyzické dědičnost interfaců a ne tříd.
----------------------------------------------------------------------------------------------------
begin
  if is_exposed
    then result:=pentity_type(refclass.getcentity);
    else result:=pentity_type(refclass.getcentity^.ancestor.getuentity);
    end if;
  end get_ancestor;



----------------------------------------------------------------------------------------------------
static get_ancestor_interface return p_class_interface =
-- Vrátí "předka" tohoto interfacu. Jestliže je k dispozici původní pohled na tento interface, vrátí
-- ten, jinak zjistí předka třídy související s tímto interfacem ([get_ancestor]) a předá jeho
-- nativní interface.
----------------------------------------------------------------------------------------------------
begin
  -- přednost má původní pohled na interface, je-li k dispozici
  if org_interface<>nil 
    then result:=org_interface
    else
      if get_ancestor<>nil then
        result:=pentity_type(get_ancestor)^.interfaces^.get_native_interface;
        end if;
      end if;
  end get_ancestor_interface;



----------------------------------------------------------------------------------------------------
static adjust_vtable (
    resize         : in t_logical) =             -- T-chceme přidat nějaký prvek
-- Zajistí, že je alokována virtuální tabulka a popřípadě ji realokuje.
----------------------------------------------------------------------------------------------------
const
  vtableinit       = 5;
  vtabledelta      = 20;

begin
  -- byla už virtuální tabulka alokována ?
  if vtable=nil

    -- ne
    then
      declare var
        pancestor  : pentity_type;               -- předek třídy
        interface  : p_class_interface;          -- intrface předka

      begin
        -- zkusit najít předka s virtuální tabulkou (začít sám se sebou, protože toto může být
        -- pouze exposovaný interface, který přebírá virtuální tabulku od své související třídy)
        pancestor:=get_ancestor;
        while pancestor<>nil loop
          -- najít nativní interface předka
          interface:=pancestor^.interfaces^.find_interface(pancestor);
          verify({VERIFY=}000764,interface=nil);

          -- má interface definovánu virtuální tabulku?
          if interface^.vtable<>nil then break end if;

          -- další předek
          pancestor:=pancestor^.ancestor.getuentity;
          end loop;

        -- našel se ? (musí se testovat oba, při přechodu k dalšímu předkovi se [interface] neresetuje)
        if pancestor<>nil and then interface<>nil

          -- ano => zkopírovat, resp. alokovat dostatečně velkou
          then
            new vtable range interface^.vtable^:length+vtableinit;
            vtable^:length:=interface^.vtable^:length;

          -- ne => alokovat v základní velikosti
          else
            new vtable range vtableinit;
            end if;
        end declare;

    -- ano
    else
      -- zajistit volné místo, pokud je to požadováno
      if resize and then vtable^:length=vtable^:last then
        --%%TODO(ADJUST) adjust pclass^.vtable range pclass^.vtable^:last+vtabledelta;
        declare var
          _vtable  : vtable:type;
        begin
          new _vtable range vtable^:last+vtabledelta;
          _vtable^:=vtable^;
        commit 
          discard vtable;
          vtable:=_vtable;
          end declare;
        end if;
      end if;
  end adjust_vtable;



----------------------------------------------------------------------------------------------------
static add_virtual_method =
-- Přidá do interfacu novou virtuální metodu a přidělí jí index v tabulce virtuální metod.
----------------------------------------------------------------------------------------------------
begin
  -- zajistit místo pro nově přidávanou virtuální metodu
  adjust_vtable(true);

  -- přidat
  vtable^ & pentity_code(pvirtual);

  -- přidělit index
  pvirtual^.vindex:=vtable^:length;
  end add_virtual_method;



----------------------------------------------------------------------------------------------------
static get_virtual_method =
-- Nejbližší (vzhledem k předkům) virtuální metodu nebo její override odpovídající zadanému indexu.
----------------------------------------------------------------------------------------------------
begin
  -- máme-li k dispozici virtuální tabulku, zkusit najít implementaci v ní
  if vtable<>nil then
    verify({VERIFY=}000690,{%%TODO(IN)vindex not in vtable^:range}vindex>vtable^:length);
    result:=vtable^[vindex];
    end if;

  -- nenašlo-li se a máme-li předka, pak se zeptat jeho
  if result=nil and then get_ancestor_interface<>nil{refclass.getcentity^.ancestor.isset} then
    result:=get_ancestor_interface{pentity_type(get_ancestor)^.interfaces^.get_native_interface}^.get_virtual_method(vindex);
    end if;
  end get_virtual_method;



----------------------------------------------------------------------------------------------------
static is_virtual_method_overriden =
-- Zjistí, zda byla zadaná virtuální metoda v této třídě již přetížena.
-- Je-li v této třídě přímo deklarována, se chápe jako přetížení.
----------------------------------------------------------------------------------------------------
begin
  result:=vtable<>nil and then vtable^[pvirtual^.vindex]<>nil;
  end is_virtual_method_overriden;



----------------------------------------------------------------------------------------------------
static override_virtual_method =
-- Přetíží v interfacu zadanou virtuální metodu.
-- Pokud již byla jednou přetížena, způsobí chybu.
----------------------------------------------------------------------------------------------------
begin
  -- zajistit, aby byla virtuální tabulka korektně alokovaná
  adjust_vtable(false);

  -- poznamenat do virtuální tabulky pointer na aktuální přetížení
  vtable^[pvirtual^.vindex]:=poverride;
  end override_virtual_method;



----------------------------------------------------------------------------------------------------
static get_vtable_size =
-- Vrátí velikost virtuální tabulky jako počet jejích prvků.
-- Pokud není virtuální tabulka v tomto interfacu alokována, zeptá se předka.
----------------------------------------------------------------------------------------------------
begin
  -- máme-li virtuální tabulku na této úrovni, 
  if vtable<>nil then 
    result:=vtable^:length

  -- nemáme-li předka, tak je virtuální tabulka prázdná
  elsif get_ancestor=nil{not refclass.getcentity^.ancestor.isset} then 
    result:=0;

  -- jinak se zeptáme na velikost tabulky předka
  else
    -- %%TECH(OPT) Zde se spolehneme na tail-recursion optimization schopnosti překladače.
    result:=pentity_type(get_ancestor{refclass.getcentity^.ancestor.getcentity})^.interfaces^.get_native_interface^.get_vtable_size;
    end if;
  end get_vtable_size;



----------------------------------------------------------------------------------------------------
procedure normalize_vindex =
-- Normalizuje logický index virtuální metody od nuly.
----------------------------------------------------------------------------------------------------
begin
  result:=vindex-vindex:first;
  end normalize_vindex;

end c_class_interface;
