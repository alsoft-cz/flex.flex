----------------------------------------------------------------------------------------------------
module public ci_def =
-- Překladač Flexu.
-- Základní definice pro generátor kódu.
----------------------------------------------------------------------------------------------------
-- Ondra : 29.03.2002 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  standard,
  cc_def.cc_lexsym,
  cx_expr,
  cx_expr.cx_def,
  cp_cpu.cp_32.cp_def,
  cp_cpu.cp_32.cp_metadata,
  cp_cpu.cp_ia32.ci_instr,
  cp_cpu.cp_ia32.ci_abi,
  cg_debug,
  ci_struct;

const
  -- alokace paměti
  iimaxsize        = 16;                         -- maximální velikost instrukce
  icodeinit        = 256{128};                   -- počáteční paměť pro instrukce
  icodedelta       = 2048{256};                  -- změna velikosti paměti pro instrukce
  ireloinit        = 32;                         -- počáteční paměť pro relokace
  irelodelta       = 32;                         -- změna velikosti paměti pro relokace
  itargetinit      = 32;                         -- počáteční paměť pro cíle skoků
  itargetdelta     = 32;                         -- změna velikosti paměti pro cíle skoků
  iunresinit       = 32;                         -- počáteční paměť pro nevyhodnocené skoky
  iunresdelta      = 32;                         -- změna velikosti paměti pro nevyhod. skoky
  iparinit         = 4;                          -- počáteční paměť pro parametry
  ipardelta        = 4;                          -- změna velikosti paměti pro parametry
  ihistinit        = 8;                          -- počáteční paměť pro historii
  ihistdelta       = 4;                          -- změna velikosti paměti pro historii

const
  liimm_lval       = t_signed32:first;           -- nejnižší přímá hodnota
  liimm_hval       = t_unsigned32:last;          -- nejvyšší přímá hodnota

const
  ----- %%TECH Zarovnání stacku --------------------------------------------------------------------
  -- Předpokládá se, že na stacku jsou slova zarovnána na hranici ISTACKALIGN
  -- bytů. Tato konstanta by měla být shodná s IDEFREGSIZE.
  --------------------------------------------------------------------------------------------------
  -- zarovnání stacku
  istackalign      = 4;

  ----- %%TECH Velikost registrů -------------------------------------------------------------------
  -- Předpokládá se, že procesor pracuje s přirozenou velikostí registrů
  -- IDEFREGSIZE bytů. Zejména tedy velikost adresy (adresní operace),
  -- normalizovaná velikost slova na stacku a optimální velikost registrů pro
  -- výpočty odpovídají této konstantě.
  --------------------------------------------------------------------------------------------------
  -- implicitní velikost registrů
  idefregsize      = 4;

  ----- %%TECH Malé objekty ------------------------------------------------------------------------
  -- Operace s objekty, které se nevejdou přímo do registru, jsou zpravidla
  -- implementovány dvakrát: Optimalizovaná verze pro objekty do ISMALLOBJECT
  -- bytů (typicky rozvinutím cyklu) a obecná verze pro větší velikosti.
  --------------------------------------------------------------------------------------------------
  -- prahová velikost malého objektu
  ismallobject     = 16;


                                                                         
----- Operandy -------------------------------------------------------------------------------------

type
  -- cíl skoku
  itarget          = private t_unsigned32;

const
  -- neznámý cíl skoku
  iunknowntarget   = itarget(0);
  tgfallthru       = iunknowntarget;

  -- neznámá adresa cíle
  iunknownaddr     = 0;

type
  -- typ relokace
  irelotype        = enum
      irt_none;                                  -- nic
      irt_entity;                                -- entita
                                                 -- související relokabilní objekt: PENTITY
      irt_imm;                                   -- přímá hodnota
                                                 -- související relokabilní objekt: PEXPIMM
      irt_interface;                             -- interface třídy
                                                 -- související relokabilní objekt: P_CLASS_INTERFACE
      end enum;

  -- blok relokačních informací
  ireloinfo        = record
      rtype        : irelotype;                  -- typ relokace
      rentity      : pentity;                    -- související entita
      rexpr        : cx_expr.cx_def.pexpnode;    -- související výraz
      rinterface   : p_class_interface;          -- související interface třídy
      end record;

type
  -- virtuální číslo registru
  iregnum          = {%%TODO(RANGE)}t_unsigned range 1..in_count;

  -- registr použitý v operandu
  ioperreg         = record
      reg          : ireg;                       -- registr
      mapping      : iregnum;                    -- mapování registru
      end record;



----- Základ řídící struktury generátoru kódu ------------------------------------------------------
type
  -- dopředné deklarace
  icodegen;           picodegen           = ^class icodegen;
  icodegen_addr;      picodegen_addr      = ^class icodegen_addr;
  icodegen_metadata;  picodegen_metadata  = ^class icodegen_metadata;
  icodegen_var;       picodegen_var       = ^class icodegen_var;
  icodegen_imm;       picodegen_imm       = ^class icodegen_imm;
  icodegen_interface; picodegen_interface = ^class icodegen_interface;
  icodegen_type;      picodegen_type      = ^class icodegen_type;
  icodegen_subprog;   picodegen_subprog   = ^class icodegen_subprog;
  icodegen_label;     picodegen_label     = ^class icodegen_label;
  icodegen_message;   picodegen_message   = ^class icodegen_message;

  -- řídící struktura generátoru kódu
  icodegen         = t_flex_record with record
      end record;

  -- objekt s adresou
  icodegen_addr    = icodegen with record
      addr         : tprg32;                     -- adresa
      end record;

  -- objekt s run-time metadaty (deskriptorem)
  icodegen_metadata= icodegen with record
      desc_addr    : tprg32;                     -- adresa deskriptoru
      desc         : p_desc_entity;              -- deskriptor 
      desc_qid     : pentityident;               -- kvalifikovaný identifikátor entity
      -- %%TODO(COMPATIBILITY) odstranit size
      desc_size    : t_unsigned32;               -- velikost deskriptoru
      end record;

----- Řídící struktura generátoru kódu související s proměnnou -------------------------------------
type
  -- informace o proměnné
  icodegen_var     = icodegen_addr with record
      end record;



----- Řídící struktura generátoru kódu související s přímou hodnotou -------------------------------
type
  -- informace o přímé hodnotě
  icodegen_imm     = icodegen_addr with record
      end record;



----- Řídící struktura generátoru kódu související s typem -----------------------------------------
type
  -- informace o typu
  icodegen_type    = icodegen_metadata with record
      -- %%TECH Zděděná složka [desc_addr] zároveň slouží jako :tag typu.
      end record;



----- Řídící struktura generátoru kódu související s interfacem/třídou -----------------------------
type
  -- informace o interfacu
  icodegen_interface = icodegen_type with record
      vtable       : p_vptr_table;               -- tabulka pointerů na virtuální metody
      itable       : p_interface_table;          -- tabulka exposovaných interfaců
      end record;



----- Řídící struktura generátoru kódu související s podprogramem ----------------------------------
type
  -- dopředné deklarace
  icodeinst;       picodeinst       = ^icodeinst;
  imemblock;       pimemblock       = ^imemblock;

  -- informace o parametru
  iparinfo         = record
      pparam       : pentity_param;              -- související parametr
      ofs          : t_signed32;                 -- relativní offset parametru
      size         : t_unsigned32;               -- velikost bloku (včetně zarovnání)
      end record;
  iparlist         = string{array} of iparinfo;

  -- profil parametrů
  iparprofile      = record
      call         : icallconvention;            -- volací konvence
      thisofs      : t_signed32;                 -- offset THIS pointeru
      retfree      : t_unsigned32;               -- kolik bytů uvolnit při návratu z procedury
    --plen         : t_unsigned;                 -- paměť obsazená v PAR
    --psize        : t_unsigned;                 -- paměť alokovaná v PAR
      par          : ^iparlist;                  -- seznam parametrů
      end record;

  -- stav bloku
  iblockstatus     = enum
      ibs_free;                                  -- volný blok
      ibs_temp;                                  -- dočasná paměť
      ibs_var;                                   -- proměnná
      end enum;

  -- jeden blok paměti
  imemblock        = record
      status       : iblockstatus;               -- aktuální stav bloku
      pvar         : pentity_var;                -- související proměnná
      ofs          : {u}t_signed32;              -- relativní offset začátku bloku
      size         : t_unsigned32;               -- velikost bloku (v bytech)
      ifrom        : tprg32;                     -- oblast platnosti: počáteční IP
      ito          : tprg32;                     -- oblast platnosti: koncové IP
      prev         : pimemblock;                 -- předchozí blok
      next         : pimemblock;                 -- následující blok
      end record;

  -- obsazení paměti
  imemlayout       = record
      first        : pimemblock;                 -- první blok
      last         : pimemblock;                 -- poslední blok
      largest      : t_unsigned32;               -- největší aktuálně volný blok
      display      : t_unsigned32;               -- velikost display area (uložené EBP)
      end record;

  -- historie obsazení paměti
  imemhistory      = record
      first        : pimemblock;                 -- první blok
      last         : pimemblock;                 -- poslední blok
      end record;

  -- relokace
  irelo            = record
      -- %%X Record [irelo] by se od [ireloinfo] mohl klidně dědit.
      relo_info    : ireloinfo;                  -- blok informací o relokaci
      nextip       : t_unsigned32;               -- IP další instrukce
      disp         : t_unsigned;                 -- adresa pole
      absolute     : t_logical;                  -- T-absolutní adresa
      end record;
  ireloarray       = string{array} of irelo;

  -- seznam nadřazených procedur v hierarchii vnoření
  inestedarray     = string {!! %%X 1..$FFFFFF} of pentity_code;
  inestedlist      = record
   -- nlen         : t_unsigned;                 -- počet nadřazených procedur
      nlist        : ^inestedarray;              -- nadřazené procedury
      end record;

  -- instance podprogramu
  icodeinst        = record
      next         : picodeinst;                 -- další instance v seznamu
      frame        : istackframe;                -- stack-frame
      profile      : iparprofile;                -- profil parametrů
      layout       : imemlayout;                 -- atuální layout paměti
      history      : imemhistory;                -- historie změn
      nested       : inestedlist;                -- seznam nadřazených procedur
      c            : p_code_array;               -- vlastní kód
      r            : ^ireloarray;                -- relokace
      di           : tdebuginfo;                 -- debug informace
      cstart       : t_unsigned32;               -- adresa, doplní se při linkování
      end record;

  -- řídící struktura
  icodegen_subprog = icodegen with record
      ifirst       : picodeinst;       -- seznam instancí podprogramu
      ilast        : picodeinst;       -- poslední instance v seznamu
      def_call     : icallconvention;  -- default volací konvence
      def_frame    : istackframe;      -- default stack-frame
      end record;

----------------------------------------------------------------------------------------------------
procedure i_prepare (
    curr           : in out tentity_code);       -- entita obsahující kód
-- Příprava entity před generováním.
----------------------------------------------------------------------------------------------------



----- Řídící struktura generátoru kódu související s podprogramem ----------------------------------
type
  icodegen_label   = icodegen with record
      target       : itarget;                    -- návěští cíle skoku
      end record;



----- Řídící struktura generátoru kódu související se zprávou --------------------------------------
type
  icodegen_message = icodegen_metadata with record
      end record;


----- Řídící struktury během generování kódu -------------------------------------------------------
type
  -- seznam cílů skoků
  itargetlist      = string of t_unsigned32;

  -- seznam nevyhodnocených skoků
  iunreslist       = string of record
      target       : itarget;                    -- identifikátor cíle
      nextip       : t_unsigned32;               -- IP další instrukce
      disp         : t_unsigned;                 -- adresa pole (skokové instrukce)
      len          : t_unsigned;                 -- délka pole
      absolute     : t_logical;                  -- T-absolutní adresa
      end record;

  -- informace o průběhu generování
  igeninfo         = record
      entity       : pentity;                    -- prekladany prvek
      iip          : t_unsigned;                 -- adresa poslední instrukce
      isize        : t_unsigned;                 -- velikost poslední instrukce
      idisp        : t_unsigned;                 -- offset adresy v rámci instrukce
      iimm1        : t_unsigned;                 -- offset přímé hodnoty 1 v rámci instrukce
      iimm2        : t_unsigned;                 -- offset přímé hodnoty 2 v rámci instrukce
      target       : ^itargetlist;               -- seznam cílů skoků
      unres        : ^iunreslist;                -- seznam nevyhodnocených skoků
      espmark      : t_unsigned;                 -- offset přímé hodnoty, která se odečítá od
                                                 -- ESP při výrobě místa pro lokální proměnné
    --xframe       : timm32;                     -- adresa hlavního exception-frame
      rcframe      : timm32;                     -- adresa aktuálního return-control framu
      end record;
{
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
  iexprloadkind    = enum
      lk_data_address;
      lk_subprogram_address;
      lk_value;
      end enum;

  iexprloadmode    = enum
      lm_gen;
      lm_convert;
      lm_reg;
      lm_reg_all;
      lm_imm8_cl;
      lm_reg_eax;
      lm_push;
      lm_temp;
      lm_pointer;
      lm_pointer_reg;
      end enum;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}
  -- režim zpracování (načtení) výsledku (operandu)
  iexprloadmode    = enum
      lm_gen;                                    -- pouze generovat
      lm_addr;                                   -- načíst adresu
      lm_addr_attr;                              -- adresa objektu s dynamickými atributy
      lm_conv;                                   -- konvertovat na typ výsledku
      lm_reg;                                    -- konvertovat a načíst do registru
      lm_reg_all;                                -- konvertovat a načíst do registru (i přímou hodnotu)
      lm_imm8_cl;                                -- konvertovat a načíst do CL nebo 8bit const.
      lm_reg_eax;                                -- konvertovat a načíst do EAX
      lm_imm_to_rel;                             -- konvertovat přímou hodnotu na relativní adresu
      lm_push_value;                             -- konvertovat a načíst hodnotu a uložit na stack
      lm_push_addr;                              -- načíst adresu a uložit na stack
      lm_push_and_load_addr;                     -- načíst adresu, uložit na stack a kopii vrátit
      lm_temp_value;                             -- konvertovat a načíst do temporary proměnné, nebo
                                                 -- ponechat jako přímou hodnotu
    --lm_temp_addr;                              -- adresu objektu uložit do temporary proměnné
      lm_pointer;                                -- načíst pointer s informacemi o run-time atributech v něm
    --lm_pointer_reg;                            -- načíst a normalizovat pointer, uložit do registru
      lm_task_var_slot;                          -- načíst handle task proměnné
      end enum;
  iexprloadmodeset = set of iexprloadmode;

const
  -- režimy vedoucí na výpočet hodnoty
  lms_value        = iexprloadmodeset:[lm_conv,lm_reg,lm_reg_all,lm_imm8_cl,lm_reg_eax,
                                       {lm_imm_to_rel{??},}lm_push_value,lm_temp_value,
                                       lm_pointer{,lm_pointer_reg}];

  -- režimy vedoucí na výpočet adresy (ať už absolutní nebo relativní)
  lms_addr         = iexprloadmodeset:[lm_addr,lm_addr_attr,lm_push_addr,lm_push_and_load_addr
                                       {,lm_temp_addr},lm_imm_to_rel,lm_task_var_slot];

#if #declared vasekk; #and then; vasekk then;
  #error 'Uz funguji konstantni mnozinove operace? Podminku v nize uvedenem #if jsem mel vzdy true, prestoze by mela byt false';
  #if lms_value+lms_addr+iexprloadmodeset:[lm_gen]<>iexprloadmodeset:full then;
    #error 'Chybne zkonstruovane [lms_value] nebo [lms_addr]';
    #end if;
  #end if;

type
  -- stav registru
  iregstatus       = enum
      irs_local;                                 -- volný registr pro lokální použití
      irs_used;                                  -- pužitý registr
      irs_pushed;                                -- registr uložený na stack
      irs_frozen;                                -- registr byl uložen na stack a teď je volný
      end enum;
  iregstatusset    = set of iregstatus;

  -- režim alokace registrů
  iregallocmode    = enum
      irm_int;                                   -- registr se použije pro výpočty
      irm_addr;                                  -- registr se použije pro adresu
      end enum;

  -- preference registrů
  irprefinfo       = record
      reg          : iunireg;                    -- jaký registr preferujeme
      mode         : iregallocmode;              -- pro jaký alokační režim
      end record;

  -- preferovaný způsob předání výsledku
  ioutputpref      = enum
      iop_none;                                  -- bez preference
      iop_stack;                                 -- na stacku
      iop_cc;                                    -- jako kód podmínky
      end enum;

  -- informace o registru
  ireginfo         = record
      status       : iregstatus;                 -- status
      used         : t_unsigned;                 -- počet použití registru
      temp         : timm32;                     -- adresa odswapovaného registru
      mapping      : iregnum;                    -- aktuální mapování registru
      end record;

  -- kontext generování výrazu
  iexprcontext     = record
      ----- POZOR: Při změně tohoto záznamu změnit i I_NEWCONTEXT -----
      mode         : iexprloadmode;              -- režim zpracování výsledku
      -- Ondra 15.5.2002 : Typ rozvinut do jednotlivých složek
    --outtyp       : pentity_type;               -- očekávaný typ výsledku
      outtyp       : record                      -- očekávaný typ výsledku
          stype    : tdatatype;                  -- druh typu
          size     : tunidata_size;              -- velikost
          pattrib  : rtattribset;                -- uložené dynamické atributy
          base     : pentity_type;               -- bázový typ
          end record;
      orgtyp       : pentity_type;               -- původní typ výrazu daný generovaným podvýrazem
      rsign        : t_logical;                  -- registry jsou T-signed, F-unsigned
      rsize        : t_unsigned;                 -- velikost použitých registrů
      rpref        : irprefinfo;                 -- preferovaný registr
      outpref      : ioutputpref;                -- preferovaný způsob předání výsledku
      rta          : rtattribset;                -- které dynamické atributy budou potřeba
      -- přidělování registrů
      reginfo      : array iunireg of ireginfo;  -- informace o registrech
      active       : iuniregset;                 -- množina aktivních registrů
      mapping      : array iregnum of iunireg;   -- mapování aktivních reg.
      mapcount     : t_unsigned;                 -- počet přiřazených mapování

      dump_level   : t_unsigned;
      end record;


----------------------------------------------------------------------------------------------------
procedure set_call_conv (
      entity       : in out tentity;             -- entita
      call_conv    : in icallconvention);        -- volaci konvence
-- nastavi volaci konvenci entite
----------------------------------------------------------------------------------------------------
procedure get_call_conv (
      entity       : in out tentity)             -- entita
                     return icallconvention;     -- volaci konvence
-- vrati volaci konvenci entity
----------------------------------------------------------------------------------------------------

end ci_def;
