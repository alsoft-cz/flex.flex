----------------------------------------------------------------------------------------------------
module public cd_type =
-- P©eklada‡ Flexu.
-- Definice typ–.
----------------------------------------------------------------------------------------------------
-- Ondra : 07.11.2001 : Vytvo©il
----------------------------------------------------------------------------------------------------

with
  cc_def.cc_entity.cc_ref;

----- %%TECH ---------------------------------------------------------------------------------------
--   V tomto modulu se pracuje a‘ se t©emi £rovnˆmi pr vˆ p©ekl dan˜ch
-- vno©en˜ch symbol–:
--
--   CONTEXT - nad©azen˜ prvek
--   CURR    - pr vˆ p©ekl dan˜ prvek/p©ekl dan˜ typ
--   PTYP    - typ ur‡en˜ jm‚nem nebo nov˜ implicitnˆ deklarovan˜ typ
--
-- P©¡klady:
--
--   module x =
--
--     type a = signed 32;
--     -------------------
--       context: x
--       curr:    a
--       ptyp:    <nepou‘ito>
--
--     type b = integer;
--     -----------------
--       context: x
--       curr:    b
--       ptyp:    integer
--       -- jm‚no typu "integer" se p©ekl d  v kontextu CURR, tedy B.
--
--     type c = array 1..10 of signed 32;
--     -----------------------|----------
--       context: x
--       curr:    c            <implicitnˆ deklarovan˜ typ SIGNED>
--       ptyp:    <nepou‘ito>  <implicitnˆ deklarovan˜ typ SIGNED>
--       -- zde se CURR postupnˆ zmˆn¡ z C, co‘ je ARRAY, na jeho b zov˜
--          (nepojmenovan˜) typ SIGNED. Ten je za©azen do tabulky symbol–
--          prvku C.
--
--     type d = array 1..10 of enum i;j;k; end enum;
--     -----------------------|---------------------
--       context: x
--       curr:    d            <implicitnˆ deklarovan˜ typ ENUM>
--       ptyp:    <nepou‘ito>  <implicitnˆ deklarovan˜ typ ENUM>
--       -- zde se CURR postupnˆ zmˆn¡ z D, co‘ je ARRAY, na jeho b zov˜
--          (nepojmenovan˜) typ ENUM. Ten je za©azen do tabulky symbol–
--          prvku C, jeho prvky (I,J,K) do tabulky symbol– prvku ENUM a odkaz
--          na nˆ do prvku CONTEXT.
--
--     type e = array 1..10 of integer;
--     -----------------------|--------
--       context: x
--       curr:    e            e
--       ptyp:    <nepou‘ito>  integer
--       -- na tomto a p©edchoz¡m p©¡kladˆ je dob©e vidˆt, jak se mˆn¡
--          CURR a PTYP podle toho, zda se jedn  o implicitn¡ deklaraci
--          nebo jm‚no typu
--
--     type f = array 1..10 of integer range 1..10;
--     -----------------------|-------|-------------
--       context: x
--       curr:    e            e       <implicitnˆ deklarovan˜ typ SIGNED>
--       ptyp:    <nepou‘ito>  integer <implicitnˆ deklarovan˜ typ SIGNED>
--       -- variace na p©edchoz¡ t‚ma se zmˆnou CURR a PTYP kv–li uveden¡
--          determinace rozsahu.
--
--     var v : integer;
--     ----------------
--       context: x
--       curr:    x
--       ptyp:    integer
--
--     var v : signed 32;
--     ------------------
--       context: x
--       curr:    <impicitnˆ deklarovan˜ typ SIGNED>
--       ptyp:    <impicitnˆ deklarovan˜ typ SIGNED>
--
--     end x;
--
-- Nov˜ impicitnˆ deklarovan˜ typ se v‘dy za©azuje do tabulky symbol– pr vˆ
-- p©ekl dan‚ho prvku CURR. Kv–li nutnosti za©azen¡ odkaz– na vnit©n¡ slo‘ky
-- nˆkter˜ch typ– (ENUM) se mus¡ p©ed vat i CONTEXT, kter˜ jinak nem  v˜znam.
--
-- Zmˆna v uveden˜ch pravidlech by mohla vyvolat ne‘ douc¡ zmˆny v chov n¡
-- preprocesoru.
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure p_typeedef (
    context        : in tcontext;                -- nad©azen˜ kontext
    curr           : in out tentity_type;        -- p©ekl dan˜ typ
    curr_context   : in tcontext;                -- prim rn¡ kontext typu
    compat         : in typecompat);             -- determinace kompatibility
-- Definice typu jako sou‡ st deklarace.
----------------------------------------------------------------------------------------------------
procedure p_typeidef (
    context        : in tcontext;                -- nad©azen˜ kontext
    curr           : in tcontext;                -- p©ekl dan˜ prvek
    ptyp           : out reftype);               -- p©ekl dan˜ typ
-- Jm‚no typu nebo definice jako sou‡ st implicitn¡ deklarace.
----------------------------------------------------------------------------------------------------
procedure p_typename (
    context        : in tcontext;                -- nad©azen˜ kontext
    curr           : in tcontext;                -- p©ekl dan˜ prvek
    ptyp           : out reftype);               -- p©ekl dan˜ typ
-- Jm‚no typu.
----------------------------------------------------------------------------------------------------
procedure p_private_extension (
    context        : in tcontext;                -- nad©azen˜ kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext);               -- prim rn¡ kontext typu
-- Private extension declaration.
----------------------------------------------------------------------------------------------------
procedure p_def_procedure (
    context        : in tcontext;                -- nad©azen˜ kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext);               -- prim rn¡ kontext typu
-- Definice typu procedura.
----------------------------------------------------------------------------------------------------
procedure p_def_message (
    context        : in tcontext;                -- nad©azen˜ kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext);               -- prim rn¡ kontext typu
-- Definice typu zpr va.
----------------------------------------------------------------------------------------------------
procedure p_def_task (
    context        : in tcontext;                -- nad©azen˜ kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext);               -- prim rn¡ kontext typu
-- Definice typu task.
----------------------------------------------------------------------------------------------------

end cd_type;
