----------------------------------------------------------------------------------------------------
module private cb_def =
-- P©eklada‡ Flexu.
-- Definice stromov‚ho tvaru bloku p©¡kaz–.
----------------------------------------------------------------------------------------------------
-- Ondra : 25.09.2001 : Vytvo©il
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
#separate private cb_choice;
-- Optimalizovan˜ seznam v˜bˆr–.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
class private blinfo =
-- Informace o pr–bˆhu anal˜zy
----------------------------------------------------------------------------------------------------
    
    ------------------------------------------------------------------------------------------------
    static init =
    -- Inicializace.
    ------------------------------------------------------------------------------------------------
    begin
      this.phase:=bp_syntax;
    --this.final:=final;
      this.eval:=ete_evaluated;
      end init;

    end blinfo;

    

----------------------------------------------------------------------------------------------------
class private blnode =
-- Uzel
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    static setpos =
    -- Nastav¡ pozici uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      this.pos[blpos]:=pos;
      end setpos;



    ------------------------------------------------------------------------------------------------
    static getpos =
    -- Vr t¡ pozici uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      pos:=this.pos[blpos];
      end getpos;



    ------------------------------------------------------------------------------------------------
    static errpos =
    -- Dosad¡ pozici uzlu do posledn¡ho chybov‚ho hl ¨en¡.
    ------------------------------------------------------------------------------------------------
    begin
      ce^.setpos(pos[blpos]);
      end errpos;



    ------------------------------------------------------------------------------------------------
    virtual dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='?';
      end dump;

    end blnode;



----------------------------------------------------------------------------------------------------
class private blsimple =
-- jednoduch˜ p©¡kaz
----------------------------------------------------------------------------------------------------
    end blsimple;



----------------------------------------------------------------------------------------------------
class private blcompound =
-- slo‘en˜ p©¡kaz
----------------------------------------------------------------------------------------------------
    end blcompound;



----------------------------------------------------------------------------------------------------
class private blcond =
-- uzel s podm¡nkou
----------------------------------------------------------------------------------------------------
    end blcond;



----------------------------------------------------------------------------------------------------
class private blcmd =
-- p©i©azovac¡ p©¡kaz
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:=':=';
      end dump;

    end blcmd;



----------------------------------------------------------------------------------------------------
class private blbreak =
-- p©¡kaz BREAK
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='break';
      end dump;

    end blbreak;



----------------------------------------------------------------------------------------------------
class private blreturn =
-- p©¡kaz RETURN
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='return';
      end dump;

    end blreturn;



----------------------------------------------------------------------------------------------------
class private blmessage =
-- zasl n¡ zpr vy
----------------------------------------------------------------------------------------------------
    end blmessage;



----------------------------------------------------------------------------------------------------
class private blraise =
-- p©¡kaz RAISE
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='raise';
      end dump;

    end blraise;



----------------------------------------------------------------------------------------------------
class private blsend =
-- p©¡kaz SEND
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='send';
      end dump;

    end blsend;



----------------------------------------------------------------------------------------------------
class private blgoto =
-- p©¡kaz GOTO
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='goto';
      end dump;

    end blgoto;



----------------------------------------------------------------------------------------------------
class private blalloc =
-- alok tor
----------------------------------------------------------------------------------------------------
    end blalloc;



----------------------------------------------------------------------------------------------------
class private blnew =
-- p©¡kaz NEW
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='new';
      end dump;

    end blnew;



----------------------------------------------------------------------------------------------------
class private bldiscard =
-- p©¡kaz DISCARD
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='discard';
      end dump;

    end bldiscard;



----------------------------------------------------------------------------------------------------
class private bladjust =
-- p©¡kaz ADJUST
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='adjust';
      end dump;

    end bladjust;



----------------------------------------------------------------------------------------------------
class private bldelay =
-- p©¡kaz DELAY
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='delay';
      end dump;

    end bldelay;



----------------------------------------------------------------------------------------------------
class private blif =
-- p©¡kaz IF
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='if';
      end dump;

    end blif;



----------------------------------------------------------------------------------------------------
class private blloop =
-- p©¡kaz LOOP
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='loop';
      end dump;

    end blloop;



----------------------------------------------------------------------------------------------------
class private blfor =
-- p©¡kaz FOR
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='for';
      end dump;

    end blfor;



----------------------------------------------------------------------------------------------------
class private blwhile =
-- p©¡kaz WHILE
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='while';
      end dump;

    end blwhile;



----------------------------------------------------------------------------------------------------
class private blcase =
-- p©¡kaz CASE
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='case';
      end dump;

    end blcase;



----------------------------------------------------------------------------------------------------
class private blaccept =
-- p©¡kaz ACCEPT
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='accept';
      end dump;

    end blaccept;



----------------------------------------------------------------------------------------------------
class private blblock =
-- blok p©¡kaz–
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='begin end';
      end dump;

    end blblock;



----------------------------------------------------------------------------------------------------
class private bldeclare =
-- blok p©¡kaz– s lok ln¡mi deklaracemi
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='declare begin end';
      end dump;

    end bldeclare;



----------------------------------------------------------------------------------------------------
class private blasm =
-- kod v assembleru
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='#asm';
      end dump;

    end blasm;



----------------------------------------------------------------------------------------------------
class private bllabel =
-- n vˆ¨t¡
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='label';
      end dump;

    end bllabel;


  
----------------------------------------------------------------------------------------------------
class private blchoicelist =
-- uzel s v˜bˆry
----------------------------------------------------------------------------------------------------
    end blchoicelist;



----------------------------------------------------------------------------------------------------
class private blwhen_m =
-- obsluha zpr vy
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='when accept';
      end dump;

    end blwhen_m;



----------------------------------------------------------------------------------------------------
class private blwhen_c =
-- vˆtev CASE
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='when case';
      end dump;

    end blwhen_c;



----------------------------------------------------------------------------------------------------
class private blif_cond =
-- vˆtev IF
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='if cond';
      end dump;

    end blif_cond;



----------------------------------------------------------------------------------------------------
class private blloop1 =
-- jednopr–chodov˜ cyklus
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='loop 1';
      end dump;

    end blloop1;



----------------------------------------------------------------------------------------------------
procedure newnode =
-- Vytvo©en¡ nov‚ho uzlu stromu.
----------------------------------------------------------------------------------------------------
begin
  -- alokovat pamˆŸ
  case btype
    when bt_cmd        do new pblcmd(node);
    when bt_break      do new pblbreak(node);
    when bt_return     do new pblreturn(node);
    when bt_raise      do new pblraise(node);
    when bt_send       do new pblsend(node);
    when bt_goto       do new pblgoto(node);
    when bt_new        do new pblnew(node);
    when bt_discard    do new pbldiscard(node);
    when bt_adjust     do new pbladjust(node);
    when bt_delay      do new pbldelay(node);
    when bt_if         do new pblif(node);
    when bt_loop       do new pblloop(node);
    when bt_for        do new pblfor(node);
    when bt_while      do new pblwhile(node);
    when bt_case       do new pblcase(node);
    when bt_accept     do new pblaccept(node);
    when bt_block      do new pblblock(node);
    when bt_protected  do new pblblock(node);
    when bt_sequential do new pblblock(node);
    when bt_declare    do new pbldeclare(node);
    when bt_asm        do new pblasm(node);
    when bt_label      do new pbllabel(node);
    when bt_when_m     do new pblwhen_m(node);
    when bt_when_c     do new pblwhen_c(node);
    when bt_if_cond    do new pblif_cond(node);
    when bt_loop1      do new pblloop1(node);
    when others        do verify({VERIFY=}000011,true);
    end case;

  -- inicializovat
  node^.btype:=btype;
  node^.org:=info.phase;
  node^.zprac:=info.phase;
  end newnode;



----------------------------------------------------------------------------------------------------
procedure derivenode =
-- Podle dodan‚ho uzlu odvod¡ nov˜ uzel.                                  
----------------------------------------------------------------------------------------------------
begin
  -- vytvo©it uzel 
  newnode(node,info,btype);

  -- p©evz¡t nˆkter‚ atributy
  -- POZN: inteligentn¡ by bylo, kdyby se tady nap©. pro potomky [blcompound] kop¡roval [sub] atp.
  --       jak to udˆlat chyt©e?
{
  *** slo by to pomoci multivirtualnich metod:

        virtual derive (src : virtual pblnode; dst : virtual pblnode);

        override derive with (pblcompount,pblcompound) =
        begin
          dst^sub:=src^.sub;
          end derive;
     
       ale zatim to neni implementovane
}
  -- p©evz¡t pozici                          
  srcnode^.getpos(bp_begin,node^.pos[bp_begin]);
  srcnode^.getpos(bp_end,node^.pos[bp_end]);
  end derivenode;



----------------------------------------------------------------------------------------------------
procedure sequence_errpos =
-- Nastav¡ pozici chyby na sekvenci p©¡kaz–.
----------------------------------------------------------------------------------------------------
var
  pos              : lexposblock;                -- pozice chyby

begin
  verify({VERIFY=}000874,first=nil or last=nil);

  -- nastavit pozici
  pos.b:=first^.pos[bp_begin].b;
  pos.e:=last^.pos[bp_end].e;

  -- propagovat pozici
  ce^.setpos(pos);
  end sequence_errpos;



----------------------------------------------------------------------------------------------------
procedure node_errpos =
-- Nastav¡ pozici chyby na cel˜ blok.
----------------------------------------------------------------------------------------------------
begin
  sequence_errpos(node,node);
  end node_errpos;



#if #declared debug; #and then; debug then;
----------------------------------------------------------------------------------------------------
procedure dumptree = 
-- Dump stromu na obrazovku.
----------------------------------------------------------------------------------------------------
begin
  end dumptree;
#end if;



----------------------------------------------------------------------------------------------------
procedure block_catch_resume_error =
-- Vr t¡, zda zachyt vat v˜jimky typu resume_error v uzlu
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat vyj¡mku
  case catch_mode
    -- vyj¡mka se m  zachytit
    when catch_mode_catch do result:=false;

    -- vyj¡mka se m  znovu vyvolat
    when catch_mode_raise do result:=true;

    -- znovuvyvol n¡ v˜jimky z vis¡ na typu uzlu
    when catch_mode_implicit do result:=block_type in blocktypeset:[];
    end case;    
  end block_catch_resume_error;

----------------------------------------------------------------------------------------------------
#separate private c_block_iterator;
-- Iter tor
----------------------------------------------------------------------------------------------------

end cb_def;
