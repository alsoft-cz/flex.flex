----------------------------------------------------------------------------------------------------
module private cb_def =
-- Překladač Flexu.
-- Definice stromového tvaru bloku příkazů.
----------------------------------------------------------------------------------------------------
-- Ondra : 25.09.2001 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  cc_def.cc_gc;

----------------------------------------------------------------------------------------------------
#separate private cb_choice;
-- Optimalizovaný seznam výběrů.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
class private blinfo =
-- Informace o průběhu analýzy
----------------------------------------------------------------------------------------------------
    
    ------------------------------------------------------------------------------------------------
    static init =
    -- Inicializace.
    ------------------------------------------------------------------------------------------------
    begin
      this.phase:=bp_syntax;
    --this.final:=final;
      this.eval:=ete_evaluated;
      end init;

    end blinfo;

    

----------------------------------------------------------------------------------------------------
class private blnode =
-- Uzel
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    static setpos =
    -- Nastaví pozici uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      this.pos[blpos]:=pos;
      end setpos;



    ------------------------------------------------------------------------------------------------
    static getpos =
    -- Vrátí pozici uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      pos:=this.pos[blpos];
      end getpos;



    ------------------------------------------------------------------------------------------------
    static errpos =
    -- Dosadí pozici uzlu do posledního chybového hlášení.
    ------------------------------------------------------------------------------------------------
    begin
      ce^.setpos(pos[blpos]);
      end errpos;



    ------------------------------------------------------------------------------------------------
    override current class:ancestor.errpos =
    ------------------------------------------------------------------------------------------------
    begin
      verify({VERIFY=}001132);
      end errpos;



    ------------------------------------------------------------------------------------------------
    virtual dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='?';
      end dump;

    end blnode;



----------------------------------------------------------------------------------------------------
class private blsimple =
-- jednoduchý příkaz
----------------------------------------------------------------------------------------------------
    end blsimple;



----------------------------------------------------------------------------------------------------
class private blcompound =
-- složený příkaz
----------------------------------------------------------------------------------------------------
    end blcompound;



----------------------------------------------------------------------------------------------------
class private blcond =
-- uzel s podmínkou
----------------------------------------------------------------------------------------------------
    end blcond;



----------------------------------------------------------------------------------------------------
class private blcmd =
-- přiřazovací příkaz
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:=':=';
      end dump;

    end blcmd;



----------------------------------------------------------------------------------------------------
class private blbreak =
-- příkaz BREAK
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='break';
      end dump;

    end blbreak;



----------------------------------------------------------------------------------------------------
class private blreturn =
-- příkaz RETURN
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='return';
      end dump;

    end blreturn;



----------------------------------------------------------------------------------------------------
class private blmessage =
-- zaslání zprávy
----------------------------------------------------------------------------------------------------
    end blmessage;



----------------------------------------------------------------------------------------------------
class private blraise =
-- příkaz RAISE
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='raise';
      end dump;

    end blraise;



----------------------------------------------------------------------------------------------------
class private blsend =
-- příkaz SEND
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='send';
      end dump;

    end blsend;



----------------------------------------------------------------------------------------------------
class private blgoto =
-- příkaz GOTO
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='goto';
      end dump;

    end blgoto;



----------------------------------------------------------------------------------------------------
class private blalloc =
-- alokátor
----------------------------------------------------------------------------------------------------
    end blalloc;



----------------------------------------------------------------------------------------------------
class private blnew =
-- příkaz NEW
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='new';
      end dump;

    end blnew;



----------------------------------------------------------------------------------------------------
class private bldiscard =
-- příkaz DISCARD
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='discard';
      end dump;

    end bldiscard;



----------------------------------------------------------------------------------------------------
class private bladjust =
-- příkaz ADJUST
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='adjust';
      end dump;

    end bladjust;



----------------------------------------------------------------------------------------------------
class private bldelay =
-- příkaz DELAY
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='delay';
      end dump;

    end bldelay;



----------------------------------------------------------------------------------------------------
class private blif =
-- příkaz IF
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='if';
      end dump;

    end blif;



----------------------------------------------------------------------------------------------------
class private blloop =
-- příkaz LOOP
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='loop';
      end dump;

    end blloop;



----------------------------------------------------------------------------------------------------
class private blfor =
-- příkaz FOR
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='for';
      end dump;

    end blfor;



----------------------------------------------------------------------------------------------------
class private blwhile =
-- příkaz WHILE
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='while';
      end dump;

    end blwhile;



----------------------------------------------------------------------------------------------------
class private blcase =
-- příkaz CASE
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='case';
      end dump;

    end blcase;



----------------------------------------------------------------------------------------------------
class private blaccept =
-- příkaz ACCEPT
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='accept';
      end dump;

    end blaccept;



----------------------------------------------------------------------------------------------------
class private blblock =
-- blok příkazů
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='begin end';
      end dump;

    end blblock;



----------------------------------------------------------------------------------------------------
class private bldeclare =
-- blok příkazů s lokálními deklaracemi
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='declare begin end';
      end dump;

    end bldeclare;



----------------------------------------------------------------------------------------------------
class private blasm =
-- kod v assembleru
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='#asm';
      end dump;

    end blasm;



----------------------------------------------------------------------------------------------------
class private bllabel =
-- návěští
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='label';
      end dump;

    end bllabel;


  
----------------------------------------------------------------------------------------------------
class private blchoicelist =
-- uzel s výběry
----------------------------------------------------------------------------------------------------
    end blchoicelist;



----------------------------------------------------------------------------------------------------
class private blwhen_m =
-- obsluha zprávy
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='when accept';
      end dump;

    end blwhen_m;



----------------------------------------------------------------------------------------------------
class private blwhen_c =
-- větev CASE
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='when case';
      end dump;

    end blwhen_c;



----------------------------------------------------------------------------------------------------
class private blif_cond =
-- větev IF
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='if cond';
      end dump;

    end blif_cond;



----------------------------------------------------------------------------------------------------
class private blloop1 =
-- jednoprůchodový cyklus
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override dump =
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    begin
      result:='loop 1';
      end dump;

    end blloop1;



----------------------------------------------------------------------------------------------------
procedure newnode =
-- Vytvoření nového uzlu stromu.
----------------------------------------------------------------------------------------------------
begin
  -- alokovat paměť
  case btype
    when bt_cmd        do 
        new pblcmd(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_break      do 
        new pblbreak(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_return     do 
        new pblreturn(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_raise      do 
        new pblraise(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_send       do 
        new pblsend(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_goto       do 
        new pblgoto(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_new        do 
        new pblnew(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_discard    do 
        new pbldiscard(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_adjust     do 
        new pbladjust(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_delay      do 
        new pbldelay(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_if         do 
        new pblif(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_loop       do 
        new pblloop(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_for        do 
        new pblfor(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_while      do 
        new pblwhile(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_case       do 
        new pblcase(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_accept     do 
        new pblaccept(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_block      do 
        new pblblock(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_protected  do 
        new pblblock(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_sequential do 
        new pblblock(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_declare    do
        new pbldeclare(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_asm        do 
        new pblasm(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_label      do 
        new pbllabel(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_when_m     do 
        new pblwhen_m(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_when_c     do 
        new pblwhen_c(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_if_cond    do 
        new pblif_cond(node);
        c_garbage_collector.get_instance^.register_class(node);

    when bt_loop1      do 
        new pblloop1(node);
        c_garbage_collector.get_instance^.register_class(node);

    when others        do verify({VERIFY=}000011,true);
    end case;

  -- inicializovat
  node^.btype:=btype;
  node^.org:=info.phase;
  node^.zprac:=info.phase;
  end newnode;



----------------------------------------------------------------------------------------------------
procedure derivenode =
-- Podle dodaného uzlu odvodí nový uzel.                                  
----------------------------------------------------------------------------------------------------
begin
  -- vytvořit uzel 
  newnode(node,info,btype);

  -- převzít některé atributy
  -- POZN: inteligentní by bylo, kdyby se tady např. pro potomky [blcompound] kopíroval [sub] atp.
  --       jak to udělat chytře?
{
  *** slo by to pomoci multivirtualnich metod:

        virtual derive (src : virtual pblnode; dst : virtual pblnode);

        override derive with (pblcompount,pblcompound) =
        begin
          dst^sub:=src^.sub;
          end derive;
     
       ale zatim to neni implementovane
}
  -- převzít pozici                          
  srcnode^.getpos(bp_begin,node^.pos[bp_begin]);
  srcnode^.getpos(bp_end,node^.pos[bp_end]);
  end derivenode;



----------------------------------------------------------------------------------------------------
procedure sequence_errpos =
-- Nastaví pozici chyby na sekvenci příkazů.
----------------------------------------------------------------------------------------------------
var
  pos              : lexposblock;                -- pozice chyby

begin
  verify({VERIFY=}000874,first=nil or last=nil);

  -- nastavit pozici
  pos.b:=first^.pos[bp_begin].b;
  pos.e:=last^.pos[bp_end].e;

  -- propagovat pozici
  ce^.setpos(pos);
  end sequence_errpos;



----------------------------------------------------------------------------------------------------
procedure node_errpos =
-- Nastaví pozici chyby na celý blok.
----------------------------------------------------------------------------------------------------
begin
  sequence_errpos(node,node);
  end node_errpos;



#if #declared debug; #and then; debug then;
----------------------------------------------------------------------------------------------------
procedure dumptree = 
-- Dump stromu na obrazovku.
----------------------------------------------------------------------------------------------------
begin
  end dumptree;
#end if;



----------------------------------------------------------------------------------------------------
procedure block_catch_resume_error =
-- Vrátí, zda zachytávat výjimky typu resume_error v uzlu
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat vyjímku
  case catch_mode
    -- vyjímka se má zachytit
    when catch_mode_catch do result:=false;

    -- vyjímka se má znovu vyvolat
    when catch_mode_raise do result:=true;

    -- znovuvyvolání výjimky závisí na typu uzlu
    when catch_mode_implicit do result:=block_type in blocktypeset:[];
    end case;    
  end block_catch_resume_error;

----------------------------------------------------------------------------------------------------
#separate private c_block_iterator;
-- Iterátor
----------------------------------------------------------------------------------------------------

end cb_def;
