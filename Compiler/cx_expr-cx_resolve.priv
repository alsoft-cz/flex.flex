----------------------------------------------------------------------------------------------------
module private cx_resolve =
-- Překladač.
-- Vyhodnocení nejednoznačných typů.
----------------------------------------------------------------------------------------------------
-- Ondra : 01.08.2001 : Vytvořil.
----------------------------------------------------------------------------------------------------

type
  tcheckproc       = procedure (
    curr           : in tcontext;                -- překládaný prvek
    expr           : in pexpambiguous;           -- výraz
    ptyp           : in typeview;                -- očekávaný typ výrazu
    typ            : in typeview)                -- testovaný typ výrazu
                   return t_logical;             -- T-typ vyhovuje
  pcheckproc       = ^tcheckproc;

----------------------------------------------------------------------------------------------------
procedure check_equal : tcheckproc =
-- True, je-li očekávaný typ a TYP výrazu shodný.
----------------------------------------------------------------------------------------------------
begin
  result:=t_equal_view(ptyp,typ);
  end check_equal;



----------------------------------------------------------------------------------------------------
procedure check_compatible : tcheckproc =
-- True, jsou-li očekávaný typ a TYP výrazu kompatibilní.
----------------------------------------------------------------------------------------------------
begin
  if expr^.ntype in nts_operator
    then result:=t_compatible(curr,toc_transform,pexpnoper(expr)^.assign,ptyp,typ)
    else result:=t_compatible(curr,toc_transform,false,ptyp,typ);
    end if;
  end check_compatible;



----------------------------------------------------------------------------------------------------
procedure check_all : tcheckproc =
-- True.
----------------------------------------------------------------------------------------------------
begin
  result:=true;
  end check_all;



----------------------------------------------------------------------------------------------------
procedure a_resolve_find (
    curr           : in tcontext;                -- překládaný prvek
    expr           : in pexpambiguous;           -- výraz
    ptyp           : in typeview;                -- očekávaný typ výrazu
    check          : in pcheckproc;              -- kontrolní procedura
    found          : out t_logical;              -- T-nalezeno
    index          : out typeindex) =            -- index vyhovujícího typu
-- Pokusí se nalézt jednoznačně vyhovující typ výrazu.                        
-- Pokud nalezne více nejednoznačných alternativ, hlásí chybu.                
----------------------------------------------------------------------------------------------------
var
  typ              : ptypeview;                  -- zkoumaný typ                                
  eli              : typeindex;                  -- indexy zdrojových typů
  eri              : typeindex;                  -- indexy zdrojových typů
  psym             : pentity;                    -- související symbol                          
  langindex        : typeindex;                  -- index vyhovujícího jazykem def. operátoru   
  langcount        : t_unsigned;                 -- počet vyhovujících jazykem def. operátorů   
  operindex        : typeindex;                  -- index vyhovujícího přetíženého operátoru    
  opercount        : t_unsigned;                 -- počet vyhovujících přetížených operátorů

begin
  langcount:=0;
  opercount:=0;
  for i in 0..expr^.gettypecount-1 loop
    -- zjistit informace o typu
    expr^.gettypeinfo(i,typ,eli,eri,psym);

    -- jak jsme na tom s kompatibilitou ?
    if check^(curr,expr,ptyp,typ^) then
      if psym<>nil

        -- přetížený operátor 
        then
          succ opercount;
          operindex:=i;

        -- jazykem definovaný operátor 
        else
          succ langcount;
          langindex:=i;
          end if;
      end if;
    end loop;

  -- jednoznačně určen přetížený operátor 
  if opercount=1 then
    found:=true;
    index:=operindex;

  -- jednoznačně určen jazykem definovaný operátor 
  elsif langcount=1 then
    found:=true;
    index:=langindex;

  -- nejednoznačně určený operátor
  elsif opercount>1 or langcount>1 then
    ce^.seterror({CCERR=}000504,ce_ambiguous);
    expr^.errpos;
    {%%RESUME ce^.raiseerror;}
    ce^.resumeerror;

  -- nenalezen žádný vyhovující operátor
  else
    found:=false;
    end if;
  end a_resolve_find;



----------------------------------------------------------------------------------------------------
procedure a_resolve_propagate (
    expr           : in pexpambiguous) =         -- výraz
-- Šíření zvoleného typu do podvýrazů.
----------------------------------------------------------------------------------------------------
var
  eli              : typeindex;                  -- indexy zdrojových typů
  eri              : typeindex;                  -- indexy zdrojových typů
  x                : pexpnode;

begin
  -- zjistit zdrojové typy
  expr^.gettypeorigin(0,eli,eri);

  -- levý podvýraz
  x:=expr^.sub;
  if x^.ntype in nts_ambiguous then
    -- zvolit typ 
    pexpambiguous(x)^.resolve(eli);

    -- šířit do podvýrazů 
    a_resolve_propagate(pexpambiguous(x));
    end if;

  -- pravý podvýraz 
  x:=x^.next;
  if (x<>nil) and (x^.ntype in nts_ambiguous) then
    -- zvolit typ 
    pexpambiguous(x)^.resolve(eri);

    -- šířit do podvýrazů 
    a_resolve_propagate(pexpambiguous(x));
    end if;
  end a_resolve_propagate;



----------------------------------------------------------------------------------------------------
procedure a_resolve =
-- Vyhodnocení uzlu s nejednoznačnými typy.                                   
----------------------------------------------------------------------------------------------------

var
  typ              : ptypeview;                  -- typ výrazu
  found            : t_logical;                  -- T-nalezen jednoznačný typ
  index            : typeindex;                  -- index jednoznačného typu

begin
  -- všechny nejasnosti by již měly být vyřízeny
  if expr^.isresolved then
    verify({VERIFY=}000299,expr^.gettypecount<>1);
    return;
    end if;

  -- nejednoznačně určený typ => nalézt jednoznačný
  if expr^.gettypecount>1 then
    ----- %%LANG Vyhodnocení typů ------------------------------------
    -- Pravidla pro výběr mezi více typy výrazu jsou tato:                
    --   - očekávaný typ výrazu je přímo jeden z typů výrazu,             
    --  (- očekávaný typ výrazu je předek/potomek jednoho z typů výrazu,) 
    --   - očekávaný typ výrazu je kompatibilní s jedním z typů výrazu,
    --   - bez ohledu na očekávaný typ výrazu má přednost přetížený       
    --     operátor.                                                      
    -- Pokud je vhodných alternativ více, má přednost přetížený operátor  
    -- (ale musí být jen jeden).                                          
    -- V ostatních případech je výsledek výrazu nejednoznačný.            
    ------------------------------------------------------------------

    -- omezit množinu typů podle požadovaného typu výrazu 
    if ptyp.tview<>tview_null

      -- je znám očekávaný typ výrazu => omezit podle něj 
      then
        a_resolve_find(curr,expr,ptyp,^check_equal,found,index);
--      if not found then
--        find(curr,expr,ptyp,^check_related,found,index);
--        end if;
          {%%X ^^^ Domyslet }
        if not found then
          a_resolve_find(curr,expr,ptyp,^check_compatible,found,index);
          end if;

      -- nemáme typ, ale to nemusí nutně vadit
      else
        found:=false;
        end if;

    -- bez ohledu na typ má přednost přetížený operátor
    if not found then
      a_resolve_find(curr,expr,ptyp,^check_all,found,index);
      end if;

    -- nenalezen jednoznačný typ => chyba 
    if not found then
      {%%X Tohle je dost podobná situace jako když je výraz }
      -- nekompatibilní vůči požadovanému typu výrazu. Jenže 
      -- tady je možných typů výrazu víc.                    
      ce^.seterror({CCERR=}000505,ce_ambiguous);
      expr^.errpos;
      {%%RESUME ce^.raiseerror;}
      ce^.resumeerror;
      end if;

    -- dosadit zvolený typ 
    expr^.resolve(index);
    end if;

  -- šíření typu do podvýrazů 
  a_resolve_propagate(expr);
  end a_resolve;



end cx_resolve;
