----------------------------------------------------------------------------------------------------
module private ci_lex =
-- P©eklada‡ Flexu.
-- Roz¨¡©en¡ lexik ln¡ho analyz toru pro inline assembler.
----------------------------------------------------------------------------------------------------
-- Ondra : 05.04.2002 : Vytvo©il
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
class private c_lex_behavior_ia32_asm = 
-- Roz¨¡©en¡ lexik ln¡ anal˜zy.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override search_keyword =
    -- Roz¨¡©en¡ lexik ln¡ anal˜zy.
    ------------------------------------------------------------------------------------------------
    var
      zac          : t_unsigned;
      stred        : t_unsigned;
      kon          : t_unsigned;    

    begin
      -- mohla by to b˜t instrukce (neobsahuj¡ znaky _ a 0..9)
      if val.can_be_kw then 
        zac:=iinstr:first:ord;
        kon:=ii_xor:ord{iinstr:last:ord}; -- %%X Hnusn  z plata.
        loop
          stred:=(zac+kon) div 2;
          if txt>iinstrtxt[iinstr(stred)]
            then zac:=stred+1;
            else kon:=stred;
            end if;
          until zac>=kon;
        -- nalezeno
        if txt=iinstrtxt[iinstr(zac)] then
          lex:=lex_asm_instr;
          val.code:=zac;
          return;
          end if;
        end if;

      -- %%X Hnusn  z plata: mohla by to b˜t FP instrukce (neobsahuj¡ znaky _ a 0..9)
      if val.can_be_kw then 
        zac:=succ ii_xor:ord;
        while zac<=iinstr:last:ord and then iinstrtxt[iinstr(zac)]<>txt loop succ zac end loop;
        -- nalezeno
        if txt=iinstrtxt[iinstr(zac)] then
          lex:=lex_asm_instr;
          val.code:=zac;
          return;
          end if;
        end if;

      -- mohl by to b˜t registr (nˆkter‚ registry obsahuj¡ ‡¡slice)
      zac:=(succ ir_none):ord;
      while (zac<=ireg:last:ord) and (iregtxt[ireg(zac)]<>txt) loop succ zac; end loop;
      -- nalezeno
      if zac<=ireg:last:ord then
        lex:=lex_asm_reg;
        val.code:=zac;
        return;
        end if;

      -- mohl by to b˜t prefix (neobsahuj¡ znaky _ a 0..9)
      if val.can_be_kw then 
        zac:=iprefix:first:ord;
        while zac<=iprefix:last:ord and then iprefixtxt[iprefix(zac)]<>txt loop succ zac; end loop;
        -- nalezeno
        if zac<=iprefix:last:ord then
          lex:=lex_asm_prefix;
          val.code:=zac;
          return;
          end if;
        end if;

      -- mohla by to b˜t pseudoinstrukce (neobsahuj¡ znaky _ a 0..9)
      if val.can_be_kw then 
        zac:=ipseudoinstr:first:ord;
        while zac<=ipseudoinstr:last:ord and then ipseudoinstrtxt[ipseudoinstr(zac)]<>txt loop succ zac; end loop;
        -- nalezeno
        if zac<=ipseudoinstr:last:ord then
          lex:=lex_asm_pseudoinstr;
          val.code:=zac;
          return;
          end if;
        end if;
      end search_keyword;

    end c_lex_behavior_ia32_asm;

end ci_lex;