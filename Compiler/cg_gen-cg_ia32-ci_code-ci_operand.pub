----------------------------------------------------------------------------------------------------
module public ci_operand =
-- P©eklada‡ Flexu.
-- Operand strojov‚ instrukce.
----------------------------------------------------------------------------------------------------
-- Ondra : 02.04.2003 : Vytvo©il.
----------------------------------------------------------------------------------------------------

use
  cx_expr.cx_def;

extend
  cp_cpu.cp_ia32.ci_instr;

type
  -- typ operandu
  t_operand_type   = enum
      io_none;                                   -- pr zdn˜ operand
      io_imm;                                    -- p©¡m  hodnota
      io_reg;                                    -- registr - v¨eobecn˜
{
      io_reg_mmx;                                -- registr - v¨eobecn˜ MMX
      io_reg_xmm;                                -- regisyr - v¨eobecn˜ XMM
      io_reg_STi;                                -- registr - floating point ST(i)
      io_reg_seg;                                -- registr - segmentov˜
      io_reg_CRi;                                -- registr - ©¡d¡c¡ CRi
      io_reg_DRi;                                -- registr - lad¡c¡ DRi
} 
      io_mem;                                    -- pamˆŸ
      io_rel;                                    -- relativn¡ adresa
      io_cc;                                     -- podm¡nka
      io_stack;                                  -- hodnota ulo‘en  na stacku
      end enum;
  t_operand_type_set = set of t_operand_type;

  -- element rn¡ datov˜ typ operandu
  t_elementary_data_type = enum
      edt_none;                                  -- nic
      edt_unsigned;                              -- unsigned integer
      edt_signed;                                -- signed integer
      edt_address;                               -- absolutn¡ adresa
      edt_offset;                                -- relativn¡ adresa
      edt_pointer;                               -- pointer (obecnˆ s run-time atributy)
      edt_float;                                 -- floating-point ‡¡slo
      edt_fixed;                                 -- fixed-point ‡¡slo
      edt_binary;                                -- obecn  bin rn¡ data (v¨echny ostatn¡ typy)
      end enum;
  t_elementary_data_type_set = set of t_elementary_data_type;

const
  -- hodnoty
  edts_value       = t_elementary_data_type_set:[edt_unsigned,edt_signed,edt_pointer,edt_float,edt_fixed,edt_binary];

type
  -- zp–sob zji¨tˆn¡ run-time atributu
  t_rtattrib_mode  = enum
      rtm_static;                                -- staticky ur‡it podle datov‚ho typu operandu
      rtm_stored_in_value;                       -- ulo‘en v hodnotˆ, kterou operand reprezentuje
      rtm_stored_in_tag;                         -- ulo‘en v tagu dynamick‚ho typu hodnoty
      rtm_stored_in_pointer;                     -- ulo‘en v pointeru
      end enum;

----------------------------------------------------------------------------------------------------
#separate public c_operand;
#separate private c_operand;
-- Operand strojov‚ instrukce.
----------------------------------------------------------------------------------------------------

var
  -- nulov˜ operand
  op0           : protected c_operand;

  -- dal¨¡ ‡asto pou‘¡van‚ operandy
  op_0          : protected c_operand;           -- konstanta: 0 (univerz ln¡ velikost)
  op_0_16bit    : protected c_operand;           -- konstanta: 0 (16 bit–)
  op_0_32bit    : protected c_operand;           -- konstanta: 0 (32 bit–)
  op_1          : protected c_operand;           -- konstanta: 1
  op_2          : protected c_operand;           -- konstanta: 2
  op_3          : protected c_operand;           -- konstanta: 3
  op_4          : protected c_operand;           -- konstanta: 4
  op_7          : protected c_operand;           -- konstanta: 7
  op_8          : protected c_operand;           -- konstanta: 8
  op_15         : protected c_operand;           -- konstanta: 15
  op_16         : protected c_operand;           -- konstanta: 16
  op_31         : protected c_operand;           -- konstanta: 31
  op_0000FFFF   : protected c_operand;           -- konstanta: $FFFF
  op_FFFFFFFF   : protected c_operand;           -- konstanta: $FFFF_FFFF
  op_lstrisize32: protected c_operand;           -- konstanta: velikost pole :length
{
  op_al_        : protected c_operand;           -- registr AL
  op_ah         : protected c_operand;           -- registr AH
  op_ax_        : protected c_operand;           -- registr AX
  op_eax_       : protected c_operand;           -- registr EAX
  op_ecx        : protected c_operand;           -- registr ECX
  op_edx        : protected c_operand;           -- registr EDX
  op_esi        : protected c_operand;           -- registr ESI
  op_edi        : protected c_operand;           -- registr EDI
}                                                 
  op_ebp        : protected c_operand;           -- registr EBP
  op_esp        : protected c_operand;           -- registr ESP

----------------------------------------------------------------------------------------------------
procedure edtype_from_expr (
    expr           : in cx_expr.cx_def.pexpnode) -- zkouman˜ v˜raz
    return t_elementary_data_type;               -- element rn¡ datov˜ typ odpov¡daj¡c¡ v˜razu
-- Ur‡¡ element rn¡ datov˜ typ v˜razu, kter˜ odpov¡d  dodan‚mu v˜razu.
----------------------------------------------------------------------------------------------------
procedure edtype_from_type (
    typ            : in pentity_type)            -- zkouman˜ typ
    return t_elementary_data_type;               -- element rn¡ datov˜ typ odpov¡daj¡c¡ typu
-- Ur‡¡ element rn¡ datov˜ typ v˜razu, kter˜ odpov¡d  dodan‚mu typu. Typ sm¡ b˜t NIL.
----------------------------------------------------------------------------------------------------

supervised

var
  -- konverzn¡ tabulka z datov‚ho typu na element rn¡ datov˜ typ
  datatype_to_edtype : const array tdatatype of t_elementary_data_type := [
      -- univerz ln¡ typy
      for dt_uniint     use edt_unsigned,
      for dt_unireal    use edt_float,
      for dt_unilogical use edt_fixed,
      for dt_unichar    use edt_unsigned,
      for dt_uniarray   use edt_binary,
      for dt_uninil     use edt_binary,
      -- regul rn¡ typy
      for dt_signed     use edt_signed,
      for dt_unsigned   use edt_unsigned,
      for dt_float      use edt_float,
      for dt_fixed      use edt_fixed,
      for dt_char       use edt_unsigned,
      for dt_logical    use edt_unsigned,
      for dt_enum       use edt_unsigned,
      for dt_string     use edt_binary,
      for dt_ustring    use edt_binary,
      for dt_array      use edt_binary,
      for dt_uarray     use edt_binary,
      for dt_record     use edt_binary,
      for dt_class      use edt_binary,
      for dt_set        use edt_binary,
      for dt_pointer    use edt_pointer,
      for dt_tag        use edt_unsigned];

end ci_operand;