----------------------------------------------------------------------------------------------------
module private ci_operand =
-- Překladač Flexu.
-- Operand strojové instrukce.
----------------------------------------------------------------------------------------------------
-- Ondra : 02.04.2003 : Vytvořil.
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure i_gen_reduceop =
-- Pokud operand používá moc registrů (=dva), vylepší to (na jeden).
-- Operand musí být typu IO_MEM, IO_STACK nebo IO_IMM.
----------------------------------------------------------------------------------------------------
with
  ci_fragment;

begin
  case op.optype
    -- přímá hodnota
    when io_imm   do -- nic nedělat

    -- operand na stacku
    when io_stack do -- nic nedělat

    -- operand v paměti
    when io_mem   do
        -- jsou použity dva registry ?
        if op.base.reg<>ir_none and op.index.reg<>ir_none then
          declare var
            org_edtype : t_elementary_data_type;
            org_size   : t_unsigned;
            
          begin
            -- shovat si elementární datový typ a velikost operandu
            org_edtype:=op.edtype;
            org_size:=op.size;

            -- načíst výslednou adresu
            i_gen_load_address_to_register(inst,info,context,op);
            verify({VERIFY=}000491,op.optype<>io_reg);

            -- změnit zpět z registru na paměť
            op.transform_reg_to_mem(org_edtype,org_size);
            end declare;
          end if;

    -- ostatní operandy nijak redukovat nelze
    when others do 
        -- interní kontrola zrušena, zbytečné omezení
        -- verify({VERIFY=}000338,true{op.optype<>io_mem});
    end case;
  end i_gen_reduceop;



----------------------------------------------------------------------------------------------------
procedure edtype_from_expr =
-- Určí elementární datový typ výrazu, který odpovídá dodanému výrazu.
----------------------------------------------------------------------------------------------------
begin
  result:=edtype_from_type(expr^.t.getutype);
  end edtype_from_expr;



----------------------------------------------------------------------------------------------------
procedure edtype_from_type =
-- Určí elementární datový typ výrazu, který odpovídá dodanému typu.
----------------------------------------------------------------------------------------------------
begin
  if typ=nil
    then result:=edt_binary
    else
      result:=datatype_to_edtype[typ^.stype];
      verify({VERIFY=}000860,result=edt_none);
      end if;
  end edtype_from_type;



----------------------------------------------------------------------------------------------------
procedure value_size_from_expr =
-- Určí velikost hodnoty odpovídající danému výrazu. Pokud je to Unchecked view bez statické
-- velikosti, vrátí nulu.
----------------------------------------------------------------------------------------------------
begin
  if expr^.t.hassize
    then result:=unidata_size_to_unsigned(expr^.t.getsize);
    else result:=0;
    end if;
  end value_size_from_expr;



----------------------------------------------------------------------------------------------------
entry =
-- Inicializace.
----------------------------------------------------------------------------------------------------
begin
  -- připravit některé standardní operandy
  op_0          .create_imm_low_level(edt_unsigned,0,0);
  op_0_16bit    .create_imm_low_level(edt_unsigned,2,0);
  op_0_32bit    .create_imm_low_level(edt_unsigned,4,0);
  op_1          .create_imm_low_level(edt_unsigned,0,1);
  op_2          .create_imm_low_level(edt_unsigned,0,2);
  op_3          .create_imm_low_level(edt_unsigned,0,3);
  op_4          .create_imm_low_level(edt_unsigned,0,4);
  op_7          .create_imm_low_level(edt_unsigned,0,7);
  op_8          .create_imm_low_level(edt_unsigned,0,8);
  op_15         .create_imm_low_level(edt_unsigned,0,15);
  op_16         .create_imm_low_level(edt_unsigned,0,16);
  op_31         .create_imm_low_level(edt_unsigned,0,31);
  op_0000FFFF   .create_imm_low_level(edt_unsigned,0,$0000_FFFF);
  op_FFFFFFFF   .create_imm_low_level(edt_unsigned,0,$FFFF_FFFF);
  op_lstrisize32.create_imm_low_level(edt_unsigned,0,lstrisize32);
  op_ebp        .create_use_register_low_level(edt_unsigned,ir_ebp);
  op_esp        .create_use_register_low_level(edt_unsigned,ir_esp);
  end entry;

end ci_operand;
