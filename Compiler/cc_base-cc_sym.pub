----------------------------------------------------------------------------------------------------
module public cc_sym =
-- Překladač Flexu.
-- Manipulace s entitami, regiony, contexty, stromem entit a regionů.
----------------------------------------------------------------------------------------------------
-- Ondra : 18.06.2001 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  standard,
  cc_def,cc_def.cc_unitype,cc_def.cc_entity;

type
  -- parametry hledání
  tesearchflags    = enum
      esf_reverse;                               -- prohledávání v opačném pořadí
      esf_ancestor;                              -- prohledávat i předka
      end enum;
  tesearchflagset  = set of tesearchflags;

----------------------------------------------------------------------------------------------------
class public tentitysearch = extend c_flex_class;
-- Hledátko.
----------------------------------------------------------------------------------------------------

    var
      psym         : protected pentity;          -- nalezená entita

    ------------------------------------------------------------------------------------------------
    static find_global (
        context    : in tcontext;                -- aktuální kontext
        id         : in tentityident);           -- identifikátor hledané enetity
    -- Nalezne entitu podle identifikátoru.
    -- Tabulku entit prohledává podle pravidel viditelnosti.
    ------------------------------------------------------------------------------------------------
    static find_global_ex (
        context    : in tcontext;                -- aktuální kontext
        id         : in tentityident;            -- identifikátor hledané enetity
        etype      : in tentitytype);            -- typ entity
    -- Nalezne entitu podle identifikátoru.
    -- Tabulku entit prohledává podle pravidel viditelnosti.
    ------------------------------------------------------------------------------------------------
    static find_local (
        context    : in tcontext;                -- aktuální kontext
        id         : in tentityident;            -- identifikátor hledané enetity
        visibility : in tentityvisibleset);      -- požadovaná viditelnost entity
    -- Nalezne entitu podle idenfifikátoru.
    -- Hledá na lokální úrovni a v předkovi. Viditelnost symbolu musí být v množině požadované
    -- viditelnosti.
    ------------------------------------------------------------------------------------------------
    static find_local_all (
        context    : in tcontext;                -- aktuální kontext
        id         : in tentityident);           -- identifikátor hledané enetity
    -- Nalezne entitu podle idenfifikátoru.
    -- Hledá pouze na lokální úrovni. Viditelnost symbolu nebere v úvahu.
    ------------------------------------------------------------------------------------------------
    static find_et_first (
        zdroj      : in pentity;                 -- prohledávaná entita
        rcategory  : in tregioncategory;         -- jaký region prohledávat
        etype      : in tentitytype;             -- typ prvku
        flags      : in tesearchflagset);        -- další parametry hledání
    -- Nalezne první entitu zadaného typu. Je-li ETYPE=ET_UNDEF, najde libovolný.
    -- Normálně se hledá v přímém pořadí, s flagem ESF_REVERSE v opačném. Prohledává vždy pouze
    -- zadaný top-level region [rcategory], popřípadě je-li uveden příznak ESF_ANCESTOR, tak 
    -- i předka.
    ------------------------------------------------------------------------------------------------
    static find_et_first_in_context (
        context    : in tcontext;                -- aktuální kontext
        etype      : in tentitytype;             -- typ prvku
        flags      : in tesearchflagset);        -- další parametry hledání
    -- Nalezne první entitu zadaného typu v uvedeném kontextu. 
    -- Nesmí být uveden příznak ESF_ANCESTOR. 
    -- V ostatních ohledech se chová stejně jako FIND_ET_FIRST.
    ------------------------------------------------------------------------------------------------
    static find_et_next;
    -- Nalezne další prvek zadaného typu.
    ------------------------------------------------------------------------------------------------
    static find_id_first (
        context    : in tcontext;                -- aktuální kontext
        id         : in pentityident);           -- identifikátor
    -- Nalezne první entitu podle identifikátoru.
    ------------------------------------------------------------------------------------------------
    static find_id_next;
    -- Nalezne další entitu podle identifikátoru.
    ------------------------------------------------------------------------------------------------
    static count_et (
        zdroj      : in pentity;                 -- prohledávaná entita
        rcategory  : in tregioncategory;         -- jaký region prohledávat
        etype      : in tentitytype;             -- typ prvku
        flags      : in tesearchflagset)         -- další parametry hledání
        return t_unsigned;
    -- Vrátít počet entit vyhovujících zadaným parametrům.
    ------------------------------------------------------------------------------------------------
    static set_entity (
        psym       : in pentity);
    -- Uměle naplní výsledek hledání.
    ------------------------------------------------------------------------------------------------

    end tentitysearch;



----------------------------------------------------------------------------------------------------
-- Práce s kontexty.
----------------------------------------------------------------------------------------------------
procedure sym_primary_context (
    curr           : in class tentity)           -- entita
                   return tcontext;              -- odpovídající primární context
-- Sestaví primární kontext entity.                                                                
----------------------------------------------------------------------------------------------------
procedure sym_build_context (
    entity         : in pentity;                 -- entita
    region         : in pregion)                 -- region
                   return tcontext;              -- sestavený context
-- Ze zadané entity a regionu sestaví kontext.
-- %%TODO(AGGREGATE) Tato procedura je zcela zbytečná, nahradit agregátem.
----------------------------------------------------------------------------------------------------
procedure sym_build_context_from_category (
    entity         : in pentity;                 -- entita
    rcategory      : in tregioncategory)         -- kategorie požadovaného regionu
                   return tcontext;              -- sestavený context
-- Ze zadané entity a kategorie regionu sestaví kontext.
----------------------------------------------------------------------------------------------------
procedure sym_relative_context (
    curr           : in tcontext;                -- aktuální kontext
    entity         : in pentity)                 -- entita, pro kterou se sestavuje kontext
                   return tcontext;              -- sestavený kontext entity [entity]
-- Sestaví (primární) kontext zadané entity s ohledem na aktuální kontext. Pokud je ENTITY shodná
-- nebo nadřazená k CURR.ENTITY, pak vrátí kontext, ke kterému lze dotrasovat přes CURR, jinak
-- vrátí prostý primární kontext.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
-- Vlastnosti entit.
----------------------------------------------------------------------------------------------------
procedure sym_get_qid (
    _psym          : in pentity)                 -- entita
                   return t_char32str;
-- Sestaví kvalifikovaný identifikátor entity a vrátí ho jako řetězec.
----------------------------------------------------------------------------------------------------
procedure sym_get_temp_id return pentityident;   -- pracovní identifikátor
-- Vygeneruje interní pracovní identifikátor entity.
----------------------------------------------------------------------------------------------------
procedure sym_is_fully_visible (
    what           : in pentity;                 -- zkoumany symbol
    _where         : in tcontext)                -- aktuální kontext
--  _where         : in pentity)                 -- aktuální kontext
                   return t_logical;             -- T-what viditelné ve where
-- True, je-li ve WHERE viditelná úplná deklarace WHAT.
----------------------------------------------------------------------------------------------------
procedure sym_is_included (
    _what          : in pentity;                 -- zkoumaná entita                     
    where          : in pentity)                 -- referenční entita
                   return t_logical;             -- T-what in where                     
-- True, je-li symbol WHAT v tabulce symbolů symbolu WHERE (přímo i nepřímo). 
----------------------------------------------------------------------------------------------------
procedure sym_is_included_or_ancestor (
    _what          : in pentity;                 -- zkoumaná entita
    where          : in pentity)                 -- referenční entita
                   return t_logical;             -- T-what in where                     
-- True, je-li symbol WHAT v tabulce symbolů symbolu WHERE (přímo i nepřímo), nebo v některém 
-- z předků nadřazených symbolů WHERE.
----------------------------------------------------------------------------------------------------
procedure sym_is_used (
    what           : in pentity;                 -- zkoumany symbol                     
    where          : in tcontext;                -- aktuální kontext
    _mode          : in t_with_mode_set)         -- povolené módy vazby                 
                   return t_with_level;          -- úroveň použití what ve where
-- Úroveň použití entity WHAT (v závislosti na MODE/TYPE) v entitě WHERE. Pokud není použit vůbec,
-- vrátí [twl_none].
----------------------------------------------------------------------------------------------------
procedure sym_is_descendant (
    _e1            : in pentity;                 -- entita 1
    e2             : in pentity)                 -- entita 2
                   return t_logical;             -- S1 je potomek S2                  
-- True, je-li E1 potomek E2 nebo E1 = E2.
----------------------------------------------------------------------------------------------------
procedure sym_is_ancestor (
    e1             : in pentity;                 -- entita 1
    _e2            : in pentity)                 -- entita 2
                   return t_logical;             -- S1 je předek S2                  
-- True, je-li E1 předek E2 nebo E1 = E2.
----------------------------------------------------------------------------------------------------
procedure sym_get_container (
    curr           : in pentity)                 -- testovaná entita
                   return pentity;               -- nalezená kontejnerová entita
-- Nejbližší nadřazený nebo stejný kontejner typu modul/třída/program/kompilační jednotka.
----------------------------------------------------------------------------------------------------
procedure sym_check_container (
    curr           : in pentity;                 -- testovaná entita          
    etype          : in tentitytype)             -- požadovaný typ kontejnetu
                   return t_logical;
-- True, je-li nejbližší kontejnerová entita typu ETYPE.
----------------------------------------------------------------------------------------------------
procedure sym_get_enclosing_or_self (
    curr           : in pentity;                 -- testovaná entita          
    etype          : in tentitytype)             -- požadovaný typ entity
                   return pentity;
-- Nejbližší nadřazená nebo stejná entita typu ETYPE.
----------------------------------------------------------------------------------------------------
procedure sym_get_enclosing_or_self_ex (
    curr           : in pentity;                 -- testovaná entita          
    etype          : in tentitytypeset)          -- požadovaný typ entity
                   return pentity;
-- Nejbližší nadřazená nebo stejná entita typu ETYPE.
----------------------------------------------------------------------------------------------------
procedure sym_check_enclosing_or_self (
    curr           : in pentity;                 -- testovaná entita          
    etype          : in tentitytype)             -- požadovaný typ entity
                   return t_logical;
-- True, existuje-li nadřazená nebo stejná entita typu ETYPE.
----------------------------------------------------------------------------------------------------
procedure sym_get_nearest_abstract_or_self (
    curr           : in pentity)                 -- testovaná entita          
                   return pentity;
-- Nejbližší abstraktní předek-or-self.
----------------------------------------------------------------------------------------------------
procedure sym_get_first_abstract_or_self (
    curr           : in pentity)                 -- testovaná entita          
                   return pentity;
-- Nejvzdálenější abstraktní předek-or-self.
----------------------------------------------------------------------------------------------------
procedure sym_check_special (
    context        : in tcontext;                -- aktuální kontext
--  curr           : in tentity;                 -- prohledávaný symbol
    spec           : in tspectype)               -- hledaná speciální metoda
                   return t_logical;             -- T-má zadanou speciální metodu
-- True, pokud entita obsahuje zadanou speciální metodu.
----------------------------------------------------------------------------------------------------
procedure sym_get_visibility (
    context        : in pentity;                 -- symbol obsahujici tabulku
    search         : in pentity;                 -- prohledávaný prvek
    visibility     : out tentityvisibleset);     -- viditelnost                       
-- Viditelnost symbolů vnořených v symbolu SEARCH s ohledem na aktuální kontext CONTEXT.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
-- Nastavování vlastností entit a regionů.
----------------------------------------------------------------------------------------------------
procedure sym_set_warning (
    context        : in tcontext;                -- aktuální kontext
    id             : in tentityident;            -- identifikátor warningu
    value          : in t_logical);              -- hodnota přepínače
-- Nastaví stav warningu pro danou entitu.
----------------------------------------------------------------------------------------------------
procedure sym_set_hint (
    context        : in tcontext;                -- aktuální kontext
    id             : in tentityident;            -- identifikátor hintu
    value          : in t_logical);              -- hodnota přepínače
-- Nastaví stav hintu pro danou entitu.
----------------------------------------------------------------------------------------------------
procedure sym_set_diag (
    context        : in tcontext;                -- aktuální kontext
    id             : in tentityident;            -- identifikátor diagnostického hlášení
    value          : in t_logical);              -- hodnota přepínače
-- Nastaví stav diagnostického hlášení pro danou entitu.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
#separate public cc_advanced;
-- Další pokročilé funkce pro manipulaci s entitami, regiony, contexty, stromem entit a regionů.
----------------------------------------------------------------------------------------------------

end cc_sym;
