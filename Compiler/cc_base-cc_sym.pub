----------------------------------------------------------------------------------------------------
module public cc_sym =
-- P©eklada‡ Flexu.
-- Manipulace s entitami, regiony, contexty, stromem entit a region–.
----------------------------------------------------------------------------------------------------
-- Ondra : 18.06.2001 : Vytvo©il
----------------------------------------------------------------------------------------------------

with
  standard,
  cc_def,cc_def.cc_unitype,cc_def.cc_entity;

type
  -- parametry hled n¡
  tesearchflags    = enum
      esf_reverse;                               -- prohled v n¡ v opa‡n‚m po©ad¡
      esf_ancestor;                              -- prohled vat i p©edka
      end enum;
  tesearchflagset  = set of tesearchflags;

----------------------------------------------------------------------------------------------------
class public tentitysearch = extend c_flex_class;
-- Hled tko.
----------------------------------------------------------------------------------------------------

    var
      psym         : protected pentity;          -- nalezen  entita

    ------------------------------------------------------------------------------------------------
    static find_global (
        context    : in tcontext;                -- aktu ln¡ kontext
        id         : in tentityident);           -- identifik tor hledan‚ enetity
    -- Nalezne entitu podle identifik toru.
    -- Tabulku entit prohled v  podle pravidel viditelnosti.
    ------------------------------------------------------------------------------------------------
    static find_local (
        context    : in tcontext;                -- aktu ln¡ kontext
        id         : in tentityident;            -- identifik tor hledan‚ enetity
        visibility : in tentityvisibleset);      -- po‘adovan  viditelnost entity
    -- Nalezne entitu podle idenfifik toru.
    -- Hled  na lok ln¡ £rovni a v p©edkovi. Viditelnost symbolu mus¡ b˜t v mno‘inˆ po‘adovan‚
    -- viditelnosti.
    ------------------------------------------------------------------------------------------------
    static find_local_all (
        context    : in tcontext;                -- aktu ln¡ kontext
        id         : in tentityident);           -- identifik tor hledan‚ enetity
    -- Nalezne entitu podle idenfifik toru.
    -- Hled  pouze na lok ln¡ £rovni. Viditelnost symbolu nebere v £vahu.
    ------------------------------------------------------------------------------------------------
    static find_et_first (
        zdroj      : in pentity;                 -- prohled van  entita
        rcategory  : in tregioncategory;         -- jak˜ region prohled vat
        etype      : in tentitytype;             -- typ prvku
        flags      : in tesearchflagset);        -- dal¨¡ parametry hled n¡
    -- Nalezne prvn¡ entitu zadan‚ho typu. Je-li ETYPE=ET_UNDEF, najde libovoln˜.
    -- Norm lnˆ se hled  v p©¡m‚m po©ad¡, s flagem ESF_REVERSE v opa‡n‚m. Prohled v  v‘dy pouze
    -- zadan˜ top-level region [rcategory], pop©¡padˆ je-li uveden p©¡znak ESF_ANCESTOR, tak 
    -- i p©edka.
    ------------------------------------------------------------------------------------------------
    static find_et_first_in_context (
        context    : in tcontext;                -- aktu ln¡ kontext
        etype      : in tentitytype;             -- typ prvku
        flags      : in tesearchflagset);        -- dal¨¡ parametry hled n¡
    -- Nalezne prvn¡ entitu zadan‚ho typu v uveden‚m kontextu. 
    -- Nesm¡ b˜t uveden p©¡znak ESF_ANCESTOR. 
    -- V ostatn¡ch ohledech se chov  stejnˆ jako FIND_ET_FIRST.
    ------------------------------------------------------------------------------------------------
    static find_et_next;
    -- Nalezne dal¨¡ prvek zadan‚ho typu.
    ------------------------------------------------------------------------------------------------
    static find_id_first (
        context    : in tcontext;                -- aktu ln¡ kontext
        id         : in pentityident);           -- identifik tor
    -- Nalezne prvn¡ entitu podle identifik toru.
    ------------------------------------------------------------------------------------------------
    static find_id_next;
    -- Nalezne dal¨¡ entitu podle identifik toru.
    ------------------------------------------------------------------------------------------------
    static count_et (
        zdroj      : in pentity;                 -- prohled van  entita
        rcategory  : in tregioncategory;         -- jak˜ region prohled vat
        etype      : in tentitytype;             -- typ prvku
        flags      : in tesearchflagset)         -- dal¨¡ parametry hled n¡
        return t_unsigned;
    -- Vr t¡t po‡et entit vyhovuj¡c¡ch zadan˜m parametr–m.
    ------------------------------------------------------------------------------------------------
    static set_entity (
        psym       : in pentity);
    -- Umˆle napln¡ v˜sledek hled n¡.
    ------------------------------------------------------------------------------------------------

    end tentitysearch;



----------------------------------------------------------------------------------------------------
-- Pr ce s kontexty.
----------------------------------------------------------------------------------------------------
procedure sym_primary_context (
    curr           : in class tentity)           -- entita
                   return tcontext;              -- odpov¡daj¡c¡ prim rn¡ context
-- Sestav¡ prim rn¡ kontext entity.                                                                
----------------------------------------------------------------------------------------------------
procedure sym_build_context (
    entity         : in pentity;                 -- entita
    region         : in pregion)                 -- region
                   return tcontext;              -- sestaven˜ context
-- Ze zadan‚ entity a regionu sestav¡ kontext.
-- %%TODO(AGGREGATE) Tato procedura je zcela zbyte‡n , nahradit agreg tem.
----------------------------------------------------------------------------------------------------
procedure sym_build_context_from_category (
    entity         : in pentity;                 -- entita
    rcategory      : in tregioncategory)         -- kategorie po‘adovan‚ho regionu
                   return tcontext;              -- sestaven˜ context
-- Ze zadan‚ entity a kategorie regionu sestav¡ kontext.
----------------------------------------------------------------------------------------------------
procedure sym_relative_context (
    curr           : in tcontext;                -- aktu ln¡ kontext
    entity         : in pentity)                 -- entita, pro kterou se sestavuje kontext
                   return tcontext;              -- sestaven˜ kontext entity [entity]
-- Sestav¡ (prim rn¡) kontext zadan‚ entity s ohledem na aktu ln¡ kontext. Pokud je ENTITY shodn 
-- nebo nad©azen  k CURR.ENTITY, pak vr t¡ kontext, ke kter‚mu lze dotrasovat p©es CURR, jinak
-- vr t¡ prost˜ prim rn¡ kontext.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
-- Vlastnosti entit.
----------------------------------------------------------------------------------------------------
procedure sym_get_qid (
    _psym          : in pentity)                 -- entita
                   return t_char32str;
-- Sestav¡ kvalifikovan˜ identifik tor entity a vr t¡ ho jako ©etˆzec.
----------------------------------------------------------------------------------------------------
procedure sym_get_temp_id return pentityident;   -- pracovn¡ identifik tor
-- Vygeneruje intern¡ pracovn¡ identifik tor entity.
----------------------------------------------------------------------------------------------------
procedure sym_is_fully_visible (
    what           : in pentity;                 -- zkoumany symbol
    _where         : in tcontext)                -- aktu ln¡ kontext
--  _where         : in pentity)                 -- aktu ln¡ kontext
                   return t_logical;             -- T-what viditeln‚ ve where
-- True, je-li ve WHERE viditeln  £pln  deklarace WHAT.
----------------------------------------------------------------------------------------------------
procedure sym_is_included (
    _what          : in pentity;                 -- zkouman  entita                     
    where          : in pentity)                 -- referen‡n¡ entita
                   return t_logical;             -- T-what in where                     
-- True, je-li symbol WHAT v tabulce symbol– symbolu WHERE (p©¡mo i nep©¡mo). 
----------------------------------------------------------------------------------------------------
procedure sym_is_included_or_ancestor (
    _what          : in pentity;                 -- zkouman  entita
    where          : in pentity)                 -- referen‡n¡ entita
                   return t_logical;             -- T-what in where                     
-- True, je-li symbol WHAT v tabulce symbol– symbolu WHERE (p©¡mo i nep©¡mo), nebo v nˆkter‚m 
-- z p©edk– nad©azen˜ch symbol– WHERE.
----------------------------------------------------------------------------------------------------
procedure sym_is_used (
    what           : in pentity;                 -- zkoumany symbol                     
    where          : in tcontext;                -- aktu ln¡ kontext
    _mode          : in t_with_mode_set)         -- povolen‚ m¢dy vazby                 
                   return t_with_level;          -- £rove¤ pou‘it¡ what ve where
-- —rove¤ pou‘it¡ entity WHAT (v z vislosti na MODE/TYPE) v entitˆ WHERE. Pokud nen¡ pou‘it v–bec,
-- vr t¡ [twl_none].
----------------------------------------------------------------------------------------------------
procedure sym_is_descendant (
    _e1            : in pentity;                 -- entita 1
    e2             : in pentity)                 -- entita 2
                   return t_logical;             -- S1 je potomek S2                  
-- True, je-li E1 potomek E2 nebo E1 = E2.
----------------------------------------------------------------------------------------------------
procedure sym_is_ancestor (
    e1             : in pentity;                 -- entita 1
    _e2            : in pentity)                 -- entita 2
                   return t_logical;             -- S1 je p©edek S2                  
-- True, je-li E1 p©edek E2 nebo E1 = E2.
----------------------------------------------------------------------------------------------------
procedure sym_get_container (
    curr           : in pentity)                 -- testovan  entita
                   return pentity;               -- nalezen  kontejnerov  entita
-- Nejbli‘¨¡ nad©azen˜ nebo stejn˜ kontejner typu modul/t©¡da/program/kompila‡n¡ jednotka.
----------------------------------------------------------------------------------------------------
procedure sym_check_container (
    curr           : in pentity;                 -- testovan  entita          
    etype          : in tentitytype)             -- po‘adovan˜ typ kontejnetu
                   return t_logical;
-- True, je-li nejbli‘¨¡ kontejnerov  entita typu ETYPE.
----------------------------------------------------------------------------------------------------
procedure sym_get_enclosing_or_self (
    curr           : in pentity;                 -- testovan  entita          
    etype          : in tentitytype)             -- po‘adovan˜ typ entity
                   return pentity;
-- Nejbli‘¨¡ nad©azen  nebo stejn  entita typu ETYPE.
----------------------------------------------------------------------------------------------------
procedure sym_get_enclosing_or_self_ex (
    curr           : in pentity;                 -- testovan  entita          
    etype          : in tentitytypeset)          -- po‘adovan˜ typ entity
                   return pentity;
-- Nejbli‘¨¡ nad©azen  nebo stejn  entita typu ETYPE.
----------------------------------------------------------------------------------------------------
procedure sym_check_enclosing_or_self (
    curr           : in pentity;                 -- testovan  entita          
    etype          : in tentitytype)             -- po‘adovan˜ typ entity
                   return t_logical;
-- True, existuje-li nad©azen  nebo stejn  entita typu ETYPE.
----------------------------------------------------------------------------------------------------
procedure sym_get_nearest_abstract_or_self (
    curr           : in pentity)                 -- testovan  entita          
                   return pentity;
-- Nejbli‘¨¡ abstraktn¡ p©edek-or-self.
----------------------------------------------------------------------------------------------------
procedure sym_get_first_abstract_or_self (
    curr           : in pentity)                 -- testovan  entita          
                   return pentity;
-- Nejvzd lenˆj¨¡ abstraktn¡ p©edek-or-self.
----------------------------------------------------------------------------------------------------
procedure sym_check_special (
    context        : in tcontext;                -- aktu ln¡ kontext
--  curr           : in tentity;                 -- prohled van˜ symbol
    spec           : in tspectype)               -- hledan  speci ln¡ metoda
                   return t_logical;             -- T-m  zadanou speci ln¡ metodu
-- True, pokud entita obsahuje zadanou speci ln¡ metodu.
----------------------------------------------------------------------------------------------------
procedure sym_get_visibility (
    context        : in pentity;                 -- symbol obsahujici tabulku
    search         : in pentity;                 -- prohled van˜ prvek
    visibility     : out tentityvisibleset);     -- viditelnost                       
-- Viditelnost symbol– vno©en˜ch v symbolu SEARCH s ohledem na aktu ln¡ kontext CONTEXT.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
-- Nastavov n¡ vlastnost¡ entit a region–.
----------------------------------------------------------------------------------------------------
procedure sym_set_warning (
    context        : in tcontext;                -- aktu ln¡ kontext
    id             : in tentityident;            -- identifik tor warningu
    value          : in t_logical);              -- hodnota p©ep¡na‡e
-- Nastav¡ stav warningu pro danou entitu.
----------------------------------------------------------------------------------------------------
procedure sym_set_hint (
    context        : in tcontext;                -- aktu ln¡ kontext
    id             : in tentityident;            -- identifik tor hintu
    value          : in t_logical);              -- hodnota p©ep¡na‡e
-- Nastav¡ stav hintu pro danou entitu.
----------------------------------------------------------------------------------------------------
procedure sym_set_diag (
    context        : in tcontext;                -- aktu ln¡ kontext
    id             : in tentityident;            -- identifik tor diagnostick‚ho hl ¨en¡
    value          : in t_logical);              -- hodnota p©ep¡na‡e
-- Nastav¡ stav diagnostick‚ho hl ¨en¡ pro danou entitu.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
#separate public cc_advanced;
-- Dal¨¡ pokro‡il‚ funkce pro manipulaci s entitami, regiony, contexty, stromem entit a region–.
----------------------------------------------------------------------------------------------------

end cc_sym;