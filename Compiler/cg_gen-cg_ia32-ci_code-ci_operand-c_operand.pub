----------------------------------------------------------------------------------------------------
class public c_operand =
-- Překladač Flexu.
-- Operand strojové instrukce.
----------------------------------------------------------------------------------------------------
-- Ondra : 14.04.2003 : Vytvořil.
----------------------------------------------------------------------------------------------------

with
  cp_os;

use
  cc_def.cc_lexsym,
  cx_expr,cx_expr.cx_def;

var
  -- základní informace o operandu
  optype           : protected t_operand_type;   -- typ oprandu
  edtype           : protected t_elementary_data_type; -- elementární datový typ operandu
  size             : protected t_unsigned;       -- velikost operandu

  -- relokace
  relo_info        : protected ireloinfo;

  -- způsob výpočtu run-time atributů
  rta_info         : protected array rtattrib of record
      mode         : t_rtattrib_mode;            -- režim výpočtu run-time atributu
      indirection  : t_rtattrib_indirection;     -- nepřímost run-time atributu
    --offset       : t_unsigned;                 -- offset run-time atributu v objektu
      end record;

  -- přímá hodnota
  imm              : protected timm32;           -- přímá konstantní hodnota

  -- informace o použitém registru
  reg              : protected ioperreg;         -- registr

  -- informace o adrese [base+index*scale+displacement]
  base             : protected ioperreg;         -- bázový registr
  index            : protected ioperreg;         -- index
  scale            : protected t_unsigned32;     -- měřítko (1,2,4,8)
  disp             : protected timm32;           -- konstantní posunutí

  -- relativní adresa
  rel              : protected timm32;           -- přímá relativní adresa

  -- cíl 
  disp_target      : protected itarget;          -- logický cíl skoku pro operand typu [io_rel] nebo
                                                 -- absolutní adresy coby hodnoty operandu [io_imm]

  -- cíl skoku
  target           : protected itarget;          -- fyzický cíl skoku, nelze-li rovnou určit adresu

  -- podmínka
  cc               : protected icond;            -- podmínka

  -- přídavné údaje inline assembleru
  spos             : protected cc_def.cc_lexsym.lexposblock; -- pozice operandu v inline assembleru

----------------------------------------------------------------------------------------------------
-- Metody pro vytváření a rušení různých druhů operandů.
----------------------------------------------------------------------------------------------------
static create_imm (
    _edtype        : in t_elementary_data_type;  -- elementární datový typ operandu
    _size          : in t_unsigned;              -- velikost přímé hodnoty (0=univerzální velikost)
    _imm           : in timm32);                 -- přímá hodnota
-- Vytvoří nový operand typu [io_imm].
----------------------------------------------------------------------------------------------------
static create_new_register (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    _edtype        : in t_elementary_data_type;  -- elementární datový typ operandu
    _size          : in t_unsigned);             -- požadovaná velikost registru
-- Vytvoří nový operand typu [io_reg] a alokuje pro něj nový registr.
----------------------------------------------------------------------------------------------------
static create_new_register_from_operand (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    _edtype        : in t_elementary_data_type;  -- elementární datový typ operandu
    _size          : in t_unsigned;              -- požadovaná velikost registru
    _old_operand   : in c_operand);              -- původní operand, ze kterého lze použít registr
-- Vytvoří nový operand typu [io_reg]. Přednostně použije registr z dodaného dalšího operandu.
-- Pokud žádný vhodný nenajde, alokuje nový.
----------------------------------------------------------------------------------------------------
static create_use_register (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    _edtype        : in t_elementary_data_type;  -- elementární datový typ operandu
    _reg           : in ireg);                   -- registr
-- Vytvoří nový operand typu [io_reg] a použije dodaný registr.
----------------------------------------------------------------------------------------------------
static create_memory_address (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    _edtype        : in t_elementary_data_type;  -- elementární datový typ operandu
    _size          : in t_unsigned;              -- požadovaná velikost registru
    _base          : in ireg;                    -- bázový registr
    _disp          : in timm32);                 -- posunutí
-- Vytvoří operand typu [io_mem].
----------------------------------------------------------------------------------------------------
static create_memory_address_on_stack (
    inst           : in out icodeinst;           -- instance
    _edtype        : in t_elementary_data_type;  -- elementární datový typ operandu
    _size          : in t_unsigned;              -- požadovaná velikost registru
    _disp          : in timm32;                  -- posunutí
    use_stack_ptr  : in t_logical := false);     -- T-místo frame pointeru vždy použít stack ptr.
-- Vytvoří operand typu [io_mem] bázovaný k frame pointeru.
----------------------------------------------------------------------------------------------------
static create_memory_address_from_operand (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    _edtype        : in t_elementary_data_type;  -- elementární datový typ operandu
    _size          : in t_unsigned;              -- požadovaná velikost registru
    _old_operand   : in c_operand);              -- původní operand, ze kterého lze použít registr
-- Vytvoří operand typu [io_mem] podle dodaného původního operandu typu [io_reg] nebo [io_imm]. 
-- Původní operand neuvolňuje.
----------------------------------------------------------------------------------------------------
static create_temporary (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    _edtype        : in t_elementary_data_type;  -- elementární datový typ operandu
    _size          : in t_unsigned);             -- požadovaná velikost registru
-- Vytvoří operand typu [io_mem] a alokuje pro něj pracovní prostor na stacku.
----------------------------------------------------------------------------------------------------
static create_relative_address (
    _size          : in t_unsigned);             -- velikost adresy (0=automaticky)
-- Vytvoří operand typu [io_rel]. Typ operandu automaticky nastaví na [edt_offset].
-- Relativní adresa je implicitně prázdná. Pro nastavení adresy na relokabilní symbol se musí
-- použít [set_target] nebo [set_relo_*].
----------------------------------------------------------------------------------------------------
static create_condition (      
    _cc            : in icond);                  -- podmínka
-- Vytvoří operand typu [io_cc]. Typ operandu automaticky nastaví na [edt_unsigned].
----------------------------------------------------------------------------------------------------
static create_on_stack (
    _edtype        : in t_elementary_data_type;  -- elementární datový typ operandu
    _size          : in t_unsigned);             -- požadovaná velikost registru
-- Vytvoří operand typu [io_stack] reprezentující hodnotu uloženou na vrcholu stacku.
----------------------------------------------------------------------------------------------------
static set_orgtyp (
    orgtyp         : in pentity_type);           -- původní typ souvisejícího podvýrazu
-- Přiřadí operandu původní typ souvisejícího podvýrazu. Původní typ se považuje za přiřazený,
-- i když byl dodán NIL.
----------------------------------------------------------------------------------------------------
static get_orgtyp (
    context        : in iexprcontext)            -- kontext generování výrazu
    return pentity_type;
-- Zjistí původní typ souvisejícího podvýrazu. Přednost má původní typ souvisejícího podvýrazu
-- nastavený v operandu, pokud se tak nestalo, použije se původní typ z dodaného kontextu.
----------------------------------------------------------------------------------------------------
static clone (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    _old_operand   : in c_operand);              -- původní operand
-- Naklonuje dodaný operand do tohoto operandu. Všechny držené registry a další zdroje jsou od této
-- chvíle drženy nezávisle oběma operandy, takže je nutné oba uvolnit.
----------------------------------------------------------------------------------------------------
static transfer (
    _old_operand   : in out c_operand);
-- Převede původní operand [old_operand] do tohoto operandu. Původní operand poté zneplatní, 
-- neuvolní však držené registry a další zdroje, protože ty přecházejí do vlastnictví tohoto 
-- operandu. Původní operand tedy již není třeba uvolňovat, není to však na závadu.
----------------------------------------------------------------------------------------------------
static replace (
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    _old_operand   : in out c_operand);
-- Zruší původní operand a nahradí ho dodaným operandem [old_operand]. Funguje jako kombinace [free]
-- a [transfer] s tím rozdílem, že je povoleno stejný operand použít dvakrát.
----------------------------------------------------------------------------------------------------
static free (
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext);       -- kontext generování výrazu
-- Zruší operand. Pokud používal nějaké registry, uvolní je.
-- Jestliže není [free] explicitně zavoláno, zavolá se automaticky při provedené [exit] operandu.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
-- Obecné úpravy a transformace operandů.
----------------------------------------------------------------------------------------------------
-- %%TECH Operace převedení nastavení subcontextu do supercontextu je sice operací nad kontexty, ale
-- musí být implementována zde. Bližní popis cirkulární reference, která by jinak vznikla, viz
-- [ci_context].
--
static retrieve (
    inst           : in out icodeinst;           -- instance
    info           : in igeninfo;                -- informace o překladu
    subcontext     : in iexprcontext;            -- kontext podvýrazu
    context        : in out iexprcontext);       -- aktuální kontext výrazu
-- Převede operand z podřízeného kontextu do nadřazeného.
----------------------------------------------------------------------------------------------------
static refresh (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext);       -- aktuální kontext výrazu
-- Aktualizuje jména registrů v operandu.
----------------------------------------------------------------------------------------------------
static adjust_size (
    _size          : in t_unsigned);             -- nová velikost operandu
-- Upraví velikost operandu. Je-li operand typu [io_reg], tak vybere i příslušnou velikost registru.
-- Pokud registr nemá tak velkou subčást, způsobí interní chybu.
----------------------------------------------------------------------------------------------------
static adjust_edtype (
    _edtype        : in t_elementary_data_type); -- nový elementární datový typ operandu
-- Upraví elementární datový typ operandu.
----------------------------------------------------------------------------------------------------
static get_register return ireg;
-- Z operandu typu [io_reg] nebo [io_mem] předá ven registr. Pro [io_mem] vrací přednostě bázi.
----------------------------------------------------------------------------------------------------
static get_all_uni_registers return iuniregset;
-- Vrátí množinu univerzálních registrů použitých operandem.
----------------------------------------------------------------------------------------------------
static depends_on (
    _other_op      : in c_operand)               -- testovaný operand
    return t_logical;                            -- T-tento operand je závislý na dodaném
-- True, jestliže tento operand závisí na dodaném operandu [_other_op]. Závislé operandy se poznají
-- tak, že sdílejí alespoň jeden registr, s výjimkou registrů použitelných jako frame pointery 
-- (tedy EBP, EPS).
----------------------------------------------------------------------------------------------------
static transform_imm_to_rel;
-- Transformuje operand typu [io_imm] na operand typu [io_rel].
----------------------------------------------------------------------------------------------------
static transform_imm_to_mem (
    _edtype        : in t_elementary_data_type;  -- nový elementární datový typ operandu
    _size          : in t_unsigned);             -- nová velikost operandu
-- Transformuje operand typu [io_imm] na operand typu [io_mem].
----------------------------------------------------------------------------------------------------
static transform_reg_to_mem (
    _edtype        : in t_elementary_data_type;  -- nový elementární datový typ operandu
    _size          : in t_unsigned);             -- nová velikost operandu
-- Transformuje operand typu [io_reg] na operand typu [io_mem]. Registr použije jako bázi.
----------------------------------------------------------------------------------------------------
static transform_imm_or_reg_to_mem (
    _edtype        : in t_elementary_data_type;  -- nový elementární datový typ operandu
    _size          : in t_unsigned);             -- nová velikost operandu
-- Transformuje operand typu [io_reg] nebo [io_imm] na operand typu [io_mem]. Registr použije jako 
-- bázi.
----------------------------------------------------------------------------------------------------
static transform_mem_to_imm;
-- Transformuje operand typu [io_mem], který obsahuje pouze displacement a žádné registry, na 
-- operand typu [io_imm]. Velikost výsledného operandu je 4 a typ edt_address, má-li přiřazen 
-- relokabilní objekt, nebo edt_offset v ostatních případech. Z toho plyne, že případné relokace 
-- zůstanou zachovány.
----------------------------------------------------------------------------------------------------
                            


----------------------------------------------------------------------------------------------------
-- Manipulace s operandy typu [io_imm].
----------------------------------------------------------------------------------------------------
static set_imm (
    _imm           : in timm32);                 -- přímá hodnota
-- Nastaví přímou hodnotu operandu.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
-- Manipulace s operandy typu [io_cc].
----------------------------------------------------------------------------------------------------
static set_cc (
    _cc            : in icond);                  -- podmínka
-- Nastaví hotnodu podmínky operandu.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
-- Manipulace s operandy typu [io_rel].
----------------------------------------------------------------------------------------------------
static set_target (
    _target        : itarget);                   -- cíl
-- Operandu přiřadí návěští cíle.
----------------------------------------------------------------------------------------------------
static adjust_relative_address_size (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    _cc            : in icond);                  -- podmínka skoku      
-- Upraví velikost adresního pole podle vzdálenosti k cíli.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
-- Manipulace s operandy typu [io_mem].
----------------------------------------------------------------------------------------------------
static shift_displacement (
    _disp          : t_signed);                  -- posunutí
-- Přičte k operandu zadaný posuv [disp].
----------------------------------------------------------------------------------------------------
static unshift_displacement (
    _disp          : t_signed);                  -- posunutí
-- Odečte od operandu zadaný posuv [disp].
----------------------------------------------------------------------------------------------------
static shift_by_index (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    _index         : in ireg;                    -- 32bitový registr
    _scale         : in t_unsigned);             -- měřítko
-- Přičte k adresnímu operandu zadaný posuv [_index]*[_scale].
----------------------------------------------------------------------------------------------------
static shift_by_base (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    _base          : in ireg);                   -- 32bitový registr
-- Nastaví bázi operandu na registr [_base].
----------------------------------------------------------------------------------------------------
static shift_by_base_or_index (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    _index         : in ireg);                   -- 32bitový registr
-- Přičte k adresnímu operandu zadaný posuv [_index], a to ve formě indexního nebo bázového registru
-- podle toho, který je volný. Preferuje bázový registr.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
-- Relokabilní objekty.
----------------------------------------------------------------------------------------------------
static set_relo_entity (
    _entity        : in pentity);                -- relokabilní entita
-- Přiřadí k operandu relokabilní entitu.
----------------------------------------------------------------------------------------------------
static set_relo_imm (
    _expr          : in cx_expr.cx_def.pexpimm); -- relokabilní přímá hodnota
-- Přiřadí k operandu relokabilní přímou hodnotu (v podobě odpovídajícího uzlu stromu).
----------------------------------------------------------------------------------------------------
static set_relo_interface (
    _interface     : in p_class_interface);      -- interface třídy
-- Přiřadí k operandu relokabilní interface třídy reprezentující jeho fake tag.
----------------------------------------------------------------------------------------------------
static set_relo_section (
    _section       : in t_image_section);        -- sekce v image
-- Přiřadí k operandu relokabilní adresu začátku sekce v image.
----------------------------------------------------------------------------------------------------
static copy_relo (
    _old_operand   : in c_operand);
-- Zkopíruje informace o relokabilním objektu z dodaného operandu [_old_operand].
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
-- Práce s run-time atributy.
----------------------------------------------------------------------------------------------------
static set_rta_mode (
    _rta           : in rtattrib;                -- nastavovaný run-time atribut
    _rta_mode      : in t_rtattrib_mode;         -- způsob zjištění run-time atributu
    _rta_indirection : in t_rtattrib_indirection := rti_this_value); -- nepřímost atributu
-- Nastaví způsob zjištění zadaného run-time atributu tohoto operandu.
----------------------------------------------------------------------------------------------------
static set_rta_modes (
    _rta_modes     : in t_rtattrib_modes;        -- způsoby zjištění run-time atributů
    _rta_indirection : in t_rtattrib_indirection := rti_this_value); -- nepřímost atributů
-- Dávkově nastaví způsoby zjištění všech run-time atributů tohoto operandu.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
-- Pomocné low-level operace. Standardně nepoužívat!
----------------------------------------------------------------------------------------------------
static create_imm_low_level (
    _edtype        : in t_elementary_data_type;  -- elementární datový typ operandu
    _size          : in t_unsigned;              -- velikost přímé hodnoty (0=univerzální velikost)
    _imm           : in timm32);                 -- přímá hodnota
-- Vytvoří nový operand typu [io_imm].
----------------------------------------------------------------------------------------------------
static create_use_register_low_level (
    _edtype        : in t_elementary_data_type;  -- elementární datový typ operandu
    _reg           : in ireg);                   -- registr
-- Vytvoří nový operand typu [io_reg] a použije dodaný registr, ale nezvýší mu počet použití.
----------------------------------------------------------------------------------------------------
static create_memory_address_low_level (
    _edtype        : in t_elementary_data_type;  -- elementární datový typ operandu
    _size          : in t_unsigned);             -- velikost
-- Vytvoří nový operand typu [io_mem] s prázdnou bází, indexem i posunutím.
----------------------------------------------------------------------------------------------------
static create_relative_address_low_level (
    _size          : in t_unsigned);             -- velikost adresy (0=automaticky)
-- Vytvoří operand typu [io_rel]. Typ operandu automaticky nastaví na [edt_offset].
-- Relativní adresa je implicitně prázdná. Pro nastavení adresy na relokabilní symbol se musí
-- použít [set_target] nebo [set_relo_*].
----------------------------------------------------------------------------------------------------
static shift_by_base_low_level (
    _base          : in ireg);                   -- registr
-- Přičte k adresnímu operandu zadanou bázi [_base].
----------------------------------------------------------------------------------------------------
static shift_by_index_low_level (
    _index         : in ireg;                    -- registr
    _scale         : in t_unsigned);             -- měřítko
-- Přičte k adresnímu operandu zadaný posuv [_index]*[_scale].
----------------------------------------------------------------------------------------------------
static base_on_stack_low_level (
    inst           : in out icodeinst);          -- instance
-- Bázuje operand vzhledem k frame pointeru.
----------------------------------------------------------------------------------------------------
static clear_relo_low_level;
-- Zruší relokaci.
----------------------------------------------------------------------------------------------------

end c_operand;
