----------------------------------------------------------------------------------------------------
module public ca_util =
-- Překladač Flexu.
-- Různé užitečné procedury.                                                  
----------------------------------------------------------------------------------------------------
-- Ondra : 28.02.2002 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  cc_def,cc_def.cc_entity,
  cb_block,cb_block.cb_def,
  cx_expr,cx_expr.cx_def,
  cc_base,
  cc_base.cc_sym;

----------------------------------------------------------------------------------------------------
procedure a_prepare_info (
    binfo          : in out blinfo;              -- informace pro generování příkazů
    xinfo          : in out expinfo);            -- informace pro generování výrazů
-- Připraví informace pro kompilátorem generované uzly.
----------------------------------------------------------------------------------------------------
procedure a_list_append (
    list           : in out bllist;              -- kam se budou příkazy ukládat      
    bl             : in pblnode);                -- zařazovaný příkaz                 
-- Zařadí příkaz BL na konec seznamu příkazů.                                 
-- Je-li BL=NIL, nic se nestane.
----------------------------------------------------------------------------------------------------
procedure a_find_executing_range (
    context        : in tcontext;                -- kontext
    range_low      : out pentity_var;            -- spodní mez rozsahu 
    range_high     : out pentity_var);           -- horní mez rozsahu 
-- Prohledá zadaný kontext a pokud jsou obsaženy vrátí informace o rozsahu provádění.
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
class public c_class_hidden_field_helper = extend c_flex_class;
-- Třída pro práci s poli @TAG a @STATUS v instanci třídy.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    static set_context ( 
        context    : in tcontext);               -- kontext třídy
    -- Nastaví kontext pro vyhledávání skrytých složek - context typu třídy.
    ------------------------------------------------------------------------------------------------
    static a_make_set_tag (
        curr       : in tcontext;                -- kontext          
        list       : in out bllist;              -- kam se budou příkazy ukládat      
        binfo      : in blinfo;                  -- informace pro generování příkazů
        xinfo      : in expinfo;                 -- informace pro generování výrazů
        x_instance : in pexpnode;                -- výraz reprezentující instanci
        x_tag      : in pexpnode);               -- výraz reprezentující tag
    -- Naplní pole @TAG zadanou hodnotou.
    ------------------------------------------------------------------------------------------------
    static a_make_set_status (
        curr       : in tcontext;                -- kontext          
        list       : in out bllist;              -- kam se budou příkazy ukládat      
        binfo      : in blinfo;                  -- informace pro generování příkazů
        xinfo      : in expinfo;                 -- informace pro generování výrazů
        x_instance : in pexpnode;                -- výraz reprezentující instanci
        x_status   : in t_class_status_field);   -- počáteční hodnota pole @STATUS
    -- Naplní pole @STATUS zadanou počáteční hodnotou. Přiřazení se vygeneruje jen tehdy, když je
    -- počáteční hodnota neprázdná.
    ------------------------------------------------------------------------------------------------
    static a_make_add_status (
        curr       : in tcontext;                -- kontext          
        list       : in out bllist;              -- kam se budou příkazy ukládat      
        binfo      : in blinfo;                  -- informace pro generování příkazů
        xinfo      : in expinfo;                 -- informace pro generování výrazů
        x_instance : in pexpnode;                -- výraz reprezentující instanci
        x_status   : in t_class_status_flags);   -- nastavovaný příznak              
    -- Doplní do pole @STATUS uvedený příznak.
    ------------------------------------------------------------------------------------------------
    static a_make_test_status (
        curr       : in tcontext;                -- kontext          
        list       : in out bllist;              -- kam se budou příkazy ukládat      
        binfo      : in blinfo;                  -- informace pro generování příkazů
        xinfo      : in expinfo;                 -- informace pro generování výrazů
        x_precond  : in pexpnode;                -- precondition (=precondition AND THEN status=...)
        x_instance : in pexpnode;                -- výraz reprezentující instanci
        x_status   : in t_class_status_flags;    -- testovaný příznak              
        b_body     : in bllist);                 -- sekvence příkazů
    -- Zjistí, jestli je v poli @STATUS nastavený uvedený příznak, pokud ano, provede se sekvence
    -- příkazů [b_body].
    ------------------------------------------------------------------------------------------------

    end c_class_hidden_field_helper;



----------------------------------------------------------------------------------------------------
#template a_analyze_prolog (entity);
-- Prolog analýzy entity nebo typu.
-- Určeno pouze pro použití v [a_type] a [a_entity].
----------------------------------------------------------------------------------------------------

  -- zajímají nás pouze entity z aktuální parition
  if entity.partition_id<>curr_partition then return end if;

  -- analyzovat jen dosud neanalyzované entity
  if entity.analyzed<>as_none then return; end if;

  -- entita je právě analyzována
  entity.analyzed:=as_analyzing;

  -- analyzovat předka
  if entity.ancestor.isset then
    -- Poznámka: nemusíme rozlišovat, jestli je to typ nebo ne, protože do [a_entity] se stejně
    -- žádné typy nedostanou (viz též [verify] níže).
    current procedure(entity.ancestor.getcentity);
    end if;

  #end a_analyze_prolog;



----------------------------------------------------------------------------------------------------
#template a_analyze_epilog (entity);
-- Epilog analýzy entity nebo typu.
-- Určeno pouze pro použití v [a_type] a [a_entity].
----------------------------------------------------------------------------------------------------
  
  -- pro non-standalone partition entitu zařadit na seznam exportovaných entit metodou Flex
  l_try_add_to_flex_export_list(^entity);  

  -- symbol byl analyzován
  entity.analyzed:=as_analyzed;

  #end a_analyze_epilog;



end ca_util;
