----------------------------------------------------------------------------------------------------
module private fj_main =
-- Flex Command-line Compiler
----------------------------------------------------------------------------------------------------
{
TO DO:

+ -- udělat více kompilačních jednotek, podle příznaku [global] WITHnout již existující
     kompilační jednotky,

+ -- dodělat generování exportu všech public entit dané kompilační jednotky,

  -- dodělat rozpoznání volání procedur/proměnných z jiných kompilačních jednotek a generovat
     exportní/importní stuby,

  -- celé se to naučit spouštět,
  
  -- uvolňovat paměť po non-[global] kompilačních jednotkách,
  
  -- dovolit překlad programu jako DLL s implicitním exportem,
  
* -- dodělat vypucování seznamu chyb a podobných globálních proměnných.

fjitc q:\devel\samples\hello_world\hello_world.src -odx:d:\ol40\output\jit


Překlad:
  -- přeložit run-time partition
  compile -pt:runtime -nd -vl:0 -sdr:q:\devel\lib

  -- přeložit sdílené knihovny
  compile -pt:global q:\devel\lib\sys\sys.src   -odx:d:\ol40\output\jit
  compile -pt:global q:\devel\lib\smpl\smpl.src -odx:d:\ol40\output\jit
  compile -pt:global q:\devel\lib\ampl\ampl.src -odx:d:\ol40\output\jit

  -- a konec
  exit

Načtení:
  -- načíst run-time partition
  load -pt:runtime -nd -vl:0 -sdr:q:\devel\lib

  -- načíst sdílené knihovny
  load -pt:global d:\ol40\output\jit\rtl.ctm
  load -pt:global d:\ol40\output\jit\smpl.ctm
  load -pt:global d:\ol40\output\jit\ampl.ctm

  -- pokračujeme
  -- exit
}

with
  standard,
  standard.characters,
  standard.strings,
  standard.program_control,
  cc_def,
  ff_lib,
  ff_lib.ff_cmd_line,
  fj_engine;

var
  jit_engine       : c_flex_jit_engine;          -- vlastní JIT engine

----------------------------------------------------------------------------------------------------
procedure process_load (
    cmd            : in t_char32ustr;            -- příkaz
    cmd_output     : in class c_text_writer;     -- výstup pro zobrazení výstupu příkazu
    ignore_first   : in t_logical := false) =    -- T-ignore the first "parameter"
-- Zpracuje dodaný příkaz k načtení partition podle CTM souboru.
----------------------------------------------------------------------------------------------------
var
  config           : c_compilation_config;       -- konfigurace překladu

begin
  -- zpracovat dodaný příkaz
  parse_command_line(^cmd,cmd_output,config,ignore_first);

  -- není-li k dispozici jméno souboru, není ani co překládat
  if config.src_name=nil then return end if;

  -- připravit všechna jména souborů
  config.prepare_names;

  -- spustit překlad
  jit_engine.jit_load(cmd_output,config);

catch
  -- nepustit dál chyby v parametrech
  when fcc_error do -- nic nedělat
  end process_load;



----------------------------------------------------------------------------------------------------
procedure process_compile (
    cmd            : in t_char32ustr;            -- příkaz
    cmd_output     : in class c_text_writer;     -- výstup pro zobrazení výstupu příkazu
    ignore_first   : in t_logical := false) =    -- T-ignore the first "parameter"
-- Zpracuje dodaný příkaz pro překlad partition.
----------------------------------------------------------------------------------------------------
var
  config           : c_compilation_config;       -- konfigurace překladu
  part_result      : t_partition_result;         -- požadovaný výstupní tvar partition

begin
  -- zpracovat dodaný příkaz
  parse_command_line(^cmd,cmd_output,config,ignore_first);

  -- není-li k dispozici jméno souboru, není ani co překládat
  if config.src_name=nil then return end if;

  -- připravit všechna jména souborů
  config.prepare_names;

  -- podle typu partition zvolit výstupní tvar partition
  if config.partition_type=part_temporary
    then part_result:=tpr_auto_select;
    else part_result:=tpr_library;
    end if;
  
  -- spustit překlad
  if jit_engine.jit_compile(cmd_output,config,part_result) then
    -- není třeba řešit, jestli se to podařilo nebo ne
    end if;

catch
  -- nepustit dál chyby v parametrech
  when fcc_error do -- nic nedělat
  end process_compile;



----------------------------------------------------------------------------------------------------
procedure fjitc_process_loop (
    input          : in p_text_reader;           -- zdroj příkazů
    cmd_output     : in class c_text_writer;     -- výstup pro zobrazení výstupu jednotlivých příkazů
    prompt         : in p_text_writer := nil;    -- výstup pro zobrazení promptu 
    exit_jit       : out t_logical := false) =   -- T-přišel příkaz na ukončení celého JITátoru
-- Smyčka zpracování příkazů pro JIT kompilátor.
----------------------------------------------------------------------------------------------------
with
  standard.console;

var
  eod              : t_logical;

begin
  loop
    declare var
      cmd          : aliased t_char32lstr;       -- příkazový řádek
      cmd_line     : p_command_line_parameters;  -- rozparsovaný příkazový řádek

    begin
      -- zobrazit prompt
      if prompt<>nil then
        prompt^.write('$FJITC>');
        end if;

      -- načíst příkaz
      input^.read_line(cmd,eod);

      -- echo
      if prompt=nil then
        write_line(cmd);
        end if;

      -- rozložit na jednotlivé parametry
      parse_command_line_parameters(^cmd,cmd_line);

      -- zpracovat příkaz, je-li vůbec nějaký k dispozici
      if cmd_line^:length<>0 then
        -- požadavek na ukončení JITátoru
        if str_to_upper(cmd_line^[1]^)='EXIT' then
          exit_jit:=true;
          break;

        -- načtení modulu
        elsif str_to_upper(cmd_line^[1]^)='LOAD' then
          process_load(cmd,cmd_output,for ignore_first use true);

        -- překlad modulu
        elsif str_to_upper(cmd_line^[1]^)='COMPILE' then
          process_compile(cmd,cmd_output,for ignore_first use true);

{ %%TODO(FJITC) Dodělat [standard.program_control.run_external_command] a zprovoznit.
        -- provést příkaz shellu
        elsif str_to_upper(cmd_line^[1]^)='EXEC' then
          process_compile(cmd,cmd_output,for ignore_first use true);
}
        -- zobrazit help
        elsif str_to_upper(cmd_line^[1]^)='HELP' then
          if prompt<>nil then
            print_command_line_help(prompt^);
            end if;

        -- komentář
        elsif cmd_line^[1]^:length>=2 and then cmd_line^[1]^[1]="-" and then cmd_line^[1]^[2]="-" then
          -- ignorovat

        -- jiným příkazům nerozumíme
        else
          if prompt<>nil 
            then prompt^.write_line('Unknown command, type HELP to get list of available commands');
            else raise fcc_error;
            end if;
          end if;
        end if;

      -- prázdný řádek tomu na tomto místě bude slušet
      if prompt<>nil then 
        prompt^.write_line('');
        end if;

    leave
      -- uvolnit paměť
      discard_command_line_parameters(cmd_line);
      end declare;
    until eod;
  end fjitc_process_loop;



----------------------------------------------------------------------------------------------------
procedure fjitc_main =
-- Hlavní program.
----------------------------------------------------------------------------------------------------
with
  standard.files,
  standard.console;

var
  exit_jit         : t_logical;                  -- T-přišel příkaz na ukončení celého JITátoru

begin
  -- initial copyright notice
  write_line(flex_product_name); 
  write_line(flex_copyright);
#if #declared flex_license_notice; then;
  write_line(flex_license_notice);
#end if;
  write_line('');

  -- inicializovat JIT engine
  jit_engine.jit_initialize(console_writer^);

  -- zpracovat úvodní příkazy a nastavení
  declare var
    config         : c_compilation_config;       -- konfigurace překladu

  begin
    -- zpracovat globální příkazovou řádku
    declare var
      full_cmd_line: p_char32ustr;               -- příkazový řádek

    begin
      -- získat příkazový řádek
      get_command_line(full_cmd_line);

      -- zpracovat řádkové parametry
      parse_command_line(full_cmd_line,console_writer^,config,for pars_required use false);

    leave
      -- uvolnit paměť
      discard full_cmd_line;
      end declare;

    -- zpracovat prolog skript
    declare var  
      prolog_reader  : c_text_file_reader;         -- soubor s JIT prologem
      prolog_decoder : aliased c_character_decoder_utf8; -- dekodér konfiguračního souboru

    begin
      -- otevřít JIT prolog
      if config.src_name<>nil
        then prolog_reader.open(config.src_name^,^prolog_decoder,tfss_shared_read,false);
        else prolog_reader.open('fjitc_prolog.txt',^prolog_decoder,tfss_shared_read,false);
        end if;

      -- zpracovat JIT prolog
      fjitc_process_loop(^c_text_reader:(prolog_reader),console_writer^,nil,exit_jit);
      if exit_jit then return; end if;

    catch
      -- odchytit případnou vyjímku [file_error] --- není prolog file
      when file_error do 
        if config.src_name<>nil then
          write('Cannot open or read '); write_line(config.src_name^);
          end if;

    leave
      -- zavřít JIT prolog
      prolog_reader.close;
      end declare;
    end declare;

  -- zpracovávat příkazy od uživatele
  fjitc_process_loop(console_reader,console_writer^,console_writer,exit_jit);
  if exit_jit then return; end if;

catch
  -- nepustit dál chyby v parametrech
  when fcc_error do -- nic nedělat

leave
  -- finalizovat JIT engine
  jit_engine.jit_finalize(console_writer^);
  end fjitc_main;

end fj_main;