----------------------------------------------------------------------------------------------------
module private fj_engine =
-- Flex Just-in-Time Engine.
----------------------------------------------------------------------------------------------------
-- Ondra : 15.12.2003 : Created.
----------------------------------------------------------------------------------------------------

with
  cc_def.cc_gc;

----------------------------------------------------------------------------------------------------
class private c_flex_jit_engine = 
-- Flex Just-in-Time Engine.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    static jit_initialize =
    -- Inicializuje JIT stroj.
    ------------------------------------------------------------------------------------------------
    with
      ff_lib.ff_files;

    use
      cc_def.cc_desc,
      cc_def.cc_var;

    begin
      -- připravit seznam jmen dostupných souborů
      init_external_file_source;

      -- zvolit cílovou platformu (je identická s platformou, pro kterou je tento JIT stroj přeložen)
      cc_def.cc_desc.set_os_family(#environment target_os_family;,os);
      cc_def.cc_desc.set_os_type(#environment target_os_type;,os);
      cc_def.cc_desc.set_os_subsystem(#environment target_os_subsystem_type;,os);
      cc_def.cc_desc.set_cpu_architecture(#environment target_machine_architecture;,os);

      -- nastavit prislusne identifikatory do file_source, aby vedel jake jsou pripustne pripony souboru
      p_file_source_external_files(cc_def.cc_var.cfg_files)^.add_default_extensions;

      -- zapnout podporu pro compile-time metadata
      cc_def.cc_var.cfg_ctm_level:=cc_def.cc_var.ctml_public;

      -- inicializovat kompilátor
      init(flex_version_string);
      end jit_initialize;



    ------------------------------------------------------------------------------------------------
    static jit_compile =
    -- Přeloží kompilační jednotku.
    ------------------------------------------------------------------------------------------------
    with
      standard.names,
      standard.strings,
      cc_def,
      cc_def.cc_var,
      ff_lib.ff_text_output;

    var
      part_extid   : p_external_entity_ident;    -- externí identifikátor entity

    begin
      -- prekladame docasnou partition?
      if config.partition_type=part_temporary then
        -- ano - vytvor pro ni docasnou alokacni zonu
        c_garbage_collector.get_instance^.push_create_alloc_zone^.set_name('part_temporary');
        end if;

      -- připravit externí identifikátor partition (je identický se základem jména DLL)
      declare var
        name1      : c_file_name;                -- dekomponované jméno DLL (1)
        name2      : p_file_name;                -- dekomponované jméno DLL (2)
        base_name  : p_text_name;                -- bázové jméno DLL

      begin
        -- ze jména DLL převzít bázové jméno
        name1.decompose_name(config.lib_name^);
        name1.get_name_without_path(name2);
      --name2^.remove_last_extension;
        name2^.compose_name(base_name);

        -- sestavit z něj externí identifikátor
        part_extid:=string_to_external_entity_ident(str_to_upper(base_name^));

        -- zaregistruj do globalniho gc
        c_garbage_collector.get_instance^.register_memblock(part_extid);

      leave
        -- uvolnit již nepotřebnou paměť
        discard name2;
        discard base_name;
        end declare;
      
      -- přeložit
      compile(os,config.src_name^,config.exe_name^,config.lib_name^,config.lst_name^,config.ctm_name^,config.exe_directory^,config.sec_level,config.sec_required,config.partition_type,part_result,part_extid,config.userid);

      -- vypsat seznam chyb na obrazovku a do listingu
      print_errors(os);
      print_errors(get_listing_writer^);

      -- podařilo se zkompilovat?
      result:=not ce^.testerror;
    leave
      -- prekladame docasnou partition?
      if config.partition_type=part_temporary then
        -- kolektuj
        c_garbage_collector.get_instance^.collect;
        
        -- zrus zonu
        c_garbage_collector.get_instance^.pop_discard_alloc_zone;
        end if;

      -- finalizovat partition
      finalize_partition;
      end jit_compile;



    ------------------------------------------------------------------------------------------------
    static jit_load =
    -- Načte compile-time metadat kompilační jednotky.
    ------------------------------------------------------------------------------------------------
    with
      ff_lib.ff_text_output;

    begin
      -- přeložit
      load(os,config.lst_name^,config.ctm_name^);

      -- vypsat seznam chyb na obrazovku a do listingu
      print_errors(os);
      print_errors(get_listing_writer^);
      
    leave
      -- finalizovat partition
      finalize_partition;
      end jit_load;



    ------------------------------------------------------------------------------------------------
    static jit_finalize =
    -- Ukončí JIT stroj.
    ------------------------------------------------------------------------------------------------
    begin
      -- vynest smeti
      c_garbage_collector.get_instance^.collect;
      end jit_finalize;

    end c_flex_jit_engine;

end fj_engine;