----------------------------------------------------------------------------------------------------
module private ci_abi =
-- P©eklada‡ Flexu.
-- 
----------------------------------------------------------------------------------------------------
-- Ondra : 29.03.2002 : Vytvo©il
----------------------------------------------------------------------------------------------------

{%%TODO(ABSTRACT) P©edˆlat na override abstraktn¡ch procedur }



----------------------------------------------------------------------------------------------------
procedure do_set_convention (
    ent            : in out tentity;             -- generovan˜ symbol
    call           : in icallconvention) =       -- volac¡ konvence
-- Vlastni prirazeni volaci konvence
----------------------------------------------------------------------------------------------------
with
  cc_base,cc_base.cc_sym,cc_def.cc_codes,cc_def.cc_var;

var
  srch             : tentitysearch;
  pent             : pentity;

begin
  
  pent:=^ent;

  -- dosadit
  set_call_conv(ent, call);

  -- omezen¡ na dynamick‚ atributy parametr–
  if call=icc_system then
    -- zpracovat v¨echny parametry
    if ent.etype in ets_subprogram 
      then srch.find_et_first(pentity_subprogram(pent)^.typ.getctype,rc_primary,et_param,[]);
      else srch.find_et_first(^ent,rc_primary,et_param,[]);
      end if;

    while srch.psym<>nil loop
      -- je-li typ parametru pointer, pak nesm¡ obsahovat ‘ dn‚ atributy
      if pentity_param(srch.psym)^.typ.isset and (pentity_param(srch.psym)^.typ.getctype^.stype=dt_pointer)
      and (pentity_param(srch.psym)^.typ.getctype^.pattrib<>rtattribset:[]) then
        ce^.seterror({CCERR=}000336,ce_badconvention);
        ce^.setparam(entityident_to_string(icallconventiontxt[call]));
        ce^.loadpos;
        {%%X pozice }
        ce^.resumeerror;
        end if;
    {
      -- ‘ dn‚ dynamick‚ atributy nesm¡ b˜t ji‘ pou‘it‚
      -- (k t‚to situaci m–‘e doj¡t, pokud je dan˜ typ
      -- procedury sd¡len v¡ce procedurami)
      if pentity_param(srch.psym)^.rta_used<>[] then
        ce^.seterror({CCERR=}000337,ce_badconvention);
        ce^.setparam(entityident_to_string(ticallconventiontxt[call]));
        ce^.loadpos;
        {%%X pozice }
        ce^.resumeerror;
        end if;
    }
      {%%X ¨patnˆ ! }
      -- nebudou se p©ed vat ‘ dn‚ dynamick‚ atributy
      pentity_param(srch.psym)^.rta_used:=rtattribset:[];

      -- zafixovat pr zdnou mno‘inu pou‘it˜ch atribut–
      pentity_param(srch.psym)^.rta_fixed:=true;

      -- dal¨¡ parametr
      srch.find_et_next;
      end loop;
    end if;

  end do_set_convention;  



----------------------------------------------------------------------------------------------------
procedure i_set_convention_proctype : current module:ancestor.i_set_convention_proctype:base =
-- P©i©ad¡ default volac¡ konvenci.
----------------------------------------------------------------------------------------------------
begin
  -- musi to byt proceduralni typ
  verify({VERIFY=}000913,proctype.stype<>dt_procedure);
  
  -- a dosad
  do_set_convention(pentity(^proctype)^, call);
  end i_set_convention_proctype;



----------------------------------------------------------------------------------------------------
procedure i_set_convention_subprogram : current module:ancestor.i_set_convention_subprogram:base =
-- P©i©ad¡ default volac¡ konvenci.
----------------------------------------------------------------------------------------------------
with
  cc_base,cc_base.cc_sym,cc_def.cc_codes,cc_def.cc_var;

var
  srch             : tentitysearch;

begin
  -- p©ipravit instanci
  i_prepare(pentity_code(^subprog)^);
 
  -- a dosad
  do_set_convention(pentity(^subprog)^, call);
  end i_set_convention_subprogram;



----------------------------------------------------------------------------------------------------
procedure i_get_convention_proctype : current module:ancestor.i_get_convention_proctype:base =
-- Volac¡ konvence zadan‚ procedury; nen¡-li p©i©azena, vr t¡ icc_default.
----------------------------------------------------------------------------------------------------
begin
  -- musi byt urcite proceduralni
  verify({VERIFY=}000916,proctype.stype<>dt_procedure);

  result:=get_call_conv(pentity(^proctype)^);
  end i_get_convention_proctype;



----------------------------------------------------------------------------------------------------
procedure i_get_convention_subprogram : current module:ancestor.i_get_convention_subprogram:base =
-- Volac¡ konvence zadan‚ procedury; nen¡-li p©i©azena, vr t¡ icc_default.
----------------------------------------------------------------------------------------------------
begin
  result:=get_call_conv(pentity(^subprog)^);
  end i_get_convention_subprogram;



----------------------------------------------------------------------------------------------------
procedure i_set_stackframe : current module:ancestor.i_set_stackframe:base =
-- P©i©ad¡ default typ stackframe.
----------------------------------------------------------------------------------------------------
begin
  -- p©ipravit instanci
  i_prepare(curr);

  -- dosadit default typ stackframe
  picodegen_subprog(curr.codegen)^.def_frame:=frame;
  end i_set_stackframe;



----------------------------------------------------------------------------------------------------
procedure i_get_stackframe : current module:ancestor.i_get_stackframe:base =
-- Typ stackframe zadan‚ procedury; nen¡-li p©i©azen, vr t¡ icc_default.
----------------------------------------------------------------------------------------------------
begin
  if curr.codegen=nil
    then result:=isf_default;
    else result:=picodegen_subprog(curr.codegen)^.def_frame;
    end if;
  end i_get_stackframe;



----------------------------------------------------------------------------------------------------
entry =
----------------------------------------------------------------------------------------------------
begin
  current module:ancestor.i_set_convention_proctype:=^i_set_convention_proctype;
  current module:ancestor.i_set_convention_subprogram:=^i_set_convention_subprogram;
  current module:ancestor.i_get_convention_proctype:=^i_get_convention_proctype;
  current module:ancestor.i_get_convention_subprogram:=^i_get_convention_subprogram;
  current module:ancestor.i_set_stackframe:=^i_set_stackframe;
  current module:ancestor.i_get_stackframe:=^i_get_stackframe;
  end entry;



end ci_abi;
