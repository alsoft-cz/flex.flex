----------------------------------------------------------------------------------------------------
module private ci_abi =
-- Překladač Flexu.
-- 
----------------------------------------------------------------------------------------------------
-- Ondra : 29.03.2002 : Vytvořil
----------------------------------------------------------------------------------------------------

{%%TODO(ABSTRACT) Předělat na override abstraktních procedur }



----------------------------------------------------------------------------------------------------
procedure do_set_convention (
    ent            : in out class tentity;       -- generovaný symbol
    call           : in icallconvention) =       -- volací konvence
-- Vlastni prirazeni volaci konvence
----------------------------------------------------------------------------------------------------
with
  cc_base,cc_base.cc_sym,cc_def.cc_codes,cc_def.cc_var;

var
  srch             : tentitysearch;
  pent             : pentity;

begin
  
  pent:=^ent;

  -- dosadit
  set_call_conv(ent,call);

  -- omezení na dynamické atributy parametrů
  if call=icc_system then
    -- zpracovat všechny parametry
    if ent.etype in ets_subprogram 
      then srch.find_et_first(pentity_subprogram(pent)^.typ.getctype,rc_primary,et_param,[]);
      else srch.find_et_first(^ent,rc_primary,et_param,[]);
      end if;

    while srch.psym<>nil loop
      -- je-li typ parametru pointer, pak nesmí obsahovat žádné atributy
      if pentity_param(srch.psym)^.typ.isset and (pentity_param(srch.psym)^.typ.getctype^.stype=dt_pointer)
      and (pentity_param(srch.psym)^.typ.getctype^.pattrib<>rtattribset:[]) then
        ce^.seterror({CCERR=}000336,ce_badconvention);
        ce^.setparam(entityident_to_string(icallconventiontxt[call]));
        ce^.loadpos;
        {%%X pozice }
        ce^.resumeerror;
        end if;
    {
      -- žádné dynamické atributy nesmí být již použité
      -- (k této situaci může dojít, pokud je daný typ
      -- procedury sdílen více procedurami)
      if pentity_param(srch.psym)^.rta_used<>[] then
        ce^.seterror({CCERR=}000337,ce_badconvention);
        ce^.setparam(entityident_to_string(ticallconventiontxt[call]));
        ce^.loadpos;
        {%%X pozice }
        ce^.resumeerror;
        end if;
    }
      {%%X špatně ! }
      -- nebudou se předávat žádné dynamické atributy
      pentity_param(srch.psym)^.rta_used:=rtattribset:[];

      -- zafixovat prázdnou množinu použitých atributů
      pentity_param(srch.psym)^.rta_fixed:=true;

      -- další parametr
      srch.find_et_next;
      end loop;
    end if;

  end do_set_convention;  



----------------------------------------------------------------------------------------------------
procedure i_set_convention_proctype : current module:ancestor.i_set_convention_proctype:base =
-- Přiřadí default volací konvenci.
----------------------------------------------------------------------------------------------------
begin
  -- musi to byt proceduralni typ
  verify({VERIFY=}000913,proctype.stype<>dt_procedure);
  
  -- a dosad
  do_set_convention(proctype,call);
  end i_set_convention_proctype;



----------------------------------------------------------------------------------------------------
procedure i_set_convention_subprogram : current module:ancestor.i_set_convention_subprogram:base =
-- Přiřadí default volací konvenci.
----------------------------------------------------------------------------------------------------
with
  cc_base,cc_base.cc_sym,cc_def.cc_codes,cc_def.cc_var;

var
  srch             : tentitysearch;

begin
  -- připravit instanci
  i_prepare(subprog);
 
  -- a dosad
  do_set_convention(subprog,call);
  end i_set_convention_subprogram;



----------------------------------------------------------------------------------------------------
procedure i_get_convention_proctype : current module:ancestor.i_get_convention_proctype:base =
-- Volací konvence zadané procedury; není-li přiřazena, vrátí icc_default.
----------------------------------------------------------------------------------------------------
begin
  -- musi byt urcite proceduralni
  verify({VERIFY=}000916,proctype.stype<>dt_procedure);

  result:=get_call_conv(proctype);
  end i_get_convention_proctype;



----------------------------------------------------------------------------------------------------
procedure i_get_convention_subprogram : current module:ancestor.i_get_convention_subprogram:base =
-- Volací konvence zadané procedury; není-li přiřazena, vrátí icc_default.
----------------------------------------------------------------------------------------------------
begin
  result:=get_call_conv(subprog);
  end i_get_convention_subprogram;



----------------------------------------------------------------------------------------------------
procedure i_set_stackframe : current module:ancestor.i_set_stackframe:base =
-- Přiřadí default typ stackframe.
----------------------------------------------------------------------------------------------------
begin
  -- připravit instanci
  i_prepare(curr);

  -- dosadit default typ stackframe
  picodegen_subprog(curr.codegen)^.def_frame:=frame;
  end i_set_stackframe;



----------------------------------------------------------------------------------------------------
procedure i_get_stackframe : current module:ancestor.i_get_stackframe:base =
-- Typ stackframe zadané procedury; není-li přiřazen, vrátí icc_default.
----------------------------------------------------------------------------------------------------
begin
  if curr.codegen=nil
    then result:=isf_default;
    else result:=picodegen_subprog(curr.codegen)^.def_frame;
    end if;
  end i_get_stackframe;



----------------------------------------------------------------------------------------------------
entry =
----------------------------------------------------------------------------------------------------
begin
  current module:ancestor.i_set_convention_proctype:=^i_set_convention_proctype;
  current module:ancestor.i_set_convention_subprogram:=^i_set_convention_subprogram;
  current module:ancestor.i_get_convention_proctype:=^i_get_convention_proctype;
  current module:ancestor.i_get_convention_subprogram:=^i_get_convention_subprogram;
  current module:ancestor.i_set_stackframe:=^i_set_stackframe;
  current module:ancestor.i_get_stackframe:=^i_get_stackframe;
  end entry;



end ci_abi;
