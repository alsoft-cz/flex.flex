----------------------------------------------------------------------------------------------------
class private c_os_specific_win32 =
-- Překladač Flexu.
-- Vlastnosti specifické pro konkrétní operační systém.
----------------------------------------------------------------------------------------------------
-- Ondra : 13.01.2003 : Vytvořil.
----------------------------------------------------------------------------------------------------

with
  cc_def.cc_gc,
  cc_def.cc_var,
  cc_def.cc_codes,
  cc_base,
  cc_base.cc_sym,
  cc_base.cc_options;



----------------------------------------------------------------------------------------------------
override setconvention =
-- Nastaví volací konvenci procedury.
----------------------------------------------------------------------------------------------------
with
  -- %%TODO(PORTABILITY) Tahle závistost se mi nelíbí
  cp_cpu.cp_ia32.ci_abi;

var
  call             : icallconvention;  -- volací konvence

begin
  
  verify({VERIFY=}000939,proc=nil);

  -- podprogram?
  if proc^.etype in ets_subprogram then
    -- nemá již přiřazenu volací konvenci ?
    if i_get_convention_subprogram^(pentity_subprogram(proc)^)<>icc_default or
       i_get_convention_proctype^(pentity_subprogram(proc)^.typ.getctype^)<>icc_default then

      ce^.seterror({CCERR=}000389,ce_conventionset);
      ce^.setparam(sym_get_qid(proc));
      {%%POS}
      ce^.raiseerror;
      end if;

    -- určit volací konvenci
    i_id_to_convention(id,call);
    if call=icc_default then
      ce^.seterror({CCERR=}000390,ce_i_convention);
      ce^.setparam(entityident_to_string(id));
      {%%POS}
      ce^.raiseerror;
      end if;

    -- přiřadit konvenci
    i_set_convention_subprogram^(pentity_subprogram(proc)^,call);
  
  -- proceduralni typ?
  elsif proc^.etype=et_type and then pentity_type(proc)^.stype=dt_procedure then
    -- nemá již přiřazenu volací konvenci ?
    if i_get_convention_proctype^(pentity_type(proc)^)<>icc_default then
      ce^.seterror({CCERR=}000554,ce_conventionset);
      ce^.setparam(sym_get_qid(proc));
      {%%POS}
      ce^.raiseerror;
      end if;

    -- určit volací konvenci
    i_id_to_convention(id,call);
    if call=icc_default then
      ce^.seterror({CCERR=}000556,ce_i_convention);
      ce^.setparam(entityident_to_string(id));
      {%%POS}
      ce^.raiseerror;
      end if;

    -- přiřadit konvenci
    i_set_convention_proctype^(pentity_type(proc)^,call);

  else
    -- jen proceduralni typy a podprogramy
    verify({VERIFY=}000910, true);
    end if;
  end setconvention;



----------------------------------------------------------------------------------------------------
override setlibrary =
-- Nastaví typ knihovny pro modul
----------------------------------------------------------------------------------------------------
var
  lib              : tlibrarytype;

begin
  -- chybny parametr?
  verify({VERIFY=}000658,modl=nil);   
  
  -- ma modul jiz definovanou informaci pro knihovnu?
  if modl^.lib_info<>nil then
    ce^.seterror({CCERR=}000391,ce_libtyped);
    ce^.loadpos;
    ce^.resumeerror;
    return;
    end if;

#if #declared hynek; #and then; hynek then;     
  #error 'Málo okomentovaný kód';
#end if;
     
  lib:=tlt_system;
  
  id_to_librarytype(id,lib);

  -- identifikator je platny
  new plibraryinfo(modl^.lib_info);
  c_garbage_collector.get_instance^.register_record(modl^.lib_info);

  -- vytvoren?
  verify({VERIFY=}000659,modl^.lib_info=nil);   
    
  plibraryinfo(modl^.lib_info)^.lib_type:=lib;

catch
  when unknown_libtype do
      -- identifikator je neplatny
      ce^.seterror({CCERR=}000392,ce_libtypeunknown);
      ce^.setparam(entityident_to_string(id));
      ce^.loadpos;
      ce^.resumeerror;
  end setlibrary;


                  
----------------------------------------------------------------------------------------------------
#template copy_name (dest,src);
-- Zkopíruje dodané jméno do zadaného cíle. Provede alokaci paměti. Jméno nekopíruje, je-li prázdné.
----------------------------------------------------------------------------------------------------
  if src<>'' then
    new dest range src:length;
    c_garbage_collector.get_instance^.register_memblock(dest);
    dest^:=src;
    end if;
  #end copy_name;



----------------------------------------------------------------------------------------------------
#template export_scheme (export_allowance_check);
-- Schéma procedury pro export entity.
----------------------------------------------------------------------------------------------------
  verify({VERIFY=}000660,entity=nil);

  -- %%TODO(PORTABILITY) Testy na exportovatelnost entity podle všeho patří do vyšší, obecné vrstvy.
  
  -- ma entita již definovanou informaci pro export?
  if entity^.export_info<>nil then
    if try_export 
      then return 
      else 
        ce^.seterror({CCERR=}000393,ce_exported);
        ce^.setparam(sym_get_qid(entity));
        ce^.loadpos;
        ce^.resumeerror;
        end if;
    end if;

  -- kontrola povolení exportu
  export_allowance_check;

  -- založit informace o exportu
  new pexportinfo(entity^.export_info);
  c_garbage_collector.get_instance^.register_record(entity^.export_info);

  -- doplnit exportní jméno
  copy_name(pexportinfo(entity^.export_info)^.export_name,extname);
  #end export_scheme;



----------------------------------------------------------------------------------------------------
override export_compile =
-- Export kompilační jednotky do externí knihovny pod jménem [expname].
----------------------------------------------------------------------------------------------------
begin
  #expand export_scheme;
    #for export_allowance_check use; -- není co kontrolovat
    #end export_scheme;
  end export_compile;



----------------------------------------------------------------------------------------------------
override export_program =
-- Export programu do externí knihovny pod jménem [expname].
----------------------------------------------------------------------------------------------------
begin
  #expand export_scheme;
    #for export_allowance_check use; -- není co kontrolovat
    #end export_scheme;
  end export_program;



----------------------------------------------------------------------------------------------------
override export_static_subprogram =
-- Export statického podprogramu do externí knihovny pod jménem [expname].
----------------------------------------------------------------------------------------------------
begin
  #expand export_scheme;
    #for export_allowance_check use; -- není co kontrolovat
    #end export_scheme;
  end export_static_subprogram;



----------------------------------------------------------------------------------------------------
override export_variable =
-- Export proměnné do externí knihovny pod jménem [expname].
----------------------------------------------------------------------------------------------------
begin
  #expand export_scheme;
    #for export_allowance_check use;
        -- %%TODO(PORTABILITY) Testy na exportovatelnost entity podle všeho patří do vyšší, obecné vrstvy.
        
        -- %%TODO(HYNEK) - dodelat export taskovych promennych
        -- pouze taskové a statické promenne
        if entity^.mclass<>mc_static {and variable^.mclass<>mc_task} then
          if try_export
            then return
            else
              ce^.seterror({CCERR=}000555,ce_export_var_restrict);
              ce^.setparam(sym_get_qid(entity));
              ce^.loadpos;
              ce^.resumeerror;
              end if;
          end if;
    #end export_scheme;
  end export_variable;



----------------------------------------------------------------------------------------------------
override create_import_info =
-- Vytvoří importní informace a naplní je dodanými jmény externí entity a knihovny.    
----------------------------------------------------------------------------------------------------
begin
  -- založit informace o importu
  new pimportinfo(import_info);
  c_garbage_collector.get_instance^.register_record(pimportinfo(import_info));

  -- doplnit importní jméno
  copy_name(pimportinfo(import_info)^.extname,extname);
  copy_name(pimportinfo(import_info)^.libname,libname);
  end create_import_info;


  
----------------------------------------------------------------------------------------------------
override clone_import_info =
-- Vytvoří kopii importních informací.
----------------------------------------------------------------------------------------------------
begin
  -- založit informace o importu
  new pimportinfo(new_import_info);
  c_garbage_collector.get_instance^.register_record(pimportinfo(new_import_info));
  
  -- zkopírovat vybrané údaje
  if pimportinfo(old_import_info)^.extname<>nil then copy_name(pimportinfo(new_import_info)^.extname,pimportinfo(old_import_info)^.extname^) end if;
  if pimportinfo(old_import_info)^.libname<>nil then copy_name(pimportinfo(new_import_info)^.libname,pimportinfo(old_import_info)^.libname^) end if;
  end clone_import_info;
  
  

----------------------------------------------------------------------------------------------------
#template import_scheme (import_allowance_check);
-- Schéma procedury pro import entity.
----------------------------------------------------------------------------------------------------
  verify({VERIFY=}001330,entity=nil);

  -- %%TODO(PORTABILITY) Testy na importovatelnost entity podle všeho patří do vyšší, obecné vrstvy.
  
  -- ma entita již definovanou informaci pro import?
  if entity^.import_info<>nil then
    if try_import 
      then return 
      else 
        ce^.seterror({CCERR=}000642,ce_imported);
        ce^.setparam(sym_get_qid(entity));
        ce^.loadpos;
        ce^.resumeerror;
        end if;
    end if;
    
  -- musí existovat pouze neúplná deklarace
  if entity^.declared<>etd_incomplete or entity^.evaluated<>etd_incomplete then
    ce^.seterror({CCERR=}000087,ce_cantimport);
    ce^.setparam(sym_get_qid(entity));
    ce^.loadpos;
    ce^.resumeerror;
    end if;

  -- kontrola povolení importu
  import_allowance_check;

  -- založit informace o importu a doplnit údaje
  create_import_info(extname,libname,entity^.import_info);
  #end import_scheme;



----------------------------------------------------------------------------------------------------
override import_compile =
-- import kompilační jednotky do externí knihovny pod jménem [impname].
----------------------------------------------------------------------------------------------------
begin
  #expand import_scheme;
    #for import_allowance_check use; -- není co kontrolovat
    #end import_scheme;
  end import_compile;



----------------------------------------------------------------------------------------------------
override import_static_subprogram =
-- import statického podprogramu do externí knihovny pod jménem [impname].
----------------------------------------------------------------------------------------------------
begin
  #expand import_scheme;
    #for import_allowance_check use; -- není co kontrolovat
    #end import_scheme;
  end import_static_subprogram;



----------------------------------------------------------------------------------------------------
override import_variable =
-- import proměnné do externí knihovny pod jménem [impname].
----------------------------------------------------------------------------------------------------
begin
  -- s importem proměnných je problém, pokud jsou taskové, protože kombinaci [vm_ref]+[vm_index] neumíme
  unimplemented({UNIMP=}000286);
  end import_variable;



----------------------------------------------------------------------------------------------------
override getimagebase =
-- Vrati bazovou adresu vysledneho image
----------------------------------------------------------------------------------------------------
begin
  -- %%TODO(ANCESTOR) -- ziskat imagebase z implementace predka
  -- pokud adresa nastavena, jednoduse ji vrat...
  o_get_option_param_unicode_addr(opt_image_base,compi,result);

catch
  when o_operation_failed do
      -- ... jinak vrat defaultni hodnoty
      case compi.part_result
        when tpr_auto_select do verify({VERIFY=}001321,true);
        when tpr_program     do result:=unsigned_to_unicode_addr($0040_0000);
        when tpr_library     do result:=unsigned_to_unicode_addr($1000_0000);
        end case;
  end getimagebase;



----------------------------------------------------------------------------------------------------
override getstackreserve =
-- Vrati velikost alokovaneho mista na stacku kompilacni jednotky
----------------------------------------------------------------------------------------------------
with
  cc_base.cc_sym.cc_partition;
  
begin
#if #declared hynek; #and then; hynek then;     
  #error 'Málo okomentovaný kód';
#end if;
  
  o_get_option_param_unidata_size(opt_stack_reserve,part_get_runtime_partition(compi)^,result);

catch
  when o_operation_failed do ;
      #if #declared hynek; #and then; hynek then;     
        #error 'E? A co nějaký default?';
      #end if;
  end getstackreserve;



end c_os_specific_win32;
