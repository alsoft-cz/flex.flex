----------------------------------------------------------------------------------------------------
module private cc_advanced =
-- Překladač Flexu.
-- Další pokročilé funkce pro manipulaci s entitami, regiony, contexty, stromem entit a regionů.
----------------------------------------------------------------------------------------------------
-- Ondra : 04.12.2002 : Oddělil od CC_SYM.
----------------------------------------------------------------------------------------------------

with 
  cc_def.cc_gc,
  cc_lex;

----------------------------------------------------------------------------------------------------
-- Primitiva pro budování stromu entit a regionů
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure LL ( 
    p              : in out pidnode) =           -- strom                       
-- Vyvážení LL.                                                               
----------------------------------------------------------------------------------------------------
var
  p1               : pidnode;

begin
  -- levý podstrom se stane vrcholem
  p1:=p^.left;
  p^.left:=p1^.right;
  p1^.right:=p;
  p^.vaha:=0;
  p:=p1;
  p1^.vaha:=0;
  end LL;



----------------------------------------------------------------------------------------------------
procedure LR ( 
    p              : in out pidnode) =           -- strom                       
-- Vyvážení LR.                                                               
----------------------------------------------------------------------------------------------------
var
  p1               : pidnode;
  p2               : pidnode;

begin
  -- pravý podstrom levého podstromu se stane vrcholem
  p1:=p^.left;
  p2:=p1^.right;
  p1^.right:=p2^.left;
  p2^.left:=p1;
  p^.left:=p2;
  succ p1^.vaha;
  LL(p);
  end LR;



----------------------------------------------------------------------------------------------------
procedure RR ( 
    p              : in out pidnode) =           -- strom                       
-- Vyvážení RR.                                                               
----------------------------------------------------------------------------------------------------
var
  p1           : pidnode;

begin
  -- pravý podstrom se stane vrcholem
  p1:=p^.right;
  p^.right:=p1^.left;
  p1^.left:=p;
  p^.vaha:=0;
  p:=p1;
  p^.vaha:=0;
  end RR;



----------------------------------------------------------------------------------------------------
procedure RL ( 
    p              : in out pidnode) =           -- strom                       
-- Vyvážení RL.                                                               
----------------------------------------------------------------------------------------------------
var
  p1               : pidnode;
  p2               : pidnode;

begin
  -- levý podstrom pravého podstromu se stane vrcholem
  p1:=p^.right;
  p2:=p1^.left;
  p1^.left:=p2^.right;
  p2^.right:=p1;
  p^.right:=p2;
  pred p1^.vaha;
  RR(p);
  end RL;



----------------------------------------------------------------------------------------------------
procedure addnode (
    n              : in pidnode;                 -- vkládaný uzel
    p              : in out pidnode;             -- strom
    zvys           : out t_logical) =            -- zvýšen strom
-- Vloží do stromu uzel.
----------------------------------------------------------------------------------------------------
begin
  -- doleva
  if n^.id^<p^.id^ then
    if p^.left<>nil
      -- ještě dál do levého podstromu
      then
        addnode(n,p^.left,zvys);
        if zvys then 
          --%%TODO(ABS) p^.vaha+abs p^.left^.vaha; 
          if p^.left^.vaha<0
            then p^.vaha-p^.left^.vaha
            else p^.vaha+p^.left^.vaha
            end if;
          end if;
      -- už sem
      else
        p^.left:=n;
        succ p^.vaha;
        zvys:=p^.vaha<>0;
        end if;

    -- vyvážit LL
    if p^.vaha=2 then
      if p^.left^.vaha<0
        then LR(p);
        else LL(p);
        end if;
      zvys:=false;
      end if;

  -- doprava
  elsif n^.id^>p^.id^ then
    if p^.right<>nil
      -- ještě dál do pravého podstromu
      then
        addnode(n,p^.right,zvys);
        if zvys then 
          --%%TODO(ABS) p^.vaha-abs p^.right^.vaha; 
          if p^.right^.vaha<0
            then p^.vaha+p^.right^.vaha
            else p^.vaha-p^.right^.vaha
            end if;
          end if;
      -- už sem
      else
        p^.right:=n;
        pred p^.vaha;
        zvys:=p^.vaha<>0;
        end if;

    -- vyvážit
    if p^.vaha=-2 then
      if p^.right^.vaha>0
        then RL(p);
        else RR(p);
        end if;
      zvys:=false;
      end if;
  
  -- duplicitni identifikator
  else
    ce^.seterror({CCERR=}000055,ce_dupid);
    ce^.setparam(entityident_to_string(n^.id^));
    {%%POS}
    zvys:=false;
    ce^.raiseerror;
    end if;
  end addnode;



----------------------------------------------------------------------------------------------------
procedure sym_add_ident =
-- Zařadí zadanou entitu [entity] do kontextu [context] pod identifikátorem [id].
-- Pro identifikátor se nealokuje nová paměť, pointer se rovnou přebírá. Pokud entita nemá ještě
-- přiřazen identifikátor, přiřadí se jí automaticky tento jako základní.
----------------------------------------------------------------------------------------------------
var
  newid            : pidnode;                    -- nove vytvareny uzel tabulky
  zvys             : t_logical;                  -- zvýšen strom

begin
  -- vytvořit uzel
  new newid;
  c_garbage_collector.get_instance^.register_record(newid);

  -- doplnit údaje
  newid^.entity:=entity;
  newid^.id:=id;

  -- zaradit
  if context.region^.idtable=nil
    
    -- prvni identifikator v tabulce je zcela bez problemu
    then
      context.region^.idtable:=newid;

    -- dalsi se pridavaji komplikovaneji, protoze to nechci delat jako
    -- rekurzivni funkci, nebot by to zbytecne zralo pamet
    else
      addnode(newid,context.region^.idtable,zvys);
      end if;

  -- poznament si prvni identifikator symbolu
  if entity^.id=nil then 
    entity^.id:=id;
    end if;
  end sym_add_ident;



----------------------------------------------------------------------------------------------------
procedure clause_duplicate (
    context        : in tcontext;                -- aktuální kontext
    entity         : in pentity;                 -- entita
    mode           : in t_with_mode)             -- režim WITH/USE
                     return t_logical =
-- Duplicita v ramci klausule?
----------------------------------------------------------------------------------------------------
var
  _e               : pentity;
  loop_region      : pregion;
  loop_wtable      : twithtable;

begin
  result:=false;
  loop_region:=context.entity^.regions[rc_primary];
  if loop_region<>nil then

    -- projit WITH tabulku
    loop_wtable:=loop_region^.withtable;
    if loop_wtable<>nil then
      for i in loop_wtable^:range loop

        -- _e << entita ve with tabulce
        _e:=loop_wtable^[i].entity.getcentity;
        
        -- porovnat entitu v tabulce s nove pridavanou
        if _e=entity{_e^.id=entity^.id} and then loop_wtable^[i].mode=mode then

          -- vicenasobny WITH/USE v ramci klausule
          ce^.sethint(context,000000,ch_multiple_clause_with);
          ce^.setparam(entityident_to_string(_e^.id^));
          ce^.loadpos;
          result:=true;
          return;
          end if;
        end loop;
      end if;
    end if;
  end clause_duplicate;



----------------------------------------------------------------------------------------------------
procedure module_duplicate (    
    context        : in tcontext;                -- aktuální kontext
    entity         : in pentity;                 -- entita
    mode           : in t_with_mode)             -- režim WITH/USE
                     return t_logical =
-- Duplicita v ramci modulu?
----------------------------------------------------------------------------------------------------
var
  _e               : pentity;
  loop_entity      : pentity;
  loop_region      : pregion;
  loop_wtable      : twithtable;

begin
  result:=false;
  if context.entity<>nil and then context.entity^.context<>nil then 
    loop_entity:=context.entity^.context.entity;
    end if;

  -- prochazet nadrazene entity
  while loop_entity<>nil loop
    loop_region:=loop_entity^.regions[rc_primary];
    if loop_region<>nil then

    -- projit WITH tabulku
      loop_wtable:=loop_region^.withtable;
      if loop_wtable<>nil then
        for i in loop_wtable^:range loop

          -- _e << entita ve with tabulce
          _e:=loop_wtable^[i].entity.getcentity;

          -- porovnat entitu v tabulce s nove pridavanou
          if _e=entity{_e^.id=entity^.id} and then loop_wtable^[i].mode=mode then

             -- vicenasobny WITH/USE v ramci modulu
            ce^.sethint(context,000000,ch_multiple_module_with);
            ce^.setparam(entityident_to_string(_e^.id^));
            ce^.loadpos;
            result:=true;
            return;
            end if;
          end loop;
        end if;
      end if;
    if loop_entity^.context=nil then break end if;
    loop_entity:=loop_entity^.context.entity;
    end loop;
  end module_duplicate;



----------------------------------------------------------------------------------------------------
procedure sym_add_with =
-- V zadaném kontextu [context] vytvoří vazbu v režimu [mode] na entitu [entity] s úrovní [level].
-- Pokud vazba již existuje, hlásí hint o nadbytečné vazbě.
----------------------------------------------------------------------------------------------------
const
  withtabinit      = 4;
  withtabdelta     = 16;

type
  p_machine_pointer= ^unchecked for machine_pointer use true;

var
  _withtable       : context.region^.withtable:type;
  _with            : ^context.region^.withtable^:base;

begin
  -- eliminovat duplicity
  if not automatic and then clause_duplicate(context,entity,mode) then return end if;
  if not automatic and then module_duplicate(context,entity,mode) then return end if;

  -- relokovat paměť
  if context.region^.withtable=nil then
    -- alokuj
    new context.region^.withtable range withtabinit;
    
    -- zaregistruj do gc
    c_garbage_collector.get_instance^.register_memblock(context.region^.withtable);
  elsif context.region^.withtable^:length=context.region^.withtable^:last then
    --%%TODO(ADJUST) adjust context.region^.withtable^ range context.region^.withtable^:last+withtabdelta;
    new _withtable range context.region^.withtable^:last+withtabdelta;
    
    -- zaregistruj do gc
    c_garbage_collector.get_instance^.register_memblock(_withtable);
    _withtable^:=context.region^.withtable^;
    
    -- odregistruj starou instanci
    c_garbage_collector.get_instance^.unregister_memblock(context.region^.withtable);
    discard context.region^.withtable;
    context.region^.withtable:=_withtable;
    end if;

  -- zařadit do tabulky %%TODO(AGGREGATE) %%TODO(STRING_ADJUST)
  new _with;
  _with^.entity.setexpr(expr);
  _with^.entity.setentity(entity);
  _with^.mode:=mode;
  _with^.level:=level;
  _with^.automatic:=automatic;
  --getlexposall(position,ll_prev);
  getlexposall(_with^.lexpos,ll_prev);

  context.region^.withtable^ & _with^;
  discard p_machine_pointer(_with);
  end sym_add_with;



----------------------------------------------------------------------------------------------------
procedure sym_place_entity =
-- Zařadí entitu do tabulky entit v zadaném kontextu [context].
-- V entitě [entity] nastaví pointer na nadřazený kontext a viditelnost.
-- %%TECH Předpokládá se, že pointery PREV a NEXT jsou nastaveny na NIL.
----------------------------------------------------------------------------------------------------
with 
  cc_base.cc_options;

begin
  -- kontext
  entity^.context:=context;

  -- převzít viditelnost
  entity^.visible:=context.region^.vsect;

  -- převzít bezpečnostní úroveň
  entity^.sec_level:=context.entity^.sec_level;
  entity^.sec_required:=context.entity^.sec_required;
  
  -- režim překladu
  entity^.compile:=context.entity^.compile*etcs_modemask;

  -- dopočítat příznak globální viditelnosti
  sym_set_globaly_visible(entity);

  -- zkopiruj nastaveni z nadrazene entity
  o_clone_options(context.entity^,entity^);

  -- parametry překladu
  entity^.compv.warns:=context.entity^.compv.warns;
  entity^.compv.hints:=context.entity^.compv.hints;
  entity^.compv.diags:=context.entity^.compv.diags;

  -- zařadit do tabulky
  if context.region^.entities.first=nil

    -- první entita
    then
      context.region^.entities.first:=entity;
      context.region^.entities.last :=entity;

    -- další entita
    else
      context.region^.entities.last^.next:=entity;
      entity^.prev:=context.region^.entities.last;
      context.region^.entities.last :=entity;
      end if;
  end sym_place_entity;



----------------------------------------------------------------------------------------------------
procedure sym_add_region =
-- Přidá do aktuálního kontextu [context] zadaný region [region].
----------------------------------------------------------------------------------------------------
begin
  -- kontext
  region^.context:=context;

  -- zařadit do tabulky
  if context.region^.regions.first=nil 

    -- první region
    then
      context.region^.regions.first:=region;
      context.region^.regions.last :=region;

    -- další region
    else
      context.region^.regions.last^.next:=region;
      region^.prev:=context.region^.regions.last;
      context.region^.regions.last :=region;
      end if;
  end sym_add_region;



----------------------------------------------------------------------------------------------------
procedure sym_new_entity =
-- Vytvoří novou entitu a její primární region.
----------------------------------------------------------------------------------------------------
begin
  -- alokovat paměť
  case etype
    when et_undef      do 
        new pentity(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when et_compile    do 
        new pentity_compile(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when et_program    do 
        new pentity_program(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when et_module     do 
        new pentity_module(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when et_special    do 
        new pentity_special(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when et_procedure  do 
        new pentity_procedure(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when et_static     do 
        new pentity_static(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when et_virtual    do 
        new pentity_virtual(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when et_task       do 
        new pentity_task(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when et_override   do 
        new pentity_override(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when et_macro      do 
        new pentity_macro(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when et_overload   do 
        new pentity_overload(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when et_operator   do 
        new pentity_operator(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when et_var        do 
        new pentity_var(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when et_type       do 
        new pentity_type(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when et_class      do 
        new pentity_type(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when et_const      do 
        new pentity_const(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when et_enum       do 
        new pentity_enum(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when et_param      do 
        new pentity_param(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when et_message    do 
        new pentity_message(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when et_label      do 
        new pentity_label(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when et_template   do 
        new pentity_template(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when et_tparam     do 
        new pentity_tparam(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when et_attribute  do 
        new pentity_attribute(entity);
        c_garbage_collector.get_instance^.register_record(entity);

    when others        do verify({VERIFY=}000543,true);
    end case;
  
  -- počáteční naplnění entity
  entity^.etype:=etype;

  -- číslo partition, do které spadá
  entity^.partition_id:=curr_partition;
  end sym_new_entity;



----------------------------------------------------------------------------------------------------
procedure sym_new_region =
-- Vytvoří nový region.
----------------------------------------------------------------------------------------------------
begin
  -- alokovat paměť
  new region;
  c_garbage_collector.get_instance^.register_record(region);
  
  -- počáteční naplnění regionu
  region^.rtype:=rtype;

  -- číslo partition, do které spadá
  region^.partition_id:=curr_partition;
  end sym_new_region;


----------------------------------------------------------------------------------------------------
-- Nastavování vlastností entit a regionů.
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure sym_set_globaly_visible =
-- Aktualizuje příznak globální viditelnosti entity.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    procedure check_non_local (context : tcontext) return t_logical =
    ------------------------------------------------------------------------------------------------
    begin
      result:=context.region=nil or else (context.region^.vsect in etvs_non_local and check_non_local(context.region^.context));
      end check_non_local;

begin
  -- tato entita není pouze lokálně viditelná
  if entity^.visible in etvs_non_local
  -- nadřazená entita je sama o sobě globálně viditelná
  and then etc_globaly_visible in entity^.context.entity^.compile
  -- a není to její dokončení deklarace v lokální části nadřazené entity
  and then (force or else check_non_local(entity^.context.entity^.context)) then
    entity^.compile+tentitycompileset:[etc_globaly_visible];
    end if;
  end sym_set_globaly_visible;
  
  

----------------------------------------------------------------------------------------------------
procedure sym_set_evaluated =
-- Označí symbol za vyhodnocený a deklarovaný.
----------------------------------------------------------------------------------------------------
begin
  entity^.eval:=ete_evaluated;
  entity^.evaluated:=etd_full;
  entity^.declared:=etd_full;
  end sym_set_evaluated;



----------------------------------------------------------------------------------------------------
-- Nadstavby pro zjednodušení častých operací
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure sym_add_new_entity =
-- V rámci dodaného kontextu [context] vytvoří novou entitu, její primární region, zařadí ji do 
-- tabulky entit a tabulky identifikátorů. Vytvoří primární region. Vrátí kontext [entity_context] 
-- sestavený z vytvářené entity a jejího primárního regionu.
-- %%X Zrušeno: Je-li [id] nil, nastaví se u symbolu příznaky ETC_INTERNAL a ETD_Full.
----------------------------------------------------------------------------------------------------
begin
  -- vytvořit entitu
  sym_new_entity(etype,entity);
  
  -- a pridat
  sym_add_entity(entity,context,id,entity_context);
  end sym_add_new_entity;



----------------------------------------------------------------------------------------------------
procedure sym_add_entity =
-- V rámci dodaného kontextu [context] zařadí entitu do tabulky entit a tabulky 
-- identifikátorů. Vytvoří primární region. Vrátí kontext [entity_context] sestavený z vytvářené
-- entity a jejího primárního regionu.
-- %%X Zrušeno: Je-li [id] nil, nastaví se u symbolu příznaky ETC_INTERNAL a ETD_FULL.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}001211,entity=nil);

  -- zařadit
  sym_place_entity(context,entity);

  -- máme k dispozici identifikátor ?
  if id<>nil

    -- ano => dosadit
    then sym_add_ident(context,id,entity)

    -- ne => označit entitu za interní a plně deklarovanou
    else
      --%%X K čemu to bylo ?  entity^.compile+tentitycompileset:[etc_internal];
      --                      entity^.declared:=etd_full;
      end if;

  -- vytvořit primární region
  sym_new_region(entitydesc[entity^.etype].region,entity^.regions[rc_primary]);

  -- sestavit kontext pro primární region
  entity_context:=sym_primary_context(entity^);
  end sym_add_entity;



----------------------------------------------------------------------------------------------------
procedure sym_add_new_region =
-- Vytvoří nový region v rámci zadaného kontextu [context] a kromě něj vrátí i odpovídající nový 
-- kontext [region_context]. Typ nového kontextu odvodí od typu aktuálního kontextu.
----------------------------------------------------------------------------------------------------
begin
  -- vytvořit region
  sym_new_region(context.region^.rtype,region);

  -- zařadit
  sym_add_region(context,region);

  -- sestavit kontext
  region_context.entity:=context.entity;
  region_context.region:=region;
  end sym_add_new_region;



end cc_advanced;
