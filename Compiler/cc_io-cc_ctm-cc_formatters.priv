----------------------------------------------------------------------------------------------------
module private cc_formatters =
-- Překladač Flexu.
-- Formátovače pro zápis a čtení compile-time metadat.
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
class private c_ctm_binary_writer = 
-- Binární writer compile-time metadat.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    #template imp_write (method);
    ------------------------------------------------------------------------------------------------

      ----------------------------------------------------------------------------------------------
      static method =
      -- Zapíše do výstupu hodnotu typu [param_type].
      ----------------------------------------------------------------------------------------------
      begin
        write_unchecked(data,data:size);
        end method 

      #end imp_write;

    ------------------------------------------------------------------------------------------------
    imp_write(write_cr               );
    imp_write(write_ci               );
    imp_write(write_uniint           );
    imp_write(write_unichar          );
    imp_write(write_unireal          );
    imp_write(write_unilogical       );
    imp_write(write_unidata_addr     );
    imp_write(write_unidata_size     );
    imp_write(write_unidata_bitsize  );
    imp_write(write_unicode_addr     );
    imp_write(write_unicode_size     );
    imp_write(write_visible          );
    imp_write(write_logical          );

    imp_write(write_unsigned8        );
    imp_write(write_unsigned32       );
    imp_write(write_unsigned         );
    imp_write(write_char32           );
    imp_write(write_partition_type   );
    imp_write(write_partition_result );
    imp_write(write_immclass         );
    imp_write(write_rtattribset      );
    imp_write(write_parammode        );
    imp_write(write_parampass        );
    imp_write(write_memclass         );
    imp_write(write_varflagset       );
    imp_write(write_varmode          );
    imp_write(write_varaccess        );
    imp_write(write_mem_aliased      );
    imp_write(write_varimplements    );
    imp_write(write_constflagset     );
    imp_write(write_instancepass     );
    imp_write(write_vcalltype        );
    imp_write(write_virtualindex     );
    imp_write(write_spectype         );
    imp_write(write_specobject       );
    imp_write(write_ooperarity       );
    imp_write(write_ooperator        );
    imp_write(write_lexsym           );
    imp_write(write_lexchar          );
    imp_write(write_datatype         );
    imp_write(write_typederive       );
    imp_write(write_typeflagsset     );
    imp_write(write_typecompat       );
    imp_write(write_typeinit         );
    imp_write(write_tintaritm        );
    imp_write(write_ptrflagsset      );
    imp_write(write_ptrclass         );
    imp_write(write_ptrbase          );
    imp_write(write_procflagset      );
    imp_write(write_icallconvention  );
    imp_write(write_regiontype       );
    imp_write(write_with_mode        );
    imp_write(write_with_level       );
    imp_write(write_entityvisible    );
    -- Metody pro zápis základních datových typů.
    ------------------------------------------------------------------------------------------------


    ------------------------------------------------------------------------------------------------
    #template imp_write_char32str (method);
    ------------------------------------------------------------------------------------------------

      ----------------------------------------------------------------------------------------------
      static method = 
      -- Zapíše do výstupu string typu [param_type]. Je-li [param_type]=nil, zapíše prázdný řetězec.
      ----------------------------------------------------------------------------------------------
      with
        standard,
        standard.characters;

      var
        encoder      : static c_character_encoder_utf8;
        b            : t_unsigned8;
        all_out      : t_logical;

      begin
        if str=nil

          -- prázdný identifikátor je triviální
          then write_unsigned32(0);

          -- neprázdný identifikátor
          else 
            -- velikost
            write_unsigned32(str^:length);

            -- zakódovaný identifikátor
            for i in str^:range loop
              -- nacpat do enkodéru znak
              encoder.put_character(str^[i]);

              -- vyčíst po bytech
              loop
                encoder.get_output(b,all_out);
                write_byte(t_data_byte(b));
                until all_out;
              end loop;

            --write_unchecked(id^,id^:length*id^:base:size+id^:length:size);
          end if;
        end method

      #end imp_write_char32str;



    ------------------------------------------------------------------------------------------------
    imp_write_char32str(write_entityident           );
    imp_write_char32str(write_external_entity_ident );
    imp_write_char32str(write_qualified_entity_ident);
    imp_write_char32str(write_lexcharustr           );
    ------------------------------------------------------------------------------------------------

    end c_ctm_binary_writer;



----------------------------------------------------------------------------------------------------
class private c_ctm_binary_reader = 
-- Binární reader compile-time metadat.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    #template imp_reader (method);
    ------------------------------------------------------------------------------------------------

      ----------------------------------------------------------------------------------------------
      static method =
      -- Precte ze vstupu hodnotu typu [param_type].
      ----------------------------------------------------------------------------------------------
      var
        size       : t_offset;
        eod        : t_logical;
      
      begin
        size:=data:size;
        read_unchecked_out(data,size,eod);
        check_error({CCERR=}000628,size<>data:size);
        end method 

      #end imp_reader;

    ------------------------------------------------------------------------------------------------
    imp_reader(read_cr               );
    imp_reader(read_ci               );
    imp_reader(read_uniint           );
    imp_reader(read_unichar          );
    imp_reader(read_unireal          );
    imp_reader(read_unilogical       );
    imp_reader(read_unidata_addr     );
    imp_reader(read_unidata_size     );
    imp_reader(read_unidata_bitsize  );
    imp_reader(read_unicode_addr     );
    imp_reader(read_unicode_size     );
    imp_reader(read_visible          );
    imp_reader(read_logical          );

    imp_reader(read_unsigned8        );
    imp_reader(read_unsigned32       );
    imp_reader(read_unsigned         );
    imp_reader(read_char32           );
    imp_reader(read_partition_type   );
    imp_reader(read_partition_result );
    imp_reader(read_immclass         );
    imp_reader(read_rtattribset      );
    imp_reader(read_parammode        );
    imp_reader(read_parampass        );
    imp_reader(read_memclass         );
    imp_reader(read_varflagset       );
    imp_reader(read_varmode          );
    imp_reader(read_varaccess        );
    imp_reader(read_mem_aliased      );
    imp_reader(read_varimplements    );
    imp_reader(read_constflagset     );
    imp_reader(read_instancepass     );
    imp_reader(read_vcalltype        );
    imp_reader(read_virtualindex     );
    imp_reader(read_spectype         );
    imp_reader(read_specobject       );
    imp_reader(read_ooperarity       );
    imp_reader(read_ooperator        );
    imp_reader(read_lexsym           );
    imp_reader(read_lexchar          );
    imp_reader(read_datatype         );
    imp_reader(read_typederive       );
    imp_reader(read_typeflagsset     );
    imp_reader(read_typecompat       );
    imp_reader(read_typeinit         );
    imp_reader(read_tintaritm        );
    imp_reader(read_ptrflagsset      );
    imp_reader(read_ptrclass         );
    imp_reader(read_ptrbase          );
    imp_reader(read_procflagset      );
    imp_reader(read_icallconvention  );
    imp_reader(read_regiontype       );
    imp_reader(read_with_mode        );
    imp_reader(read_with_level       );
    imp_reader(read_entityvisible    );
    -- Metody pro cteni základních datových typů.
    ------------------------------------------------------------------------------------------------


    ------------------------------------------------------------------------------------------------
    #template imp_read_char32str (method);
    ------------------------------------------------------------------------------------------------

      ----------------------------------------------------------------------------------------------
      static method = 
      -- Precte ze vstupu string typu [param_type]. Je-li ve streamu prazdny retezec (velikosti 0), 
      -- vrati prázdný řetězec.
      ----------------------------------------------------------------------------------------------
      with
        standard,
        standard.characters;

      var
        decoder    : static c_character_decoder_utf8;
        b          : t_unsigned8;
        char_out   : t_logical;
        eod        : t_logical;
        velikost   : t_unsigned32;
        temp       : t_logical;  

      begin
        -- velikost
        read_unsigned32(velikost);
        if velikost=0 then return end if;

        -- alokuj retezec o velikosti [velikost]
        new str range velikost;

        for i in 1..velikost loop
          -- dekoduj znak po bytech
          loop 
            read_byte(t_data_byte(b),eod);
            decoder.put_byte(b,char_out);
            until char_out;
          
          -- vycti znak
          str^ & str^:base(decoder.get_character);
          end loop;

        -- ujistime se, ze nam nic nezbylo
        -- %%TODO(LIB) odstranit podmínku, až někdo zrobustní [finalize_input] a nebude házet
        -- výjimku, když nebyl dekodér použit
        if velikost>0 then
          decoder.finalize_input;
          end if;
        end method

      #end imp_read_char32str;



    ------------------------------------------------------------------------------------------------
    imp_read_char32str(read_entityident           );
    imp_read_char32str(read_external_entity_ident );
    imp_read_char32str(read_qualified_entity_ident);
    imp_read_char32str(read_lexcharustr           );
    ------------------------------------------------------------------------------------------------

    end c_ctm_binary_reader;



end cc_formatters;