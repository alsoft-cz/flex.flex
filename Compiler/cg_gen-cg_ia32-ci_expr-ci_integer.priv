----------------------------------------------------------------------------------------------------
module private ci_integer =
-- Překladač Flexu.
-- Celočíselná aritmetika.
----------------------------------------------------------------------------------------------------
-- Ondra : 18.04.2003 : Vytvořil
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure i_gen_op_integer_mul =
-- Celočíselné násobení.
----------------------------------------------------------------------------------------------------

----- %%TECH Násobení ----------------------------------------------------
-- Násobení očekává na vstupu výraz tvaru A1 * ... * Ak [ *C ], kde Ai jsou
-- výrazy a C konstanta. Je-li násobení přiřazovací, je A1 proměnná V.
-- Pro účely optimalizace výpočtu se výrazy transformují takto:
--
-- Obecné schéma pro násobení:
--        A1 * ... * Ak      -->     A1 * ... * Ak
--    V * A2 * ... * Ak      -->     A2 * ... * Ak * V
--        A1 * ... * Ak * C  --> C * A1 * ... * Ak
--    V * A2 * ... * Ak * C  --> C * A2 * ... * Ak * V
-- Pro požadovanou velikost výsledku 8 bitů se použije jednooperandová verze
-- instrukce MUL/IMUL, pro 16 a 32 bitů se použije dvouoperandová verze.
--
-- Některé speciální případy násobení lze dále optimalizovat:
--   -- násobení konstantou 3, 5, 9 použitím instrukce LEA (bez ohledu na
--      požadovanou velikost výsledku vždy 32-bitové; pro zkrácené přiřazení
--      je jednodušší použít dvouoperandový IMUL s konstantou v registru),
--   -- při násobení s přesností na 16/32 bitů lze použít IMUL i pro
--      unsigned operandy,
--   -- dvouoperandové násobení konstantou
--        imul eax,A1,C
--      pro zkrácené přiřazení:
--        imul eax,A1,C
--        mov  A1,eax
--   -- násobení s konstantou:
--        mov  eax,A1
--        imul eax,A2
--        ...
--        imul eax,Ak
--        imul eax,C
--      pro zkrácené přiřazení navíc:
--        mov  eax,A2
--        imul eax,A3
--        ...
--        imul eax,Ak
--        imul eax,C
--        imul eax,A1
--        mov  A1,eax
--   -- násobení na 16/32 bitů s operandy Ai a Aj šířky 8 bitů:
--        mov  al,Ai
--        mul  Aj
--        [ and eax,$0000FFFF -- konverze 16 --> 32 bitů ]
--        imul [e]ax,A1
--        ...
--        imul [e]ax,Ak
--        imul [e]ax,C
--      (se stejnou optimalizací zkráceného přiřazení jako v předchozím
--      případě)
--------------------------------------------------------------------------
with
  ci_rcheck;

var
  el               : pexpnode;                   -- levý podvýraz
  er               : pexpnode;                   -- pravý podvýraz
  x1               : pexpnode;                   -- dva 8-mi bitové operandy
  x2               : pexpnode;                   -- dva 8-mi bitové operandy
  newcontext       : iexprcontext;               -- kontext podvýrazů
  opcnt            : t_unsigned;                 -- počet operandů (kromě konstanty)
  rsize            : t_unsigned32;               -- požadovaná velikost výsledku
  c                : pexpnode;                   -- konstantní operand
  ii               : iinstr;                     -- násobící instrukce
  typ_modular      : t_logical;                  -- T - typ vyrazu ma modularni aritmetiku
  typ_ranged       : t_logical;                  -- T - typ vyrazu ma logicke meze

    
    ------------------------------------------------------------------------------------------------
    #template perform_mul (ii_and_operands);     -- požadovaná násobící instrukce a 2 operandy
    -- Provede násobení mezivýsledku [vysl] pravým operandem [er].
    ------------------------------------------------------------------------------------------------
      declare var
        op2          : c_operand;                  -- pravý operand

      begin
        -- načíst výraz
        i_newcontext(context,newcontext,lm_conv,expr^.t.getctype);
        i_load(inst,info,newcontext,context{lm_convgen,expr^.t.getutype},er,op2);

        -- obnovit registry
        vysl.refresh(inst,info,context);
        op2.refresh(inst,info,context);

        -- vynásobit
        addii(inst,info,ii_and_operands,op0);

        -- provest behove kontroly operace nasobeni
        ci_rcheck.i_gen_runtime_checks(inst,info,context,rchcl_gen,pexpnode(expr)^,vysl);

      leave
        -- uvolnit operand
        op2.free(info,context);
        end declare;
      #end perform_mul;



    ------------------------------------------------------------------------------------------------
    #template perform_assign (ii_and_operands);  -- požadovaná násobící instrukce a 2 operandy
    -- Provede závěrečné přiřazení.
    ------------------------------------------------------------------------------------------------
      declare var
        op2        : c_operand;                  -- pravý operand

      begin
        -- vygenerovat
        i_newcontext(context,newcontext,lm_gen,nil{expr^.t.getctype});
        i_load(inst,info,newcontext,context{lm_gen,expr^.t.getutype},el,op2);

        -- obnovit registry
        vysl.refresh(inst,info,context);
        op2.refresh(inst,info,context);

        -- vynásobit
        addii(inst,info,ii_and_operands,op0);

        -- provest behove kontroly operace nasobeni
        ci_rcheck.i_gen_runtime_checks(inst,info,context,rchcl_gen,pexpnode(expr)^,vysl);

        -- provest behove kontroly prirazeni
        ci_rcheck.i_gen_runtime_checks(inst,info,context,rchcl_load,pexpnode(expr)^,vysl);

        -- přiřadit
        addii(inst,info,ii_mov,op2,vysl,op0);

      leave
        -- uvolnit operand
        op2.free(info,context);
        end declare;
      #end perform_assign;

var
  range_checks_req : t_logical;

begin
  verify({VERIFY=}000136,expr^.arity<>eoa_n);

  -- požadovaná velikost výsledku
  rsize:=value_size_from_expr(expr);

  -- spočítat operandy a najít konstantu (bude na konci)
  c:=expr^.sub;
  opcnt:=0;
  x1:=nil; x2:=nil;
  loop
    -- započítat operand
    succ opcnt;

    -- není to náhodou 8-mi bitový operand ?
    if c^.t.getsize=uds_1 and then (x1=nil or x2=nil) and then c^.ntype<>nt_imm then
      if x1=nil
        then x1:=c;
        else x2:=c;
        end if;
      end if;

    -- našel se poslední operand
    if c^.next=nil then break; end if;

    -- další operand
    c:=c^.next;
    end loop;

  -- našla se nějaká konstanta ?
  if c^.ntype=nt_imm

    -- našla
    then
      pred opcnt;

    -- nenašla
    else
      c:=nil
      end if;

  -- první operand
  el:=expr^.sub;
  er:=el;

  -- je-li to přiřazení, tak se na první operand zatím vykašleme
  if expr^.assign then er:=er^.next; end if;

  ----- násobení konstantou -----
  if opcnt=1 {and (rsize in [2,3])} {and (k in [3,5,9])} and not expr^.assign then
    -- vygenerovat a načíst levý podvýraz
    i_newcontext(context,newcontext,lm_reg_all,expr^.t.getctype);
    i_load(inst,info,newcontext,context,el,vysl);

    -- obnovit registry
    vysl.refresh(inst,info,context);

    -- je treba kontrola mezi?
    range_checks_req:=t_runtime_check_set:[rch_ordinal_range]*expr^.get_run_checks(rchcl_load)<>t_runtime_check_set:[] or 
      t_runtime_check_set:[rch_ordinal_overflow,rch_ordinal_range]*expr^.get_run_checks(rchcl_gen)<>t_runtime_check_set:[];
    
    -- kontroly mezi?
    if range_checks_req
      
      -- ANO - pouzi ii_mul instrukci
      then
        
        -- je treba nasobit?
        if uniint_to_imm32(pexpimm(c)^.imm.ui)<>timm32(1) then

          declare var
            op2    : c_operand;

          begin
            -- připravit druhý operand
            op2.create_imm(edt_unsigned,value_size_from_expr(c),uniint_to_imm32(pexpimm(c)^.imm.ui));

            -- přidat instrukci
            addii(inst,info,ii_imul,vysl,op2,op0);

          leave
            op2.free(info,context);
            end declare;
          end if;

      -- NE - mozno i shl nebo lea
      else
        -- vynásobit
        i_gen_mul_reg(inst,info,context,vysl,uniint_to_imm32(pexpimm(c)^.imm.ui));
      end if;

    -- provest behove kontroly operace nasobeni
    ci_rcheck.i_gen_runtime_checks(inst,info,context,rchcl_gen,pexpnode(expr)^,vysl);

  ----- 8-mi bitový výsledek, není co řešit -----
  elsif rsize=1 then
    -- násobící instrukce
    if expr^.t.stype=dt_signed
      then ii:=ii_imul;
      else ii:=ii_mul;
      end if;

    -- máme konstantu ?
    if c<>nil
      -- ano, zpracujeme ji přednostně
      then
        i_newcontext(context,newcontext,lm_reg_eax,expr^.t.getctype);
        i_load(inst,info,newcontext,context{lm_reg_eax,expr^.t.getutype},c,vysl);

      -- ne, vezmeme první operand
      else
        i_newcontext(context,newcontext,lm_reg_eax,expr^.t.getctype);
        i_load(inst,info,newcontext,context{lm_reg_eax,expr^.t.getutype},er,vysl);
        er:=er^.next;
        end if;

    -- zpracovat všechny operandy (až na konstantu)
    while er<>c loop
      -- vynásobit mezivýsledek aktuálním operandem
      #expand perform_mul;
        #for ii_and_operands use; ii,op2,op0
        #end perform_mul;

      -- další operand
      er:=er^.next;
      end loop;

    -- není to zkrácené přiřazení ?
    if expr^.assign then
      #expand perform_assign;
        #for ii_and_operands use; ii,op2,op0
        #end perform_assign;
      end if;

  ----- 16-ti nebo 32-ti bitový výsledek -----
  else
    -- Tvrzení: RSIZE in [2,4] and X1<>nil => el<>X1 or not expr^.assign
    -- Důkaz: Sporem. Nechť el=X1 and expr^.assign
    --        => expr^.t=el^.t => RSIZE=1 SPOR. C.B.D.

    -- násobící instrukce: celé to sjedeme IMULem

    ---- zvolit první operand ---
    if x2<>nil -- Zřejmě platí: X2<>NIl => X1<>NIL

      -- máme dva 8-mi bitové operandy, malá finta
      then
        declare var
          op2      : c_operand;                  -- pravý operand
        begin
          -- načíst první operand
          i_newcontext(context,newcontext,lm_reg_eax,x1^.t.getctype);
          i_load(inst,info,newcontext,context{lm_reg_eax,x1^.t.getutype},x1,vysl);

          -- načíst druhý operand
          i_newcontext(context,newcontext,lm_conv,x2^.t.getctype);
          i_load(inst,info,newcontext,context{lm_conv,x2^.t.getutype},x2,op2);

          -- obnovit registry
          vysl.refresh(inst,info,context);
          op2.refresh(inst,info,context);

          -- vynásobit
          if expr^.t.stype=dt_signed
            then addii(inst,info,ii_imul,op2,op0,op0);
            else addii(inst,info,ii_mul,op2,op0,op0);
            end if;
          
          -- provest behove kontroly operace nasobeni
          ci_rcheck.i_gen_runtime_checks(inst,info,context,rchcl_gen,pexpnode(expr)^,vysl);

          end declare;

        -- výsledek
        vysl.adjust_size(rsize);

        -- z AX udělat EAX
        if rsize=4 then
          if expr^.t.stype=dt_signed
            then addii(inst,info,ii_cwde,op0,op0,op0);
            else addii(inst,info,ii_and,vysl,op_0000FFFF,op0);
            end if;
          end if;

        -- konstanta se bude zpracovávat jako každý jiný operand
        c:=nil;

      -- načíst první operand
      else
        -- zbavit se alespoň toho jednoho
        x1:=nil;

        -- máme konstantu ?
        if c<>nil

          -- načíst přednostně
          then
            -- načíst
            i_newcontext(context,newcontext,lm_reg_all,expr^.t.getctype);
            i_load(inst,info,newcontext,context{lm_reg_all,expr^.t.getutype},c,vysl);

          -- načíst první operand
          else
            -- načíst
            i_newcontext(context,newcontext,lm_reg_all,expr^.t.getctype);
            i_load(inst,info,newcontext,context{lm_reg_all,expr^.t.getutype},er,vysl);

            -- další operand
            er:=er^.next;
            end if;
        end if;

    ---- zpracovat zbylé operandy ----

    -- zpracovat
    while er<>c loop
      -- zpracovávat jen operandy, které jsem nevyřídil přednostně
      if (er<>x1) and (er<>x2) then
        -- vynásobit mezivýsledek aktuálním operandem
        #expand perform_mul;
          #for ii_and_operands use; ii_imul,vysl,op2
          #end perform_mul;
        end if;

      -- další operand
      er:=er^.next;
      end loop;

    ---- není to zkrácené přiřazení ? ----
    if expr^.assign then
      #expand perform_assign;
        #for ii_and_operands use; ii_imul,vysl,op2
        #end perform_assign;
      end if;
    end if;
  end i_gen_op_integer_mul;



----------------------------------------------------------------------------------------------------
procedure i_gen_op_integer_div_mod =
-- Celočíselné dělení a zbytek po dělení.
----------------------------------------------------------------------------------------------------
var
  rsize            : t_unsigned32;               -- velikost výsledku (1, 2, 4 B)
  op1              : c_operand;                  -- operand 1 (EAX/AX/AL)
  op_edx           : c_operand;                  -- registr EDX pro 64bitové rozšíření
  op_dx            : c_operand;                  -- registr DX pro 32bitové rozšíření
  op_ah            : c_operand;                  -- registr AH pro 8bitové rozšíření

    ------------------------------------------------------------------------------------------------
    procedure adjust_high =
    -- Příprava horní poloviny operandu.
    -- Očekává, že [op1] podle velikosti operandu reprezentuje EAX/AX/AL.
    ------------------------------------------------------------------------------------------------
    begin
      case rsize
        -- rozšíření 32 -> 64 bitů do EDX:EAX
        when 4 do
            if expr^.t.stype=dt_signed
              -- znaménkově rozšířit EAX --> EDX:EAX
              then
                -- CDQ nebo MOV EDX,EAX; SAR EDX,31 - rychlejší na dekódování
                addii(inst,info,ii_mov,op_edx,op1,op0);
                addii(inst,info,ii_sar,op_edx,op_31,op0);
              -- vynulovat EDX
              else
                addii(inst,info,ii_mov,op_edx,op_0,op0)
                end if;

        -- rozšíření 16 -> 32 bitů do DX:AX
        when 2 do
            if expr^.t.stype=dt_signed
              -- znaménkově rozšířit AX --> DX:AX
              then
                -- CWD nebo MOV DX,AX; SAR DX,15 - rychlejší na dekódování
                addii(inst,info,ii_mov,op_dx,op1,op0);
                addii(inst,info,ii_sar,op_dx,op_15,op0);
              -- vynulovat DX
              else
                addii(inst,info,ii_mov,op_dx,op_0,op0)
                end if;

        -- rozšíčení 8 -> 16 bitů do AH:AL
        when 1 do
            if expr^.t.stype=dt_signed
              -- znaménkově rozšířit AL --> AX
              then addii(inst,info,ii_cbw,op0,op0,op0)
              -- vynulovat AH
              else addii(inst,info,ii_mov,op_ah,op_0,op0);
              end if;
        end case;
      end adjust_high;



    ------------------------------------------------------------------------------------------------
    procedure refresh_high_part =
    -- Provede refresh registru reprezentujícího vyšší polovinu slova dělence.
    ------------------------------------------------------------------------------------------------
    begin
      -- něco dělat jen pro 16 a 32bitové operandy, pro 8bitový se refresh AH provede v rámci
      -- refreshe AL (tj. EAX)
      case rsize 
        when 4 do op_edx.refresh(inst,info,context);
        when 2 do op_dx.refresh(inst,info,context);
        end case;
      end refresh_high_part;

var
  el               : pexpnode;                   -- levý podvýraz
  er               : pexpnode;                   -- pravý podvýraz
--op2              : c_operand;                  -- operand 2
--op3              : c_operand;                  -- operand 3
  newcontext       : iexprcontext;               -- kontext podvýrazů

begin
  -- první dva operandy
  expr^.get(el,er);

  -- velikost výsledku
  rsize:=value_size_from_expr(expr);

  -- první operand načíst do EAX
  i_newcontext(context,newcontext,lm_reg_eax,expr^.t.getctype);
  i_load(inst,info,newcontext,context{lm_reg_eax,expr^.t.getutype},el,op1);

  -- rezervovat další registry potřebné při dělení (EDX/DX/AH)
  case rsize
    when 4 do op_edx.create_use_register(inst,info,context,op1.edtype,ir_edx);
    when 2 do op_dx.create_use_register(inst,info,context,op1.edtype,ir_dx);
    when 1 do op_ah.create_use_register(inst,info,context,op1.edtype,ir_ah);
    end case;

  -- připravit horní polovinu operandu
  adjust_high;

  -- zpracovat zbývající operandy
  while er<>nil loop
    declare var
      op2          : c_operand;
    begin
      -- načíst operand
      i_newcontext(context,newcontext,lm_reg_all,expr^.t.getctype);
      i_load(inst,info,newcontext,context{lm_reg_all,expr^.t.getutype},er,op2);

      -- obnovit registry
      op1.refresh(inst,info,context);
      op2.refresh(inst,info,context);
      refresh_high_part;

      -- vydělit
      if expr^.t.stype=dt_signed
        then addii(inst,info,ii_idiv,op2,op0,op0);
        else addii(inst,info,ii_div,op2,op0,op0);
        end if;

    leave
      -- uvolnit operand
      op2.free(info,context);
      end declare;

    -- další operand
    er:=er^.next;

    -- korekce dalšího operandu
    if er<>nil then
      -- připravit obě poloviny operandu současně (znaménkové modulo)
      if expr^.oper=op_imod and expr^.t.stype=dt_signed then
        case rsize
          -- EAX := EDX; SAR EDX,31
          when 4 do
              addii(inst,info,ii_mov,op1,op_edx,op0);
              addii(inst,info,ii_sar,op_edx,op_31,op0);

          -- AX := DX; SAR DX,15
          when 2 do
              addii(inst,info,ii_mov,op1,op_dx,op0);
              addii(inst,info,ii_sar,op_dx,op_15,op0);

          -- AL := AH; SAR AH,7 => SAR AX,8
          when 1 do
              declare var
                op_ax : c_operand;
              begin
                op_ax.create_use_register(inst,info,context,op1.edtype,ir_ax);
                addii(inst,info,ii_sar,op_ax,op_8,op0)
              leave
                op_ax.free(info,context);
                end declare;
          end case;

      -- připravit obě poloviny zvlášť (neznaménkové modulo)
      elsif expr^.oper=op_imod then
        case rsize
          -- EAX := EDX; SAR EDX,31
          when 4 do
              addii(inst,info,ii_mov,op1,op_edx,op0);
              addii(inst,info,ii_mov,op_edx,op_0,op0);

          -- AX := DX; SAR DX,15
          when 2 do
              addii(inst,info,ii_mov,op1,op_dx,op0);
              addii(inst,info,ii_mov,op_dx,op_0,op0);

          -- AL := AH; MOV AH,0
          when 1 do
              addii(inst,info,ii_mov,op1,op_ah,op0);
              addii(inst,info,ii_mov,op_ah,op_0,op0);
          end case;

      -- připravit jen horní polovinu operandu (normální dělení)
      else
        adjust_high;
        end if;
      end if;
    end loop;

  -- zkrácené přiřazení
  if expr^.assign then
    declare var
      op2          : c_operand;
    begin
      -- vygenerovat levý operand
      i_newcontext(context,newcontext,lm_gen,nil{expr^.t.getctype});
      i_load(inst,info,newcontext,context{lm_gen,el^.t.getutype},el,op2);

      -- obnovit registry
      op1.refresh(inst,info,context);
      op2.refresh(inst,info,context);
      refresh_high_part;

      -- přiřadit
      if expr^.oper=op_imod
        -- modulo
        then
          -- zbytek je v EDX/DX/AH => přesunout do levého operandu
          case rsize
            when 4 do addii(inst,info,ii_mov,op2,op_edx,op0)
            when 2 do addii(inst,info,ii_mov,op2,op_dx,op0)
            when 1 do addii(inst,info,ii_mov,op2,op_ah,op0)
            end case;

        -- dělení
        else
          -- podíl je v EAX/AX/AL => přesunout do levého operandu
          addii(inst,info,ii_mov,op2,op1,op0)
          end if;

    leave
      -- uvolnit operand
      op2.free(info,context);
      end declare;
    end if;

  -- uvolnit nepotřebné operandy a předat výsledek
  if expr^.oper=op_imod

    -- modulo
    then
      case rsize
        -- module je v EDX, EAX ([op1]) už nebude potřeba
        when 4 do vysl.transfer(op_edx);
  
        -- modulo je v DX, AX ([op1]) už nebude potřeba
        when 2 do vysl.transfer(op_dx);

        -- modulo je v AH, dostat ho do AL (s AH standardně neumíme pracovat) a to vrátit
        when 1 do 
            declare var
              op_ax : c_operand;
            begin
              op_ax.create_use_register(inst,info,context,op1.edtype,ir_ax);
              addii(inst,info,ii_shr,op_ax,op_8,op0)
            leave
              op_ax.free(info,context);
              end declare;
            vysl.transfer(op1);
        end case;

    -- dělení
    else
      -- výsledek je v EAX/AX/AL
      vysl.transfer(op1);
      end if;

leave
  -- uvolnit operandy
  op1.free(info,context);
  case rsize 
    when 4 do op_edx.free(info,context);
    when 2 do op_dx.free(info,context);
    when 1 do op_ah.free(info,context);
    end case;
  end i_gen_op_integer_div_mod;



----------------------------------------------------------------------------------------------------
procedure i_gen_op_integer =
-- Celočíselné operace (sčítání, odčítání, bitové operace).
-- Tato procedura se používá i na implementaci principiálně ekvivalentních
-- operací nad jinými datovými typy příznivé velikosti. Například pro množiny
-- velikosti 1, 2 nebo 4 byty či logické XOR.
----------------------------------------------------------------------------------------------------
with 
  ci_rcheck;

var
  el               : pexpnode;                   -- levý podvýraz
  er               : pexpnode;                   -- pravý podvýraz
  er_mode          : iexprloadmode;              -- režim generování výrazu napravo
  er_typ           : pentity_type;               -- požadovaný typ výrazu napravo

    ------------------------------------------------------------------------------------------------
    procedure genop (
        op1        : c_operand;
        op2        : c_operand) =
    -- Generování vlastní operace.
    ------------------------------------------------------------------------------------------------
    begin
      -- instrukce
      case expr^.oper
        -- sčítání
        when op_add     do addii(inst,info,ii_add,op1,op2,op0);

        -- odčítání
        when op_sub     do addii(inst,info,ii_sub,op1,op2,op0);

        -- bitové AND
        when op_bitand  do addii(inst,info,ii_and,op1,op2,op0);

        -- bitové OR
        when op_bitor   do addii(inst,info,ii_or ,op1,op2,op0);

        -- bitové XOR
        when op_bitxor  do addii(inst,info,ii_xor,op1,op2,op0);

        -- logické XOR
        when op_xor     do addii(inst,info,ii_xor,op1,op2,op0);

        -- SHL
        when op_shl     do
            if expr^.t.stype=dt_signed
              then addii(inst,info,ii_sal,op1,op2,op0);
              else addii(inst,info,ii_shl,op1,op2,op0);
              end if;

        -- SHR
        when op_shr     do
            if expr^.t.stype=dt_signed
              then addii(inst,info,ii_sar,op1,op2,op0);
              else addii(inst,info,ii_shr,op1,op2,op0);
              end if;

        -- množinové + --> OR
        when op_union   do addii(inst,info,ii_or,op1,op2,op0);

        -- množinové - --> NOT AND
        when op_diff    do
            addii(inst,info,ii_not,op2,op0,op0);
            addii(inst,info,ii_and,op1,op2,op0);


        -- množinové * --> AND
        when op_isect   do addii(inst,info,ii_and,op1,op2,op0);

        when others do verify({VERIFY=}000048,true);
        end case;

        -- provest behove kontroly operace nasobeni
        ci_rcheck.i_gen_runtime_checks(inst,info,context,rchcl_gen,pexpnode(expr)^,op1);
      
      end genop;



    ------------------------------------------------------------------------------------------------
    procedure genops (
        op1       : in out c_operand) =
    -- Generování vlastní operace pro n operandů.
    ------------------------------------------------------------------------------------------------
    var
      newcontext   : iexprcontext;               -- kontext podvýrazů

    begin
      -- zpracovat pravé podvýrazy
      loop
        declare var
          op2      : c_operand;                  -- druhý operand
        begin
          -- vygenerovat a načíst pravý podvýraz
          i_newcontext(context,newcontext,er_mode,er_typ{lm_conv,expr^.t.getctype});
          i_load(inst,info,newcontext,context{lm_conv,expr^.t.getctype},er,op2);

          -- obnovit registry
          op1.refresh(inst,info,context);
          op2.refresh(inst,info,context);

          -- vygenerovat operaci
          genop(op1,op2);

        leave
          -- uvolnit pravý operand
          op2.free(info,context);
          end declare;

        -- další operand
        er:=er^.next;
        until er=nil;
      end genops;

var
  op1              : c_operand;                  -- operand 1
--op2              : c_operand;                  -- operand 2
--optemp           : c_operand;                  -- mezivýsledek
  newcontext       : iexprcontext;               -- kontext podvýrazů
  range_checks_req : t_logical;                  -- T-je treba kontrola mezi

begin
  verify({VERIFY=}000138,expr^.arity<>eoa_n);

  -- podvýrazy
  expr^.get(el,er);

  -- připravit typ a režim generování výrazu napravo
  case expr^.oper
    -- SHL, SHR
    when op_shl, op_shr do
        er_mode:=lm_imm8_cl;
        er_typ:=nil;

    -- množinové -
    when op_diff do
        er_mode:=lm_reg_all;
        er_typ:=expr^.t.getctype;

    -- logické XOR
    when op_xor do
        er_mode:=lm_reg_all;
        er_typ:=expr^.t.getctype;

    -- ostatní operátory
    when others do
        er_mode:=lm_conv;
        er_typ:=expr^.t.getctype;
    end case;

  -- je treba kontrola mezi?
  range_checks_req:=t_runtime_check_set:[rch_ordinal_range]*expr^.get_run_checks(rchcl_load)<>t_runtime_check_set:[] or 
    t_runtime_check_set:[rch_ordinal_overflow,rch_ordinal_range]*expr^.get_run_checks(rchcl_gen)<>t_runtime_check_set:[];

  -- zkrácené přiřazení se dvěma operandy jiné než logické XOR
  -- a bez range a overflow behove kontroly; pro behove kontroly techto potrebujeme 
  -- docasnou promennou pro vysledek pred konecnym prirazenim
  if expr^.assign and (expr^.oper<>op_xor) and (er^.next=nil) and not range_checks_req then
    declare var
      op2          : c_operand;                  -- operand 2
    begin
      -- vygenerovat a načíst pravý podvýraz
      if er_mode=lm_conv then er_mode:=lm_reg; end if;
      i_newcontext(context,newcontext,er_mode,er_typ{lm_reg,typ}{expr^.t.getctype});
      i_load(inst,info,newcontext,context{lm_reg,typ}{expr^.t.getctype},er,op2);

      -- vygenerovat levý podvýraz
      i_newcontext(context,newcontext,lm_gen,nil{expr^.t.getctype});
      i_load(inst,info,newcontext,context{lm_gen,typ}{expr^.t.getctype},el,op1);

      -- obnovit registry
      op1.refresh(inst,info,context);
      op2.refresh(inst,info,context);

      -- vygenerovat operanci
      genop(op1,op2);

      -- provest behove kontroly prirazeni
      ci_rcheck.i_gen_runtime_checks(inst,info,context,rchcl_load,pexpnode(expr)^,op1);

    leave
      -- uvolnit pravý operand
      op2.free(info,context);
      end declare;

  -- zkrácené přiřazení s N operandy (nebo logické XOR se dvěma operandy)
  elsif expr^.assign then
    -- vygenerovat levý podvýraz
    i_newcontext(context,newcontext,lm_gen,nil);
    i_load(inst,info,newcontext,context,el,op1);

    declare var
      optemp       : c_operand;                  -- mezivýsledek
    begin
      -- registr na mezivýsledek
      optemp.create_new_register(inst,info,context,op1.edtype,op1.size);

      -- počáteční hodnota
      addii(inst,info,ii_mov,optemp,op1,op0);

      -- provést operaci
      genops(optemp);

      -- obnovit registry
      op1.refresh(inst,info,context);

      -- provest behove kontroly prirazeni
      ci_rcheck.i_gen_runtime_checks(inst,info,context,rchcl_load,pexpnode(expr)^,optemp);
      
      -- přiřadit
      addii(inst,info,ii_mov,op1,optemp,op0);

    leave
      -- uvolnit mezivýsledek
      optemp.free(info,context);
      end declare;

  -- normální operátor
  else
    -- vygenerovat levý podvýraz
    i_newcontext(context,newcontext,lm_reg_all,expr^.t.getctype);
    i_load(inst,info,newcontext,context{lm_reg_all,expr^.t.getctype},el,op1);

    -- provést operaci
    genops(op1);
    end if;

  -- výsledek
  vysl.transfer(op1);
  end i_gen_op_integer;



end ci_integer;
