----------------------------------------------------------------------------------------------------
module private ff_files =
-- Překladač Flexu.
-- Seznam jmen souborů.
----------------------------------------------------------------------------------------------------
-- Ondra : 17.02.2002 : Vytvořil
-- TomasH : 10.07.2003 : Pridal podporu na varianty pripon souboru
----------------------------------------------------------------------------------------------------

with
  standard.classes,
  standard.classes.lists,
  standard.files;

const
  -- extenze souborů
  ext_source       = 'src';
  ext_public       = 'pub';
  ext_private      = 'priv';



----------------------------------------------------------------------------------------------------
class c_config_item = extend c_list_item;
-- ulozeni jedne varianty pripon do seznamu
----------------------------------------------------------------------------------------------------

    var
      config_item   : t_char32str;   

    end c_config_item;

type 
  p_config_item    = ^class c_config_item;



----------------------------------------------------------------------------------------------------
class private c_file_source_external_files =
-- Poskytovatel jmen souborů a jejich input streamů.
----------------------------------------------------------------------------------------------------

    with
      standard.strings;

    var
      -- seznamy jmen souborů odděleně podle logické části
      files              : array t_part of aliased c_names;    
      searched_variants  : c_list;                       -- seznam vsech variant pripon



    ------------------------------------------------------------------------------------------------
    static extension_match_variant (
        extension: in t_text_name)               -- zkoumane extension
        return t_logical =
    -- zjisti zda dane extension odpovida jedne z variant OS/CPU/USER
    ------------------------------------------------------------------------------------------------
    var 
      iterator     : c_list_iterator;
      config_item  : p_config_item;

    begin
      -- predpoklad ze ho najdeme
      result:=true;

      -- prochazet vsechny konfiguracni varianty, zda nektera z nich neodpovida zkoumane pripone
      iterator.init(searched_variants, tlwd_forward);
      while iterator.get(p_item(config_item)) loop
        if str_compare_case_insensitive(extension, config_item^.config_item) then return end if;
        end loop;

      -- tak to bohuzel nevyslo 
      result:=false;
      end extension_match_variant;



    ------------------------------------------------------------------------------------------------
    static add_name (
        folder_name: in c_name;                  -- jméno folderu
        file_name  : in c_name;                  -- jméno souboru
        part       : in t_part) =                -- logická část
    -- Přidá zadané jméno do seznamu jmen souborů.
    ------------------------------------------------------------------------------------------------
    {
    with
      standard.console;
    }
    var
      full_name    : p_name;                     -- plné jméno souboru včetně cesty
    {
      text_name    : p_text_name;
    }
    begin
      -- sestavit plné jméno souboru včetně cesty
      new full_name;
      full_name^.join(folder_name,file_name);
    {
      full_name^.compose_name(text_name);
      write_line(text_name^);
      discard text_name;
    }
      -- doplnit do příslušného seznamu
      files[part].insert(full_name);
      end add_name;



    ------------------------------------------------------------------------------------------------
    static trace_search_path (
        folder     : in c_folder;                -- prohledávaný folder
        recursive  : in t_logical) =             -- T-rekurzivně trasovat podadresáře
    -- Prohledá zadaný folder a doplní do seznamu jmen souborů všechny vyhovující soubory. Je-li
    -- [recursive] nastaveno na [true], projde poté i všechny podadresáře.
    ------------------------------------------------------------------------------------------------

          ------------------------------------------------------------------------------------------
          procedure is_hidden_folder(folder: in c_folder) return t_logical =
          -- Test if folder is hidden, i.e. starts with '.' (empty base name) or has the attribute 
          -- "hidden".
          ------------------------------------------------------------------------------------------
          var
            base_name :  p_text_name;
            folder_name: p_name_component_file_or_folder;

          begin
            result := false;

            -- test if basename is empty
            folder_name:=folder.name.components.get_last;
            folder_name^.get_base_name(base_name);
            if str_is_empty(base_name^,".") then result:=true; return; end if;

#if #declared tomash; #and then; tomash then;
  #warning 'README';
  {
    [str_is_empty] je zde imho zbytečné. [get_base_name] by měl vrátit úplně prázdný
    řetězec.
  }
#end if;
            -- test if folder has hidden attribute
            if folder.get_attribute(tfattr_hidden) then result:=true; return; end if;

            -- possibly more hidden conditions here
          leave      
            discard base_name;
            end is_hidden_folder;

    var
      file_name    : p_name;                     -- jméno nalezeného souboru
      file_name_component : p_name_component_file_or_folder; -- jediná komponenta jména souboru
      part         : t_part;                     -- o jakou logickou část se jedná
      matches      : t_logical;                  -- T-jméno souboru vyhovuje podmínkám pro zařazení
      iterator     : c_list_iterator;            -- iterátor pro procházení seznamu jmen souborů
      sub_folder_name : p_name;                  -- jméno podadresáře
      extension    : p_name_subcomponent_extension; -- přípona jména souboru

    begin
      -- zpracovat všechny soubory
      iterator.init({%%TODO(TAG)}p_list(^folder.files)^,tlwd_forward);
      while iterator.get(p_item(file_name)) loop
        -- jedinou komponentou jména nalezeného souboru je právě jeho jméno, ale pro jistotu
        -- vezmeme tu poslední
        file_name_component:=file_name^.components.get_last;
        
        -- zjistit, zda jménou souboru končí některou z našich extenzí a odvodit při tom logickou část
        if file_name_component^.check_last_extension(ext_source) then part:=part_all; matches:=true;
        elsif file_name_component^.check_last_extension(ext_public) then part:=part_public; matches:=true;
        elsif file_name_component^.check_last_extension(ext_private) then part:=part_private; matches:=true;
        else  
          matches:=false;
          end if;

        -- končí-li soubor některou z našich extenzí, zařadit ho do seznamu dostupných souborů
        if matches then
          -- zjistit, jestli i ostatní extenze vyhovují konfiguraci aktuální cílové platformy
          if file_name_component^.subcomponents.count>2 then
            {%%FLEX}
            extension:=file_name_component^.subcomponents.get_next(file_name_component^.subcomponents.get_first);
            loop
              -- musi vyhovet vsechny mezilehle pripony
              matches:=matches and extension_match_variant(extension^.name^);
              extension:=file_name_component^.subcomponents.get_next(extension);
              until extension=file_name_component^.subcomponents.get_last;
            end if;

          -- přidat do seznamu jmen
          if matches then
            add_name(folder.name,file_name^,part);
            end if;
          end if;
        end loop;

      -- a nyní, je-li to požadováno, ještě zpracovat všechny podadresáře
      if recursive then
        iterator.init({%%TODO(TAG)}p_list(^folder.folders)^,tlwd_forward);
        while iterator.get(p_item(sub_folder_name)) loop
          -- zkontrolovat zda neni schovany = zacina teckou nebo ma atribut hidden
          if allow_hidden_dirs or not is_hidden_folder(folder.get_sub_folder(sub_folder_name^)) then 
            trace_search_path(folder.get_sub_folder(sub_folder_name^),recursive);
            end if;
          end loop;
        end if;
      end trace_search_path;



    ------------------------------------------------------------------------------------------------
    static add_search_path =
    -- Doplní do seznamu jmen souborů všechny soubory dostupné na zadané vyhledávací cestě.
    ------------------------------------------------------------------------------------------------
    var
      folder       : c_folder;                   -- folder, ve kterém se hledají soubory

    begin
      -- připravit folder
      folder.init_text_name(search_path);

      -- prohledat
      trace_search_path(folder,recursive);
      end add_search_path;


    
    ------------------------------------------------------------------------------------------------
    static add_config_extension =
    -- Doplní variantu jmena souborů do seznamu
    ------------------------------------------------------------------------------------------------
    var
      variant          : p_config_item;              -- mozna pripona souboru

    begin
      -- pripravit list item
      new variant; 
      variant^.config_item := config_extension;

      -- vlozit do seznamu
      searched_variants.insert(variant);
      end add_config_extension;



    ------------------------------------------------------------------------------------------------
    static add_default_extensions =
    -- Doplní implicitní varianty jmen souborů podle cílové platformy. 
    -- Platforma musí být již správně nastavena v [cc_def.cc_desc].
    ------------------------------------------------------------------------------------------------
    use
      cc_def.cc_desc;

    begin
      -- uložit family
      add_config_extension(cc_def.cc_desc.get_os_family_name);

      -- uložit type
      add_config_extension(cc_def.cc_desc.get_os_type_name);

      -- uložit subsystem
      add_config_extension(cc_def.cc_desc.get_os_subsystem_name);

      -- uložit cpu
      add_config_extension(cc_def.cc_desc.get_cpu_architecture_name);
      end add_default_extensions;


    
    ------------------------------------------------------------------------------------------------
    override get_source_file_name =
    -- Podle zadaných údajů nalezne plné jméno souboru.
    ------------------------------------------------------------------------------------------------
    var
      iterator     : c_list_iterator;            -- iterátor pro procházení seznamu jmen souborů
      file_name    : p_name;                     -- jméno souboru ze seznamu dostupných souborů
      file_name_component : p_name_component_file_or_folder; -- jediná komponenta jména souboru
      base_name    : p_name_subcomponent_base_name;          -- bázové jméno souboru
      text_name    : p_text_name;

    begin
      -- projít seznam všech souborů
      iterator.init(p_list(^files[part])^,tlwd_forward);
      while iterator.get(p_item(file_name)) loop
        -- zajímá nás jméno souboru
        file_name_component:=file_name^.components.get_last;

        -- a z něj jen základ jména
        base_name:=file_name_component^.subcomponents.get_first;

        -- pokud souhlasí se zadaným, máme náš soubor
        if str_compare_case_insensitive(base_name^.name^,base) then
          begin
            {%%FLEX}
            file_name^.compose_name(text_name);
            result:=text_name^;
            return;
          leave
            discard text_name;
            end;
          end if;
        end loop;
      end get_source_file_name;



    ------------------------------------------------------------------------------------------------
    override get_included_file_name =
    -- Sestaví absolutní jméno includovaného souboru. Je-li zadáno relativní jméno, vztáhne ho 
    -- k uvedené bázi. Absolutní jméno ponechá beze změny.
    ------------------------------------------------------------------------------------------------
    var
      base_name    : c_name;                     -- bázové jméno
      inc_name     : c_name;                     -- includované jméno
      full_name    : c_name;                     -- celé includované jméno
      text_name    : p_text_name;

    begin
      -- analyzovat dodaná jména
      inc_name.decompose_name(name,tnt_unspecified);

      -- je to absolutní nebo relativní jméno ?
      if inc_name.name_type=tnt_relative

        -- relativní
        then 
          -- analyzovat bázi
          --base_name.decompose_name(base,tnt_unspecified);

          -- zkopírovat zadanou bázi, zbavit se jména souboru a ponechat jen adresář
          begin
            base.compose_name(text_name);
            base_name.decompose_name(text_name^,tnt_unspecified);
            base_name.components.delete_last; --%%TODO(LIB) jen je-li to c_name_component_file
          leave
            discard text_name;
            end;

          -- sloučit s bází
          full_name.join(base_name,inc_name);

          -- převést na textové jméno
          full_name.compose_name(text_name);

        -- absolutní
        else
          -- převést zase zpátky na textové jméno
          inc_name.compose_name(text_name);
          end if;

      -- předat ven
      result:=text_name^;

    leave
      discard text_name;
      end get_included_file_name;



    ------------------------------------------------------------------------------------------------
    exit =
    ------------------------------------------------------------------------------------------------
    -- destructor, uvolni alokovanou pamet
    ------------------------------------------------------------------------------------------------
    begin
      searched_variants.delete_all;
      end exit;

    end c_file_source_external_files;



----------------------------------------------------------------------------------------------------
procedure replace_source_extension =
-- Pokud jméno souboru končí příponou typickou pro zdroják, tak ji nahradí uvedenou příponou
----------------------------------------------------------------------------------------------------
var
  file_name_component : p_name_component_file_or_folder; -- jediná komponenta jména souboru

begin
  -- poslední komponenta je vlastní jméno souboru
  file_name_component:=source_name.components.get_last;

  -- má-li jméno souboru nějakou příponu
  if file_name_component^.subcomponents.count>=2 and then
  -- a je to přípona typická pro zdroják
    (file_name_component^.check_last_extension(ext_source) 
  or file_name_component^.check_last_extension(ext_public) 
  or file_name_component^.check_last_extension(ext_private))

    -- tak ji nahradit uvedenou příponou
    then
      file_name_component^.replace_last_extension(extension);

    -- jinak přidat na konec
    else
      file_name_component^.append_extension(extension);
      end if;
  end replace_source_extension;



----------------------------------------------------------------------------------------------------
procedure init_external_file_source =
-- Dosadí do překladače coby poskytovatele jmen souborů a jejich input streamů instanci
-- [c_file_source_external_files].
----------------------------------------------------------------------------------------------------
use
  cc_def.cc_var;

begin
  new p_file_source_external_files(cc_def.cc_var.cfg_files);
  end init_external_file_source;

end ff_files;