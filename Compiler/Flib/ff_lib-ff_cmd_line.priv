----------------------------------------------------------------------------------------------------
module private ff_cmd_line =
-- Zpracování příkazové řádky.
----------------------------------------------------------------------------------------------------
-- ???????  ?????      : Vytvoril
-- TomasH : 10.07.2003 : Pridal vyhodnoceni -TX a -AHD parametru
-- TomasH : 10.07.2003 : Pridal podporu na varianty pripon souboru
----------------------------------------------------------------------------------------------------

with
  standard.names,
  standard.strings,
  standard.program_control,
  ff_lib.ff_folders,
  ff_lib.ff_files;

----------------------------------------------------------------------------------------------------
procedure check_parameter (
    param          : in t_char32ustr;            -- testovaný parametr
    prefix         : in t_char32ustr;            -- prefix parametru
    value          : in t_logical)           -- <>NIL, smí-li mít parametr hodnotu
    return t_logical =
-- Zkontroluje, jestli parameter odpovídá zadanému prefixu
----------------------------------------------------------------------------------------------------
var
  tmp : t_char32str;

begin
  if param<>'' and then (param[1]="-" or param[1]="/") then 
    str_copy(param,2,prefix:length+1,tmp);
    result:=prefix=str_to_upper(tmp) and then (value or else param:length=prefix:length+1);
    end if;
  end check_parameter;



----------------------------------------------------------------------------------------------------
procedure retrieve_file_name (
    param          : in t_char32ustr;            -- testovaný parametr
    prefix         : in t_char32ustr;            -- prefix parametru
    value          : out p_text_name) =          -- jméno souboru
-- Z parametru odseparuje jméno souboru.
----------------------------------------------------------------------------------------------------
begin
  new value range param:length-prefix:length-1;
  str_copy(param,prefix:length+2,param:length,value^);
  end retrieve_file_name;



----------------------------------------------------------------------------------------------------
procedure retrieve_parameter (
    param          : in t_char32ustr;            -- testovaný parametr
    prefix         : in t_char32ustr;            -- prefix parametru
    value          : out p_char32ustr) =         -- hodnota parametru
-- Z parametru odseparuje jeho hodnotu
----------------------------------------------------------------------------------------------------
begin
  new value range param:length-prefix:length-1;
  str_copy(param,prefix:length+2,param:length,value^);
  end retrieve_parameter;



----------------------------------------------------------------------------------------------------
procedure retrieve_number (
    os             : in class c_text_writer;     -- chybový výstup
    param          : in t_char32ustr;            -- testovaný parametr
    prefix         : in t_char32ustr;            -- prefix parametru
    first          : in t_unsigned;              -- minimální dovolená hodnota
    last           : in t_unsigned)              -- maximální dovolená hodnota
    return t_unsigned =
-- Z parametru odseparuje jeho hodnotu
----------------------------------------------------------------------------------------------------
with
  standard.conversions;

var
  value            : t_unsigned;
  error            : t_conversion_result;
  tmp              : t_char32str;

begin
  str_copy(param,prefix:length+2,param:length,tmp);
  string_to_unsigned_primitive(tmp,10,value,error);
  if error<>tcres_ok or value>last or value<first then
    os.write('Value of parameter "-');os.write(prefix);os.write('" out of range');
    raise fcc_error;
    end if;
  result:=value;
  end retrieve_number;



----------------------------------------------------------------------------------------------------
procedure check_unprefixed (
    param          : in t_char32ustr)            -- parametr
    return t_logical =
-- True, jestliže parametr nemá prefix.
----------------------------------------------------------------------------------------------------
begin
  result:=param='' or else not (param[1]="-" or param[1]="/");
  end check_unprefixed;



----------------------------------------------------------------------------------------------------
procedure print_command_line_help =
-- Vypíše nápovědu k řádkovým parametrům do uvedeného streamu.
----------------------------------------------------------------------------------------------------
begin
  os.write_line('Syntax: FCC { <option> } <source file name> { <option> }');
  os.write_line('');
  os.write_line('Target system specification:');
  os.write_line('    -TO:<os>      Target Operating system');                   -- fcc, fjitc param
  os.write_line('    -TT:<type>    Target OS Type');                            -- fcc, fjitc param
  os.write_line('    -TS:<subsys>  Target Subsystem');                          -- fcc, fjitc param
  os.write_line('    -TC:<cpu>     Target CPU');                                -- fcc, fjitc param
  os.write_line('    -TU:<id>      User defined variant');                      -- fcc, fjitc param, fjitc prompt
  os.write_line('    -XE:<ext>     target eXecutable Extension');               -- fcc, fjitc param, fjitc prompt
#if flex_product<>flex_fullflex then;  
  os.write_line('    -PT:<type>    Partiotion Type (RUNTIME, GLOBAL, TEMPORARY (default))'); -- fjitc param, fjitc prompt
#end if;
  os.write_line('');
  os.write_line('Directories:');
  os.write_line('    -SD:<dir>     Search Directory');                          -- fcc, fjitc param, fjitc prompt
  os.write_line('    -SDR:<dir>    Search Directory - Recursive');              -- fcc, fjitc param, fjitc prompt
  os.write_line('    -ODX:<dir>    Output Directory for the eXecutable');       -- fcc, fjitc param, fjitc prompt
  os.write_line('    -ODM:<dir>    Output Directory for precompiled Modules');  -- fcc, fjitc param, fjitc prompt
  os.write_line('');
  os.write_line('Compilation options:');
  os.write_line('    -NL           No Listing');                                -- fcc, fjitc param, fjitc prompt
  os.write_line('    -ND           No Debug information');                      -- fcc, fjitc param, fjitc prompt
  os.write_line('    -NR           No Run-time');                               -- fcc
  os.write_line('    -SCO          Syntax Check Only');                         -- fcc
  os.write_line('    -SLA:<level>  Security Level Allowed (0 = default, unrestricted)'); -- fcc, fjitc param, fjitc prompt
  os.write_line('    -SLR:<level>  Security Level Required (max = default, unrestricted)'); -- fcc, fjitc param, fjitc prompt
  os.write_line('');
  os.write_line('Miscellaneous:');
  os.write_line('    -H            prints this Help page');                     -- fcc
  os.write_line('    -AHD          Allow scanning of Hidden Directories');      -- fcc, fjitc param, fjitc prompt
  os.write_line('    -NS           No Shared file access');                     -- fcc, fjitc param, fjitc prompt
  os.write_line('    -VER          displays full VERsion information');         -- fcc, fjitc param, fjitc prompt
  os.write_line('    -VL:<level>   Verbosity Level (0 = low, 1 = default)');    -- fcc, fjitc param, fjitc prompt
  os.write_line('    -CTML:<level> Compile-Time Metadata generation Level (0 = none, 1 = default)'); -- fcc
  os.write_line('    -DX:<qid>     Dump entity in XML');                        -- fcc, fjitc param, fjitc prompt
  os.write_line('');
  os.write_line('All parameters are case-insensitive');
  os.write_line('See documentation for the list of supported values of specific parameters');
  end print_command_line_help;



----------------------------------------------------------------------------------------------------
procedure print_version (
    os             : in class c_text_writer) =
-- Vypíše informace o verzi.
----------------------------------------------------------------------------------------------------
with
  standard.conversions;

begin
  os.write('Revision:         '); os.write_line(unsigned_to_string(flex_revision));
  os.write('Build:            '); os.write_line(unsigned_to_string(flex_build));
--os.write('Time stamp (UTC): '); os.write(#environment compile_date;);os.write(' ');os.write_line(#environment compile_time;);
  end print_version;



----------------------------------------------------------------------------------------------------
procedure parse_command_line =
-- Zpracuje příkazovou řádku překladače.
----------------------------------------------------------------------------------------------------
with
  ff_lib.ff_files;

use
  cc_def,
  cc_def.cc_var,
  cc_def.cc_desc;
  
var
  cmd_line         : p_command_line_parameters;  -- blok řádkových parametrů
  folder_list      : c_folder_list;              -- seznam adresaru pro prohledavani     
  os_family_name   : p_char32ustr;               -- vyplnena OS family
  os_type_name     : p_char32ustr;               -- vyplneny OS type
  os_subsystem_name: p_char32ustr;               -- vyplneny OS subsystem
  cpu_arch_name    : p_char32ustr;               -- vyplnena CPU architektura

begin
  --- %%TECH Konfigurace adresářů ------------------------------------------------------------------
  -- Prochazeni adresaru a sestaveni seznamu pouzitelnych filu je treba odlozit az po nacteni vsech
  -- paramteru, protoze maji vliv na to ktere fily se pouziji. Tyka se to techto parametru:
  --    -AHD                   skryte adresare
  --    -TO, TT, TS, TC, TU    prepinace platformy
  --------------------------------------------------------------------------------------------------

  -- nastavit stream pro zápis průběhu zpracování příkazové řádky
  cc_def.cc_var.output:=^os;

  -- dodaný příkazový řádek rozdělit na jednotlivé parametry
  parse_command_line_parameters(full_cmd_line,cmd_line,ignore_first);

  -- jsou vůbec nějaké ?
  if cmd_line^:length=0 then
    -- jsou prametry vyžadovány 
    if pars_required

      -- ano => pak je to chyba
      then
        print_command_line_help(os);
        raise fcc_error;

      -- ne => nic se neděje
      else 
        return;
        end if;
    end if;   

  -- zpracovat
  for i in cmd_line^:range loop

    -- SD = Search Directory
    if check_parameter(cmd_line^[i]^,'SD:',true) then
      declare var
        search_dir : p_text_name;                -- adresář pro vyhledávání                               

      begin
        -- získat jméno souboru
        retrieve_file_name(cmd_line^[i]^,'SD:',search_dir);

        -- doplnit do seznamu adresářů pro odlozene vyhledávání
        folder_list.add_directory(search_dir^, false);

      leave
        -- uklid
        discard search_dir;
        end declare;
                                          
    -- SD = Search Directory - Recursive
    elsif check_parameter(cmd_line^[i]^,'SDR:',true) then
      declare var
        search_dir : p_text_name;                -- adresář pro vyhledávání                               

      begin
        -- získat jméno souboru
        retrieve_file_name(cmd_line^[i]^,'SDR:',search_dir);

        -- doplnit do seznamu adresářů pro odlozene vyhledávání
        folder_list.add_directory(search_dir^, true);

      leave
        -- uklid
        discard search_dir;
        end declare;

    -- ODX = Output Directory for eXecutables
    elsif check_parameter(cmd_line^[i]^,'ODX:',true) then
      -- získat jméno adresáře
      retrieve_file_name(cmd_line^[i]^,'ODX:',config.exe_directory);
      -- %%TODO(LIB) zkontrolovat existenci adresáře

    -- ODX = Output Directory for Modules
    elsif check_parameter(cmd_line^[i]^,'ODM:',true) then
      -- získat jméno adresáře
      retrieve_file_name(cmd_line^[i]^,'ODM:',config.mod_directory);
      -- %%TODO(LIB) zkontrolovat existenci adresáře

    -- XE = eXecutable Extension
    elsif check_parameter(cmd_line^[i]^,'XE:',true) then
      -- získat příponu
      retrieve_file_name(cmd_line^[i]^,'XE:',config.exe_extension);

    -- TO = Target Operating system
    elsif check_parameter(cmd_line^[i]^,'TO:',true) then
      -- ziskat os family name
      retrieve_parameter(cmd_line^[i]^,'TO:',os_family_name);

    -- TT = Target Operating system type
    elsif check_parameter(cmd_line^[i]^,'TT:',true) then
      -- ziskat os type name
      retrieve_parameter(cmd_line^[i]^,'TT:',os_type_name);

    -- TS = Target Subsystem
    elsif check_parameter(cmd_line^[i]^,'TS:',true) then
      -- ziskat os subsystem name
      retrieve_parameter(cmd_line^[i]^,'TS:',os_subsystem_name);

    -- TC = Target CPU
    elsif check_parameter(cmd_line^[i]^,'TC:',true) then
      -- ziskat cou architecture name
      retrieve_parameter(cmd_line^[i]^,'TC:',cpu_arch_name);

    -- TU = User defined variant
    elsif check_parameter(cmd_line^[i]^,'TU:',true) then
      declare var
        user_variant_name : p_char32ustr;        -- vyplnena uzivatelska varianta
        
      begin  
        -- ziskat uzivatelskou konfiguraci
        retrieve_parameter(cmd_line^[i]^,'TU:',user_variant_name);

        -- rovnou ulozime do seznamu platnych pripon
        p_file_source_external_files(cc_def.cc_var.cfg_files)^.add_config_extension(user_variant_name^);
        
      leave
        -- uklid
        discard user_variant_name;
        end declare;
    
  #if flex_product<>flex_fullflex then;  
    -- PT = Partition Type
    elsif check_parameter(cmd_line^[i]^,'PT:',true) then
      declare var
        partition_type : p_char32ustr;           -- typ partition
        
      begin  
        -- získat typ partition
        retrieve_parameter(cmd_line^[i]^,'PT:',partition_type);
      
        -- nastavit
        cc_def.get_partition_type_by_name(partition_type^,config.partition_type,os);
        
      leave
        -- uvolnit paměť
        discard partition_type;
        end declare;
  #end if;

    -- NL = No Listing
    elsif check_parameter(cmd_line^[i]^,'NL',nil) then
      cc_def.cc_var.cfg_listing:=false;

    -- NR = No Run-time
    elsif check_parameter(cmd_line^[i]^,'NR',nil) then
      cc_def.cc_var.cfg_no_runtime:=true;

    -- ND = No Debug information
    elsif check_parameter(cmd_line^[i]^,'ND',nil) then
      cc_def.cc_var.cfg_no_debug_info:=true;

    -- NS = No Shared file access
    elsif check_parameter(cmd_line^[i]^,'NS',nil) then
      cc_def.cc_var.cfg_sharing:=false;

    -- SCO = Syntax Check Only
    elsif check_parameter(cmd_line^[i]^,'SCO',nil) then
      cc_def.cc_var.cfg_syntax_check_only:=true;

    -- SLA = Security Level Allowed
    elsif check_parameter(cmd_line^[i]^,'SLA:',true) then
      config.sec_level:=retrieve_number(os,cmd_line^[i]^,'SLA:',cc_def.t_security_level:first,cc_def.t_security_level:last);

    -- SLR = Security Level Required
    elsif check_parameter(cmd_line^[i]^,'SLR:',true) then
      config.sec_required:=retrieve_number(os,cmd_line^[i]^,'SLR:',cc_def.t_security_level:first,cc_def.t_security_level:last);

    -- AHD - Allow scanning of Hidden Directories
    elsif check_parameter(cmd_line^[i]^,'AHD',nil) then
      p_file_source_external_files(cc_def.cc_var.cfg_files)^.allow_hidden_dirs:=true;

    -- VL = Verbosity Level
    elsif check_parameter(cmd_line^[i]^,'VL:',true) then
      cc_def.cc_var.cfg_verbosity:=retrieve_number(os,cmd_line^[i]^,'VL:',
          cc_def.cc_var.cfg_verbosity:first,
          cc_def.cc_var.cfg_verbosity:last);

    -- H, ? = Help
    elsif check_parameter(cmd_line^[i]^,'H',nil) or check_parameter(cmd_line^[i]^,'?',nil) then
      print_command_line_help(os);
      raise fcc_error;

    -- VER = display VERsion information
    elsif check_parameter(cmd_line^[i]^,'VER',nil) then
      print_version(os);
      raise fcc_error;

    -- CTML - dump compile time metadat
    elsif check_parameter(cmd_line^[i]^,'CTML:',true) then
      cc_def.cc_var.cfg_ctm_level:ord:=retrieve_number(os,cmd_line^[i]^,'CTML:',
          cc_def.cc_var.cfg_ctm_level:first:ord,
          cc_def.cc_var.cfg_ctm_level:last:ord);

    -- DX - xml dump
    elsif check_parameter(cmd_line^[i]^,'DX:',true) then
      retrieve_parameter(cmd_line^[i]^,'DX:',cc_def.cc_var.cfg_xml_dump_root_entity);

    -- parametr bez prefixu je jméno překládaného souboru
    elsif check_unprefixed(cmd_line^[i]^) then     
      -- nebylo již jméno překládaného souboru určeno?
      if config.src_name<>nil then
        os.write_line('Duplicate source file name');
        raise fcc_error;
        end if;

      -- nastavit jako jméno souboru
      config.set_src_name(cmd_line^[i]^);

    -- ostatní parametry neznáme
    else
      --%%TODO(DYNAMIC) os.write_line('Unknown parameter "' & cmd_line^[i]^ & """);
      os.write('Unknown parameter "'); os.write(cmd_line^[i]^); os.write_line('"');
      raise fcc_error;
      end if;
    end loop;

  -- ted jsou vsechny parametry nactene, zkontrolujeme zda jsou zname a pripustnost jejich kombinaci
  {%%TODO(MESSAGE)  chtelo by to misto extra definovane exception pouzit fcc_error a poslat ji parametrem}
  if os_family_name   <>nil then cc_def.cc_desc.set_os_family(os_family_name^,os);       end if;
  if os_type_name     <>nil then cc_def.cc_desc.set_os_type(os_type_name^,os);           end if;
  if os_subsystem_name<>nil then cc_def.cc_desc.set_os_subsystem(os_subsystem_name^,os); end if;
  if cpu_arch_name    <>nil then cc_def.cc_desc.set_cpu_architecture(cpu_arch_name^,os); end if;

  -- nastavit prislusne identifikatory do file_source, aby vedel jake jsou pripustne pripony souboru
  p_file_source_external_files(cc_def.cc_var.cfg_files)^.add_default_extensions;

  -- vsechny parametry nactene a overene, takze je mozne na jejich zaklade nacist seznam souboru   
  folder_list.update_file_list;

leave
  -- parametry už nebudou potřeba
  discard_command_line_parameters(cmd_line);
  discard os_family_name;
  discard os_type_name;
  discard os_subsystem_name;
  discard cpu_arch_name;
  end parse_command_line;



end ff_cmd_line;