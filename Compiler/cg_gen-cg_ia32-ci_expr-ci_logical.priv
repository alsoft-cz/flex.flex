----------------------------------------------------------------------------------------------------
module private ci_logical =
-- Překladač Flexu.
-- Logické operace.
----------------------------------------------------------------------------------------------------
-- Ondra : 18.04.2003 : Vytvořil
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure i_gen_logical_chain =
-- Generování řetězu konjunkcí/disjunkcí.
----------------------------------------------------------------------------------------------------
var
  sub              : pexpnode;                   -- podvýraz
--op1              : c_operand;                  -- operand
  opassign         : c_operand;                  -- levá strana přiřazení
  fallthru         : itarget;                    -- cíl skoku fall-thru
  innerjmp         : itarget;                    -- cíl vnitřního skoku
  ttarget          : itarget;                    -- cíl skoku při True
  ftarget          : itarget;                    -- cíl skoku při False
  cc               : icond;                      -- kód podmínky skoku
  newcontext       : iexprcontext;               -- kontext podvýrazů

begin
  verify({VERIFY=}000135,expr^.arity<>eoa_n);

  ----- %%TECH Strategie generování řetězu konjunkcí/disjunkcí -----------
  --
  --   AND THEN             OR ELSE
  --   -----------------    -----------------
  --   CMP <výraz 1>,1      CMP <výraz 1>,1
  --   JNE ftarget          JE  ttarget
  --   CMP <výraz 2>,1      CMP <výraz 2>,1
  --   JNE ftarget          JE  ttarget
  --   ...
  --   CMP <výraz n>,1      CMP <výraz n>,1
  --   JNE ftarget          JE  ttarget
  --   JMP ttarget          JMP ftarget
  --
  --   AND                  OR
  --   -----------------    -----------------
  --   MOV reg,<výraz 1>    MOV reg,<výraz 1>
  --   AND reg,<výraz 2>    OR  reg,<výraz 2>
  --   ...                  ...
  --   AND reg,<výraz n>    OR  reg,<výraz n>
  --   JZ  ftarget          JZ  ftarget
  --   JMP ttarget          JMP ttarget
  --
  -- Při vyhodnocování AND/OR se navíc zjišťuje složitost podvýrazu a je-li
  -- příliš vysoká (obsahuje např. volání procedury), použije se strategie
  -- pro sekvenční formu (AND THEN/OR ELSE). Zbytek výrazu (jednoduchý) se
  -- pak dojede standardní formou. Též pokud je výraz hodně dlouhý (desítky
  -- instrukcí), vloží se na vhodná místa testy na mezivýsledek.
  -- -------------------------------------------------------------------------
  -- %%X ---------------------- ^^^^^ dodělat ^^^^^ --------------------------

  --- zvolit návěští pro skok při True resp. False ---
  -- oba skoky fall-thru => vytvořit dva cíle skoku
  if (ttarget_ext=tgfallthru) and (ftarget_ext=tgfallthru) then
    newtarget(info,ttarget);
    newtarget(info,ftarget);

  -- aspoň jeden skok fall-thru => alokovat návěští pro skok fall-thru
  elsif (ttarget_ext=tgfallthru) or (ftarget_ext=tgfallthru) then
    ttarget:=ttarget_ext;
    ftarget:=ftarget_ext;
    newtarget(info,fallthru);

  -- žádný fall-thru => jen převzít návěští
  else
    ttarget:=ttarget_ext;
    ftarget:=ftarget_ext;
    end if;

  -- Poznámka: Nyní je jisté, že nikdy nenastane případ, že by skoky při True i při False
  -- byly oba typu fall-thru. Situace, kdy obě z venku dodaná návěští jsou fall-thru, se
  -- ošetřuje až při sestavování konečného výsledku.

  --- vygenerovat výraz ---
  if expr^.oper in expopertypeset:[op_and_then,op_or_else{%%X},op_and,op_or]

    -- sekvenční forma
    then
      --- zvolit cíl vnitřního skoku ---
      -- záleží na operátoru
      if expr^.oper in expopertypeset:[op_and_then{%%X},op_and]
        -- AND [ THEN ] => skok při prvním nepravdivém operandu
        then innerjmp:=ftarget
        -- OR [ ELSE ] => skok při prvním pravdivém operandu
        else innerjmp:=ttarget
        end if;

      -- nevyšel náhodou fall-thru skok => korekce hodnoty návěští
      if innerjmp=tgfallthru then
        innerjmp:=fallthru;
        end if;

      --- zpracovat všechny podvýrazy ---
      sub:=expr^.sub;
      while sub<>nil loop
      { Ondra 1.7.2002 : Oprava byla chybná. Zrušeno.

        -- Ondra 28.6.2002 : Poslední operand v řadě, který je opět řetězec konjunkcí/disjunkcí se
        -- musí zpracovávat standardně bez ohledu na tuto skutečnost, protože například u výrazu:
        --     (c>="a" and c<="z") or (c>="A" and c<="Z") or c="_" or (c>="0" and c<="9")
        -- je výsledek posledního výrazu chybně interpretován. Jediná možnost, jak tento případ
        -- optimalizovat, je předávat do I_GEN_LOGICAL_CHAIN informaci, že se jedná o poslední
        -- podvýraz nadřazeného řetězu konjunkcí/disjunkcí (ověřit!).
      }
        if sub^.ntype=nt_operator and pexpoper(sub)^.oper in expopertypeset:[op_and_then,op_or_else,op_and,op_or] -- (* and (sub^.next<>nil) *)

          -- podvýraz je opět řetěz konjunkcí/disjunkcí
          then
          -- (*
            if sub^.next=nil

              -- poslední výraz, současně provede závěrečný skok
              then i_gen_logical_chain(inst,info,context,pexpoper(sub),ttarget,ftarget,vysl)

              -- mezilehlý výraz
              else
          -- *) 
                declare var
                  op1 : c_operand;
                begin
                  if expr^.oper in expopertypeset:[op_and_then{%%X},op_and]

                    -- A and then (B and/or C)
                    then i_gen_logical_chain(inst,info,context,pexpoper(sub),tgfallthru,innerjmp,op1)

                    -- A or else (B and/or C)
                    else i_gen_logical_chain(inst,info,context,pexpoper(sub),innerjmp,tgfallthru,op1)
                    end if;

                leave
                  -- uvolnit operand
                  op1.free(info,context);
                  end declare;
          -- (*
                end if;
          -- *)

          -- ostatní případy
          else
            declare var
              op1 : c_operand;
            begin
              -- vygenerovat výraz (rozhodující je typ podvýrazu, protože typ
              -- nadřazeného výrazu je téměř vždy univerzální logical a stejně
              -- výsledek podvýrazu ihned porovnám na nulu a zahodím)
              i_newcontext(context,newcontext,lm_gen,nil{sub^.t.getctype});
              i_load(inst,info,newcontext,context{lm_gen,expr^.t.getutype},sub,op1);
              -- %% Nemělo by zde být expr^.nattyp ?
              -- Ona mi ho ale asi optimalizace zničí...

              -- obnovit registry
              op1.refresh(inst,info,context);

              -- vygenerovat porovnání
              case op1.optype
                -- přímo kód podmínky
                when io_cc do
                    -- podmínka skoku
                    if expr^.oper in expopertypeset:[op_and_then{%%X},op_and]
                      then cc:=icondneg[op1.cc];
                      else cc:=op1.cc;
                      end if;

                -- paměť/registr
                when io_mem,io_reg do
                    -- test na nulu
                    addii(inst,info,ii_cmp,op1,op_0,op0);

                    -- podmínka skoku
                    if expr^.oper in expopertypeset:[op_and_then,{%%X}op_and]
                      then cc:=ic_z;
                      else cc:=ic_nz;
                      end if;

                -- na stacku
                when io_stack do
                    declare var
                      op_stack_top : c_operand;
                    begin
                      --%%TODO %%X Tohle je fuj,fuj,predelat optimalneji na POPnuti do docasneho registru!

                      -- hodnota operandu na stacku
                      op_stack_top.create_memory_address(inst,info,context,op1.edtype,op1.size,ir_esp,0);

                      -- test na nulu
                      addii(inst,info,ii_cmp,op_stack_top,op_0,op0);

                      -- vyhodit operand ze stacku
                      op_stack_top.shift_displacement(t_signed(op1.size));
                      addii(inst,info,ii_lea,op_esp,op_stack_top,op0);

                      -- podmínka skoku
                      if expr^.oper in expopertypeset:[op_and_then,{%%X}op_and]
                        then cc:=ic_z;
                        else cc:=ic_nz;
                        end if;
                    leave
                      -- uvolnit operand
                      op_stack_top.free(info,context);
                      end declare;

                when others do verify({VERIFY=}000096,true);
                end case;

              if sub^.next<>nil
                -- vnitřní skok
                then addjump(inst,info,context,cc,innerjmp)
                -- závěrečný skok
                else i_gen_logical_jump(inst,info,context,expr^.oper in expopertypeset:[op_and_then{%%X},op_and],cc,ttarget,ftarget,vysl)
                end if;

              -- není to první operand zkráceného přiřazení ?
              if expr^.assign and then sub=expr^.sub then
                -- schovat si operand
                opassign.transfer(op1);
                end if;

            leave
              -- uvolnit operand
              op1.free(info,context);
              end declare;
            end if;

        -- další podvýraz
        sub:=sub^.next;
        end loop;

      -- Ondra 1.7.2002 : Kompletně předěláno zpracování výsledku. Původní řešení nefungovalo.

      --- nebyly náhodou oba externí cíle skoku fall-thru ? ---
      if (ttarget_ext=tgfallthru) and (ftarget_ext=tgfallthru)

        -- ano => vygenerovat přiřazení výsledku
        then
          -- budeme potřebovat fall-thru návěští
          newtarget(info,fallthru);

          -- nebylo to zkrácené přiřazení ?
          if expr^.assign

            -- ano => rovnou přiřadit do výsledku
            then
              -- případ True: dosadit adresu návěští pro skok na toto místo
              settarget(info,ttarget,getaddr(inst));

              -- obnovit operand
              opassign.refresh(inst,info,context);

              -- přiřadit True
              addii(inst,info,ii_mov,opassign,op_1,op0);

              -- skok na konec
              addjump(inst,info,context,ic_ucond,fallthru);

              -- případ False: dosadit adresu návěští pro skok na toto místo
              settarget(info,ftarget,getaddr(inst));

              -- přiřadit False
              addii(inst,info,ii_mov,opassign,op_0,op0);

              -- výsledek je nezajímavý, přiřazení nemá hodnotu

            -- ne => podle výsledku nastavit Carry Flag
            else
              -- případ True: dosadit adresu návěští pro skok na toto místo
              settarget(info,ttarget,getaddr(inst));

              -- nastavit Carry Flag
              addii(inst,info,ii_stc,op0,op0,op0);

              -- skok na konec
              addjump(inst,info,context,ic_ucond,fallthru);

              -- případ False: dosadit adresu návěští pro skok na toto místo
              settarget(info,ftarget,getaddr(inst));

              -- shodit Carry Flag
              addii(inst,info,ii_clc,op0,op0,op0);

              -- výsledek
              vysl.create_condition(ic_c);
              end if;

          -- výsledný fall-thru: dosadit adresu návěští pro skok na toto místo
          settarget(info,fallthru,getaddr(inst));

        -- ne => výsledek je celkem nezajímavý, protože je obsažen v provedených skocích
        else
          verify({VERIFY=}000602,expr^.assign);

          -- dosadit cíl skoku fall-thru
          if ttarget=tgfallthru or ftarget=tgfallthru then
            settarget(info,fallthru,getaddr(inst));
            end if;

          -- výsledek veškerý žádný, to za nás zařídily již ty skoky
          end if;

    -- standardní forma
    else
      unimplemented({UNIMP=}000030);
      end if;

leave
  -- uvolnit operand
  opassign.free(info,context);
  end i_gen_logical_chain;



----------------------------------------------------------------------------------------------------
procedure i_gen_op_assign_logical =
-- Přiřazení logické hodnoty.
----------------------------------------------------------------------------------------------------
var
  el               : pexpnode;                   -- levý podvýraz
  er               : pexpnode;                   -- pravý podvýraz
  op1              : c_operand;                  -- operand 1
  op2              : c_operand;                  -- operand 2
  newcontext       : iexprcontext;               -- kontext podvýrazů

begin
  verify({VERIFY=}000133,expr^.arity<>eoa_2);

  -- podvýrazy
  expr^.get(el,er);

  -- vygenerovat a načíst podvýrazy
  i_load_binary(inst,info,context,iop_cc,expr,expr^.t.getctype,el,er,op1,op2);

  -- uložit
  if op2.optype=io_cc

    -- podle podmínky
    then addset(inst,info,context,op2.cc,op1)

    -- přímo hodnota
    else addii(inst,info,ii_mov,op1,op2,op0)
    end if;

  -- předat výsledek
  vysl.transfer(op1);

leave
  -- uvolnit operandy
  op1.free(info,context);
  op2.free(info,context);
  end i_gen_op_assign_logical;



----------------------------------------------------------------------------------------------------
procedure i_gen_op_logical_and_or =
-- Logické operace AND, OR, AND THER a OR ELSE.
----------------------------------------------------------------------------------------------------
begin
  -- generovat řetěz konjunkcí/disjunkcí
  i_gen_logical_chain(inst,info,context,pexpoper(expr),tgfallthru,tgfallthru,vysl);
  end i_gen_op_logical_and_or;



----------------------------------------------------------------------------------------------------
procedure i_gen_op_logical_xor =
-- Logická operace XOR.
----------------------------------------------------------------------------------------------------
with
  ci_integer;

begin
  -- algoritmus je totožný s bitovým XOR, proto je implementován
  -- v rámci celočíselných operací
  i_gen_op_integer(inst,info,context,expr,vysl);
  end i_gen_op_logical_xor;



end ci_logical;
