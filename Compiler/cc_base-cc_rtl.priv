----------------------------------------------------------------------------------------------------
module private cc_rtl =
-- Překladač Flexu.
-- Vazba na run-time knihovnu.
----------------------------------------------------------------------------------------------------
-- Ondra : 11.11.2001 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  cc_def.cc_var,cc_def.cc_codes;

var
  -- tabulka přiřazených procedur
  rtl_entities     : array t_rtl_entity of pentity;

type
  -- popis interní procedury
  t_rtl_entity_desc= record
      txt          : aliased tshortident;
      rtl          : t_rtl_entity;
      etype        : tentitytype;
      end record;

var
  -- tabulka interních procedur
  rtl_entities_desc: const array 0..47 of t_rtl_entity_desc := [
      [for txt use 'ABSTRACT_ERROR'          , for rtl use rtl_abstract_error          , for etype use et_message  ],
      [for txt use 'ALLOC'                   , for rtl use rtl_alloc                   , for etype use et_procedure],
      [for txt use 'ALLOC_AND_FILLZ'         , for rtl use rtl_alloc_and_fillz         , for etype use et_procedure],
      [for txt use 'ALLOC_TASK_VAR_ID'       , for rtl use rtl_alloc_task_var_id       , for etype use et_procedure],--2
      [for txt use 'ANCESTOR_ADJUST'         , for rtl use rtl_ancestor_adjust         , for etype use et_procedure],
      [for txt use 'ANCESTOR_COMMIT'         , for rtl use rtl_ancestor_commit         , for etype use et_procedure],
      [for txt use 'ANCESTOR_ENTRY'          , for rtl use rtl_ancestor_entry          , for etype use et_procedure],
      [for txt use 'ANCESTOR_EXIT'           , for rtl use rtl_ancestor_exit           , for etype use et_procedure],
      [for txt use 'ANCESTOR_INIT'           , for rtl use rtl_ancestor_init           , for etype use et_procedure],
      [for txt use 'ANCESTOR_ROLLBACK'       , for rtl use rtl_ancestor_rollback       , for etype use et_procedure],
      [for txt use 'BEGIN_SEQUENTIAL'        , for rtl use rtl_begin_sequential        , for etype use et_procedure],
      [for txt use 'CALL_ADJUST'             , for rtl use rtl_call_adjust             , for etype use et_procedure],
      [for txt use 'CALL_COMMIT'             , for rtl use rtl_call_commit             , for etype use et_procedure],
      [for txt use 'CALL_ENTRY'              , for rtl use rtl_call_entry              , for etype use et_procedure],
      [for txt use 'CALL_EXIT'               , for rtl use rtl_call_exit               , for etype use et_procedure],
      [for txt use 'CALL_INIT'               , for rtl use rtl_call_init               , for etype use et_procedure],
      [for txt use 'CALL_ROLLBACK'           , for rtl use rtl_call_rollback           , for etype use et_procedure],
      [for txt use 'CHECK_CODE'              , for rtl use rtl_check_code              , for etype use et_procedure],
      [for txt use 'CONSTRAINT_ERROR'        , for rtl use rtl_constraint_error        , for etype use et_message  ],
      [for txt use 'DISCARD_EXCEPTION'       , for rtl use rtl_discard_exception       , for etype use et_procedure],
      [for txt use 'EARLY_RUNTIME_INITIALIZE', for rtl use rtl_early_runtime_initialize, for etype use et_procedure],
      [for txt use 'END_SEQUENTIAL'          , for rtl use rtl_end_sequential          , for etype use et_procedure],
      [for txt use 'END_TOPMOST_XFRAME'      , for rtl use rtl_end_topmost_xframe      , for etype use et_procedure],
      [for txt use 'END_XFRAME'              , for rtl use rtl_end_xframe              , for etype use et_procedure],
      [for txt use 'FILLZ'                   , for rtl use rtl_fillz                   , for etype use et_procedure],
      [for txt use 'FREE'                    , for rtl use rtl_free                    , for etype use et_procedure],
      [for txt use 'FREE_TASK_VAR_ID'        , for rtl use rtl_free_task_var_id        , for etype use et_procedure],
      [for txt use 'GENERIC_ERROR'           , for rtl use rtl_generic_error           , for etype use et_message  ],
      [for txt use 'GET_LAST_FROM_TAG'       , for rtl use rtl_get_last_from_tag       , for etype use et_procedure],
      [for txt use 'GET_SIZE_FROM_TAG'       , for rtl use rtl_get_size_from_tag       , for etype use et_procedure],
      [for txt use 'GET_TASK_VAR'            , for rtl use rtl_get_task_var            , for etype use et_procedure],
      [for txt use 'HANDLE_CONSTRAINT_ERROR' , for rtl use rtl_handle_constraint_error , for etype use et_procedure],
      [for txt use 'IMPLEMENTATION_ERROR'    , for rtl use rtl_implementation_error    , for etype use et_message  ],
      [for txt use 'INIT_XFRAME'             , for rtl use rtl_init_xframe             , for etype use et_procedure],
      [for txt use 'LATE_RUNTIME_FINALIZE'   , for rtl use rtl_late_runtime_finalize   , for etype use et_procedure],
      [for txt use 'MEMORY_ERROR'            , for rtl use rtl_memory_error            , for etype use et_message  ],
      [for txt use 'NUMERIC_ERROR'           , for rtl use rtl_numeric_error           , for etype use et_message  ],
      [for txt use 'PROGRAM_ERROR'           , for rtl use rtl_program_error           , for etype use et_message  ],
      [for txt use 'RAISE_EXCEPTION'         , for rtl use rtl_raise_exception         , for etype use et_procedure],
      [for txt use 'REALLOC'                 , for rtl use rtl_realloc                 , for etype use et_procedure],
      [for txt use 'REGISTER_TASK'           , for rtl use rtl_register_task           , for etype use et_procedure],
      [for txt use 'REGISTER_TASK_DLL'       , for rtl use rtl_register_task_dll       , for etype use et_procedure],
      [for txt use 'SETUP_INTERFACE_INSTANCE', for rtl use rtl_setup_interface_instance, for etype use et_procedure],
      [for txt use 'SET_EXCEPTION'           , for rtl use rtl_set_exception           , for etype use et_procedure],
      [for txt use 'TASKING_ERROR'           , for rtl use rtl_tasking_error           , for etype use et_message  ],
      [for txt use 'TERMINATE'               , for rtl use rtl_terminate               , for etype use et_procedure],
      [for txt use 'UNHANDLED_EXCEPTION'     , for rtl use rtl_unhandled_exception     , for etype use et_procedure],
      [for txt use 'UNREGISTER_TASK'         , for rtl use rtl_unregister_task         , for etype use et_procedure]];
                                                                               
var                                                                            
  rtl_unknown_id   : const aliased tshortident := '?';

----------------------------------------------------------------------------------------------------
procedure rtl_id_to_entity =
-- Převede identifikátor na interní entitu překladače a typ skutečné entity. Pokud není entita
-- s daným identifikátorem definována, vyvolá varování [cw_unknown_assign], v [rtl] vrátí hodnotu
-- [rtl_unknown] a v [etype] hodnotu [et_undef].
----------------------------------------------------------------------------------------------------
var
  zac              : t_unsigned;
  stred            : t_unsigned;
  kon              : t_unsigned;

begin
  -- vyhledat v tabulce
  zac:=rtl_entities_desc:first;
  kon:=rtl_entities_desc:last;
  loop
    stred:=(zac+kon) div 2;
    if id>rtl_entities_desc[stred].txt
      then zac:=stred+1;
      else kon:=stred;
      end if;
    until zac>=kon;
  
  -- nalezlo se ?
  if id=rtl_entities_desc[zac].txt
  
    -- ano => vrátit interní entitu
    then 
      rtl:=rtl_entities_desc[zac].rtl;
      etype:=rtl_entities_desc[zac].etype;

    -- ne => hlásit aspoň varování
    else
      ce^.setwarning(context,{CCERR=}000053,cw_unknown_assign);
      ce^.setparam(entityident_to_string(id));
      rtl:=rtl_unknown;
      etype:=et_undef;
      end if;
  end rtl_id_to_entity;



----------------------------------------------------------------------------------------------------
procedure rtl_set_entity =
-- Přiřadí interní entitu.
----------------------------------------------------------------------------------------------------
begin
  -- přiřadit dodanou entitu
  rtl_entities[rtl]:=entity;
  end rtl_set_entity;



----------------------------------------------------------------------------------------------------
procedure rtl_get_entity_id =
-- Vrátí identifikátor interní entity.
----------------------------------------------------------------------------------------------------
begin
  for i in rtl_entities_desc:range loop
    if rtl_entities_desc[i].rtl=rtl then
      id:=^rtl_entities_desc[i].txt;
      return;
      end if;
    end loop;
  id:=^rtl_unknown_id;
  end rtl_get_entity_id;



----------------------------------------------------------------------------------------------------
procedure rtl_get_entity =
-- Vrátí interní entitu.
----------------------------------------------------------------------------------------------------
var
  pid              : pentityident;

begin
  entity:=rtl_entities[rtl];
  if entity=nil then
    ce^.seterror({CCERR=}000054,ce_int_intentity);
    rtl_get_entity_id(rtl,pid);
    ce^.setparam(entityident_to_string(pid^));
    ce^.raiseerror;
    end if;
  end rtl_get_entity;



end cc_rtl;
