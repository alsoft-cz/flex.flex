----------------------------------------------------------------------------------------------------
module private ci_alloc =
-- Překladač Flexu.
-- Alokátor registrů.
----------------------------------------------------------------------------------------------------
-- Ondra : 14.04.2003 : Oddělil z [cg_gen.cg_ia32.ci_reg].
----------------------------------------------------------------------------------------------------

with
  standard.console,
  standard.conversions,
  cg_gen.cg_ia32.ci_abi,
  cg_gen.cg_ia32.ci_code,
  cg_gen.cg_ia32.ci_reg.ci_uni,
  cg_gen.cg_ia32.ci_code.ci_instr,
  cg_gen.cg_ia32.ci_code.ci_stack,
  cc_base,
  cc_base.cc_options;

----------------------------------------------------------------------------------------------------
procedure i_reg_alloc =
-- Alokace registru (libovolného).
----------------------------------------------------------------------------------------------------
var
  uni              : iunireg;

begin
  -- máme nějaký preferovaný registr ?
  if context.rpref.reg<>in_none and then context.rpref.mode=mode and then context.reginfo[context.rpref.reg].used=0

    -- použít ten
    then uni:=context.rpref.reg

    -- jinak nějaký najít
    else
      i_uni_find(context,uni,size,mode,false,iuniregset:[])
      end if;

  -- označit registr za použitý
  i_uni_use(inst,info,context,uni,opreg.mapping);
  opreg.reg:=iunitoreg[uni,size];

#if dump_reg then;
  if o_is_option_by_entity(opt_dump_regs,info.entity^) then debug_dump_reg(context,'i_alloc  '); end if;
#end if;
  end i_reg_alloc;



----------------------------------------------------------------------------------------------------
procedure i_reg_use =
-- Alokace konkrétního registru.
----------------------------------------------------------------------------------------------------
var
  uni              : iunireg;

begin
  verify({VERIFY=}000630,reg=ir_none);
  uni:=iregtouni[reg];
  if uni<>in_none
    then
      i_uni_use(inst,info,context,uni,opreg.mapping);
      opreg.reg:=iunitoreg[uni,size];
    else opreg.reg:=reg;
    end if;
  end i_reg_use;



----------------------------------------------------------------------------------------------------
procedure i_reg_free =
-- Uvolnění registrů použitých operandem.
----------------------------------------------------------------------------------------------------
begin
  i_uni_free(info,context,iregtouni[opreg.reg]);
{
  if op.optype=io_reg then
    verify({VERIFY=}000815,op.reg.reg=ir_none);
    i_uni_free(info,context,iregtouni[op.reg.reg]);
  elsif op.optype=io_mem then
    i_uni_free(info,context,iregtouni[op.base.reg]);
    i_uni_free(info,context,iregtouni[op.index.reg]);
    end if;
}
  end i_reg_free;



----------------------------------------------------------------------------------------------------
procedure i_reg_retrieve =
-- Převede operand z podřízeného kontextu do nadřazeného.
----------------------------------------------------------------------------------------------------
with
  advanced,
  advanced.low_level,
  advanced.low_level.bit_operations;

    ------------------------------------------------------------------------------------------------
    procedure card (
        s          : in iuniregset) 
        return t_unsigned =
    -- Kardinalita množiny.
    ------------------------------------------------------------------------------------------------
    begin
      result:=0;
      for uni in in_first..in_last loop
        if uni in s then succ result; end if;
        end loop;
      end card;



    ------------------------------------------------------------------------------------------------
    procedure setresult (
        uni        : in iunireg;                 -- registr s výsledkem
        size       : in t_unsigned;              -- jeho velikost
        mapping    : out iregnum) =              -- jeho mapování
    -- Zahrne registr s výsledkem mezi použité registry.
    ------------------------------------------------------------------------------------------------
    var
      newuni       : iunireg;

    begin
      if uni=in_none then return; end if;

      case context.reginfo[uni].status
        -- registr je volný, OK
        when irs_local  do
            -- označit za použitý
            context.reginfo[uni].status:=irs_used;
            succ context.reginfo[uni].used;

            -- přiřadit mapování
            i_uni_new_mapping(context,uni,context.reginfo[uni].mapping);


        -- registr je použitý => přemapovat a přiřadit adresu
        when irs_used, irs_pushed do
            verify({VERIFY=}000355,subcontext.reginfo[uni].status<>irs_pushed);

            if context.reginfo[uni].used=0

              -- je sice použit, ale nadřazeným výrazem
              then
                -- převzít adresu úložiště
                context.reginfo[uni].status:=irs_pushed;
                context.reginfo[uni].temp  :=subcontext.reginfo[uni].temp;

              -- je použit tímto výrazem => přemapovat
              else
                -- najít lepší registr
                i_uni_find(context,newuni,size,irm_int,true,iuniregset:[]);
                verify({VERIFY=}000816,(newuni=in_none) or (context.reginfo[newuni].status<>irs_local));
                --%%TODO(UNION)context.active+iuniregset:[newuni];
                bit_set(context.active,t_bit_index(newuni:ord));

                -- parametry přemapovaného registru
                context.reginfo[newuni].status :=irs_frozen;
                context.reginfo[newuni].used   :=context.reginfo[uni].mapping;
                context.reginfo[newuni].temp   :=subcontext.reginfo[uni].temp;
                context.reginfo[newuni].mapping:=context.reginfo[uni].mapping;
                i_uni_set_mapping(context,context.reginfo[newuni].mapping,newuni);

                --dump(iuniregtxt[uni]+' --> '+iuniregtxt[newuni]);
                end if;

            -- parametry registru s výsledkem
            context.reginfo[uni].used      :=1;
            i_uni_new_mapping(context,uni,context.reginfo[uni].mapping);


        -- registr je zmražený => přemapovat i s chlupama
        when irs_frozen do
            verify({VERIFY=}000360,subcontext.reginfo[uni].status<>irs_used);

            -- najít lepší registr
            i_uni_find(context,newuni,size,irm_int,true,iuniregset:[]);
            verify({VERIFY=}000817,(newuni=in_none) or (context.reginfo[newuni].status<>irs_local));
            --%%TODO(UNION)context.active+iuniregset:[newuni];
            bit_set(context.active,t_bit_index(newuni:ord));

            -- parametry přemapovaného registru
            context.reginfo[newuni]        :=context.reginfo[uni];
            i_uni_set_mapping(context,context.reginfo[newuni].mapping,newuni);

            -- parametry registru s výsledkem
            context.reginfo[uni].status    :=irs_used;
            context.reginfo[uni].used      :=1;
            i_uni_new_mapping(context,uni,context.reginfo[uni].mapping);


        when others do verify({VERIFY=}000358,true);
        end case;

      -- vrátit mapování registru
      mapping:=context.reginfo[uni].mapping;
      end setresult;

var
  u1               : iunireg;                    -- registry použité ve výsledku
  u2               : iunireg;                    -- registry použité ve výsledku
  i                : iregnum;
  _active          : iuniregset;

begin
  -- získat z operandu registry
  u1:=iregtouni[opreg1.reg];
  u2:=iregtouni[opreg2.reg];

  -- registrů nesmí být celkem více než jich je fyzicky k dispozici
  verify({VERIFY=}000350,card(context.active)+(u1<>in_none):ord+(u2<>in_none):ord>in_count);

  -- nejdříve ošetřit změny v registrech mimo výsledek
  for uni in in_first..in_last loop

    -- Ondra 11.9.2002 : Zde se původně brala v úvahu pouze množina registrů
    -- aktivních v nadřazeném kontextu (=CONTEXT). Výsledkem bylo, že pokud
    -- v kontextu dále nadřazeném CONTEXTu byl použit registr EAX, v CONTEXTu
    -- nebyl aktivní a v SUBCONTEXTu byl pushnut, tak se tato informace
    -- nenačetla ze SUBCONTEXTu do CONTEXTu a při generování výrazu
    -- v kontextu dále nadřazeném CONTEXTu se použil registr s potenciálně
    -- chybným obsahem.
    --   Řešením nebylo ani rozšíření na množinu aktivních registrů v
    -- SUBCONTEXTu, protože pak se problém pouze přesunul do situace, kdy
    -- byl problematický registr aktivní v kontextu nadřazeném kontextu
    -- nadřazeném CONTEXTu (CONTEXT:parent:parent).                         
    --   Nevím, proč jsem prohledávání původně omezoval pouze na množinu    
    -- registrů aktivních v nadřazeném kontextu. Změněno tak, aby se        
    -- prohledávaly všechny registry.                                       
    if uni<>u1 and uni<>u2 then

    -- Původní řešení:
    --%%TODO(UNION)
    --_active:=context.active;
    --bit_reset(_active,t_bit_index(u1:ord));
    --bit_reset(_active,t_bit_index(u2:ord));
    --if uni in _active{context.active-iuniregset:[u1,u2]} then

      case subcontext.reginfo[uni].status
        -- volný registr
        when irs_local  do { nic nedělat, s registrem se nic nestalo };

        -- použitý registr
        when irs_used   do { nic nedělat, znamená to, že ho podvýraz nepoužil };

        -- pushnutý registr
        when irs_pushed, irs_frozen do
            case context.reginfo[uni].status
              -- registr se normálně používal
              when irs_used   do
                  context.reginfo[uni].status:=irs_frozen;
                  context.reginfo[uni].temp  :=subcontext.reginfo[uni].temp;

              -- registr byl již pushnut
              when irs_pushed do unimplemented({UNIMP=}000214);

              -- registr byl již dříve pushnut
              when irs_frozen do -- nic nedělat

              when others do verify({VERIFY=}000359,true);
              end case;


        when others do verify({VERIFY=}000353,true);
        end case;
      end if;
    end loop;

  -- registry z výsledku zařadit mezi používané registry
  --%%TODO(UNION)
  --if u1<>in_none then context.active+iuniregset:[u1]; end if;
  --if u2<>in_none then context.active+iuniregset:[u2]; end if;
  if u1<>in_none then bit_set(context.active,t_bit_index(u1:ord)); end if;
  if u2<>in_none then bit_set(context.active,t_bit_index(u2:ord)); end if;

  -- a ještě provést případné přemapování
  if u1<>in_none then setresult(u1,idefregsize,opreg1.mapping); end if;
  if u2<>in_none then setresult(u2,idefregsize,opreg2.mapping); end if;
{
  if op.optype=io_reg then
    if u1<>in_none then setresult(u1,op.size,op.reg.mapping); end if;
  elsif op.optype=io_mem then
    if u1<>in_none then setresult(u1,idefregsize,op.base.mapping); end if;
    if u2<>in_none then setresult(u2,idefregsize,op.index.mapping); end if;
    end if;
}
#if dump_reg then;
  if o_is_option_by_entity(opt_dump_regs,info.entity^) then debug_dump_reg(context,'i_retriev'); end if;
#end if;
  end i_reg_retrieve;



----------------------------------------------------------------------------------------------------
procedure i_reg_refresh =
-- Aktualizuje jména registrů v operandu.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    procedure refreshreg (
        mapping    : in iregnum; 
        size       : in t_unsigned)
        return ireg =
    ------------------------------------------------------------------------------------------------
    with
      cg_gen.cg_ia32.ci_code.ci_operand;

    var
      uni          : iunireg;

    begin
      uni:=context.mapping[mapping];
      if context.reginfo[uni].status=irs_frozen then
        declare var
          op1      : c_operand;
          op2      : c_operand;

        begin
          -- uložit
          op1.create_memory_address_on_stack(inst,edt_unsigned,idefregsize,context.reginfo[uni].temp);
          op2.create_use_register_low_level(edt_unsigned,iunitoreg[uni,idefregsize]);
          addii(inst,info,ii_mov,op2,op1,op0);

        leave
          -- uvolnit operandy
          op1.free(info,context);
          op2.free(info,context);
          end declare;

        -- poznamenat, že je registr obnoven
        context.reginfo[uni].status:=irs_used;

        -- uvolnit temporary prostor
        freetemp(inst,info,context.reginfo[uni].temp);
        end if;
      result:=iunitoreg[uni,size];
      end refreshreg;

begin
  if iregtouni[opreg.reg]<>in_none then opreg.reg:=refreshreg(opreg.mapping,iregsize[opreg.reg]); end if;
{
  if op.optype=io_reg then
    if iregtouni[op.reg.reg]<>in_none then op.reg.reg:=refreshreg(op.reg.mapping,op.size); {iunitoreg[context.mapping[op.reg.mapping],op.size];} end if;
  elsif op.optype=io_mem then
    if iregtouni[op.base.reg]<>in_none then op.base.reg :=refreshreg(op.base.mapping,idefregsize); {iunitoreg[context.mapping[op.base.mapping],idefregsize];} end if;
    if iregtouni[op.index.reg]<>in_none then op.index.reg:=refreshreg(op.index.mapping,idefregsize); {iunitoreg[context.mapping[op.index.mapping],idefregsize];} end if;
    end if;
}
#if dump_reg then;
  if o_is_option_by_entity(opt_dump_regs,info.entity^) then debug_dump_reg(context,'i_refresh'); end if;
#end if;
  end i_reg_refresh;



end ci_alloc;
