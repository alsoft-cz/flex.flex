----------------------------------------------------------------------------------------------------
class private c_interface_list =
-- Seznam interfaců třídy.
----------------------------------------------------------------------------------------------------
    
----------------------------------------------------------------------------------------------------
static add_interface =
-- Přidá do seznamu interfaců zadanou třídu [pexpr]/[pclass].
----------------------------------------------------------------------------------------------------
var 
  interface        : p_class_interface;
               
begin
  -- inicializovat nový interface
  new interface;
  interface^.init(pexpr,pclass,count);

  -- vložit do seznamu
  insert(interface);

rollback
  discard interface;
  end add_interface;



----------------------------------------------------------------------------------------------------
static add_raw_interface =
-- Přidá do seznamu interfaců zadaný interface.
-- Pokud [piface]=nil, zpusobi interni chybu
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}001173,piface=nil);
  insert(piface);
  end add_raw_interface;



----------------------------------------------------------------------------------------------------
static add_interface_and_instance (
    pexpr          : in p_flex_class;            -- výraz obsahující jméno třídy
    pclass         : in pentity_type;            -- třída reprezentující interface
    org_interface  : in p_class_interface;       -- původní pohled na instanci interfacu
    pvar           : in pentity_var) =           -- proměnná reprezentující instanci interfacu
-- Přidá do seznamu interfaců zadanou třídu [pexpr]/[pclass] a její instanci.
----------------------------------------------------------------------------------------------------
var 
  interface        : p_class_interface;
               
begin
  -- inicializovat nový interface
  new interface;
  interface^.init(pexpr,pclass,count,org_interface);
  interface^.instance.setentity(pvar);

  -- vložit do seznamu
  insert{_after}({get_first,}interface);

rollback
  discard interface;
  end add_interface_and_instance;



----------------------------------------------------------------------------------------------------
static find_interface =
-- Najde interface příslušející dané třídě.
----------------------------------------------------------------------------------------------------
var
  it                : c_list_iterator;

begin
  it.init(p_list(^this)^);
  while it.get(result) and then result^.refclass.getcentity<>pclass loop end loop;
  end find_interface;



----------------------------------------------------------------------------------------------------
static get_native_interface =
-- Vrátí nativní interface třídy.
----------------------------------------------------------------------------------------------------
begin
  -- nativní interface je ten první
  result:=get_first;
  verify({VERIFY=}000765,result=nil);
  end get_native_interface;



----------------------------------------------------------------------------------------------------
static get_exposed_interfaces =
-- Připraví iterátor pro zpracování všech exposovaných interfaců.
----------------------------------------------------------------------------------------------------
var
  _result          : t_logical;
  _interface       : p_class_interface;

begin
  -- připravit iterátor
  it.init(p_list(^this)^);

  -- přeskočit nativní interface
  _result:=it.get(_interface);
  verify({VERIFY=}000766,not _result);
  end get_exposed_interfaces;



----------------------------------------------------------------------------------------------------
static get_all_interfaces =
-- Připraví iterátor pro zpracování všech (nativního i exposovaných) interfaců.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}000767,is_empty);

  -- připravit iterátor
  it.init(p_list(^this)^);
  end get_all_interfaces;



----------------------------------------------------------------------------------------------------
static get_interface_by_index =
-- Najde interface podle jeho indexu. Pokud interface s daným indexem neexistuje, vrátí NIL.
----------------------------------------------------------------------------------------------------
var
  it               : c_list_iterator;
  
begin
  get_all_interfaces(it);
  while it.get(result) and then result^.interface_index<>iface_index loop end loop;
  end get_interface_by_index;
  
  

----------------------------------------------------------------------------------------------------
static exposed_interfaces =
-- Počet exposovaných interfaců.
----------------------------------------------------------------------------------------------------
begin
  result:=count-1;
  end exposed_interfaces;



----------------------------------------------------------------------------------------------------
static is_native_interface =
-- Zjistí, je-li zadaná třída nativní interface této třídy. Za nativní interface se považuje
-- i předek této třídy.
----------------------------------------------------------------------------------------------------
with
  cc_base,
  cc_base.cc_sym;

begin
  result:=sym_is_ancestor(pclass,get_native_interface^.refclass.getcentity);
  end is_native_interface;



----------------------------------------------------------------------------------------------------
static is_exposed_interface =
-- Zjistí, je-li zadaná třída exposovaný interface této třídy.
----------------------------------------------------------------------------------------------------
var
  it               : c_list_iterator;
  interface        : p_class_interface;

begin
  -- připravit iterátor
  get_exposed_interfaces(it);

  -- zjistit, zda zadaná třída odpovídá některému z interfaců
  while it.get(interface) loop
    if interface^.refclass.getcentity=pclass then
      result:=true;
      return;
      end if;
    end loop;
  end is_exposed_interface;



----------------------------------------------------------------------------------------------------
static is_interface =
-- Zjistí, je-li zadaná třída (nativní nebo exposovaný) interface této třídy.
----------------------------------------------------------------------------------------------------
begin
  result:=is_native_interface(pclass) or is_exposed_interface(pclass);
  end is_interface;



----------------------------------------------------------------------------------------------------
static merge_interface_list =
-- Zamerguje dodaný seznam interfaců do aktuálního. Ignoruje nativní interface (první v pořadí).
----------------------------------------------------------------------------------------------------
var
  it               : c_list_iterator;
  interface        : p_class_interface;

begin
  -- připravit iterátor
  plist^.get_exposed_interfaces(it);

  -- zamergovat dohromady
  while it.get(interface) loop
    if not is_exposed_interface(interface^.refclass.getcentity) then
      add_interface_and_instance(
          interface^.refclass.getuexpr,
          interface^.refclass.getcentity,
          interface,
          interface^.instance.getcentity);
      end if;
    end loop;
  end merge_interface_list;



----------------------------------------------------------------------------------------------------
override c_collectable.collect =
----------------------------------------------------------------------------------------------------
var
  self : ^c_interface_list;

begin
  self:=^this;
  discard self;
  end collect;



----------------------------------------------------------------------------------------------------
entry =
-- Inicializace.
----------------------------------------------------------------------------------------------------
begin
  -- inicializovat seznam
  init(c_class_interface:tag,true,false);
  end entry;



----------------------------------------------------------------------------------------------------
exit =
-- exit
----------------------------------------------------------------------------------------------------
begin 
  delete_all;
  end exit;

end c_interface_list;
