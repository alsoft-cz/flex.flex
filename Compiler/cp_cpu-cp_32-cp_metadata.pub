----------------------------------------------------------------------------------------------------
module public cp_metadata =
-- Překladač Flexu.
-- Obecné 32bitové procesory: popis metadat.
----------------------------------------------------------------------------------------------------
-- Ondra : 24.09.2003 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  cp_cpu.cp_32.cp_def;

----- %%TECH Layout deskriptoru typu/třídy ---------------------------------------------------------
--
--   +-------------+
--   | :size       | +0         \
--   +-------------+            |
--   | datový typ  | +4         |
--   +-------------+            |
--   | :tag předka | +8         |
--   +-------------+            |
--   | ^@init   *) | +12        |
--   +-------------+            |
--   | ^entry      | +16        | všechny typy
--   +-------------+            |
--   | ^exit       | +20        |
--   +-------------+            |
--   | ^adjust     | +24        |
--   +-------------+            |
--   | ^rollback   | +28        |
--   +-------------+            |
--   | ^commit     | +32        /
--   +-------------+
--   | ^virtual_1  | +36        \
--   |    ...      |            | pouze třídy
--   | ^virtual_n  | +36 + 4*n  /
--   +-------------+
--
--   *) pro třídy vždy NIL
--
----------------------------------------------------------------------------------------------------

type
  -- dopředné deklarace
  t_desc_entity;       p_desc_entity       = ^class t_desc_entity;
  t_desc_type;         p_desc_type         = ^class t_desc_type;
  t_desc_type_based;   p_desc_type_based   = ^class t_desc_type_based;
  t_desc_type_indexed; p_desc_type_indexed = ^class t_desc_type_indexed;
  t_desc_type_ordinal; p_desc_type_ordinal = ^class t_desc_type_ordinal;
  t_desc_class;        p_desc_class        = ^class t_desc_class;
  t_desc_message;      p_desc_message      = ^class t_desc_message;



----- Obecný deskriptor entity ---------------------------------------------------------------------
type
  -- kód typu entity
  t_entity_code    = private unsigned 32;

  -- deskriptor entity
  t_desc_entity    = record
      etype        : t_entity_code;              -- kód entity
      id           : tdata32;                    -- identifikátor entity
      ancestor_tag : ttag32;                     -- předek (atribut :tag předka)
      end record
          for alignment use 1
          for size      use 12;

var
  -- kódy entit
  entity_code_table : const array tentitytype of t_entity_code := [
      for et_undef     use t_entity_code(0),
      for et_compile   use t_entity_code(1),
      for et_program   use t_entity_code(2),
      for et_module    use t_entity_code(3),
      for et_special   use t_entity_code(4),
      for et_procedure use t_entity_code(5),
      for et_static    use t_entity_code(6),
      for et_virtual   use t_entity_code(7),
      for et_task      use t_entity_code(8),
      for et_override  use t_entity_code(9),
      for et_macro     use t_entity_code(10),
      for et_overload  use t_entity_code(11),
      for et_operator  use t_entity_code(12),
      for et_var       use t_entity_code(13),
      for et_type      use t_entity_code(14),
      for et_class     use t_entity_code(15),
      for et_const     use t_entity_code(16),
      for et_enum      use t_entity_code(17),
      for et_param     use t_entity_code(18),
      for et_message   use t_entity_code(19),
      for et_label     use t_entity_code(20),
      for et_template  use t_entity_code(21),
      for et_tparam    use t_entity_code(22),
      for et_attribute use t_entity_code(23)];



----- Deskriptor typu ------------------------------------------------------------------------------
type
  -- kód datového typu
  t_datatype_code  = private unsigned 32;

  -- deskriptor typu
  t_desc_type      = t_desc_entity with record
      dtype        : t_datatype_code;            -- datový typ
      size         : tdata32;                    -- velikost typu (atribut :size)
      spec_ptr     : array tspectype of tprg32;  -- pointery na speciální metody
      end record
          for alignment use 1
          for size      use t_desc_entity:size+32;

  -- type with a base type (pointer, array, string)
  t_desc_type_based= t_desc_type with record
      base_tag     : ttag32;                     -- tag of the base type
      end record
          for alignment use 1
          for size      use t_desc_type:size+4;

  -- indexed type (array, string)
  t_desc_type_indexed = t_desc_type_based with record
      range_tag    : ttag32;                     -- tag of the range type
      end record
          for alignment use 1
          for size      use t_desc_type_based:size+4;

  -- ordinal type
  t_desc_type_ordinal = t_desc_type with record
      first        : timm32;                     -- unsigned image of the :first attribute
      last         : timm32;                     -- unsigned image of the :last attribute
      end record
          for alignment use 1
          for size      use t_desc_type:size+8;

var
  -- kódy datových typů
  datatype_code_table : const array tdatatype of t_datatype_code := [
      for dt_undef      use t_datatype_code(0),
      for dt_uniint     use t_datatype_code(0),
      for dt_unireal    use t_datatype_code(0),
      for dt_unilogical use t_datatype_code(0),
      for dt_unichar    use t_datatype_code(0),
      for dt_uniarray   use t_datatype_code(0),
      for dt_uninil     use t_datatype_code(0),
      for dt_ordinal    use t_datatype_code(0),
      for dt_signed     use t_datatype_code(1),
      for dt_unsigned   use t_datatype_code(2),
      for dt_float      use t_datatype_code(3),
      for dt_fixed      use t_datatype_code(20),
      for dt_char       use t_datatype_code(4),
      for dt_logical    use t_datatype_code(5),
      for dt_string     use t_datatype_code(7),
      for dt_ustring    use t_datatype_code(8),
      for dt_array      use t_datatype_code(9),
      for dt_uarray     use t_datatype_code(10),
      for dt_record     use t_datatype_code(11),
      for dt_class      use t_datatype_code(12),
   -- for dt_interface  use t_datatype_code(13),
      for dt_enum       use t_datatype_code(6),
      for dt_set        use t_datatype_code(14),
      for dt_pointer    use t_datatype_code(15),
      for dt_tag        use t_datatype_code(16),
      for dt_message    use t_datatype_code(17),
      for dt_procedure  use t_datatype_code(18),
      for dt_task       use t_datatype_code(19)];



----- Deskriptor třídy -----------------------------------------------------------------------------
type
  -- deskriptor třídy
  t_desc_class     = t_desc_type with record
      master_offset: tdata32;                    -- negativní offset nadřazené instance (<>0=toto je interface)
      vtable       : tdata32;                    -- pointer na tabulku virtuálních metod
      itable       : tdata32;                    -- pointer na tabulku interfaců
      end record
          for alignment use 1
          for size      use t_desc_type:size+12;

  -- reference na interfacu
  t_ref_interface  = record
      class_tag    : ttag32;                     -- tag 
      offset       : tdata32;                    -- offset instance interfacu v rámci nadřazené instance     
      end record
          for alignment use 1
          for size      use 8;

  -- tabulka interfaců
  t_interface_table= string of t_ref_interface for alignment use 1;
  p_interface_table= ^t_interface_table;

  -- tabulka virtuálních metod
  t_vptr_table     = array of tprg32 for alignment use 1;
  p_vptr_table     = ^t_vptr_table;

----------------------------------------------------------------------------------------------------
procedure get_vptr_slot_offset (
    vindex         : in tvirtualindex)           -- index virtuální metody
    return tdata32;                              -- offset odpovídající slotu ve virtuální tabulce
-- Vypočte offset slotu ve virtuální tabulce od začátku celého deskriptoru typu (tagu).
----------------------------------------------------------------------------------------------------



----- Deskriptor typovaného objektu ----------------------------------------------------------------
type
  t_desc_typed     = t_desc_entity with record
      type_tag     : ttag32;
      end record
          for alignment use 1
          for size      use t_desc_entity:size+4;


----- Deskriptor zprávy ----------------------------------------------------------------------------
type
  t_desc_message   = t_desc_typed with record
      end record
          for alignment use 1
          for size      use t_desc_typed:size;

end cp_metadata;
