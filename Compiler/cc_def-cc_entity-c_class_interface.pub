----------------------------------------------------------------------------------------------------
class public c_class_interface = 
-- Interface třídy.
----------------------------------------------------------------------------------------------------

use
  cc_ref;

extend 
  c_list_item;

var
  refclass         : cc_ref.refentity;           -- odkaz na třídu
  vtable           : pvirtualtable;              -- virtuální tabulka
  instance         : cc_ref.refentity;           -- instance interfacu
  codegen          : p_flex_record;              -- doplňující informace generátoru kódu
  is_exposed       : t_logical;                  -- příznak, zda je toto exposovaný interface
  org_interface    : p_class_interface;          -- původní interface, jehož je tento kopií
  interface_index  : t_unsigned;                 -- index interfacu v rámci nadřazené třídy (nativní
                                                 -- interface má číslo 0)

----------------------------------------------------------------------------------------------------
static init (
    pexpr          : in p_flex_class;            -- výraz obsahující jméno třídy
    pclass         : in pentity_type;            -- třída reprezentující interface
    interface_index: in t_unsigned;              -- index interfacu v rámci nadřazené třídy
    org_interface  : in p_class_interface:=nil); -- původní interface, jehož je tento kopií
-- Inicializuje interface třídy na zadanou třídu [pexpr]/[pclass].
-- Parametr [org_interface] reprezentuje původní pohled na tento interface u předka nadřazené třídy.
-- Jestliže toto je první pohled na tuto instanci interfacu v hierarchii nadřazené třídy, musí být
-- nil.
----------------------------------------------------------------------------------------------------
static add_virtual_method (
    pvirtual       : in pentity_virtual);        -- přidávaná virtuální metoda
-- Přidá do interfacu novou virtuální metodu a přidělí jí index v tabulce virtuální metod.
----------------------------------------------------------------------------------------------------
static get_virtual_method (
    vindex         : in tvirtualindex)           -- index virtuální metody
    return pentity_code;
-- Nejbližší (vzhledem k předkům) virtuální metodu nebo její override odpovídající zadanému indexu.
----------------------------------------------------------------------------------------------------
static is_virtual_method_overriden (
    pvirtual       : in pentity_virtual)         -- související virtuální metoda
    return t_logical;                            -- T-již byla přetížena
-- Zjistí, zda byla zadaná virtuální metoda v této třídě již přetížena.
-- Je-li v této třídě přímo deklarována, se chápe jako přetížení.
----------------------------------------------------------------------------------------------------
static override_virtual_method (
    pvirtual       : in pentity_virtual;         -- související virtuální metoda
    poverride      : in pentity_override);       -- přetížení virtuální metody
-- Přetíží v interfacu zadanou virtuální metodu.
-- Pokud již byla jednou přetížena, způsobí chybu.
----------------------------------------------------------------------------------------------------
static get_vtable_size return t_unsigned;
-- Vrátí velikost virtuální tabulky jako počet jejích prvků.
-- Pokud není virtuální tabulka v tomto interfacu alokována, zeptá se předka.
----------------------------------------------------------------------------------------------------
procedure normalize_vindex (
    vindex         : in tvirtualindex)           -- logický index virtuální metody (zpravidla od 1)
    return t_unsigned;                           -- normalizovaný index virtuální metody od 0
-- Normalizuje logický index virtuální metody od nuly.
----------------------------------------------------------------------------------------------------

end c_class_interface;
