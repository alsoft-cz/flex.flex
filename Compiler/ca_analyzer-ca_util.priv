----------------------------------------------------------------------------------------------------
module private ca_util =
-- Překladač Flexu.
-- Různé užitečné procedury.                                                  
----------------------------------------------------------------------------------------------------
-- Ondra : 28.02.2002 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  cc_def,
  cc_base,
  cc_base.cc_sym;

----------------------------------------------------------------------------------------------------
procedure a_prepare_info =
-- Připraví kontexty pro kompilátorem generované uzly.
----------------------------------------------------------------------------------------------------
begin
  binfo.init({false,}true);
  binfo.phase:=binfo.phase:last;
  xinfo.init(nil,true);
  xinfo.phase:=xinfo.phase:last;
  end a_prepare_info;



----------------------------------------------------------------------------------------------------
procedure a_list_append =
-- Zařadí příkaz BL na konec seznamu příkazů.                                 
-- Je-li BL=NIL, nic se nestane.
----------------------------------------------------------------------------------------------------
begin
  -- ignorovat prázdné příkazy
  if bl=nil then return end if;

  -- zařadit
  if list.first=nil
    then list.first:=bl;
    else list.last^.next:=bl;
    end if;
  list.last:=bl;
  end a_list_append;

                                                           

----------------------------------------------------------------------------------------------------
class private c_class_hidden_field_helper = 
-- Třída pro práci s poli @TAG a @STATUS v instanci třídy.
----------------------------------------------------------------------------------------------------
    with
      cc_def.cc_unitype,
      cb_block,
      cb_block.cb_make,
      cx_expr,
      cx_expr.cx_make;

    var
      ptag         : pentity_var;                -- složka @TAG
      pstatus      : pentity_var;                -- složka @STATUS

    ------------------------------------------------------------------------------------------------
    static set_context =
    -- Nastaví kontext pro vyhledávání skrytých složek - context typu třídy.
    ------------------------------------------------------------------------------------------------
    with
      cc_base,
      cc_base.cc_sym;

    var
      srch         : tentitysearch;              -- hledátko

    begin
      -- najít interní složky @TAG a @STATUS
      srch.find_local(context,id_int_tag   ,etvs_all); ptag   :=pentity_var(srch.psym);
      srch.find_local(context,id_int_status,etvs_all); pstatus:=pentity_var(srch.psym);
      verify({VERIFY=}000564,ptag=nil or pstatus=nil);
      end set_context;



    ------------------------------------------------------------------------------------------------
    static a_make_set_tag =
    -- Naplní pole @TAG zadanou hodnotou.
    ------------------------------------------------------------------------------------------------
    begin
      -- Instance.@TAG := Tag
      a_list_append(list,
        b_make_cmd(curr,binfo,
          x_make_op_assign(curr,xinfo,
            x_make_component_selector(curr,xinfo,ptag,
              x_instance
              ),
            x_tag
            )
          )
        );
      end a_make_set_tag;



    ------------------------------------------------------------------------------------------------
    static a_make_status_field (
        curr       : in tcontext;                -- kontext          
        xinfo      : in expinfo;                 -- informace pro generování výrazů
        x_status   : in t_class_status_field)    -- množina příznaků
        return pexpimm =
    -- Sestaví uzel stromu reprezentující množinu příznaků.
    ------------------------------------------------------------------------------------------------
    var
      ui           : tuniint;

    begin
      -- převést množinu stavů na číslo resp. bitové pole
      for i in x_status:base loop
        if i in x_status then
          ui+unsigned_to_uniint_power2(i:ord);
          end if;
        end loop;

      -- sestavit uzel stromu
      result:=x_make_imm_uniint(curr,xinfo,ui);
      end a_make_status_field;



    ------------------------------------------------------------------------------------------------
    static a_make_status_flag (
        curr       : in tcontext;                -- kontext          
        xinfo      : in expinfo;                 -- informace pro generování výrazů
        x_status   : in t_class_status_flags)    -- příznak
        return pexpimm =
    -- Sestaví uzel stromu reprezentující jeden příznak.
    ------------------------------------------------------------------------------------------------
    begin
      -- sestavit uzel stromu
      result:=x_make_imm_uniint(curr,xinfo,unsigned_to_uniint_power2(x_status:ord));
      end a_make_status_flag;



    ------------------------------------------------------------------------------------------------
    static a_make_set_status =
    -- Naplní pole @STATUS zadanou počáteční hodnotou.
    ------------------------------------------------------------------------------------------------
    begin
      -- zabývat se tím jen je-li množina neprázdná
      if x_status<>t_class_status_field:[] then
        -- Instance.@STATUS := <množina příznaků>
        a_list_append(list,
          b_make_cmd(curr,binfo,
            x_make_op_assign(curr,xinfo,
              x_make_component_selector(curr,xinfo,pstatus,
                x_instance
                ),
              a_make_status_field(curr,xinfo,
                x_status
                )
              )
            )
          );
        end if;
      end a_make_set_status;



    ------------------------------------------------------------------------------------------------
    static a_make_add_status =
    -- Doplní do pole @STATUS uvedený příznak.
    ------------------------------------------------------------------------------------------------
    begin
      -- Instance.@STATUS or <příznak>
      a_list_append(list,
        b_make_cmd(curr,binfo,
          x_make_op_bit_or(curr,xinfo,
            x_make_component_selector(curr,xinfo,pstatus,
              x_instance
              ),
            a_make_status_flag(curr,xinfo,
              x_status
              ),
            true)
          )
        );
      end a_make_add_status;



    ------------------------------------------------------------------------------------------------
    static a_make_test_status =
    -- Zjistí, jestli je v poli @STATUS nastavený uvedený příznak.
    ------------------------------------------------------------------------------------------------
    with
      cc_def.cc_var;

    begin
      -- if [ <precondition> AND THEN ] (Instance.@STATUS AND <příznak> <> 0) then
      --   <sekvence příkazů>
      --   end if
      if x_precond<>nil

        -- složitější varianta s precondition
        then
          a_list_append(list,
            b_make_if(curr,binfo,
              b_make_list(
                b_make_if_cond(curr,binfo,
                  x_make_op_and_then(curr,xinfo,
                    x_precond,
                    x_make_op_ne(curr,xinfo,
                      x_make_op_bit_and(curr,xinfo,
                        x_make_component_selector(curr,xinfo,pstatus,
                          x_instance
                          ),
                        a_make_status_flag(curr,xinfo,
                          x_status
                          )
                        ),
                      x_make_imm_nil(curr,xinfo,inttype_status)
                      )
                    ),
                  b_body
                  ),
                nil
                )
              )
            );

        -- jednodušší varianta
        else
          a_list_append(list,
            b_make_if(curr,binfo,
              b_make_list(
                b_make_if_cond(curr,binfo,
                  x_make_op_ne(curr,xinfo,
                    x_make_op_bit_and(curr,xinfo,
                      x_make_component_selector(curr,xinfo,pstatus,
                        x_instance
                        ),
                      a_make_status_flag(curr,xinfo,
                        x_status
                        )
                      ),
                    x_make_imm_nil(curr,xinfo,inttype_status)
                    ),
                  b_body
                  ),
                nil
                )
              )
            );
          end if;

      end a_make_test_status;

    end c_class_hidden_field_helper;



----------------------------------------------------------------------------------------------------
procedure a_find_executing_range =
-- Prohledá zadaný kontext a pokud jsou obsaženy vrátí informace o rozsahu provádění.
---------------------------------------------------------------------------------------------------
var
  srch             : tentitysearch;              -- hledátko
  
begin
  -- dohledat proměnnou odpovídající dolní...
  srch.find_local_all(context,id_int_low);
  if srch.psym=nil
    then 
      range_low:=nil;

    else 
      verify({VERIFY=}000736,srch.psym^.etype<>et_var);
      range_low:=pentity_var(srch.psym);
    end if;

  -- ...a horní mezi rozsahu
  srch.find_local_all(context,id_int_high);
  if srch.psym=nil
    then 
      range_high:=nil;

    else 
      verify({VERIFY=}000737,srch.psym^.etype<>et_var);
      range_high:=pentity_var(srch.psym);
    end if;

  -- buď obě jsou nebo obě nejsou, jiná možnost není
  verify({VERIFY=}000738,((range_low=nil) and (range_high<>nil)) or ((range_low<>nil) and (range_high=nil)));
  end a_find_executing_range;
end ca_util;
