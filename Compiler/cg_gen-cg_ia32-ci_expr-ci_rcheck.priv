----------------------------------------------------------------------------------------------------
module private ci_rcheck =
-- generovani behovych kontrol 
----------------------------------------------------------------------------------------------------

with
  cx_expr,
  cx_expr.cx_def;


----------------------------------------------------------------------------------------------------
procedure i_gen_ordinal_overflow_check (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o průběhu generování
    context        : in out iexprcontext;        -- kontext generování výrazu
    val_typ        : in typeview;
    val            : in c_operand) =
-- vygeneruje overflow kontrolu pro operace, ktere nastavuji overflow flag OF procesoru
----------------------------------------------------------------------------------------------------
with
  cc_base.cc_rtl;

var
  size             : t_unsigned;

begin
  -- nemuzeme kontrolovat unchecked typ
  verify({VERIFY=}000706,val_typ.tview<>tview_full);

  -- umime jen ordinalni typy
  verify({VERIFY=}000707,not (val_typ.stype in dts_ordinal));

  -- umime jen typy priznivych velikosti - 1, 2, 4 byty
  size:=unidata_size_to_unsigned(val_typ.getsize);
  verify({VERIFY=}000708, size<>1 and size<>2 and size<>4);

  -- vlastní run-time check na overflow
  if val_typ.stype=dt_signed
    then i_gen_rcheck_constraint_error_on_condition(inst,info,context,ic_o);
    else i_gen_rcheck_constraint_error_on_condition(inst,info,context,ic_c);
    end if;
  end i_gen_ordinal_overflow_check;



----------------------------------------------------------------------------------------------------
procedure i_gen_ordinal_range_check (
    inst         : in out icodeinst;             -- instance
    info         : in out igeninfo;              -- informace o průběhu generování
    context      : in out iexprcontext;          -- kontext generování výrazu
    dest_typ     : in typeview;                  -- typ proti kteremu se kontroluje [val]
    val_typ      : in typeview;                  -- typ [val]
    val          : in c_operand) =               -- hodnota pro kterou se provede kontrola proti typu [typ]
-- vygeneruje ordinalni range kontrolu
----------------------------------------------------------------------------------------------------
with
  cc_base.cc_rtl;

var
  penttyp          : pentity_type;               -- entita reprezentujici typ
  pvaltyp          : pentity_type;               -- entita reprezentujici typ [val]
  lval             : t_unsigned;                 -- absolutni hodnota logicke dolni meze typu
  hval             : t_unsigned;                 -- absolutni hodnota logicke horni meze typu
  lval_sign        : t_logical;                  -- pokud T plati lval<0, jinak F
  hval_sign        : t_logical;                  -- pokud T plati hval<0, jinak F
  
  preexcept        : itarget;                    -- pred vyjimkou
  postexcept       : itarget;                    -- po vyjimce
  lo_cond          : icond;
  hi_cond          : icond;
  pre_cond         : icond;
  sign_comparison  : t_logical;
  val_signed       : t_logical;
  dest_signed      : t_logical;
  val_size         : tunidata_size;              -- skutecna velikost tyu [val]

  size             : t_unsigned;

begin

  -- nemuzeme kontrolovat unchecked ordinalni typ
  verify({VERIFY=}000709,val_typ.tview<>tview_full or dest_typ.tview<>tview_full);

  -- jedna se o typy jine nez ordinalni?
  verify({VERIFY=}000710, not (val_typ.stype in dts_ordinal and dest_typ.stype in dts_ordinal));

  -- umime jen typy priznivych velikosti - 1, 2, 4 byty
  size:=unidata_size_to_unsigned(val_typ.getsize);
  verify({VERIFY=}000711, size<>1 and size<>2 and size<>4);
  size:=unidata_size_to_unsigned(dest_typ.getsize);
  verify({VERIFY=}000712, size<>1 and size<>2 and size<>4);
  
  -- souvisejici entity typu vyrazu
  penttyp:=dest_typ.getctype;
  pvaltyp:=val_typ.getctype;

  -- zkonvertuj unimeze na meze
  lval:=uniint_to_unsigned(penttyp^.lval);
  hval:=uniint_to_unsigned(penttyp^.hval);
  lval_sign:=uniint_sign(penttyp^.lval);
  hval_sign:=uniint_sign(penttyp^.hval);

  -- budeme porovnavat znamenkove?
  dest_signed:=penttyp^.stype=dt_signed;
  val_signed:=pvaltyp^.stype=dt_signed;

  #if #declared hynek; #and then; hynek then;
    #error 'Hynku, Hynku, komentuj trochu vic...';
  #end if;

  val_size:=pvaltyp^.size;

  pre_cond:=ic_ucond;
  lo_cond :=ic_ucond;
  hi_cond :=ic_ucond;

  if dest_signed 
    then
      if val_signed 
        then
          lo_cond:=ic_l;
          hi_cond:=ic_g;
        else
          if lval_sign then lval:=0; end if;
          if hval_sign then hval:=0; end if;

          if lval<>0 then
            lo_cond:=ic_b;
            end if;

          hi_cond:=ic_a;

          end if;
    else
      verify({VERIFY=}000796,lval_sign or hval_sign);
      
      if val_signed 
        then
          pre_cond:=ic_s;
          
          if lval<>0 then
            lo_cond:=ic_b;
            end if;

          hi_cond:=ic_a;
        else
          if lval<>0 then
            lo_cond:=ic_b;
            end if;

          hi_cond:=ic_a;
          end if;
      end if;
  
  -- alespon jedna podminka by mela byt platna, jinak je algoritmus nahore blbe
  verify({VERIFY=}000797,pre_cond=ic_ucond and lo_cond=ic_ucond and hi_cond=ic_ucond);
  
--  val.adjustsize
  
  -- alokovat navesti
  newtarget(info,preexcept);
  newtarget(info,postexcept);
  
  -- je nejaka predkontrola?
  case pre_cond
    -- znamenko
    when ic_s do
        -- porovnej [vysl] s 0
        addopimm(inst,info,context,ii_cmp,val,0);

        -- pokud je [vysl] mensi, skoc na generovani vyjimky
        addjump(inst,info,context,ic_s,preexcept);

    -- zadna
    when ic_ucond do ;
    
    -- ostatni je chyba
    when others do verify({VERIFY=}000713,true);
    end case;

  -- je treba zkontrolovat spodni mez?
  if lo_cond<>ic_ucond then
    -- porovnej [vysl] s [lval]
    if lval_sign
      then addopimmex(inst,info,context,ii_cmp,val,lval,edt_signed,val.size);
      else addopimmex(inst,info,context,ii_cmp,val,lval,edt_unsigned,val.size);
      end if;

    -- pokud je [vysl] mensi, skoc na generovani vyjimky
    addjump(inst,info,context,lo_cond,preexcept);
    end if;

  -- je treba zkontrolovat horni mez?
  if hi_cond<>ic_ucond then
    -- porovnej [vysl] s [hval]
    if hval_sign
      then addopimmex(inst,info,context,ii_cmp,val,hval,edt_signed,val.size);
      else addopimmex(inst,info,context,ii_cmp,val,hval,edt_unsigned,val.size);
      end if;

    -- pokud je [vysl] vetsi, skoc na generovani vyjimky
    addjump(inst,info,context,hi_cond,preexcept);
    end if;

  -- preskoc generovani vyjimky
  addjump(inst,info,context,ic_ucond,postexcept);

  -- nastav adresu odskoku [preexcept] pred generovani vyjimky
  settarget(info,preexcept,getaddr(inst));

  -- vygeneruj vyjimku
  if not cfg_no_runtime then
    addcallrtl(inst,info,context,rtl_handle_constraint_error);
    end if;

  -- nastav adresu odskoku [postexcept] za generovani vyjimky
  settarget(info,postexcept,getaddr(inst));
  end i_gen_ordinal_range_check;


  
----------------------------------------------------------------------------------------------------
procedure i_gen_runtime_checks =
-- procedura pro generovani obecnych behovych kontrol
----------------------------------------------------------------------------------------------------
var
  val_size          : t_unsigned;
  range_typ         : typeview;
  range_type_size   : tunidata_size;

begin
  -- ordinalni preteceni/podteceni
  if rch_ordinal_overflow in expr.get_run_checks(rcheck_class) then
    i_gen_ordinal_overflow_check(inst,info,context,expr.t,val);
    end if;
   
  -- ordinalni kontrola mezi
  if rch_ordinal_range in expr.get_run_checks(rcheck_class) then
    -- velikost typu proti kteremu provedeme kontrolu mezi
    range_typ:=expr.get_rangecheck_type(rcheck_class);
    range_type_size:=range_typ.getsize;

    -- velikost [val]
    val_size:=val.size;

    verify({VERIFY=}000714,unsigned_to_unidata_size(val_size)<>expr.t.getsize);
    
    i_gen_ordinal_range_check(inst,info,context,range_typ,expr.t,val);
    
    end if;
  end i_gen_runtime_checks;



----------------------------------------------------------------------------------------------------
procedure i_gen_index_string_check =
-- generovani runtime kontroly rozsahu indexovani retezce
----------------------------------------------------------------------------------------------------
var
  el               : pexpnode;                   -- podvýrazy
  er               : pexpnode;                   -- podvýrazy
  postexcept       : itarget;                    -- po vyjimce
  preexcept        : itarget;

begin
  -- oddělit podvýrazy
  expr.get(el,er);

  -- jen pro indexovani
  verify({VERIFY=}001202,expr.ntype<>nt_index);

  -- jen pro indexovani retezce
  verify({VERIFY=}000990,el^.t.stype not in dts_string);

  -- je treba generovat runtime kontrolu?
  if rch_index_string in expr.get_run_checks(rchcl_gen) then
    -- alokuj navesti
    newtarget(info,postexcept);
    newtarget(info,preexcept);
    
    -- zkontroluj dolni mez na nulu
    addii(inst,info,ii_sub,index,op_0,op0);

    -- pokud nula, skoc na vyjimku
    addjump(inst,info,context,ic_z,preexcept);

    -- zkontroluj horni mez
    addii(inst,info,ii_cmp,length,index,op0);

    -- pokud length rovno nebo vetsi nez index preskoc generovani vyjimky
    addjump(inst,info,context,ic_ae,postexcept);

    -- nastav adresu odskoku [preexcept] pred generovani vyjimky
    settarget(info,preexcept,getaddr(inst));
    
    -- vygeneruj vyjimku
    if not cfg_no_runtime then
      addcallrtl(inst,info,context,rtl_handle_constraint_error);
      end if;

    -- nastav adresu odskoku [postexcept] za generovani vyjimky
    settarget(info,postexcept,getaddr(inst));

    end if;
 end i_gen_index_string_check;



----------------------------------------------------------------------------------------------------
procedure i_gen_index_array_check =
-- generovani runtime kontroly rozsahu indexovani pole
----------------------------------------------------------------------------------------------------
var
  el               : pexpnode;                   -- podvýrazy
  er               : pexpnode;                   -- podvýrazy
  postexcept       : itarget;                    -- po vyjimce
  preexcept        : itarget;

begin
  -- oddělit podvýrazy
  expr.get(el,er);

  -- jen pro indexovani
  verify({VERIFY=}001497,expr.ntype<>nt_index);

  -- jen pro indexovani pole
  verify({VERIFY=}001498,el^.t.stype not in dts_array);

  -- urcite je treba generovat runtime kontrolu
  verify({VERIFY=}001500,rch_index_array not in expr.get_run_checks(rchcl_gen));

  -- alokuj navesti
  newtarget(info,postexcept);
  newtarget(info,preexcept);

  -- kontrola dolní meze, pokud je potřeba (není-li konstantní)
  if er^.ntype<>nt_imm then
    declare var
      op_first         : c_operand;              -- dolní mez pole

    begin
      -- vytvoř operand
      op_first.create_imm(edt_unsigned,0,first);

      -- zkontroluj dolni mez
      addii(inst,info,ii_cmp,index,op_first,op0);
    leave
      -- zruš operand
      op_first.free(info,context);
      end declare;

    -- pokud nesouhlasi, skoc na vyjimku
    addjump(inst,info,context,ic_b,preexcept);
    end if;

  -- :last nemůže být konstanta
  verify({VERIFY=}001499,last.optype=io_imm);

  -- pokud je potřeba, tak nahraj index do registru
  if index.optype not in t_operand_type_set:[io_imm,io_reg] then
    i_gen_load_value_to_register(inst,info,context,er^.t.getutype,index);
    end if;

  -- zkontroluj horni mez
  addii(inst,info,ii_cmp,last,index,op0);

  -- pokud last vetsi nebo rovno indexu preskoc generovani vyjimky
  addjump(inst,info,context,ic_ae,postexcept);

  -- nastav adresu odskoku [preexcept] pred generovani vyjimky
  settarget(info,preexcept,getaddr(inst));

  -- vygeneruj vyjimku
  if not cfg_no_runtime then
    addcallrtl(inst,info,context,rtl_handle_constraint_error);
    end if;

  -- nastav adresu odskoku [postexcept] za generovani vyjimky
  settarget(info,postexcept,getaddr(inst));
  end i_gen_index_array_check;


----------------------------------------------------------------------------------------------------
procedure i_gen_rcheck_constraint_error_on_condition =
-- Vygeneruje podmíněné vyvolání výjimky Constraint_Error.
-- Jestliže je splněna podmínka [fail_if], vygeneruje vyvolání výjimky.
----------------------------------------------------------------------------------------------------
var
  tg_ok : itarget;                 -- cíl skoku po porovnání velikostí

begin
  if not cfg_no_runtime then
    -- alokovat cíl skoku
    newtarget(info,tg_ok);

    -- podmíněný skok
    addjump(inst,info,context,icondneg[fail_if],tg_ok);

    -- vyvolat výjimku Constraint_Error
    addcallrtl(inst,info,context,rtl_handle_constraint_error);

    -- cíl skoku na toto místo
    settarget(info,tg_ok,getaddr(inst));
    end if;
  end i_gen_rcheck_constraint_error_on_condition;



----------------------------------------------------------------------------------------------------
procedure i_gen_rcheck_constraint_error_on_compare =
-- Vygeneruje podmíněné vyvolání výjimky Constraint_Error.
-- Porovná dodané operandy a jestliže je splněna podmínka [fail_if], vygeneruje vyvolání výjimky.
----------------------------------------------------------------------------------------------------
begin
  if not cfg_no_runtime then
    -- porovnat operandy
    addii(inst,info,ii_cmp,op1,op2,op0);

    -- vlastní run-time check
    i_gen_rcheck_constraint_error_on_condition(inst,info,context,fail_if);
    end if;
  end i_gen_rcheck_constraint_error_on_compare;



end ci_rcheck;