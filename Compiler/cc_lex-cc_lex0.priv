----------------------------------------------------------------------------------------------------
class private cc_lex0 =
-- Překladač Flexu.
-- Lexikální analyzátor, oddělení lexikálních elementů.
----------------------------------------------------------------------------------------------------
-- Ondra : 11.07.1998 : Vytvořil.
----------------------------------------------------------------------------------------------------

with
  standard,
  cc_unitype,
  supervised cc_base.cc_text;

use
  standard.conversions;

----------------------------------------------------------------------------------------------------
#separate public cc_buffer;
#separate private cc_buffer;
-- Textový buffer.
-- %%X CC_BUFFER by měla být generická třída, abych se vyvaroval prasáren při konverzi
-- datových typů (identifikátor/znakový agregát/textová reprezentace)
----------------------------------------------------------------------------------------------------

var
  {%%TODO(TASK) Když je [cc_lex0] třída, tak to snad nemusí být taskové proměnné, ne? }
  -- buffer na identifikátory
  buf_id           : {%%TODO(TASK) task} cc_buffer;
  -- buffer na textové reprezentace lexikálních elementů
  buf_txt          : {%%TODO(TASK) task} cc_buffer;
  -- buffer na hodnoty znakových agregátů
  buf_str          : {%%TODO(TASK) task} cc_buffer;
  -- pracovní buffer na části numerických literálů
  buf_num          : {%%TODO(TASK) task} cc_buffer;

----------------------------------------------------------------------------------------------------
static upcase (
    c              : in lexchar)                 -- vstupní znak
    return lexchar =                             -- konvertovaný znak
-- Převede znaky "a".."z" na "A".."Z"
----------------------------------------------------------------------------------------------------
begin
  if c>="a" and c<="z"
    then result:ord:=c:ord-("a":ord-"A":ord)
    else result:=c
    end if;
  end upcase;



----------------------------------------------------------------------------------------------------
static getui (
    radix          : standard.conversions.t_radix;-- základ číselné soustavy
    ui             : out tuniint;                -- převedené číslo
    default        : in tuniint) =               -- implicitní hodnota
-- Převede číslo v BUF_NUM na univerzální integer.
-- Pokud je buffer prázdný, vrátí implicitní hodnotu DEFAULT.
----------------------------------------------------------------------------------------------------
var
  s                : p_char32ustr;               -- textová reprezentace čísla
  error            : standard.conversions.t_conversion_result;  -- chyba v čísle

begin
  -- textová reprezentace čísla
  s{%%X viz poznámka o genericitě CC_BUFFER}:unchecked:=buf_num.endtext;
  if s^=''

    -- nic, vrátit implicitní hodnotu
    then
      ui:=default;

    -- konvertovat
    else
      standard.conversions.string_to_unsigned_primitive(s^,radix,ui,error);
      if error<>standard.conversions.tcres_ok then
        ce^.seterror({CCERR=}000069,ce_errnum);
        ce^.loadtextpos;
        end if;
      end if;

  -- číslo odstranit z bufferu, už nebude potřeba
  buf_num.discardlast;
  end getui;



----------------------------------------------------------------------------------------------------
static getnum (
    lex            : out lexsym;                 -- lexikální element
    val            : out lexval;                 -- hodnota elementu
    append         : in t_logical) =             -- T-textovou reprezentaci přidat k již existující
-- Ziska z prectene hodnoty cislo.
----------------------------------------------------------------------------------------------------
var
  c                : lexchar;                    -- znak ze vstupu
  c1               : lexchar;                    -- znak ze vstupu
  ui               : tuniint;                    -- hodnota čísla
  ur               : tunireal;                   -- hodnota f.p. čísla
  negative_exp     : t_logical := false;         -- T-exponent f.p. čísla je záporný
  radix            : standard.conversions.t_radix;-- číselná soustava

begin
  -- připravit buffer na textovou reprezentaci čísla
  if not append then
    buf_txt.newtext;
    end if;

  -- připravit buffer na dekadickou část čísla
  buf_num.newtext;

  -- dekadická část čísla
  loop
    -- přečíst znak
    lex_input^.getchar(c);
    if {%%TODO(IN) c not in ["0".."9","_"]} not (c>="0" and c<="9") and c<>"_" then break end if;

    -- zařadit do bufferu textové reprezentace
    buf_txt.addchar(c);

    -- zařadit do bufferu numerického literálu
    if c<>"_" then
      buf_num.addchar(c);
      end if;
    end loop;

  -- podívat se o znak dopředu
  lex_input^.getchar(c1);
  lex_input^.ungetchar;

  ----- číslo v obecné soustavě -----
  if c="$" then
    -- zařadit do bufferu textové reprezentace
    buf_txt.addchar(c);

    -- číslo musí začínat číslicí
    if {%%TODO(IN) c1 not in ["0".."9","a".."z","A".."Z"]} not ((c1>="0" and c1<="9") or (c1>="A" and c1<="Z") or (c1>="a" and c1<="z")) then
      ce^.seterror({CCERR=}000070,ce_errnum);
      ce^.loadtextpos;
      lex_input^.getchar(c);
      end if;

    -- určit číselnou soustavu
    getui(10,ui,ui_radix_hex);
    if ui<ui_radix_first or ui>ui_radix_last
      then
        ce^.seterror({CCERR=}000071,ce_radix);
        ce^.loadtextpos;
        radix:=36;
      else
        radix:=uniint_to_unsigned(ui);
        end if;

    -- připravit buffer na vlastní číslo
    buf_num.newtext;

    -- načíst číslo
    loop
      -- přečíst znak
      lex_input^.getchar(c);
      if {%%TODO(IN) c not in ["0".."9","a".."z","A".."Z","_"]} not ((c>="0" and c<="9") or (c>="A" and c<="Z") or (c>="a" and c<="z") or c="_") then 
        lex_input^.ungetchar;
        break;
        end if;

      -- zařadit do bufferu textové reprezentace
      buf_txt.addchar(c);

      -- zařadit do bufferu numerického literálu
      if c<>"_" then
        buf_num.addchar(c);
        end if;
      end loop;

    -- konvertovat číslo
    getui(radix,val.ui,ui_0);

    -- výsledný lexikální element
    lex:=lex_numi;

  ----- reálné číslo -----
  elsif c="e" or c="E" or (c="." and c1>="0" and c1<="9") then
    -- konvertovat celou část
    getui(10,ui,ui_0);
    val.ur:=uniint_to_unireal(ui);

    -- připravit buffer na desetinnou část
    buf_num.newtext;

    -- desetinná část
    if c="." then
      -- zařadit desetinnou tečku do bufferu textové reprezentace
      buf_txt.addchar(c);

      -- do [ui] napočítat dekadický exponent desetinné části
      ui:=ui_0;

      -- dekadická část čísla
      loop
        -- přečíst znak
        lex_input^.getchar(c);
        if {%%TODO(IN) c not in ["0".."9","_"]} not (c>="0" and c<="9") and c<>"_" then break end if;

        -- zařadit do bufferu textové reprezentace
        buf_txt.addchar(c);

        -- zařadit do bufferu numerického literálu, zvýšit počet desetinných cifer
        if c<>"_" then
          buf_num.addchar(c);
          succ ui;
          end if;
        end loop;
      end if;

    -- započíst dekadický exponent desetinné části
    ur:=uniint_exp10(ui);

    -- konvertovat desetinnou část
    getui(10,ui,ui_0);

    -- započíst desetinnou část
    val.ur+uniint_to_unireal(ui)/ur;

    -- exponent
    if c="e" or c="E" then
      -- zařadit značku exponentu do bufferu textové reprezentace
      buf_txt.addchar(c);

      -- připravit buffer na exponent
      buf_num.newtext;

      -- může následovat +/-
      lex_input^.getchar(c);
      if c="+" or c="-" then
        -- poznamenat zápornost exponentu
        negative_exp:=c="-";

        -- zařadit znaménko do bufferu textové reprezentace
        buf_txt.addchar(c);

        -- další znak
        lex_input^.getchar(c);
        end if;

      -- musí následovat číslice
      lex_input^.ungetchar;
      if not (c>="0" and c<="9") then
        ce^.seterror({CCERR=}000072,ce_errnum);
        ce^.loadtextpos;
        end if;

      -- hodnota exponentu
      loop
        -- přečíst znak
        lex_input^.getchar(c);
        if {%%TODO(IN) c not in ["0".."9","_"]} not (c>="0" and c<="9") and c<>"_" then break end if;

        -- zařadit do bufferu textové reprezentace
        buf_txt.addchar(c);

        -- zařadit do bufferu numerického literálu
        if c<>"_" then
          buf_num.addchar(c);
          end if;
        end loop;

      -- konvertovat exponent
      getui(10,ui,ui_0);
      if negative_exp then -ui; end if;

      -- započítat exponent do výsledku
      val.ur*uniint_exp10(ui);

      end if;

    -- posledně přečtený znak vrátit zpět do vstupu
    lex_input^.ungetchar;

    -- výsledný lexikální element
    lex:=lex_numr;

  ----- dekadické číslo -----
  else
    -- posledně přečtený znak vrátit zpět do vstupu
    lex_input^.ungetchar;

    -- konvertovat
    getui(10,val.ui,ui_0);

    -- výsledný lexikální element
    lex:=lex_numi;
    end if;

  -- získat pointer na textovou reprezentaci čísla
  if not append then
    val.txt:=buf_txt.endtext;
    end if;  
  end getnum;



----------------------------------------------------------------------------------------------------
static get_char_encoding (
    ui         : out tuniint) =                  -- ordinální hodnota znaku
-- Ziska znak zapsaný svým ordinálním číslem.
----------------------------------------------------------------------------------------------------
var
  ord              : lexval;                     -- ordinální číslo znaku
  nlex             : lexsym;                     -- symbol ziskany pri vyhodnoceni cisla

begin
  -- přečíst číslo znaku
  getnum(nlex,ord,true);

  -- vejde se do jednoho znaku ?
  if ord.ui<ui_unichar_first or ord.ui>ui_unichar_last then
    ord.ui:=ui_0;
    end if;

  -- předat ven
  ui:=ord.ui;
  end get_char_encoding;



----------------------------------------------------------------------------------------------------
static getstr (
    isfc           : in t_logical;               -- T-FC je platné
    fc             : in tunichar) =              -- první znak agregátu
-- Ziska z prectene hodnoty retezec.
-- Je-li ISFC=True, je ve FC uložen první znak agregátu získaný jinou cestou.
----------------------------------------------------------------------------------------------------
with
  standard.conversions;

var
  c                : lexchar;                    -- znak přečtený ze vstupu
  uc               : tunichar;
  ui               : tuniint;

begin
  -- připravit buffer na znakový agregát
  buf_str.newtext;

  -- nemáme už k dispozici první znak ?
  if isfc

    -- ano => zařadit do znakového agregátu
    then
      buf_str.addchar(lexchar(fc:unchecked));

    -- ne => aspoň připravit buffer na textovou reprezentaci
    else
      buf_txt.newtext;
      end if;

  loop
    -- přečíst znak ze vstupu
    lex_input^.getchar(c);

    case c
      -- řetězec v apostrofech
      when "'" do
          -- uložit do bufferu textové reprezentace
          buf_txt.addchar(c);

          loop
            -- přečíst znak
            lex_input^.getchar(c);

            -- uložit do bufferu textové reprezentace
            buf_txt.addchar(c);

            case c
              -- konec řádku => chyba
              when \10,\13,\0 do
                  ce^.seterror({CCERR=}000073,ce_x_delim);
                  ce^.loadtextpos;
                  lex_input^.ungetchar;
                  return;

              -- jiný nezobrazitelný znak => chyba
              when \1..\9,\11,\12,\14..\31 do
                  ce^.seterror({CCERR=}000074,ce_illegal_char);
                  ce^.loadtextpos;
                  -- %%TODO(POSITION) docasne reseni, aby byly alespon nejake informace...
                  declare var
                    tmp    : t_char32str;
                  begin
                    tmp:='(Character code: ';
                    tmp & unsigned_to_string(c:ord);
                    tmp & ')';
                    ce^.setinfo(tmp);
                    end declare;

              -- konec řetězce v apostrofech nebo dvojitý apostrof
              when "'" do
                  -- co další znak ?
                  lex_input^.getchar(c);
                  if c="'"

                    -- dva apostrofy za sebou => jeden uložit do agregátu
                    then
                      -- přeložit (#representation)
                      --%%X

                      -- uložit do bufferu znakového agregátu
                      buf_str.addchar(c);

                    -- jen jeden apostrof => konec řetězce (resp. této jeho části)
                    else
                      lex_input^.ungetchar;
                      break;
                      end if;

              -- zobrazitelný znak
              when others do
                  -- přeložit (#representation)
                  --%%X

                  -- uložit do bufferu znakového agregátu
                  buf_str.addchar(c);

              end case;
            end loop;

      -- číslo znaku
      when "\" do
          -- uložit do bufferu textové reprezentace
          buf_txt.addchar(c);

          -- získat znak
          get_char_encoding(ui);

          -- uložit do bufferu znakového agregátu (bez překladu)
          --%%X Tohle se mi vůbec nelíbí. Potřebuju proceduru UNICHAR_TO_LEXCHAR, jenže ji nemůžu
          -- deklarovat v CC_UNITYPE kam patří, protože tam není vidět LEXCHAR...
          uc:=uniint_to_unichar(ui);
          buf_str.addchar(lexchar(uc:unchecked));

      -- něco jiného => konec řetězce
      when others do
          lex_input^.ungetchar;
          break;
      end case;
    end loop;

  -- získat pointer na textovou reprezentaci a hodnotu znakového agregátu
  last.val.txt:=buf_txt.endtext;
  last.val.str{%%X viz poznámka o genericitě CC_BUFFER}:unchecked:=buf_str.endtext;

  -- výsledný lexikální element
  last.lex:=lex_str;
  end getstr;


{
----------------------------------------------------------------------------------------------------
static count_new_line =
-- Započítá do statistiky další zpracovaný řádek.
----------------------------------------------------------------------------------------------------
begin
  -- posunout čítač řádků
  lex_input^.next_line;

  -- přibyl jeden zpracovaný řádek
  succ total_lines;

  -- postarat se též o čítač efektivních (neprázdných, nekomentářových) řádků
  if lex_input^.effective then
    succ effective_lines;
    lex_input^.effective:=false;
    end if;
  end count_new_line;
}


----------------------------------------------------------------------------------------------------
static comment =
-- Preskoci komentar typu { }.
----------------------------------------------------------------------------------------------------
var
  hloubka          : t_unsigned;                 -- hloubka vnoreni komentare
  c                : lexchar;                    -- znak ze vstupu
  pos              : lexposblock;

begin
  hloubka:=1;
  loop
    lex_input^.getchar(c);
    --%%X scanchar("{","}",c);
    if c="{" then succ hloubka;
    elsif c="}" then pred hloubka;
    elsif c=\10 then lex_input^.next_line{count_new_line};
    elsif c=\0 and lex_input^.is_eof then
      lex_input^.next_line{count_new_line};
      ce^.seterror({CCERR=}000075,ce_comment);
      ce^.setpos(pos);
      ce^.raiseerror;
      end if;
    until hloubka=0;
  end comment;



----------------------------------------------------------------------------------------------------
override get_lex_element =
-- Získá ze vstupu jeden lexikální prvek.
----------------------------------------------------------------------------------------------------
with
  standard.conversions;

var
  c                : lexchar;                    -- přečtený znak

begin
#if #declared profiler_lex; #and then; profiler_lex then;
  succ _get_lex_element;
  rdtsc_start;
#end if;

  -- zatím není žádný element k dispozici
  last:=nil;

  loop
    -- ignorovat mezery pred symbolem
    loop
      lex_input^.getchar(c);
      until c<>" ";

    -- poznamenat si souřadnice, na nichž element začíná
    lex_input^.get_position(last.pos);

    -- zpracovat
    case c

      -- identifikátor nebo klíčové slovo
      when "a".."z","A".."Z","_" do
          -- %%X Když je v identifikátoru znak "_", tak to určitě není klíčové slovo.
          -- Nezrychlilo by se tak testování ?

          -- připravit buffer na identifikátor a jeho textovou reprezentaci
          buf_txt.newtext;
          buf_id.newtext;

          -- přečíst písmenný prefix identifikátoru
          while (c>="a" and c<="z") or (c>="A" and c<="Z") loop
            -- uložit do bufferu textové reprezentace
            buf_txt.addchar(c);

            -- uložit do bufferu identifikátoru
            buf_id.addchar(upcase(c));

            -- další znak
            lex_input^.getchar(c);
            end loop;

          -- nepokračuje identifikátor ještě ?
          if c="_" or (c>="0" and c<="9")

            -- ano => přečíst zbytek
            then
              -- teď už je jasné, že to nebude klíčové slovo
              last.val.can_be_kw:=false;

              loop
                -- uložit do bufferu textové reprezentace
                buf_txt.addchar(c);

                -- uložit do bufferu identifikátoru
                buf_id.addchar(upcase(c));

                -- další znak
                lex_input^.getchar(c);
                until not ((c>="a" and c<="z") or (c>="A" and c<="Z") or c="_" or (c>="0" and c<="9")) {%%TODO(IN): c not in ["a".."z","A".."Z","_","0".."9"]};
            
            -- ne => mohlo by to být klíčové slovo
            else
              last.val.can_be_kw:=true;
              end if;
            
          -- poslední znak již patří do jiného elementu
          lex_input^.ungetchar;

          -- získat pointer na textovou reprezentaci a identifikátor
          last.val.txt:=buf_txt.endtext;
          last.val.id{%%X viz poznámka o genericitě CC_BUFFER}:unchecked:=buf_id.endtext;

          -- předat ven identifikátor
          last.lex:=lex_id;

      -- číslo
      when "0".."9","$" do
          lex_input^.ungetchar;
          getnum(last.lex,last.val,false);

      -- znakový literál
      when """ do 
          -- připravit buffer na textovou reprezentaci
          buf_txt.newtext;

          -- uložit do bufferu textové reprezentace
          buf_txt.addchar(c);
          
          -- vlastní znak
          lex_input^.getchar(c);

          -- uložit do bufferu textové reprezentace
          buf_txt.addchar(c);

          -- uložit do hodnoty lexikálního symbolu
          --%%X Tohle se mi vůbec nelíbí. Potřebuju proceduru LEXCHAR_TO_UNIINT, jenže ji nemůžu
          -- deklarovat v CC_UNITYPE kam patří, protože tam není vidět LEXCHAR...
          last.val.ui:=unichar_to_uniint(tunichar(c:unchecked));
          last.lex:=lex_char;

          -- ukončovací uvozovka
          lex_input^.getchar(c);
          if c<>""" then
            ce^.seterror({CCERR=}000076,ce_x_quotation);
            ce^.loadtextpos;
            {%%RESUME ce^.raiseerror;}
            lex_input^.ungetchar;
            end if;

          -- uložit do bufferu textové reprezentace
          buf_txt.addchar(c);

          -- získat pointer na textovou reprezentaci
          last.val.txt:=buf_txt.endtext;

      -- znakový agregát
      when "'" do
          lex_input^.ungetchar;
          getstr(false,uc_nil);

      -- znakový literál nebo znakový agregát
      when "\" do
          -- připravit buffer na textovou reprezentaci
          buf_txt.newtext;

          -- uložit do bufferu textové reprezentace
          buf_txt.addchar(c);

          -- přečíst kód znaku
          get_char_encoding(last.val.ui);

          -- co je zač další znak ?
          lex_input^.getchar(c);
          lex_input^.ungetchar;
          if c="\" or c="'"

            -- pokračuje znakový agregát
            then 
              getstr(true,uniint_to_unichar(last.val.ui));

            -- byl to znakový literál
            else
              -- získat pointer na textovou reprezentaci
              last.val.txt:=buf_txt.endtext;

              -- předat ven jako znakový literál
              last.lex:=lex_char;
              end if;

      -- *
      when "*" do last.lex:=lex_mul;

      -- /
      when "/" do last.lex:=lex_div;

      -- +
      when "+" do last.lex:=lex_add;

      -- - nebo jednořádkový komentář
      when "-" do
          lex_input^.getchar(c);
          if c="-"

            -- jednořádkový komentář
            then
              --%%X scanchar(\13,\10,c);
              loop
                lex_input^.getchar(c);
                until {c=\13 or} c=\10 {or c=\12 or c=\27} or (c=\0 and lex_input^.is_eof) {%%TODO(IN): c in [\13,\10,\0]};

              -- předat ven konec řádku nebo souboru
              if c=\0 then last.lex:=lex_eof;
              elsif c=\10 then last.lex:=lex_eoln;
              else last.lex:=lex_nul;
              end if;

              -- započítat konec řádku
              if last.lex<>lex_nul then
                lex_input^.next_line{count_new_line};
                end if;

            -- -
            else
              lex_input^.ungetchar;
              last.lex:=lex_sub;
              end if;

      -- (
      when "(" do last.lex:=lex_lpar;

      -- )
      when ")" do last.lex:=lex_rpar;

      -- [
      when "[" do last.lex:=lex_lbra;

      -- ]
      when "]" do last.lex:=lex_rbra;

      -- :: := :
      when ":" do
          lex_input^.getchar(c);
          case c
            when ":" do last.lex:=lex_op1;
            when "=" do last.lex:=lex_assign
            when others do
                lex_input^.ungetchar;
                last.lex:=lex_col;
            end case;

      -- ;
      when ";" do last.lex:=lex_scol;

      -- ,
      when "," do last.lex:=lex_comma;

      -- .. .
      when "." do
          lex_input^.getchar(c);
          if c="."
            then last.lex:=lex_ddot;
            else lex_input^.ungetchar; last.lex:=lex_dot;
            end if;

      -- =
      when "=" do last.lex:=lex_eq;

      -- <= <> <
      when "<" do
          lex_input^.getchar(c);
          case c
            when "=" do last.lex:=lex_le;
            when ">" do last.lex:=lex_ne;
            when others do
                lex_input^.ungetchar;
                last.lex:=lex_lt;
            end case;

      -- >= >
      when ">" do
          lex_input^.getchar(c);
          if c="="
            then last.lex:=lex_ge;
            else lex_input^.ungetchar; last.lex:=lex_gt;
            end if;

      -- &
      when "&" do last.lex:=lex_concat;

      -- ^
      when "^" do last.lex:=lex_ptr;

      -- metapříkaz
      when "#" do
          -- připravit buffer na identifikátor a jeho textovou reprezentaci
          buf_txt.newtext;
          buf_id.newtext;

          -- přečíst celý identifikátor
          loop
            -- uložit do bufferu textové reprezentace
            buf_txt.addchar(c);

            -- uložit do bufferu identifikátoru
            buf_id.addchar(upcase(c));

            -- další znak
            lex_input^.getchar(c);
            until not ((c>="a" and c<="z") or (c>="A" and c<="Z") or c="_" or (c>="0" and c<="9")) {%%TODO(IN): c not in ["a".."z","A".."Z","_","0".."9"]};

          -- poslední znak již patří do jiného elementu
          lex_input^.ungetchar;

          -- získat pointer na textovou reprezentaci a identifikátor
          last.val.txt:=buf_txt.endtext;
          last.val.id{%%X viz poznámka o genericitě CC_BUFFER}:unchecked:=buf_id.endtext;

          -- je to metaidentifikátor
          last.lex:=lex_meta_id;
         
      -- lokální návěští v assembleru
      when "@" do
          -- připravit buffer na identifikátor a jeho textovou reprezentaci
          buf_txt.newtext;
          buf_id.newtext;

          -- přečíst celý identifikátor
          loop
            -- uložit do bufferu textové reprezentace
            buf_txt.addchar(c);

            -- uložit do bufferu identifikátoru
            buf_id.addchar(upcase(c));

            -- další znak
            lex_input^.getchar(c);
            until not ((c>="a" and c<="z") or (c>="A" and c<="Z") or c="_" or (c>="0" and c<="9")) {%%TODO(IN): c not in ["a".."z","A".."Z","_","0".."9"]};

          -- poslední znak již patří do jiného elementu
          lex_input^.ungetchar;

          -- získat pointer na textovou reprezentaci a identifikátor
          last.val.txt:=buf_txt.endtext;
          last.val.id{%%X viz poznámka o genericitě CC_BUFFER}:unchecked:=buf_id.endtext;

          -- je to metaidentifikátor
          last.lex:=lex_asm_label;

      -- komentář { }
      when "{" do
          comment;

      -- znak "konec řádku" - LF
      when \10 do 
          -- předat ven konec řádku
          last.lex:=lex_eoln;

          -- a započítat další řádek zdrojáku
          lex_input^.next_line{count_new_line};

      -- znak "konec řádku" - ostatní znaky
      when \13,\12,\27 do
          -- ignorovat
          last.lex:=lex_nul;

      -- mohl by to být konec souboru
      when \0 do
          -- je to skutečně konec souboru?
          if lex_input^.is_eof

            -- ano
            then
              -- ohlásit konec souboru
              last.lex:=lex_eof;
      
              -- a započítat další řádek zdrojáku
              lex_input^.next_line{count_new_line};

            -- ne, je to jen náhodná nula uprostřed souboru
            else
              -- ignorovat
              last.lex:=lex_nul;
              end if;

      -- ignorovaný znak
      when \9,\26 do
          last.lex:=lex_nul;

      -- nepřípustný znak
      when others do
          ce^.seterror({CCERR=}000077,ce_illegal_char);
          -- %%TODO(POSITION) docasne reseni, aby byly alespon nejake informace...
          declare var
            tmp    : t_char32str;
          begin
            tmp:='(Character code: ';
            tmp & unsigned_to_string(c:ord);
            tmp & ')';
            ce^.setinfo(tmp);
            end declare;
          ce^.loadtextpos;
      end case;

    until last.lex<>lex_nul {and then (src.doeoln or else last.lex<>lex_eoln)};

  -- dopočítat délku elementu
  lex_input^.get_length(last.pos);

  -- neprázdný lexikální element indikuje efektivní řádek
  if last.lex not in lexsymset:[lex_nul,lex_eof,lex_eoln] then
    lex_input^.set_effective();
    end if;

#if #declared profiler_lex; #and then; profiler_lex then;
  rdtsc_stop(_get_lex_element_t);
#end if;
  end get_lex_element;
{%ON}



------------------------------------------------------------------------------------------------
override top_level =
-- True, je-li to top-level lexikální analyzátor, který nesmí být odstraněn bez toho, že by se
-- přešlo k nadřazenému souboru.
------------------------------------------------------------------------------------------------
begin
  result:=true;
  end top_level;



------------------------------------------------------------------------------------------------
override optimize_memory =
-- Optimalizuje paměť využitou posledně vráceným lexikálním elementem.
------------------------------------------------------------------------------------------------
begin
{
  if not val.id_used and val.id<>nil then
    buf_id.discardlast
    end if;
  if not val.txt_used and val.txt<>nil then
    buf_txt.discardlast
    end if;
}
  end optimize_memory;

end cc_lex0;
