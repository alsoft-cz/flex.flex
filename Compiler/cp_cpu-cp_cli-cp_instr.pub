----------------------------------------------------------------------------------------------------
module public cp_instr =
-- Překladač Flexu.
-- Specializace pro Common Intermediate Language.
-- Popis instrukční sady.
----------------------------------------------------------------------------------------------------
-- Ondra : 10.09.2004 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  cp_cpu.cp_common;

type
  ----- Prefixy ------------------------------------------------------------------------------------
  t_cil_prefix     = enum
      cilp_tail;                                 -- call terminates current method, page 23, section 2.1
      cilp_unaligned;                            -- pointer instruction may be unaligned section 2.2, page 24
      cilp_volatile;                             -- pointer reference is volatile section 2.3, page 25
      end enum;

  ----- Instrukce ----------------------------------------------------------------------------------
  t_cil_instruction = enum               
      -- Base Instructions, chapter 3, page 26
      cil_add;                                   -- add numeric values section 3.1, page 27
      cil_add_ovf{.<signed>};                    -- add signed integer values with overflow check section 3.2, page 28
      cil_add_ovf_un;                            -- add unsigned integer values with overflow check section 3.2, page 28
      cil_and;                                   -- bitwise AND section 3.3, page 29
      cil_arglist;                               -- get argument list section 3.4, page 30
      cil_beq{.<length>};                        -- branch on equal section 3.5, page 31
      cil_bge{.<length>};                        -- branch on greater than or equal to section 3.6, page 32
      cil_bge_un{.<length>};                     -- branch on greater than or equal to, unsigned or unordered section 3.7, page 33
      cil_bgt{.<length>};                        -- branch on greater than section 3.8, page 34
      cil_bgt_un{.<length>};                     -- branch on greater than, unsigned or unordered section 3.9, page 35
      cil_ble{.<length>};                        -- branch on less than or equal to section 3.10, page 36
      cil_ble_un{.<length>};                     -- branch on less than or equal to, unsigned or unordered section 3.11, page 37
      cil_blt{.<length>};                        -- branch on less than section 3.12, page 38
      cil_blt_un{.<length>};                     -- branch on less than, unsigned or unordered section 3.13, page 39
      cil_bne_un{<length>};                      -- branch on not equal or unordered section 3.14, page 40
      cil_br{.<length>};                         -- unconditional branch section 3.15, page 41
      cil_break;                                 -- breakpoint instruct ion section 3.16, page 42
      cil_brfalse{.<length>};                    -- branch on false, nul l, or zero section 3.17, page 43
      cil_brtrue{.<length>};                     -- branch on non-false or non-null section 3.18, page 44
      cil_call;                                  -- call a method section 3.19, page 45
      cil_calli;                                 -- indirect method call section 3.20, page 47
      cil_ceq;                                   -- compare equal section 3.21, page 48
      cil_cgt;                                   -- compare greater than section 3.22, page 49
      cil_cgt_un;                                -- compare greater than, unsigned or unordered section 3.23, page 50
      cil_ckfinite;                              -- check for a finite real number section 3.24, page 51
      cil_clt;                                   -- compare less than section 3.25, page 52
      cil_clt_un;                                -- compare less than, unsigned or unordered section 3.26, page 53
      cil_conv_i1;                               -- data conversion section 3.27, page 54
      cil_conv_i2;                               -- data conversion section 3.27, page 54
      cil_conv_i4;                               -- data conversion section 3.27, page 54
      cil_conv_i8;                               -- data conversion section 3.27, page 54
      cil_conv_r4;                               -- data conversion section 3.27, page 54
      cil_conv_r8;                               -- data conversion section 3.27, page 54
      cil_conv_u1;                               -- data conversion section 3.27, page 54
      cil_conv_u2;                               -- data conversion section 3.27, page 54
      cil_conv_u4;                               -- data conversion section 3.27, page 54
      cil_conv_u8;                               -- data conversion section 3.27, page 54
      cil_conv_i;                                -- data conversion section 3.27, page 54
      cil_conv_u;                                -- data conversion section 3.27, page 54
      cil_conv_r_un;                             -- data conversion section 3.27, page 54
      cil_conv_ovf_i1;                           -- data conversion with overflow detection section 3.28, page 55
      cil_conv_ovf_i2;                           -- data conversion with overflow detection section 3.28, page 55
      cil_conv_ovf_i4;                           -- data conversion with overflow detection section 3.28, page 55
      cil_conv_ovf_i8;                           -- data conversion with overflow detection section 3.28, page 55
      cil_conv_ovf_r4;                           -- data conversion with overflow detection section 3.28, page 55
      cil_conv_ovf_r8;                           -- data conversion with overflow detection section 3.28, page 55
      cil_conv_ovf_u1;                           -- data conversion with overflow detection section 3.28, page 55
      cil_conv_ovf_u2;                           -- data conversion with overflow detection section 3.28, page 55
      cil_conv_ovf_u4;                           -- data conversion with overflow detection section 3.28, page 55
      cil_conv_ovf_u8;                           -- data conversion with overflow detection section 3.28, page 55
      cil_conv_ovf_i;                            -- data conversion with overflow detection section 3.28, page 55
      cil_conv_ovf_u;                            -- data conversion with overflow detection section 3.28, page 55
      cil_conv_ovf_r_un;                         -- data conversion with overflow detection section 3.28, page 55
      cil_conv_ovf_i1_un;                        -- unsigned data conversion with overflow detection section 3.29, page 56
      cil_conv_ovf_i2_un;                        -- unsigned data conversion with overflow detection section 3.29, page 56
      cil_conv_ovf_i4_un;                        -- unsigned data conversion with overflow detection section 3.29, page 56
      cil_conv_ovf_i8_un;                        -- unsigned data conversion with overflow detection section 3.29, page 56
      cil_conv_ovf_u1_un;                        -- unsigned data conversion with overflow detection section 3.29, page 56
      cil_conv_ovf_u2_un;                        -- unsigned data conversion with overflow detection section 3.29, page 56
      cil_conv_ovf_u4_un;                        -- unsigned data conversion with overflow detection section 3.29, page 56
      cil_conv_ovf_u8_un;                        -- unsigned data conversion with overflow detection section 3.29, page 56
      cil_conv_ovf_i_un;                         -- unsigned data conversion with overflow detection section 3.29, page 56
      cil_conv_ovf_u_un;                         -- unsigned data conversion with overflow detection section 3.29, page 56
      cil_cpblk;                                 -- copy data from memory to memory section 3.30, page 57
      cil_div;                                   -- divide values section 3.31, page 58
      cil_div_un;                                -- divide integer values, unsigned section 3.32, page 59
      cil_dup;                                   -- dupl icate the top value of the stack section 3.33, page 60
      cil_endfilter;                             -- end filter clause of SEH section 3.34, page 61
      cil_endfinally;                            -- end the finally or faul t clause of an except ion block section 3.35, page 62
      cil_initblk;                               -- initialize a block of memory to a value section 3.36, page 63
      cil_jmp;                                   -- jump to method section 3.37, page 64
      cil_ldarg{.<length>};                      -- load argument onto the stack section 3.38, page 65
      cil_ldarga{.<length>};                     -- load an argument address section 3.39, page 66
      cil_ldc{.<type>};                          -- load numeric constant section 3.40, page 67
      cil_ldftn;                                 -- load method pointer section 3.41, page 68
      cil_ldind{.<type>};                        -- load value indirect onto the stack section 3.42, page 69
      cil_ldloc;                                 -- load local variable onto the stack section 3.43, page 71
      cil_ldloca{.<length>};                     -- load local variable address section 3.44, page 72
      cil_ldnull;                                -- load a null pointer section 3.45, page 73
      cil_leave{.<length>};                      -- exit a protected region of code section 3.46, page 74
      cil_localloc;                              -- allocate space in the local dynamic memory pool section 3.47, page 75
      cil_mul;                                   -- mul t iply values section 3.48, page 76
      cil_mul_ovf{.<type>};                      -- mult iply integer values with overflow check section 3.49, page 77
      cil_mul_ovf_un{.<type>};                   -- mult iply integer values with overflow check section 3.49, page 77
      cil_neg;                                   -- negate section 3.50, page 78
      cil_nop;                                   -- no operation section 3.51, page 79
      cil_not;                                   -- bitwise complement section 3.52, page 80
      cil_or;                                    -- bitwise OR section 3.53, page 81
      cil_pop;                                   -- remove the top element of the stack section 3.54, page 82
      cil_rem;                                   -- compute remainder section 3.55, page 83
      cil_rem_un;                                -- compute integer remainder, unsigned section 3.56, page 84
      cil_ret;                                   -- return from method section 3.57, page 85
      cil_shl;                                   -- shift integer left section 3.58, page 86
      cil_shr;                                   -- shift integer right section 3.59, page 87
      cil_shr_un;                                -- shift integer right, unsigned section 3.60, page 88
      cil_starg{.<length>};                      -- store a value in an argument slot section 3.61, page 89
      cil_stind{.<type>};                        -- store value indirect from stack section 3.62, page 90
      cil_stloc;                                 -- pop value from stack to local variable section 3.63, page 91
      cil_sub;                                   -- subtract numeric values section 3.64, page 92
      cil_sub_ovf{.<type>};                      -- subtract integer values, checking for overflow section 3.65, page 93
      cil_switch;                                -- table switch on value section 3.66, page 94
      cil_xor;                                   -- bitwise XOR section 3.67, page 95
      -- Object Model Instructions, section 4, page 96
      cil_box;                                   -- convert value type to object reference section 4.1, page 96
      cil_callvirt;                              -- call a method associated, at runtime, with an object section 4.2, page 97
      cil_castclass;                             -- cast an object to a class section 4.3, page 98
      cil_cpobj;                                 -- copy a value type section 4.4, page 99
      cil_initobj;                               -- initialize a value type section 4.5, page 100
      cil_isinst;                                -- test if an object is an instance of a class or interface section 4.6, page 101
      cil_ldelem{.<type>};                       -- load an element of an array section 4.7, page 102
      cil_ldelema;                               -- load address of an element of an array section 4.8, page 104
      cil_ldfld;                                 -- load field of an object section 4.9, page 105
      cil_ldflda;                                -- load field address section 4.10, page 106
      cil_ldlen;                                 -- load the length of an array section 4.11, page 107
      cil_ldobj;                                 -- copy value type to the stack section 4.12, page 108
      cil_ldsfld;                                -- load static field of a class section 4.13, page 109
      cil_ldsflda;                               -- load static field address section 4.14, page 110
      cil_ldstr;                                 -- load a literal string section 4.15, page 111
      cil_ldtoken;                               -- load the runt ime representation of a metadata token section 4.16, page 112
      cil_ldvirtftn;                             -- load a virtual method pointer section 4.17, page 113
      cil_mkrefany;                              -- push a typed reference on the stack section 4.18, page 114
      cil_newarr;                                -- create a zero-based, one-dimensional array section 4.19, page 115
      cil_newobj;                                -- create a new object section 4.20, page 116
      cil_refanytype;                            -- load the type out of a typed reference section 4.21, page 117
      cil_refanyval;                             -- load the address out of a typed reference section 4.22, page 118
      cil_rethrow;                               -- rethrow the current except ion section 4.23, page 119
      cil_sizeof;                                -- load the size in bytes of a value type section 4.24, page 120
      cil_stelem{.<type>};                       -- store an element of an array section 4.25, page 121
      cil_stfld;                                 -- store into a field of an object section 4.26, page 122
      cil_stobj;                                 -- store a value type from the stack into memory section 4.27, page 123
      cil_stsfld;                                -- store a static field of a class section 4.28, page 124
      cil_throw;                                 -- throw an exception section 4.29, page 125
      cil_unbox;                                 -- Convert boxed value type to its raw form section 4.30, page 126
      end enum;

const
  -- synonyma
  cil_endfault     = cil_endfinally;
  cil_brzero       = cil_brfalse;
  cil_brnull       = cil_brfalse;



----------------------------------------------------------------------------------------------------
protected
----------------------------------------------------------------------------------------------------
{
var
  ----- Prefixy ------------------------------------------------------------------------------------
  t_cil_prefix_encoding : array t_cil_prefix of string 2 of t_code_byte :=
      for cilp_tail      use [$FE,$14],
      for cilp_unaligned use [$FE,$12 {alignment!!!}],
      for cilp_volatile  use [$FE,$13]
      ];
}
type
  -- rozlišení typu indexu (žádný, konkrétní hodnota, rozsah)
  t_cil_index_distinction = enum                 
      cit_none;                                  -- žádný index
      cit_0;                                     -- index 0
      cit_1;                                     -- index 1
      cit_2;                                     -- index 2
      cit_3;                                     -- index 3
      cit_unsigned8;                             -- 8bitový unsigned index
      cit_unsigned16;                            -- 16bitový unsigned index
      cit_signed8;                               -- 8bitový signed index
      cit_signed32;                              -- 32bitový signed index
      end enum := cit_none;

  ----- Operační kód instrukce ---------------------------------------------------------------------
  t_cil_instruction_encoding = record
      cil          : t_cil_instruction;          -- instrukce
      oc           : string 2 of t_code_byte;    -- operační kód
      index        : t_cil_index_distinction := cit_none; -- rozlišení typu indexu (žádný, konkrétní hodnota, rozsah)
      end record;

var
  ----- Tabulka kódování instrukcí -----------------------------------------------------------------
  t_cil_instruction_map : array 0..160 of t_cil_instruction_encoding := [
      [for cil use cil_add         , for oc use [$48]],
      [for cil use cil_add_ovf     , for oc use [$D6]],
      [for cil use cil_add_ovf_un  , for oc use [$D7]],
      [for cil use cil_and         , for oc use [$5F]],

      [for cil use cil_arglist     , for oc use [$FE,$00]],

      [for cil use cil_beq         , for oc use [$2E], for index use cit_signed8 ],
      [for cil use cil_beq         , for oc use [$3B], for index use cit_signed32],

      [for cil use cil_bge         , for oc use [$2F], for index use cit_signed8 ],
      [for cil use cil_bge         , for oc use [$3C], for index use cit_signed32],

      [for cil use cil_bge_un      , for oc use [$34], for index use cit_signed8 ],
      [for cil use cil_bge_un      , for oc use [$41], for index use cit_signed32],

      [for cil use cil_bgt         , for oc use [$30], for index use cit_signed8 ],
      [for cil use cil_bgt         , for oc use [$3D], for index use cit_signed32],

      [for cil use cil_bgt_un      , for oc use [$35], for index use cit_signed8 ],
      [for cil use cil_bgt_un      , for oc use [$42], for index use cit_signed32],

      [for cil use cil_ble         , for oc use [$31], for index use cit_signed8 ],
      [for cil use cil_ble         , for oc use [$3E], for index use cit_signed32],

      [for cil use cil_ble_un      , for oc use [$36], for index use cit_signed8 ],
      [for cil use cil_ble_un      , for oc use [$43], for index use cit_signed32],

      [for cil use cil_blt         , for oc use [$32], for index use cit_signed8 ],
      [for cil use cil_blt         , for oc use [$3F], for index use cit_signed32],

      [for cil use cil_blt_un      , for oc use [$37], for index use cit_signed8 ],
      [for cil use cil_blt_un      , for oc use [$44], for index use cit_signed32],

      [for cil use cil_bne_un      , for oc use [$33], for index use cit_signed8 ],
      [for cil use cil_bne_un      , for oc use [$40], for index use cit_signed32],

      [for cil use cil_br          , for oc use [$2B], for index use cit_signed8 ],
      [for cil use cil_br          , for oc use [$38], for index use cit_signed32],

      [for cil use cil_break       , for oc use [$01]],

      [for cil use cil_brfalse     , for oc use [$2C], for index use cit_signed8 ],
      [for cil use cil_brfalse     , for oc use [$39], for index use cit_signed32],

      [for cil use cil_brtrue      , for oc use [$2D], for index use cit_signed8 ],
      [for cil use cil_brtrue      , for oc use [$3A], for index use cit_signed32],

      [for cil use cil_call        , for oc use [$28]],

      [for cil use cil_calli       , for oc use [$29]],

      [for cil use cil_ceq         , for oc use [$FE,$01]],

      [for cil use cil_cgt         , for oc use [$FE,$02]],

      [for cil use cil_cgt_un      , for oc use [$FE,$03]],

      [for cil use cil_ckfinite    , for oc use [$C3]],

      [for cil use cil_clt         , for oc use [$FE,$04]],

      [for cil use cil_clt_un      , for oc use [$FE,$05]],

      [for cil use cil_conv_i1       , for oc use [$67]],
      [for cil use cil_conv_i2       , for oc use [$68]],
      [for cil use cil_conv_i4       , for oc use [$69]],
      [for cil use cil_conv_i8       , for oc use [$6A]],
      [for cil use cil_conv_r4       , for oc use [$6B]],
      [for cil use cil_conv_r8       , for oc use [$6C]],
      [for cil use cil_conv_u1       , for oc use [$D2]],
      [for cil use cil_conv_u2       , for oc use [$D1]],
      [for cil use cil_conv_u4       , for oc use [$6D]],
      [for cil use cil_conv_u8       , for oc use [$6E]],
      [for cil use cil_conv_i        , for oc use [$D3]],
      [for cil use cil_conv_u        , for oc use [$E0]],
      [for cil use cil_conv_r_un     , for oc use [$76]],
      [for cil use cil_conv_ovf_i1   , for oc use [$B3]],
      [for cil use cil_conv_ovf_i2   , for oc use [$B5]],
      [for cil use cil_conv_ovf_i4   , for oc use [$B7]],
      [for cil use cil_conv_ovf_i8   , for oc use [$B9]],
      [for cil use cil_conv_ovf_u1   , for oc use [$B4]],
      [for cil use cil_conv_ovf_u2   , for oc use [$B6]],
      [for cil use cil_conv_ovf_u4   , for oc use [$B8]],
      [for cil use cil_conv_ovf_u8   , for oc use [$BA]],
      [for cil use cil_conv_ovf_i    , for oc use [$D4]],
      [for cil use cil_conv_ovf_u    , for oc use [$D5]],
      [for cil use cil_conv_ovf_i1_un, for oc use [$82]],
      [for cil use cil_conv_ovf_i2_un, for oc use [$83]],
      [for cil use cil_conv_ovf_i4_un, for oc use [$84]],
      [for cil use cil_conv_ovf_i8_un, for oc use [$85]],
      [for cil use cil_conv_ovf_u1_un, for oc use [$86]],
      [for cil use cil_conv_ovf_u2_un, for oc use [$87]],
      [for cil use cil_conv_ovf_u4_un, for oc use [$88]],
      [for cil use cil_conv_ovf_u8_un, for oc use [$89]],
      [for cil use cil_conv_ovf_i_un , for oc use [$8A]],
      [for cil use cil_conv_ovf_u_un , for oc use [$8B]],

      [for cil use cil_cpblk       , for oc use [$FE,$17]],

      [for cil use cil_div         , for oc use [$5B]],

      [for cil use cil_div_un      , for oc use [$5C]],

      [for cil use cil_dup         , for oc use [$25]],

      [for cil use cil_endfilter   , for oc use [$FE,$11]],

      [for cil use cil_endfinally  , for oc use [$DC]],

      [for cil use cil_initblk     , for oc use [$FE,$18]],

      [for cil use cil_jmp         , for oc use [$27]],

      [for cil use cil_ldarg       , for oc use [$02], for index use cit_0],
      [for cil use cil_ldarg       , for oc use [$03], for index use cit_1],
      [for cil use cil_ldarg       , for oc use [$04], for index use cit_2],
      [for cil use cil_ldarg       , for oc use [$05], for index use cit_3],
      [for cil use cil_ldarg       , for oc use [$0E], for index use cit_unsigned8],
      [for cil use cil_ldarg       , for oc use [$FE,$09], for index use cit_unsigned16],

      [for cil use cil_ldarga      , for oc use [$0F], for index use cit_unsigned8],
      [for cil use cil_ldarga      , for oc use [$FE,$0A], for index use cit_unsigned16],

      [for cil use cil_ldc         , for oc use []],

      [for cil use cil_ldftn       , for oc use [$FE,$06]],

      [for cil use cil_ldind       , for oc use []],

      [for cil use cil_ldloc       , for oc use [$06], for index use cit_0],
      [for cil use cil_ldloc       , for oc use [$07], for index use cit_1],
      [for cil use cil_ldloc       , for oc use [$08], for index use cit_2],
      [for cil use cil_ldloc       , for oc use [$09], for index use cit_3],
      [for cil use cil_ldloc       , for oc use [$11], for index use cit_unsigned8],
      [for cil use cil_ldloc       , for oc use [$FE,$0C], for index use cit_unsigned16],

      [for cil use cil_ldloca      , for oc use [$12], for index use cit_unsigned8],
      [for cil use cil_ldloca      , for oc use [$FE,$0D], for index use cit_unsigned16],

      [for cil use cil_ldnull      , for oc use [$14]],

      [for cil use cil_leave       , for oc use [$DE], for index use cit_signed8],
      [for cil use cil_leave       , for oc use [$DD], for index use cit_signed32],

      [for cil use cil_localloc    , for oc use [$FE,$0F]],

      [for cil use cil_mul         , for oc use [$5A]],

      [for cil use cil_mul_ovf     , for oc use [$D8]],
      [for cil use cil_mul_ovf_un  , for oc use [$D9]],

      [for cil use cil_neg         , for oc use [$65]],

      [for cil use cil_nop         , for oc use [$00]],

      [for cil use cil_not         , for oc use [$66]],

      [for cil use cil_or          , for oc use [$60]],

      [for cil use cil_pop         , for oc use [$26]],

      [for cil use cil_rem         , for oc use [$5D]],

      [for cil use cil_rem_un      , for oc use [$5E]],

      [for cil use cil_ret         , for oc use [$2A]],

      [for cil use cil_shl         , for oc use [$62]],

      [for cil use cil_shr         , for oc use [$63]],

      [for cil use cil_shr_un      , for oc use [$64]],

      [for cil use cil_starg       , for oc use [$10], for index use cit_unsigned8],
      [for cil use cil_starg       , for oc use [$FE,$0B], for index use cit_unsigned16],

      [for cil use cil_stind       , for oc use []],

      [for cil use cil_stloc       , for oc use [$0A], for index use cit_0],
      [for cil use cil_stloc       , for oc use [$0B], for index use cit_1],
      [for cil use cil_stloc       , for oc use [$0C], for index use cit_2],
      [for cil use cil_stloc       , for oc use [$0D], for index use cit_3],
      [for cil use cil_stloc       , for oc use [$13], for index use cit_unsigned8],
      [for cil use cil_stloc       , for oc use [$FE,$0E], for index use cit_unsigned16],

      [for cil use cil_sub         , for oc use [$59]],

      [for cil use cil_sub_ovf     , for oc use []],

      [for cil use cil_switch      , for oc use [$45]],

      [for cil use cil_xor         , for oc use [$61]],

      [for cil use cil_box         , for oc use [$8C]],

      [for cil use cil_callvirt    , for oc use [$6F]],

      [for cil use cil_castclass   , for oc use [$74]],

      [for cil use cil_cpobj       , for oc use [$70]],

      [for cil use cil_initobj     , for oc use [$FE,$15]],

      [for cil use cil_isinst      , for oc use [$75]],

      [for cil use cil_ldelem      , for oc use []],

      [for cil use cil_ldelema     , for oc use [$8F]],

      [for cil use cil_ldfld       , for oc use [$7B]],

      [for cil use cil_ldflda      , for oc use [$7C]],

      [for cil use cil_ldlen       , for oc use [$8E]],

      [for cil use cil_ldobj       , for oc use [$71]],

      [for cil use cil_ldsfld      , for oc use [$7E]],

      [for cil use cil_ldsflda     , for oc use [$7F]],

      [for cil use cil_ldstr       , for oc use [$72]],

      [for cil use cil_ldtoken     , for oc use [$D0]],

      [for cil use cil_ldvirtftn   , for oc use [$FE,$07]],

      [for cil use cil_mkrefany    , for oc use [$C6]],

      [for cil use cil_newarr      , for oc use [$8D]],

      [for cil use cil_newobj      , for oc use [$73]],

      [for cil use cil_refanytype  , for oc use [$FE,$1D]],

      [for cil use cil_refanyval   , for oc use [$C2]],

      [for cil use cil_rethrow     , for oc use [$FE,$1A]],

      [for cil use cil_sizeof      , for oc use [$FE,$1C]],

      [for cil use cil_stelem      , for oc use []],

      [for cil use cil_stfld       , for oc use [$7D]],

      [for cil use cil_stobj       , for oc use [$81]],

      [for cil use cil_stsfld      , for oc use [$80]],

      [for cil use cil_throw       , for oc use [$7A]],

      [for cil use cil_unbox       , for oc use [$79]]
      ];

      

end cp_instr;