----------------------------------------------------------------------------------------------------
module private cd_attr =
-- Překladač Flexu.
-- Deklarace atributů.
----------------------------------------------------------------------------------------------------
-- Ondra : 07.11.2001 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  cc_attr,
  cd_create,
  cx_expr,cx_expr.cx_def,cx_expr.cx_compile;

----------------------------------------------------------------------------------------------------
procedure p_attribute =
-- Specifikace atributů.
----------------------------------------------------------------------------------------------------
var
  lex              : lexsym;                     -- lexikální symbol
  id               : pentityident;               -- identifikátor atributu
  expr             : pexpnode;                   -- výraz
  pos              : lexposblock;                -- pozice deklarace
  pattr            : pentity_attribute;          -- atribut
  attr_context     : tcontext;                   -- kontext atributu
  attr             : tattrformal;                -- formální atribut
  eval             : tentityeval;
  curr_attrib      : tcontext;                   -- atributový kontext překládané entity

begin
  loop
    -- deklarace atributu
    if checklex(curr,lex_attribute) then
      unimplemented({UNIMP=}000276);

      { Níže uvedený kód je v principu funkční, ale využívá atributové regiony, které jsem zrušil. }

      -- identifikátor
      getlex(curr,lex);
      if lex<>lex_id then
        ce^.seterror({CCERR=}000186,ce_x_id);
        ce^.loadpos;
        {%%RESUME ce^.raiseerror;}
        ce^.resumeerror;
        end if;
      id:=getlexid;

      -- nesmí to být jazykem definovaný atribut
      if islangattr(id^) then
        ce^.seterror({CCERR=}000187,ce_langattr);
        ce^.setparam(entityident_to_string(id^));
        ce^.loadpos;
        {%%RESUME ce^.raiseerror;}
        ce^.resumeerror;
        end if;
    {
      -- získat atributový kontext
      d_get_attribute_context(curr.entity^,curr_attrib);
    }
      -- nová deklarace
      d_create_without_name(curr_attrib,pentity(pattr),attr_context,et_attribute,id,pos);

      -- :=
      if followlex(curr,lex_assign) then
        ce^.seterror({CCERR=}000188,ce_x_assign);
        ce^.loadpos;
        end if;

      -- konstantní výraz
      x_vyraz(curr,expr,es_expr);
      x_evaluate(curr,expr,ek_const,nil,eu_use,true,eval);
      verify({VERIFY=}000277,eval<>ete_evaluated);

      -- konec deklarace
      d_end(pattr^,pos);

    -- determinace atributu
    elsif checklex(curr,lex_for) then
      -- identifikátor atributu
      a_attrid(curr,id);

      -- pozice
      getlexposall(pos,ll_curr);

      -- musí být jazykem definovaný atribut
      a_getlangattr(id^,attr);
      if not islangattr(id^) then
        ce^.seterror({CCERR=}000189,ce_x_langattrid);
        ce^.loadpos;
        {%%RESUME ce^.raiseerror;}
        ce^.resumeerror;
        end if;

      -- USE
      if followlex(curr,lex_use) then
        ce^.seterror({CCERR=}000190,ce_x_use);
        ce^.loadpos;
        end if;

      -- konstantní výraz
      x_vyraz(curr,expr,es_expr);
      --x_evaluate(curr,expr,ek_const,nil,eu_use,true,eval);
      --verify({VERIFY=}000278,eval<>se_evaluated);

      -- dosadit hodnotu atributu
      case attr
        -- :ord
        when atf_ord do
            -- symbol musí být výčtový prvek
            if curr.entity^.etype<>et_enum then
              ce^.seterror({CCERR=}000191,ce_i_attr);
              ce^.setparam(entityident_to_string(id^));
              ce^.setpos(pos);
              {%%RESUME ce^.raiseerror;}
              ce^.resumeerror;
              end if;

            -- dosadit
            pentity_enum(curr.entity)^.attr_ord.setexpr(expr);

        -- :size
        when atf_size do
            -- symbol musí být regulární typ
            if not ((curr.entity^.etype in ets_type) and (pentity_type(curr.entity)^.stype in dts_regular)) then
              ce^.seterror({CCERR=}000192,ce_i_attr);
              ce^.setparam(entityident_to_string(id^));
              ce^.setpos(pos);
              {%%RESUME ce^.raiseerror;}
              ce^.resumeerror;
              end if;

            -- dosadit
            pentity_type(curr.entity)^.attr_size.setexpr(expr);

        -- :position
        when atf_position do
            -- symbol musí být složka třídy nebo recordu
            if not ((curr.entity^.etype=et_var) and (pentity_var(curr.entity)^.mclass in mcs_offset)) then
              ce^.seterror({CCERR=}000193,ce_i_attr);
              ce^.setparam(entityident_to_string(id^));
              ce^.setpos(pos);
              {%%RESUME ce^.raiseerror;}
              ce^.resumeerror;
              end if;

            -- dosadit
            pentity_var(curr.entity)^.attr_position.setexpr(expr);

        -- :alignment
        when atf_alignment do
            -- symbol musí být typ se složkami
            if not (curr.entity^.etype in ets_type and pentity_type(curr.entity)^.stype in dts_component) then
              ce^.seterror({CCERR=}000194,ce_i_attr);
              ce^.setparam(entityident_to_string(id^));
              ce^.setpos(pos);
              {%%RESUME ce^.raiseerror;}
              ce^.resumeerror;
              end if;

            -- dosadit
            pentity_type(curr.entity)^.attr_align.setexpr(expr);

        -- :native_alignment
        when atf_native_alignment do
            -- symbol musí být strukturovaný typ
            if not (curr.entity^.etype in ets_type and pentity_type(curr.entity)^.stype in dts_structured) then
              ce^.seterror({CCERR=}000560,ce_i_attr);
              ce^.setparam(entityident_to_string(id^));
              ce^.setpos(pos);
              {%%RESUME ce^.raiseerror;}
              ce^.resumeerror;
              end if;

            -- dosadit
            pentity_type(curr.entity)^.attr_native_align.setexpr(expr);

        -- :machine_pointer
        when atf_machine_pointer do
            -- symbol musí být typ pointer
            if not ((curr.entity^.etype in ets_type) and (pentity_type(curr.entity)^.stype in dts_pointer)) then
              ce^.seterror({CCERR=}000195,ce_i_attr);
              ce^.setparam(entityident_to_string(id^));
              ce^.setpos(pos);
              {%%RESUME ce^.raiseerror;}
              ce^.resumeerror;
              end if;

            -- dosadit
            pentity_type(curr.entity)^.attr_mptr.setexpr(expr);

        when others do
            ce^.seterror({CCERR=}000196,ce_i_attr);
            ce^.setparam(entityident_to_string(id^));
            --%%TODO(LIB) ce^.setinfo(formats(hint_attr_cant_redef,id));
            ce^.setpos(pos);
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
        end case;

    -- nic jiného není specifikace atributu
    else
      break
      end if;

    end loop;
  end p_attribute;



end cd_attr;
