----------------------------------------------------------------------------------------------------
module private cc_options =
-- Prekladac
-- nastaveni prekladace
----------------------------------------------------------------------------------------------------

with
  cc_def.cc_entity,
  cc_base.cc_sym,
  advanced,
  advanced.low_level,
  advanced.low_level.bit_operations;

type
  -- popis nastaveni
  toptiondesc      = record
      txt              : tshortident;
      opt              : toption;
      etypes           : tentitytypeset;         -- typy entit pro ktere se vztahuje dane nastaveni
      switch           : t_logical;              -- F - option se da pouze nastavit, T - da se zapnout a vypnout
      paramtype        : tdatatype;              -- datovy typ 1. parametru
      propagate_on_get : t_logical;              -- T - hleda se nejblizsi nadrazene platna entita od daneho kontextu/entity behem zjistovani nastaveni
      propagate_on_set : t_logical;              -- T - hleda se nejblizsi nadrazene platna entita od daneho kontextu/entity behem nastavovani nastaveni
      inherit          : t_logical;              -- T - nastaveni se dedi do nove vytvorenych entit
      end record;
  

  -- !!! Pokud zmenis [toptiondata] nebo [toptions], nezapomen provest prislusne upravy v [o_clone_options]
  
  -- parametry jednoho nastaveni
  toptiondata;
  poptiondata      = ^toptiondata;
  toptiondata      = record
      typ          : toption;
      next         : poptiondata;
      -- pridat dalsi typy dle potreby
      uint         : t_unsigned;                -- cele cislo bez znamenka
      end record;

  -- nastaveni s parametry nastaveni
  toptions;
  poptions         = ^class toptions;
  toptions         = t_flex_record with record
      opts         : toptionset;
      params       : poptiondata;
      end record;
  
var
{%OFF}
  -- !!! tabulka je indexovana podle toption!
  optiontab       : const array toption of toptiondesc := [
      [for txt use 'DUMP'                   , for etypes use tentitytypeset:full,for switch use true ,for paramtype use dt_undef   , for propagate_on_get use false, for propagate_on_set use false, for inherit use true ],
      [for txt use 'DUMP_CODE'              , for etypes use tentitytypeset:full,for switch use true ,for paramtype use dt_undef   , for propagate_on_get use false, for propagate_on_set use false, for inherit use true ],
      [for txt use 'DUMP_REGS'              , for etypes use tentitytypeset:full,for switch use true ,for paramtype use dt_undef   , for propagate_on_get use false, for propagate_on_set use false, for inherit use true ],
      [for txt use 'EXTRA_DEBUG_INFORMATION', for etypes use tentitytypeset:full,for switch use true ,for paramtype use dt_undef   , for propagate_on_get use false, for propagate_on_set use false, for inherit use true ],
      [for txt use 'IMAGE_BASE'             , for etypes use [et_compile]       ,for switch use false,for paramtype use dt_unsigned, for propagate_on_get use true,  for propagate_on_set use true,  for inherit use false],
      [for txt use 'OVERFLOW_CHECKING'      , for etypes use tentitytypeset:full,for switch use true ,for paramtype use dt_undef   , for propagate_on_get use false, for propagate_on_set use false, for inherit use true ],
      [for txt use 'RANGE_CHECKING'         , for etypes use tentitytypeset:full,for switch use true ,for paramtype use dt_undef   , for propagate_on_get use false, for propagate_on_set use false, for inherit use true ],
      [for txt use 'STACK_RESERVE'          , for etypes use [et_compile]       ,for switch use false,for paramtype use dt_unsigned, for propagate_on_get use true,  for propagate_on_set use true,  for inherit use false],
      [for txt use 'VALIDATE_HEAP'          , for etypes use ets_enclosing      ,for switch use true ,for paramtype use dt_undef   , for propagate_on_get use false, for propagate_on_set use false, for inherit use true ],
      [for txt use 'VALIDATE_STACK'         , for etypes use ets_enclosing      ,for switch use true ,for paramtype use dt_undef   , for propagate_on_get use false, for propagate_on_set use false, for inherit use true ]]; 
{%ON}



----------------------------------------------------------------------------------------------------
procedure o_get_option_by_id  =
-- zjisti ordinalni id nastaveni podle identifikatoru
-- vrati T pokud ok, F pokud takove nastaveni nezname
----------------------------------------------------------------------------------------------------
begin
  result:=false;
  
  -- vyhledat
  for i in optiontab:range loop
    if optiontab[i].txt = optionid then
      result:=true;
      option:=i;
      break;
      end if;
    end loop;
  end o_get_option_by_id;



----------------------------------------------------------------------------------------------------
procedure o_is_option_switchable =
-- vrati T pokud je nastaveni [option] prepinatelne, jinak F
----------------------------------------------------------------------------------------------------
begin
  result:=optiontab[option].switch;  
  end o_is_option_switchable;



----------------------------------------------------------------------------------------------------
procedure o_get_option_param_type =
-- vrati pozadovany datovy typ parametru nastaveni [option]
-- vrati dt_undef pokud nastaveni [option] nema parametr
----------------------------------------------------------------------------------------------------
begin
  result:=optiontab[option].paramtype;
  end o_get_option_param_type;



----------------------------------------------------------------------------------------------------
procedure find_entity_by_entity (
    entity         : in pentity;
    option         : in toption;
    setting        : in t_logical)
                     return pentity =
-- najde nejblizsi platnou entitu pro nastaveni [option] podle [entity]
----------------------------------------------------------------------------------------------------
begin
  -- je kde hledat?
  if entity=nil then return; end if;
  
  -- nasli jsme hledanou entitu?
  if entity^.etype in optiontab[option].etypes then 
    result:=entity;
    return;
    end if;

  -- hledame entitu kvuli zjisteni nastaveni?
  if not setting then
    -- ano - je treba se podivat do nadrazene entity
    if optiontab[option].propagate_on_get then
      result:=find_entity_by_entity(entity^.context.entity,option,setting);
      end if;
  
  -- nebo nastavujeme nastaveni a nastaveni se propaguje na nejblizsi platnou nadrazenou entitu?
  elsif optiontab[option].propagate_on_set then
    result:=sym_get_enclosing_or_self_ex(entity,optiontab[option].etypes);
    end if;
  end find_entity_by_entity;



----------------------------------------------------------------------------------------------------
procedure find_entity_by_context (
    context        : in tcontext;
    option         : in toption;
    setting        : t_logical)
                     return pentity =
-- najde nejblizsi platnou entitu pro nastaveni [option] podle [context]
----------------------------------------------------------------------------------------------------
begin
  result:=find_entity_by_entity(context.entity,option,setting);
  end find_entity_by_context;



----------------------------------------------------------------------------------------------------
overload find_entity : find_entity_by_entity,find_entity_by_context;
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
procedure o_is_option_applicable =
-- vrati T - pokud je nastaveni [option] platne pro kontext [context], respektive da se nastavit, jinak F 
----------------------------------------------------------------------------------------------------
begin
  result:=find_entity_by_context(context,option,{setting}true)<>nil;
  end o_is_option_applicable;



----------------------------------------------------------------------------------------------------
procedure alloc_options (
    options        : in out p_flex_record) =
-- alokuje strukturu nastaveni pokud je treba
----------------------------------------------------------------------------------------------------
begin
  -- alokuj novou strukturu options pokud treba
  if options=nil then 
    new poptions(options); 
    end if;
  
  -- chyba?
  verify({VERIFY=}000746,options=nil);
  end alloc_options;



----------------------------------------------------------------------------------------------------
procedure o_set_option_on =
-- zapne nastaveni [option] v ramci kontextu [context]
-- hleda se nejblizsi platny kontext, pokud se nenajde vyvola se interni chyba
----------------------------------------------------------------------------------------------------
var
  entity    : pentity;

begin
  -- najdi entitu, na ktere se provede uprava nastaveni
  entity:=find_entity_by_context(context,option,{setting}true);

  -- entita nenalezena?
  verify({VERIFY=}000747,entity=nil);

  -- alokuj misto pro nastaveni pokud treba
  alloc_options(entity^.compv.options);

  -- a nastav
  bit_set(poptions(entity^.compv.options)^.opts,t_bit_index(option:ord));

  -- ok
  end o_set_option_on;



----------------------------------------------------------------------------------------------------
procedure o_set_option_off =
-- zapne nastaveni [option] v ramci kontextu [context]
-- hleda se nejblizsi platny kontext, pokud se nenajde vyvola se interni chyba
----------------------------------------------------------------------------------------------------
var
  entity    : pentity;

begin
  -- najdi entitu, na ktere se provede uprava nastaveni
  entity:=find_entity_by_context(context,option,{setting}true);

  -- entita nenalezena?
  verify({VERIFY=}000748,entity=nil);

  if entity^.compv.options<>nil then
    bit_reset(poptions(entity^.compv.options)^.opts,t_bit_index(option:ord));
    end if;
  end o_set_option_off;



----------------------------------------------------------------------------------------------------
procedure o_is_option_by_entity =
-- zjisti jestli je nastaveni [option] zapnute v ramci entity [entity]; T-ano, F-ne
-- hleda se nejblizsi platny kontext, pokud se nenajde vrati F
----------------------------------------------------------------------------------------------------
var
  foundentity    : pentity;

begin
  -- najdi entitu, na ktere se provede uprava nastaveni
  foundentity:=find_entity_by_entity(^entity,option,{setting}false);

  -- entita nenalezena?
  if foundentity=nil then return; end if;

  result:=foundentity^.compv.options<>nil and then option in poptions(foundentity^.compv.options)^.opts;
  end o_is_option_by_entity;



----------------------------------------------------------------------------------------------------
procedure o_is_option_by_context =
-- zjisti jestli je nastaveni [option] zapnute v ramci kontextu [context]; T-ano, F-ne
-- hleda se nejblizsi platny kontext, pokud se nenajde vrati F
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}000678,context.entity=nil);
  result:=o_is_option_by_entity(option,context.entity^);
  end o_is_option_by_context;



----------------------------------------------------------------------------------------------------
procedure find_option_data (
    option     : in toption;
    firstdata  : in poptiondata)                 -- zacatek seznamu
                 return poptiondata =
-- najde data parametru [option] v seznamu parametru nastaveni
----------------------------------------------------------------------------------------------------
begin
  result:=firstdata;
  while result<>nil and then result^.typ<>option loop
    result:=result^.next;
    end loop;
  end find_option_data;



----------------------------------------------------------------------------------------------------
procedure add_option_data (
    datalist   : in out poptiondata;
    datatoadd  : in poptiondata) =
-- prida data parametru do seznamu parametru nastaveni
----------------------------------------------------------------------------------------------------
var
  data      : poptiondata;

begin
  if datalist=nil then 
    datalist:=datatoadd;
    return;
    end if;
  
  -- najdi ocas
  data:=datalist;
  while data^.next<>nil loop data:=data^.next; end loop;

  data^.next:=datatoadd;
  end add_option_data;



----------------------------------------------------------------------------------------------------
procedure alloc_option_data (
    optiondata    : in out poptiondata ) =
-- alokuje strukturu pro data parametru nastaveni
----------------------------------------------------------------------------------------------------
begin
  -- alokuj novou strukturu options pokud treba
  if optiondata=nil then 
    new optiondata; 
    end if;
  
  -- chyba?
  verify({VERIFY=}000679,optiondata=nil);
  end alloc_option_data;



----------------------------------------------------------------------------------------------------
procedure o_set_option_param_unsigned =
-- nastavi bezznamenkovy celociselny parametr pro nastaveni [option] v ramci kontextu [context]
-- hleda se nejblizsi platny kontext, pokud se nenajde vyvola se interni chyba
----------------------------------------------------------------------------------------------------
var
  entity          : pentity;
  optiondata      : poptiondata;

begin
  -- najdi entitu, na ktere se provede uprava nastaveni
  entity:=find_entity_by_context(context,option,{setting}true);

  -- entita nenalezena?
  verify({VERIFY=}000680,entity=nil);

  -- alokuj misto pro nastaveni pokud treba
  alloc_options(entity^.compv.options);

  -- najdi parametr
  optiondata:=find_option_data(option,poptions(entity^.compv.options)^.params);

  -- alokuj novou strukturu pokud treba
  if optiondata=nil then 
    alloc_option_data(optiondata);
    optiondata^.typ:=option;
    add_option_data(poptions(entity^.compv.options)^.params,optiondata);
    end if;

  optiondata^.uint:=param;
  end o_set_option_param_unsigned;



----------------------------------------------------------------------------------------------------
procedure o_get_option_param_unsigned_by_entity =
-- vrati bezznamenkovy celociselny parametr pro nastaveni [option] v ramci entity [entity]
-- hleda se nejblizsi platny kontext, pokud se nenajde funkce vrati F, jinak
-- funkce vrati F pokud parametr jeste nebyl nastaveny a [param] je nedefinovany, T pri uspechu
----------------------------------------------------------------------------------------------------
var
  pent       : pentity;
  optiondata : poptiondata;

begin
  result:=false;

  -- najdi entitu, na ktere se provede uprava nastaveni
  pent:=find_entity_by_entity(^entity,option,{setting}false);

  -- entita nenalezena?
  if pent=nil or else pent^.compv.options=nil then return; end if;

  -- najdi parametr
  optiondata:=find_option_data(option,poptions(pent^.compv.options)^.params);

  -- existuje parametr pro [option]?
  if optiondata<>nil then 
    -- existuje - precti ho
    param:=optiondata^.uint;
    result:=true;
    end if;
  end o_get_option_param_unsigned_by_entity;



----------------------------------------------------------------------------------------------------
procedure o_get_option_param_unsigned_by_context =
-- vrati bezznamenkovy celociselny parametr pro nastaveni [option] v ramci kontextu [context]
-- hleda se nejblizsi platny kontext, pokud se nenajde funkce vrati F, jinak
-- funkce vrati F pokud parametr jeste nebyl nastaveny a [param] je nedefinovany, T pri uspechu
----------------------------------------------------------------------------------------------------
begin
  result:=o_get_option_param_unsigned_by_entity(option,context.entity^,param);
  end o_get_option_param_unsigned_by_context;



----------------------------------------------------------------------------------------------------
procedure o_clone_options =
-- provede hlubokou kopii nastaveni z entity [src_entity] do entity [dest_entity]
----------------------------------------------------------------------------------------------------
var
  opt_data     : poptiondata;
  new_opt_data : poptiondata;

begin
  -- ma zdrojova entita nejaka nastaveni?
  if src_entity.compv.options=nil then
    -- ne, exitus
    return;
    end if;

  -- pokud treba naalokuj strukturu toptions
  alloc_options(dest_entity.compv.options); 

  -- zkopiruj mnozinu nastaveni
  for i in toption loop
    -- jen pokud se nastaveni dedi
    if optiontab[i].inherit and i in poptions(src_entity.compv.options)^.opts then
      -- a nastav
      bit_set(poptions(dest_entity.compv.options)^.opts,t_bit_index(i:ord));
      end if;
    end loop;

  -- zkopiruj parametry nastaveni
  opt_data:=poptions(src_entity.compv.options)^.params;
  
  while opt_data<>nil loop
    -- jen pokud se nastaveni dedi 
    if optiontab[opt_data^.typ].inherit then
      alloc_option_data(new_opt_data);
      new_opt_data^.typ:=opt_data^.typ;
      new_opt_data^.uint:=opt_data^.uint;
      add_option_data(poptions(dest_entity.compv.options)^.params,new_opt_data);
      end if;
    
    -- dalsi zdrojovy parametr
    opt_data:=opt_data^.next;
    end loop;
  
  end o_clone_options;

end cc_options;