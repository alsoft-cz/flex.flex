----------------------------------------------------------------------------------------------------
module public cb_def =
-- Překladač Flexu.
-- Definice stromového tvaru bloku příkazů.
----------------------------------------------------------------------------------------------------
-- Ondra : 25.09.2001 : Vytvořil
----------------------------------------------------------------------------------------------------

-- dopředné deklarace
class blnode;          type pblnode          = ^class blnode;
-- jednoduché příkazy
class blsimple;        type pblsimple        = ^class blsimple;
class blcond;          type pblcond          = ^class blcond;
class blcmd;           type pblcmd           = ^class blcmd;
class blbreak;         type pblbreak         = ^class blbreak;
class blreturn;        type pblreturn        = ^class blreturn;
class blmessage;       type pblmessage       = ^class blmessage;
class blraise;         type pblraise         = ^class blraise;
class blsend;          type pblsend          = ^class blsend;
class blgoto;          type pblgoto          = ^class blgoto;
class blalloc;         type pblalloc         = ^class blalloc;
class blnew;           type pblnew           = ^class blnew;
class bldiscard;       type pbldiscard       = ^class bldiscard;
class bladjust;        type pbladjust        = ^class bladjust;
class bldelay;         type pbldelay         = ^class bldelay;
-- složené příkazy
class blcompound;      type pblcompound      = ^class blcompound;
class blif;            type pblif            = ^class blif;
class blloop;          type pblloop          = ^class blloop;
class blfor;           type pblfor           = ^class blfor;
class blwhile;         type pblwhile         = ^class blwhile;
class blcase;          type pblcase          = ^class blcase;
class blaccept;        type pblaccept        = ^class blaccept;
class blblock;         type pblblock         = ^class blblock;
class bldeclare;       type pbldeclare       = ^class bldeclare;
class blasm;           type pblasm           = ^class blasm;
-- pomocné uzly
class bllabel;         type pbllabel         = ^class bllabel;
class blchoicelist;    type pblchoicelist    = ^class blchoicelist;
class blwhen_m;        type pblwhen_m        = ^class blwhen_m;
class blwhen_c;        type pblwhen_c        = ^class blwhen_c;
class blif_cond;       type pblif_cond       = ^class blif_cond;
class blloop1;         type pblloop1         = ^class blloop1;

type
  -- fáze překladu bloku příkazů
  blphase          = enum
      bp_syntax;                                 -- syntaktická analýza
      bp_form;                                   -- formální kontrola
      bp_opt;                                    -- optimalizace
      end enum;

var
  -- fáze překladu bloku příkazů
{%OFF}
  blphase_export_id : const array blphase of t_char32str := [
      for bp_syntax use 'syntax',
      for bp_form   use 'form',
      for bp_opt    use 'opt'];
{%ON}

----------------------------------------------------------------------------------------------------
class public blinfo = extend c_flex_class;
-- Informace o průběhu analýzy
----------------------------------------------------------------------------------------------------
    var
      phase        : blphase;                    -- fáze překladu
      eval         : tentityeval;                -- vyhodnocení
    --final        : t_logical;                  -- T-požadováno úplné vyhodnocení

    const
      final        = true;

    ------------------------------------------------------------------------------------------------
    static init (
        final      : in t_logical);              -- T-požad. plné vyhodnocení
    -- Inicializace.
    ------------------------------------------------------------------------------------------------
    end blinfo;

  ----- %%TECH -------------------------------------------------------------------------------------
  -- Postup při přidávání nových uzlů:
  --   1. do BLOCKTYPE přidat identifikátor (dále odkazovaný jako xxx)
  --   2. vytvořit objekt BLxxx jako (nepřímý) potomek BLNODE
  --       a pointer PBLxxx
  --   3. v objektu implementovat alespoň metodu DUMP
  --   4. do procedur CB_FORM.B_FORM a CB_OPT.B_OPT doplnit
  --      obsluhu nového typu uzlu
  --------------------------------------------------------------------------------------------------

type
  -- typy uzlů
  blocktype        = enum
      bt_none;                                   -- neznámý uzel
      --- uzly použité poprvé při syntaktické analýze ---
      -- jednoduché příkazy
      bt_cmd;                                    -- přiřazovací příkaz
      bt_break;                                  -- příkaz BREAK
      bt_return;                                 -- příkaz RETURN
      bt_raise;                                  -- příkaz RAISE
      bt_send;                                   -- příkaz SEND
      bt_goto;                                   -- příkaz GOTO
      bt_new;                                    -- příkaz NEW
      bt_discard;                                -- příkaz DISCARD
      bt_delay;                                  -- příkaz DELAY
      bt_adjust;                                 -- příkaz ADJUST
      -- složené příkazy
      bt_if;                                     -- příkaz IF
      bt_loop;                                   -- příkaz LOOP
      bt_for;                                    -- příkaz FOR
      bt_while;                                  -- příkaz WHILE
      bt_case;                                   -- příkaz CASE
      bt_accept;                                 -- příkaz ACCEPT
      bt_block;                                  -- blok příkazů BEGIN/END
      bt_protected;                              -- blok příkazů PROTECTED/END PROTECTED
      bt_sequential;                             -- blok příkazů SEQUENTIAL/END SEQUENTIAL
      bt_declare;                                -- blok příkazů DECLARE/BEGIN/END
      bt_asm;                                    -- kod v assembleru
      -- pomocné uzly
      bt_label;                                  -- návěští
      bt_when_m;                                 -- větev obsluhy zprávy
      bt_when_c;                                 -- větev CASE
      bt_if_cond;                                -- větev IF
      --- uzly použité poprvé při optimalizaci ---
      bt_loop1;                                  -- jednoprůchodový cyklus
      end enum;
  blocktypeset     = set of blocktype {%%TODO(UNION)}for size use 4;

var
  -- typy uzlů
{%OFF}
  blocktype_export_id : const array blocktype of t_char32str := [
      for bt_none       use 'none',
      for bt_cmd        use 'cmd',
      for bt_break      use 'break',
      for bt_return     use 'return',
      for bt_raise      use 'raise',
      for bt_send       use 'send',
      for bt_goto       use 'goto',
      for bt_new        use 'new',
      for bt_discard    use 'discard',
      for bt_delay      use 'delay',
      for bt_adjust     use 'adjust',
      for bt_if         use 'if',
      for bt_loop       use 'loop',
      for bt_for        use 'for',
      for bt_while      use 'while',
      for bt_case       use 'case',
      for bt_accept     use 'accept',
      for bt_block      use 'block',
      for bt_protected  use 'protected',
      for bt_sequential use 'sequential',
      for bt_declare    use 'declare',
      for bt_asm        use 'asm',
      for bt_label      use 'label',
      for bt_when_m     use 'when_m',
      for bt_when_c     use 'when_c',
      for bt_if_cond    use 'if_cond',
      for bt_loop1      use 'loop1'];
{%ON}

const
  -- bloky chráněné proti výjimkám z jiných tasků
  bts_protected    = blocktypeset:[bt_protected,bt_sequential];

type
  -- pozice uzlu
  blposition       = enum
      bp_begin;                                  -- začátek
      bp_end;                                    -- konec
      end enum;
  blpositions      = array blposition of lexposblock;

var
  -- pozice uzlu
{%OFF}
  blposition_export_id : const array blposition of t_char32str := [
      for bp_begin use 'begin',
      for bp_end   use 'end'];
{%ON}

type
  -- seznam uzlů
  bllist           = record
      first        : pblnode;                    -- první uzel v seznamu
      last         : pblnode;                    -- poslední uzel v seznamu
      end record;

----------------------------------------------------------------------------------------------------
class public blnode = extend c_flex_construct;
-- Uzel
----------------------------------------------------------------------------------------------------

    var
      btype        : blocktype;                  -- typ uzlu
      org          : blphase;                    -- fáze vzniku tohoto uzlu
      zprac        : blphase;                    -- fáze zpracování tohoto uzlu
      next         : pblnode;                    -- následující uzel
      pos          : blpositions;                -- začátek a konec uzlu ve zdrojovém textu

      ---- informace přidané globální analýzou ----
      blevel       : t_unsigned;                 -- úroveň vnoření vzhledem k begin..end blokům
      loc_cmd      : blocktypeset;               -- lokálně vnořené typy příkazů
      tra_cmd      : blocktypeset;               -- globálně vnořené typy příkazů
      loc_outer    : t_logical;                  -- lokálně vnořené skoky mimo aktuální blok
      tra_outer    : t_logical;                  -- globálně vnořené skoky mimo aktuální blok

    ------------------------------------------------------------------------------------------------
    static setpos (
       blpos       : in blposition;              -- formální pozice
       pos         : in lexposblock);            -- pozice ve zdrojáku
    -- Nastaví pozici uzlu.
    ------------------------------------------------------------------------------------------------
    static getpos (
       blpos       : in blposition;              -- formální pozice
       pos         : out lexposblock);           -- pozice ve zdrojovém kódu
    -- Vrátí pozici uzlu.
    ------------------------------------------------------------------------------------------------
    static errpos (
       blpos       : in blposition);             -- formální pozice
    -- Dosadí pozici uzlu do posledního chybového hlášení.
    ------------------------------------------------------------------------------------------------
    virtual dump return t_char32ustr;
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------

    end blnode;



----------------------------------------------------------------------------------------------------
#separate public cb_choice;
-- Optimalizovaný seznam výběrů.
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
class public blcompound = extend blnode; 
-- složený příkaz
----------------------------------------------------------------------------------------------------

    var
      sub          : bllist;                     -- seznam příkazů

    end blcompound;



----------------------------------------------------------------------------------------------------
class public blsimple = extend blnode; 
-- jednoduchý příkaz
----------------------------------------------------------------------------------------------------

    var
      bprolog      : bllist;                     -- prolog příkazu - provést před provedením
      bepilog      : bllist;                     -- epilog příkazu - provést po provedení

    end blsimple;



----------------------------------------------------------------------------------------------------
class public blcond = extend blcompound; 
-- uzel s podmínkou
----------------------------------------------------------------------------------------------------

    var
      cond         : pexpnode;                   -- podmínka

    end blcond;



----------------------------------------------------------------------------------------------------
class public blcmd = extend blsimple; 
-- přiřazovací příkaz
----------------------------------------------------------------------------------------------------

    var
      expr         : pexpnode;                   -- příkaz

    end blcmd;



----------------------------------------------------------------------------------------------------
class public blbreak = extend blsimple; 
-- příkaz BREAK
----------------------------------------------------------------------------------------------------
    end blbreak;



----------------------------------------------------------------------------------------------------
class public blreturn = extend blsimple; 
-- příkaz RETURN
----------------------------------------------------------------------------------------------------
    end blreturn;



----------------------------------------------------------------------------------------------------
class public blmessage = extend blsimple; 
-- zaslání zprávy
----------------------------------------------------------------------------------------------------

    var
      msg          : pexpnode;                   -- zpráva
      dest         : pexpnode;                   -- cílový task

    end blmessage;



----------------------------------------------------------------------------------------------------
class public blraise = extend blmessage; 
-- příkaz RAISE
----------------------------------------------------------------------------------------------------
    end blraise;



type
  -- části příkazu SEND
  blsendpart       = enum
      bsp_do;                                    -- část DO
      bsp_accept;                                -- část WHEN ACCEPT DO
      bsp_delay;                                 -- část WHEN DELAY DO
      end enum;
  blsendpartset    = set of blsendpart;

var
  -- části příkazu SEND
{%OFF}
  blsendpart_export_id : const array blsendpart of t_char32str := [
      for bsp_do     use 'do',
      for bsp_accept use 'accept',
      for bsp_delay  use 'delay'];
{%ON}

type
  -- životnost zasílané zprávy
  bllifetime       = enum
      blt_infinite;                              -- neomezeno
      blt_blocking;                              -- neomezeno, čekat na přijetí
      blt_timeout;                               -- timeout
      blt_sequence;                              -- sekvence příkazů
      end enum;

var
  -- životnost zasílané zprávy
{%OFF}
  bllifetime_export_id : const array bllifetime of t_char32str := [
      for blt_infinite use 'infinite',
      for blt_blocking use 'blocking',
      for blt_timeout  use 'timeout',
      for blt_sequence use 'sequence'];
{%ON}

----------------------------------------------------------------------------------------------------
class public blsend = extend blmessage; 
-- příkaz SEND
----------------------------------------------------------------------------------------------------

    var
      lifetime     : bllifetime;                 -- životnost zprávy
      parts        : blsendpartset;              -- které části příkazy byly uvedeny ve zdrojáku
      time         : pexpnode;                   -- životnost zprávy
      xdo          : bllist;                     -- blok DO
      xaccept      : bllist;                     -- blok WHEN ACCEPT DO
      xdelay       : bllist;                     -- blok WHEN DELAY DO

    end blsend;



----------------------------------------------------------------------------------------------------
class public blgoto = extend blsimple; 
-- příkaz GOTO
----------------------------------------------------------------------------------------------------

    var
      plabel       : pentity_label;              -- návěští

    end blgoto;



----------------------------------------------------------------------------------------------------
class public blalloc = extend blsimple; 
-- aligátor
----------------------------------------------------------------------------------------------------

    var  
      xvar         : pexpnode;                   -- alokovaná proměnná

    end blalloc;



----------------------------------------------------------------------------------------------------
class public blnew = extend blalloc; 
-- příkaz NEW
----------------------------------------------------------------------------------------------------

    var  
      xrange       : pexpnode;                   -- rozsah
      xtag         : pexpnode;                   -- typová informace

    end blnew;



----------------------------------------------------------------------------------------------------
class public bldiscard = extend blalloc; 
-- příkaz DISCARD
----------------------------------------------------------------------------------------------------
    end bldiscard;



----------------------------------------------------------------------------------------------------
class public bladjust = extend blalloc; 
-- příkaz ADJUST
----------------------------------------------------------------------------------------------------

    var  
      xrange       : pexpnode;                   -- rozsah

    end bladjust;



----------------------------------------------------------------------------------------------------
class public bldelay = extend blsimple; 
-- příkaz DELAY
----------------------------------------------------------------------------------------------------

    var  
      expr         : pexpnode;                   -- výraz

    end bldelay;



----------------------------------------------------------------------------------------------------
class public blif = extend blcompound; 
-- příkaz IF
----------------------------------------------------------------------------------------------------
    end blif;



----------------------------------------------------------------------------------------------------
class public blloop = extend blcond; 
-- příkaz LOOP
----------------------------------------------------------------------------------------------------
    end blloop;



type
  -- pořadí provedení iterací FOR cyklu
  blfororder       = enum
      bfo_normal;                                -- normální
      bfo_reverse;                               -- obrácené
      bfo_concurrent;                            -- paralelně (obecné pořadí)
      end enum;

var
  -- pořadí provedení iterací FOR cyklu
{%OFF}
  blfororder_export_id : const array blfororder of t_char32str := [
      for bfo_normal     use 'normal',
      for bfo_reverse    use 'reverse',
      for bfo_concurrent use 'concurrent'];
{%ON}

----------------------------------------------------------------------------------------------------
class public blfor = extend blcompound; 
-- příkaz FOR
----------------------------------------------------------------------------------------------------

    var  
      for_region   : pregion;                    -- region FOR cyklu
      for_var      : pentity_var;                -- řídící proměnná cyklu
    --xvar         : pexpnode;                   -- proměnná
      order        : blfororder;                 -- determinace pořadí
      xrange       : pexpnode;                   -- rozsah

    end blfor;



----------------------------------------------------------------------------------------------------
class public blwhile = extend blcond; 
-- příkaz WHILE
----------------------------------------------------------------------------------------------------
    end blwhile;



----------------------------------------------------------------------------------------------------
class public blcase = extend blcompound; 
-- příkaz CASE
----------------------------------------------------------------------------------------------------

    var  
      expr         : pexpnode;                   -- výraz

    end blcase;



type
  -- režim čekání na zprávu
  blacceptmode     = enum
      bam_check;                                 -- jednorázové čtení zprávy
      bam_delay;                                 -- čekání na zprávu
      bam_infinite;                              -- nekonečné čekání na zprávu
      end enum;

var
  -- režim čekání na zprávu
{%OFF}
  blacceptmode_export_id : const array blacceptmode of t_char32str := [
      for bam_check    use 'check',
      for bam_delay    use 'delay',
      for bam_infinite use 'infinite'];
{%ON}

----------------------------------------------------------------------------------------------------
class public blaccept = extend blcompound; 
-- příkaz ACCEPT
----------------------------------------------------------------------------------------------------

    var  
      mode         : blacceptmode;               -- režim čtení zprávy
      expr         : pexpnode;                   -- výraz

    end blaccept;



----------------------------------------------------------------------------------------------------
class public blblock = extend blcompound; 
-- blok příkazů
----------------------------------------------------------------------------------------------------

    var  
      binit        : bllist;                     -- kompilátorem generovaná část <INIT>
      bentry       : bllist;                     -- kompilátorem generovaná část <ENTRY>
      bcatch       : bllist;                     -- část CATCH
      bcatch_pos   : lexposblock;                -- pozice části CATCH
      brollback    : bllist;                     -- část ROLLBACK
      brollback_pos: lexposblock;                -- pozice části ROLLBACK
      bcommit      : bllist;                     -- část COMMIT
      bcommit_pos  : lexposblock;                -- pozice části COMMIT
      bleave       : bllist;                     -- část LEAVE
      bleave_pos   : lexposblock;                -- pozice části LEAVE
      bexit        : bllist;                     -- kompilátorem generovaná část <EXIT>

    end blblock;



----------------------------------------------------------------------------------------------------
class public bldeclare = extend blblock; 
-- blok příkazů s lokálními deklaracemi
----------------------------------------------------------------------------------------------------

    var
      declare_region : pregion;                  -- region DECLARE bloku

    end bldeclare;



----------------------------------------------------------------------------------------------------
class public blasm            = extend blnode; 
-- kod v assembleru
----------------------------------------------------------------------------------------------------

    var  
      asm_region   : pregion;                    -- region bloku příkazů v assembleru
      ifirst       : p_flex_record{piasmnodelist};
      ilast        : p_flex_record{piasmnodelist};
    --lfirst       : p_flex_record{piasmlabellist};

    end blasm;



----------------------------------------------------------------------------------------------------
class public bllabel          = extend blnode; 
-- návěští
----------------------------------------------------------------------------------------------------

    var
      plabel       : pentity_label;              -- návěští

    end bllabel;



type  
  -- typ výběru
  blchoicetype     = enum
      bct_choice;                                -- normální výběr
      bct_others;                                -- OTHERS
      end enum;

var
  -- typ výběru
{%OFF}
  blchoicetype_export_id : const aliased array blchoicetype of t_char32str := [
      for bct_choice use 'choice',
      for bct_others use 'others'];
{%ON}

----------------------------------------------------------------------------------------------------
class public blchoicelist = extend blcompound; 
-- uzel s výběry
----------------------------------------------------------------------------------------------------

    var  
      ctype        : blchoicetype;               -- typ výběru
      list         : texprlist;                  -- seznam výrazů definujících výrazy

    end blchoicelist;



----------------------------------------------------------------------------------------------------
class public blwhen_m = extend blchoicelist; 
-- obsluha zprávy
----------------------------------------------------------------------------------------------------
    end blwhen_m;



----------------------------------------------------------------------------------------------------
class public blwhen_c = 
-- větev CASE
----------------------------------------------------------------------------------------------------
    with 
      cb_choice;

    extend 
      blchoicelist; 

    var  
      clist        : tchoicelist;                -- optimalizovaný seznam výběrů

    end blwhen_c;



----------------------------------------------------------------------------------------------------
class public blif_cond = extend blcond; 
-- větev IF
----------------------------------------------------------------------------------------------------
    end blif_cond;



----------------------------------------------------------------------------------------------------
class public blloop1 = extend blcompound; 
-- jednoprůchodový cyklus
----------------------------------------------------------------------------------------------------
    end blloop1;



----------------------------------------------------------------------------------------------------
procedure newnode (
    node           : out pblnode;                -- uzel stromu
    info           : in blinfo;                  -- informace o průběhu analýzy
    btype          : in blocktype);              -- typ uzlu
-- Vytvoření nového uzlu stromu.
----------------------------------------------------------------------------------------------------
procedure derivenode (
    node           : out pblnode;                -- uzel stromu                       
    srcnode        : in pblnode;                 -- referenční uzel                   
    info           : in blinfo;                  -- informace o průběhu analýzy       
    btype          : in blocktype);              -- typ uzlu                          
-- Podle dodaného uzlu odvodí nový uzel.                                      
----------------------------------------------------------------------------------------------------
procedure node_errpos (
    node           : in pblnode);                -- uzel stromu
-- Nastaví pozici chyby na celý blok.
----------------------------------------------------------------------------------------------------
procedure sequence_errpos (
    first          : in pblnode;                 -- první uzel
    last           : in pblnode);                -- poslední uzel
-- Nastaví pozici chyby na sekvenci příkazů.
----------------------------------------------------------------------------------------------------

#if #declared dump; #and then; debug then;
----------------------------------------------------------------------------------------------------
procedure dumptree (
    bl_            : in pblnode);                -- strom
-- Dump stromu na obrazovku.
----------------------------------------------------------------------------------------------------
#end if;
----------------------------------------------------------------------------------------------------
procedure block_catch_resume_error (
    catch_mode     : t_catch_mode;               -- způsob, jakým zachytávat výjimku t_catch_mode
    block_type     : blocktype)                  -- typ uzlu
    return t_logical;
-- Vrátí, zda zachytávat výjimky typu resume_error v uzlu.
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
#separate public c_block_iterator;
-- Iterátor
----------------------------------------------------------------------------------------------------

end cb_def;

