----------------------------------------------------------------------------------------------------
class private c_entity_iterator =
-- Třída sloužící k protrasování entit zdrojáku
----------------------------------------------------------------------------------------------------

var
  -- filtr typů a viditelností entit, které se mají dostat do zpracovíní
  process_etypes      : tentitytypeset := tentitytypeset:full;
  process_visibility  : tentityvisibleset := tentityvisibleset:full;

  -- filtr typů a viditelností entit, které se mají rekurzivně trasovat
  traverse_etypes     : tentitytypeset := tentitytypeset:full;
  traverse_visibility : tentityvisibleset := tentityvisibleset:full;

----------------------------------------------------------------------------------------------------
procedure set_processing_filter =
-- Nastaví filtr typů a viditelností entit, které se mají dostat do zpracování.
----------------------------------------------------------------------------------------------------
begin
  process_etypes:=etypes;
  process_visibility:=visibility;
  end set_processing_filter;



----------------------------------------------------------------------------------------------------
procedure set_traversal_filter =
-- Nastaví filtr typů a viditelností entit, které mají být rekurzivně trasovány.
----------------------------------------------------------------------------------------------------
begin
  traverse_etypes:=etypes;
  traverse_visibility:=visibility;
  end set_traversal_filter;



----------------------------------------------------------------------------------------------------
virtual filter_process_entity =
-- Filtr zpracování konkrétní entity.
----------------------------------------------------------------------------------------------------
begin
  -- %%TODO(VIRTUAL) Až začne fungovat volání předka, tak do této metody integrovat filtrování
  -- podle viditelnosti a typu entity coby default.
  result:=true;
  end filter_process_entity;



----------------------------------------------------------------------------------------------------
virtual filter_traverse_entity =
-- Filtr traversovani konkrétní entity.
-- %%TODO(VIRTUAL) Až začne fungovat volání předka, tak do této metody integrovat filtrování
-- podle viditelnosti a typu entity coby default.
----------------------------------------------------------------------------------------------------
begin
  result:=true;
  end filter_traverse_entity;



----------------------------------------------------------------------------------------------------
procedure traverse_region =
-- projde region
----------------------------------------------------------------------------------------------------
var 
  entity           : pentity;                    -- podentita
  child            : pregion;                    -- podregion

begin
  -- oznámit vstup do regionu
  enter_region(region);

  -- zpracovat region
  process_region(region);

  -- projít dětské entity
  entity:=region^.entities.first;
  while entity<>nil loop
    -- rekurzivní zpracování entity
    traverse_entity(entity);

    -- další entita
    entity:=entity^.next;
    end loop;

  -- oznámit zpracování podregionů
  before_sub_regions(region);

  -- projít regiony
  child:=region^.regions.first;
  while child<>nil loop
    -- rekurzivní zpracování
    traverse_region(child);

    -- další region
    child:=child^.next;
    end loop;

  -- oznámit konec zpracování podregionů
  after_sub_regions(region);

  -- oznámit opuštění regionu
  leave_region(region);
  end traverse_region;



----------------------------------------------------------------------------------------------------
procedure traverse_entity =
----------------------------------------------------------------------------------------------------
var
  process    : t_logical;

begin
  verify({VERIFY=}000989,node=nil);

  -- zpracovat tuto entitu, vyhovuje-li filtru pro zpracování
  process:=node^.etype in process_etypes and node^.visible in process_visibility and filter_process_entity(node);

  -- vstup do uzlu
  enter_node(node,process);

  -- zpracovat?
  if process then
    process_entity(node);
    end if;
                            
  -- projít regiony, vyhovuje-li filtru pro trasování
  if node^.etype in traverse_etypes and node^.visible in traverse_visibility and filter_traverse_entity(node) then
    for t in tregioncategory loop
      -- zpracovat region
      if node^.regions[t]<>nil then
        -- projít region
        traverse_region(node^.regions[t]);
        end if;
      end loop;
    end if;

  -- výstup z uzlu
  leave_node(node,process);
  end traverse_entity;



----------------------------------------------------------------------------------------------------
static process_entity =
-- Zpracování entity
----------------------------------------------------------------------------------------------------
begin
  -- zavolat specializovanou proceduru dle typu entity
  case node^.etype
    when et_compile   do process_entity_compile(node);
    when et_program   do process_entity_program(node);
    when et_module    do process_entity_module(node);
    when et_param     do process_entity_param(node);
    when et_var       do process_entity_var(node);
    when et_const     do process_entity_const(node);
    when et_enum      do process_entity_enum(node);
    when et_type      do process_entity_type(node);
    when et_class     do process_entity_type(node);
    when et_procedure do process_entity_procedure(node);
    when et_static    do process_entity_static(node);
    when et_virtual   do process_entity_virtual(node);
    when et_override  do process_entity_override(node);
    when et_task      do process_entity_task(node);
    when et_special   do process_entity_special(node);
    when et_macro     do process_entity_macro(node);
    when et_overload  do process_entity_overload(node);
    when et_operator  do process_entity_operator(node);
    when et_attribute do process_entity_attribute(node);
    when et_message   do process_entity_message(node);
    when et_label     do process_entity_label(node);
    when et_template  do process_entity_template(node);
    when et_tparam    do process_entity_tparam(node);
    when et_undef     do verify({VERIFY=}001273);
    --when et_special   do verify({VERIFY=}001274);
    end case;
  end process_entity;



----------------------------------------------------------------------------------------------------
virtual process_entity_base =
----------------------------------------------------------------------------------------------------
begin
  -- nic nedělat
  end process_entity_base;



----------------------------------------------------------------------------------------------------
virtual process_entity_code =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_base(node);
  end process_entity_code;



----------------------------------------------------------------------------------------------------
virtual process_entity_compile =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_code(node);
  end process_entity_compile;



----------------------------------------------------------------------------------------------------
virtual process_entity_program =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_code(node);
  end process_entity_program;



----------------------------------------------------------------------------------------------------
virtual process_entity_module =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_base(node);
  end process_entity_module;



----------------------------------------------------------------------------------------------------
virtual process_entity_init =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_base(node);
  end process_entity_init;



----------------------------------------------------------------------------------------------------
virtual process_entity_value =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_init(node);
  end process_entity_value;



----------------------------------------------------------------------------------------------------
virtual process_entity_param =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_value(node);
  end process_entity_param;



----------------------------------------------------------------------------------------------------
virtual process_entity_var =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_value(node);
  end process_entity_var;



----------------------------------------------------------------------------------------------------
virtual process_entity_const =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_value(node);
  end process_entity_const;



----------------------------------------------------------------------------------------------------
virtual process_entity_enum =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_base(node);
  end process_entity_enum;



----------------------------------------------------------------------------------------------------
virtual process_entity_type =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_init(node);
  end process_entity_type;



----------------------------------------------------------------------------------------------------
virtual process_entity_subprogram =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_code(node);
  end process_entity_subprogram;



----------------------------------------------------------------------------------------------------
virtual process_entity_static_subprogram =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_subprogram(node);
  end process_entity_static_subprogram;



----------------------------------------------------------------------------------------------------
virtual process_entity_procedure =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_static_subprogram(node);
  end process_entity_procedure;



----------------------------------------------------------------------------------------------------
virtual process_entity_static =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_static_subprogram(node);
  end process_entity_static;



----------------------------------------------------------------------------------------------------
virtual process_entity_virtual =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_subprogram(node);
  end process_entity_virtual;



----------------------------------------------------------------------------------------------------
virtual process_entity_override =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_code(node);
  end process_entity_override;



----------------------------------------------------------------------------------------------------
virtual process_entity_task =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_subprogram(node);
  end process_entity_task;



----------------------------------------------------------------------------------------------------
virtual process_entity_special =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_subprogram(node);
  end process_entity_special;



----------------------------------------------------------------------------------------------------
virtual process_entity_macro =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_subprogram(node);
  end process_entity_macro;



----------------------------------------------------------------------------------------------------
virtual process_entity_overload0 =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_base(node);
  end process_entity_overload0;



----------------------------------------------------------------------------------------------------
virtual process_entity_overload =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_overload0(node);
  end process_entity_overload;



----------------------------------------------------------------------------------------------------
virtual process_entity_operator =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_overload0(node);
  end process_entity_operator;



----------------------------------------------------------------------------------------------------
virtual process_entity_attribute =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_value(node);
  end process_entity_attribute;



----------------------------------------------------------------------------------------------------
virtual process_entity_message =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_base(node);
  end process_entity_message;



----------------------------------------------------------------------------------------------------
virtual process_entity_label =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_base(node);
  end process_entity_label;



----------------------------------------------------------------------------------------------------
virtual process_entity_template =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_base(node);
  end process_entity_template;



----------------------------------------------------------------------------------------------------
virtual process_entity_tparam =
----------------------------------------------------------------------------------------------------
begin
  -- zpracovat předka
  process_entity_base(node);
  end process_entity_tparam;



----------------------------------------------------------------------------------------------------
virtual enter_region =
----------------------------------------------------------------------------------------------------
begin
  -- nic nedělat
  end enter_region;



----------------------------------------------------------------------------------------------------
virtual leave_region =
----------------------------------------------------------------------------------------------------
begin
  -- nic nedělat
  end leave_region;


----------------------------------------------------------------------------------------------------
virtual enter_node =
-- Událost spuštěná při vstupu do uzlu.
----------------------------------------------------------------------------------------------------
begin
  -- nic nedělat
  end enter_node;



----------------------------------------------------------------------------------------------------
virtual leave_node =
-- Událost spuštěná při výstupu z uzlu.
----------------------------------------------------------------------------------------------------
begin
  -- nic nedělat
  end leave_node;



----------------------------------------------------------------------------------------------------
virtual enter_sub_region =
-- Událost spuštěná při vstupu do regionu.
----------------------------------------------------------------------------------------------------
begin
  -- nic nedělat
  end enter_sub_region;



----------------------------------------------------------------------------------------------------
virtual leave_sub_region =
-- Událost spuštěná při výstupu z regionu.
----------------------------------------------------------------------------------------------------
begin
  -- nic nedělat
  end leave_sub_region;



----------------------------------------------------------------------------------------------------
virtual process_region =
-- Zpracování regionu
----------------------------------------------------------------------------------------------------
begin
  -- nic nedělat
  end process_region;



----------------------------------------------------------------------------------------------------
virtual before_sub_regions =
-- Událost spuštěná před zpeacování podregionů.
----------------------------------------------------------------------------------------------------
begin
  -- nic nedělat
  end before_sub_regions;



----------------------------------------------------------------------------------------------------
virtual after_sub_regions =
-- Událost spuštěná po zpracování podregionů.
----------------------------------------------------------------------------------------------------
begin
  -- nic nedělat
  end after_sub_regions;



end c_entity_iterator;