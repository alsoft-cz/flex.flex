----------------------------------------------------------------------------------------------------
module public cc_unitype =
-- Překladač Flexu.
-- Definice lexiálních symbolů.
----------------------------------------------------------------------------------------------------
-- Ondra : 26.04.2000 : Vytvořil
----------------------------------------------------------------------------------------------------

----- %%TECH Univerzální datové typy ---------------------------------------------------------------
-- Překladač využívá pro ukládání konstant a adres ve výsledném programu
-- následující univerzální datové typy. Konkrétní formát dat je vždy dán
-- použitým generátorem kódu. Překladač je tedy nezávislý z hlediska délky
-- strojového slova cílového procesoru. Jediné omezení je kladeno na procesor
-- provádějící makra. Ten musí mít shodnou délku strojového slova jako cílový
-- procesor, jinak si nedovedu představit mechanismus předávání ukazatelů -
-- když deklaruji ukazatel U a vytvořím metaproměnnou typu U, tak U bude
-- konstruován podle pravidel (délky strojového slova) cílového procesoru,
-- ale zároveň ho musí umět nativně zpracovávat makroprocesor.
--
-- Operace s univerzálními typy jsou v tomto modulu. Modul je optimalizován
-- pro práci s uvedenými délkami univerzálních typů, proto se při změně
-- některého z univerzálních typů musí provést i příslušná změna algoritmu.
----------------------------------------------------------------------------------------------------



----- Univerzální datové typy Flexu ----------------------------------------------------------------
const
  -- přesnost celočíselné aritmetiky (v bitech)
  uniint_precision     = 160;

  -- přesnost univerzálního znaku
  unichar_precision    = 32;

  -- přesnost univerzálního logical
  unilogical_precision = 32;

type
  -- univerzální typy reprezentující literály
  tuniint;                                       -- univerzální integer
  tunichar;                                      -- univerzální character
  tunireal;                                      -- univerzální real
  tunilogical;                                   -- univerzální logical

  -- univerzální adresa a velikost datového objektu
  tunidata_addr;                                 -- adresa (může být relativní)
  tunidata_size;                                 -- velikost v bytech
  tunidata_bitsize;                              -- velikost v bitech

  -- univerzální adresa a velikost proveditelného objektu
  tunicode_addr;                                 -- adresa
  tunicode_size;                                 -- velikost v bytech


----- Elementární konstanty ------------------------------------------------------------------------
const
  -- NIL
  ui_nil           : tuniint;
  uc_nil           : tunichar;
  ur_nil           : tunireal;
  ul_nil           : tunilogical;

  -- rozsah podporovaných číselných soustav
  ui_radix_first   : tuniint;
  ui_radix_last    : tuniint;

  -- základ šestnáctkové soustavy
  ui_radix_hex     : tuniint;

  -- přesnost univerzálního celého čísla
  ui_precision     : tuniint;

  -- malá celá čísla
  ui_minus_1       : tuniint;
  ui_minus_2       : tuniint;
  ui_0             : tuniint;
  ui_1             : tuniint;
  ui_2             : tuniint;
  ui_3             : tuniint;
  ui_4             : tuniint;
  ui_5             : tuniint;
  ui_6             : tuniint;
  ui_7             : tuniint;
  ui_8             : tuniint;
  ui_9             : tuniint;
  ui_100           : tuniint;

  -- velká celá čísla
  ui_0_FFFF        : tuniint;
  ui_1_0           : tuniint;
  ui_1_1           : tuniint;
  ui_2_0           : tuniint;

  -- rozsah univerzálního celého čísla
  ui_first         : tuniint;
  ui_last          : tuniint;

  -- rozsah univerzálního znaku jako univerzální integer
  ui_unichar_first : tuniint;
  ui_unichar_last  : tuniint;

  -- malá reálná čísla
  ur_minus_1       : tunireal;
  ur_0             : tunireal;
  ur_1             : tunireal;
  ur_10            : tunireal;

  -- významné adresy
  uda_0            : tunidata_addr;
{
  ud_1             : tunidata;
  ud_2             : tunidata;
  ud_4             : tunidata;
}
  -- významné velikosti v bytech
  uds_0            : tunidata_size;
  uds_1            : tunidata_size;
  uds_2            : tunidata_size;
  uds_4            : tunidata_size;

  -- významné velikosti v bitech
  udb_bits_per_byte: tunidata_bitsize;
  udb_1            : tunidata_bitsize;
  udb_8            : tunidata_bitsize;
  udb_16           : tunidata_bitsize;
  udb_32           : tunidata_bitsize;
  udb_64           : tunidata_bitsize;
  udb_80           : tunidata_bitsize;
  udb_128          : tunidata_bitsize;

  -- logické hodnoty
  ul_false         : tunilogical;
  ul_true          : tunilogical;

----- Univerzální celé číslo -----------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure signed_to_uniint (
    i              : in t_signed)
    return tuniint;
-- Převod I na TUNIINT.
----------------------------------------------------------------------------------------------------
procedure unsigned_to_uniint (
    i              : in t_unsigned)
    return tuniint;
-- Převod I na TUNIINT.
----------------------------------------------------------------------------------------------------
procedure unsigned_to_uniint_power2 (
    n              : in t_unsigned)
    return tuniint;
-- Převod 2^N na TUNIINT.
----------------------------------------------------------------------------------------------------
procedure uniint_to_unsigned (
    ui             : in tuniint)
    return t_unsigned;
-- Převod UI na T_UNSIGNED.
----------------------------------------------------------------------------------------------------
procedure uniint_to_unsigned64 (
    ui             : in tuniint)
    return t_unsigned64;
-- Převod UI na T_UNSIGNED64.
----------------------------------------------------------------------------------------------------
procedure uniint_to_signed (
    ui             : in tuniint)
    return t_signed;
-- Převod UI na T_SIGNED.
----------------------------------------------------------------------------------------------------
procedure uniint_to_unichar (
    ui             : in tuniint)
    return tunichar;
-- Převod UI na TUNICHAR.
----------------------------------------------------------------------------------------------------
procedure uniint_to_unireal (
    ui             : in tuniint)
    return tunireal;
-- Převod UI na TUNIREAL.
----------------------------------------------------------------------------------------------------
procedure uniint_to_unilogical (
    ui             : in tuniint)
                   return tunilogical;
-- Převod UI na TUNILOGICAL.
----------------------------------------------------------------------------------------------------
procedure uniint_to_unidata_size (
    ui             : in tuniint)
    return tunidata_size;
-- Převod UI na TUNIDATA_SIZE.
----------------------------------------------------------------------------------------------------
procedure uniint_to_unidata_bitsize (
    ui             : in tuniint)
    return tunidata_bitsize;
-- Převod UI na TUNIDATA_BITSIZE.
----------------------------------------------------------------------------------------------------
procedure uniint_to_unidata_addr (
    ui             : in tuniint)
    return tunidata_addr;
-- Převod UI na TUNIDATA_ADDR.
----------------------------------------------------------------------------------------------------
procedure uniint_load (
    ui             : out tuniint;                -- univerzální integer
    val            : in unchecked;               -- binární číslo
    size           : in t_unsigned;              -- velikost hodnoty
    sign           : in t_logical);              -- T-signed
-- UI := VAL
----------------------------------------------------------------------------------------------------
procedure uniint_store (
    ui             : in tuniint;                 -- univerzální integer
    val            : out unchecked;              -- binární číslo
    size           : in t_unsigned);             -- velikost hodnoty
-- VAL := UI
----------------------------------------------------------------------------------------------------
procedure uniint_sign (
    ui             : in tuniint)
                   return t_logical;
-- True, je-li UI záporné.
----------------------------------------------------------------------------------------------------
procedure uniint_add (
    A              : in tuniint;
    B              : in tuniint)
    return tuniint;
-- A + B
----------------------------------------------------------------------------------------------------
procedure uniint_add_assign (
    A              : in out tuniint;
    B              : in tuniint);
-- A := A + B
----------------------------------------------------------------------------------------------------
procedure uniint_sub (
    A              : in tuniint;
    B              : in tuniint)
    return tuniint;
-- A - B
----------------------------------------------------------------------------------------------------
procedure uniint_sub_assign (
    A              : in out tuniint;
    B              : in tuniint);
-- A := A - B
----------------------------------------------------------------------------------------------------
procedure uniint_mul_assign (
    A              : in out tuniint;
    B              : in tuniint);
-- A := A * B
----------------------------------------------------------------------------------------------------
procedure uniint_mul (
    A              : in tuniint;
    B              : in tuniint)
                   return tuniint;
-- A * B
----------------------------------------------------------------------------------------------------
procedure uniint_div (
    A              : in tuniint;
    B              : in tuniint)
    return tuniint;
-- A div B
----------------------------------------------------------------------------------------------------
procedure uniint_div_assign (
    A              : in out tuniint;
    B              : in tuniint);
-- A := A div B
----------------------------------------------------------------------------------------------------
procedure uniint_mod_assign (
    A              : in out tuniint;
    B              : in tuniint);
-- A := A mod B
----------------------------------------------------------------------------------------------------
procedure uniint_mod (
    A              : in tuniint;
    B              : in tuniint)
    return tuniint;
-- A mod B
----------------------------------------------------------------------------------------------------
procedure uniint_shl_assign (
    A              : in out tuniint;
    B              : in tuniint);
-- A := A shl B
----------------------------------------------------------------------------------------------------
procedure uniint_shl (
    a              : in tuniint;
    b              : in tuniint)
    return tuniint;
-- [a] shl [b]
----------------------------------------------------------------------------------------------------
procedure uniint_shr_assign (
    A              : in out tuniint;
    B              : in tuniint);
-- A := A shr B
----------------------------------------------------------------------------------------------------
procedure uniint_shr (
    a              : in tuniint;
    b              : in tuniint)
    return tuniint;
-- [a] shr [b]
----------------------------------------------------------------------------------------------------
procedure uniint_and (
    A              : in tuniint;
    B              : in tuniint)
    return tuniint;
-- A and B
----------------------------------------------------------------------------------------------------
procedure uniint_and_assign (
    A              : in out tuniint;
    B              : in tuniint);
-- A := A and B
----------------------------------------------------------------------------------------------------
procedure uniint_or_assign (
    A              : in out tuniint;
    B              : in tuniint);
-- A := A or B
----------------------------------------------------------------------------------------------------
procedure uniint_xor_assign (
    A              : in out tuniint;
    B              : in tuniint);
-- A := A xor B
----------------------------------------------------------------------------------------------------
procedure uniint_neg (
    A              : in tuniint)
    return tuniint;
-- - A
----------------------------------------------------------------------------------------------------
procedure uniint_neg_assign (
    A              : in out tuniint);
-- A := - A
----------------------------------------------------------------------------------------------------
procedure uniint_not (
    A              : in tuniint)
    return tuniint;
-- not A
----------------------------------------------------------------------------------------------------
procedure uniint_not_assign (
    A              : in out tuniint);
-- A := not A
----------------------------------------------------------------------------------------------------
procedure uniint_abs (
    a              : in tuniint)
    return tuniint;
-- abs [a]   
----------------------------------------------------------------------------------------------------
procedure uniint_abs_assign (
    A              : in out tuniint);
-- A := abs A
----------------------------------------------------------------------------------------------------
procedure uniint_succ_assign (
    A              : in out tuniint);
-- A := succ A
----------------------------------------------------------------------------------------------------
procedure uniint_pred (
    A              : in tuniint)
    return tuniint;
-- pred A
----------------------------------------------------------------------------------------------------
procedure uniint_pred_assign (
    A              : in out tuniint);
-- A := pred A
----------------------------------------------------------------------------------------------------
procedure uniint_lt (
    A              : in tuniint;
    B              : in tuniint)
    return t_logical;
-- A < B
----------------------------------------------------------------------------------------------------
procedure uniint_le (
    A              : in tuniint;
    B              : in tuniint)
    return t_logical;
-- A <= B
----------------------------------------------------------------------------------------------------
procedure uniint_gt (
    A              : in tuniint;
    B              : in tuniint)
    return t_logical;
-- A > B
----------------------------------------------------------------------------------------------------
procedure uniint_ge (
    A              : in tuniint;
    B              : in tuniint)
    return t_logical;
-- A >= B
----------------------------------------------------------------------------------------------------
{
procedure uniint_ge_unidata (
    A              : in tuniint;
    B              : in tunidata)
    return t_logical;
-- A >= B
}
----------------------------------------------------------------------------------------------------
procedure uniint_is_multiple (
    ui             : in tuniint;                 -- tested number
    base           : in tuniint)                 -- multiply base
                   return t_logical;
-- True if and only if [ui] = x*[base], x from N0.
----------------------------------------------------------------------------------------------------
procedure uniint_is_power2 (
    A              : in tuniint)
                   return t_logical;
-- True, je-li A nějaká mocnina dvojky.
----------------------------------------------------------------------------------------------------
procedure uniint_get_power2 (
    A              : in tuniint)
                   return t_unsigned;
-- Exponent, je-li A nějaká mocnina dvojky.
----------------------------------------------------------------------------------------------------
procedure uniint_length (
    A              : in tuniint;
    B              : in tuniint)
    return tuniint;
-- Délka intervalu: B - A + 1
----------------------------------------------------------------------------------------------------
procedure uniint_test_shrink (
    A              : in tuniint;                 -- univerzální integer
    size           : in t_unsigned;              -- požadovaná velikost
    sign           : in t_logical)               -- T-signed, F-unsigned
                   return t_logical;             -- T-přeteční
-- True, pokud A je větší než SIZE bytů nebo má chybné znaménko.
----------------------------------------------------------------------------------------------------
procedure uniint_get_nth_byte (
    A              : in tuniint;                 -- univerzální integer
    n              : in t_unsigned)              -- pozice bytu (od 0)
    return t_unsigned8;
-- Získá N-tý byte zadaného univerzálního integeru
----------------------------------------------------------------------------------------------------
procedure uniint_exp10 (
    ui             : in tuniint)                 -- exponent
    return tunireal;
-- 10^[ui] (signed)
----------------------------------------------------------------------------------------------------



----- Univerzální znak -----------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure char_to_unichar (
    c              : in t_char32)
                   return tunichar;
-- Převod C na TUNICHAR.
----------------------------------------------------------------------------------------------------
procedure unichar_to_uniint (
    c              : in tunichar)
                   return tuniint;
-- Převod TUNICHAR na TUNIINT.
----------------------------------------------------------------------------------------------------



----- Univerzální reálné číslo ---------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure unireal_round (
    ur             : in tunireal)
    return tuniint;
-- Zaokrouhlit [ur] na nejbližší celé číslo.
----------------------------------------------------------------------------------------------------
procedure unireal_store_fixed (
    ur             : in tunireal;                -- value inner representation
    val            : out unchecked;              -- binary value
    size           : in t_unsigned;              -- value size
    inv_delta      : in tuniint);                -- delta inversion
-- Stores binary value of fixed-point type.    
----------------------------------------------------------------------------------------------------
procedure unireal_store_float (
    ur             : in tunireal;                -- value inner representation
    val            : out unchecked;              -- binary value
    size           : in t_unsigned);             -- value size
-- Stores binary value of floating-point type.    
----------------------------------------------------------------------------------------------------
procedure unireal_sign (
    a              : in tunireal)
    return t_logical;
-- T-[a] je záporné.
----------------------------------------------------------------------------------------------------
procedure unireal_abs_assign (
    a              : in out tunireal);
-- [a] := abs([a])
----------------------------------------------------------------------------------------------------
procedure unireal_abs (
    a              : in tunireal)
    return tunireal;
-- abs([a])
----------------------------------------------------------------------------------------------------
procedure unireal_le (
    A              : in tunireal;
    B              : in tunireal)
    return t_logical;
-- A <= B
----------------------------------------------------------------------------------------------------
procedure unireal_lt (
    a              : in tunireal;
    b              : in tunireal)
    return t_logical;
-- [a] < [b]
----------------------------------------------------------------------------------------------------
procedure unireal_ge (
    a              : in tunireal;
    b              : in tunireal)
    return t_logical;
-- [a] >= [b]
----------------------------------------------------------------------------------------------------
procedure unireal_gt (
    a              : in tunireal;
    b              : in tunireal)
    return t_logical;
-- [a] > [b]
----------------------------------------------------------------------------------------------------
procedure unireal_neg (
    a              : in tunireal)
    return tunireal;
-- -[a]
----------------------------------------------------------------------------------------------------
procedure unireal_neg_assign (
    a              : in out tunireal);
-- [a] := -[a]
----------------------------------------------------------------------------------------------------
procedure unireal_add_assign (
    a              : in out tunireal;
    b              : in tunireal);
-- [a] := [a] + [b]
----------------------------------------------------------------------------------------------------
procedure unireal_add (
    a              : in tunireal;
    b              : in tunireal)
    return tunireal;
-- [a] + [b]
----------------------------------------------------------------------------------------------------
procedure unireal_sub_assign (
    a              : in out tunireal;
    b              : in tunireal);
-- [a] := [a] - [b]
----------------------------------------------------------------------------------------------------
procedure unireal_sub (
    a              : in tunireal;
    b              : in tunireal)
    return tunireal;
-- [a] - [b]
----------------------------------------------------------------------------------------------------
procedure unireal_mul_assign (
    a              : in out tunireal;
    b              : in tunireal);
-- [a] := [a] * [b]
----------------------------------------------------------------------------------------------------
procedure unireal_mul (
    a              : in tunireal;
    b              : in tunireal)
    return tunireal;
-- [a] * [b]
----------------------------------------------------------------------------------------------------
procedure unireal_div_assign (
    a              : in out tunireal;
    b              : in tunireal);
-- [a] := [a] / [b]
----------------------------------------------------------------------------------------------------
procedure unireal_div (
    a              : in tunireal;
    b              : in tunireal)
    return tunireal;
-- [a] / [b]
----------------------------------------------------------------------------------------------------



----- Univerzální logical --------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure logical_to_unilogical (
    A              : in t_logical)
                   return tunilogical;
-- Převod A na UNILOGICAL.
----------------------------------------------------------------------------------------------------
procedure unilogical_to_logical (
    A              : in tunilogical)
                   return t_logical;
-- Převod A na LOGICAL.
----------------------------------------------------------------------------------------------------
procedure unilogical_to_uniint (
    A              : in tunilogical)
                   return tuniint;
-- Převod A na UNIINT.
----------------------------------------------------------------------------------------------------
procedure unilogical_xor_assign (
    A              : in out tunilogical;
    B              : in tunilogical);
-- A := A xor B
----------------------------------------------------------------------------------------------------
procedure unilogical_not (
    A              : in tunilogical)
                   return tunilogical;
-- not A
----------------------------------------------------------------------------------------------------



----- Univerzální adresa/velikost dat --------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure unsigned_to_unidata_size (
    i              : in t_unsigned)
    return tunidata_size;
-- Převod I na TUNIDATA_SIZE.
----------------------------------------------------------------------------------------------------
procedure unsigned_to_unidata_addr (
    i              : in t_unsigned)
    return tunidata_addr;
-- Převod I na TUNIDATA_ADDR.
----------------------------------------------------------------------------------------------------
procedure signed_to_unidata_addr (
    i              : in t_signed)
    return tunidata_addr;
-- Převod I na TUNIDATA_ADDR.
----------------------------------------------------------------------------------------------------
procedure unidata_addr_to_size (
    ud             : in tunidata_addr)
    return tunidata_size;
-- Velmi neobvyklá operace: konverze adresy na velikost.
----------------------------------------------------------------------------------------------------
procedure unidata_size_to_addr (
    ud             : in tunidata_size)
    return tunidata_addr;
-- Velmi neobvyklá operace: konverze velikosti na adresu.
----------------------------------------------------------------------------------------------------
{
----------------------------------------------------------------------------------------------------
procedure unsigned_to_unidata (
    i              : in t_unsigned)
    return tunidata;
-- Převod I na TUNIDATA.
----------------------------------------------------------------------------------------------------
procedure signed_to_unidata (
    i              : in t_signed)
    return tunidata;
-- Převod I na TUNIDATA.
}
----------------------------------------------------------------------------------------------------
procedure unidata_size_to_unsigned (
    ud             : in tunidata_size)
    return t_unsigned;
-- Převod UD na T_UNSIGNED.
----------------------------------------------------------------------------------------------------
procedure unidata_bitsize_to_unsigned (
    ud             : in tunidata_bitsize)
    return t_unsigned;
-- Převod UD na T_UNSIGNED.
----------------------------------------------------------------------------------------------------
procedure unidata_addr_to_signed (
    ud             : in tunidata_addr)
    return t_signed;
-- Převod UD na T_SIGNED.
----------------------------------------------------------------------------------------------------
procedure unidata_addr_to_unsigned (
    ud             : in tunidata_addr)
    return t_unsigned;
-- Převod UD na T_UNSIGNED.
----------------------------------------------------------------------------------------------------
procedure unidata_size_to_uniint (
    ud             : in tunidata_size)
    return tuniint;
-- Převod UD na TUNIINT.
----------------------------------------------------------------------------------------------------
procedure unidata_bitsize_to_uniint (
    ud             : in tunidata_bitsize)
    return tuniint;
-- Převod UD na TUNIINT.
----------------------------------------------------------------------------------------------------
procedure unidata_addr_to_uniint (
    ud             : in tunidata_addr)
    return tuniint;
-- Převod UD na TUNIINT.
----------------------------------------------------------------------------------------------------
procedure unidata_bits_to_bytes (
    ud             : in tunidata_bitsize)
    return tunidata_size;
-- Převod velikosti v bitech na velikost v bytech se zaokrouhlením nahoru.
----------------------------------------------------------------------------------------------------
procedure unidata_bytes_to_bits (
    ud             : in tunidata_size)
    return tunidata_bitsize;
-- Převod velikosti v bytech na velikost v bitech.
----------------------------------------------------------------------------------------------------
procedure unidata_addr_align_by_size (
    A              : in out tunidata_addr;
    align          : in tunidata_size);
-- Zarovná adresu A směrem nahoru na hranici dělitelnou velikostí ALIGN.
----------------------------------------------------------------------------------------------------
procedure unidata_size_align_to_nearest_power2 (
    A              : in tunidata_size)
    return tunidata_size;
-- Zarovná dodanou velikost na nejbližší vyšší mocninu dvou. Jestliže je [A] samo o sobě mocninou
-- dvou nebo větší než 2^(A:bits-1), hodnotu nezmění.
----------------------------------------------------------------------------------------------------
procedure unidata_size_lt (
    A              : in tunidata_size;
    B              : in tunidata_size)
    return t_logical;           
-- A < B
----------------------------------------------------------------------------------------------------
procedure unidata_bitsize_lt (
    A              : in tunidata_bitsize;
    B              : in tunidata_bitsize)
    return t_logical;           
-- A < B
----------------------------------------------------------------------------------------------------
procedure unidata_size_gt (
    A              : in tunidata_size;
    B              : in tunidata_size)
    return t_logical;
-- A > B
----------------------------------------------------------------------------------------------------
procedure unidata_addr_gt (
    A              : in tunidata_addr;
    B              : in tunidata_addr)
    return t_logical;
-- A > B
----------------------------------------------------------------------------------------------------
procedure unidata_size_ge (
    A              : in tunidata_size;
    B              : in tunidata_size)
    return t_logical;           
-- A >= B
----------------------------------------------------------------------------------------------------
procedure unidata_bitsize_ge (
    A              : in tunidata_bitsize;
    B              : in tunidata_bitsize)
    return t_logical;           
-- A >= B
----------------------------------------------------------------------------------------------------
procedure unidata_addr_add (
    A              : in tunidata_addr;
    B              : in tunidata_addr)
    return tunidata_addr;
-- A + B
----------------------------------------------------------------------------------------------------
procedure unidata_size_add (
    A              : in tunidata_size;
    B              : in tunidata_size)
    return tunidata_size;
-- A + B
----------------------------------------------------------------------------------------------------
procedure unidata_addr_add_assign (
    A              : in out tunidata_addr;
    B              : in tunidata_addr);
-- A := A + B
----------------------------------------------------------------------------------------------------
procedure unidata_size_add_assign (
    A              : in out tunidata_size;
    B              : in tunidata_size);
-- A := A + B
----------------------------------------------------------------------------------------------------
procedure unidata_size_sub (
    A              : in tunidata_size;
    B              : in tunidata_size)
    return tunidata_size;
-- A - B
----------------------------------------------------------------------------------------------------
procedure unidata_size_mul (
    A              : in tunidata_size;
    B              : in tunidata_size)
    return tunidata_size;
-- A * B
----------------------------------------------------------------------------------------------------
procedure unidata_size_mul_assign (
    A              : in out tunidata_size;
    B              : in tunidata_size);
-- A := A * B
----------------------------------------------------------------------------------------------------
procedure unidata_size_div (
    A              : in tunidata_size;
    B              : in tunidata_size)
    return tunidata_size;
-- A div B
----------------------------------------------------------------------------------------------------
procedure unidata_size_mod (
    A              : in tunidata_size;
    B              : in tunidata_size)
    return tunidata_size;
-- A mod B
----------------------------------------------------------------------------------------------------


----- Univerzální adresa: kód ----------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
procedure unicode_addr_to_unsigned (
    uc             : in tunicode_addr)
    return t_unsigned;
-- Převod UP na T_UNSIGNED.
----------------------------------------------------------------------------------------------------
procedure unsigned_to_unicode_addr (
    x              : in t_unsigned)
    return tunicode_addr; 
-- Převod T_UNSIGNED na TUNICODE_ADDR.
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
procedure uniint_to_unicode_addr (
    ui             : in tuniint)
    return tunicode_addr;
-- Převod UI na TUNIDATA_ADDR.
----------------------------------------------------------------------------------------------------



----- Deklarace přetížených operátorů pro univerzální typy -----------------------------------------

----------------------------------------------------------------------------------------------------
overload +    : uniint_add,uniint_add_assign,unidata_size_add,unidata_size_add_assign,
                unidata_addr_add,unidata_addr_add_assign,unireal_add_assign,unireal_add;
----------------------------------------------------------------------------------------------------
overload -    : uniint_sub,uniint_sub_assign,uniint_neg,uniint_neg_assign,unidata_size_sub,
                unireal_neg,unireal_neg_assign,unireal_sub_assign,unireal_sub;
----------------------------------------------------------------------------------------------------
overload *    : uniint_mul,uniint_mul_assign,unidata_size_mul,unidata_size_mul_assign,
                unireal_mul,unireal_mul_assign;
----------------------------------------------------------------------------------------------------
overload /    : unireal_div_assign,unireal_div;
----------------------------------------------------------------------------------------------------
overload div  : uniint_div_assign,uniint_div,unidata_size_div;
----------------------------------------------------------------------------------------------------
overload mod  : uniint_mod_assign,uniint_mod,unidata_size_mod;
----------------------------------------------------------------------------------------------------
overload shl  : uniint_shl_assign,uniint_shl;
----------------------------------------------------------------------------------------------------
overload shr  : uniint_shr_assign,uniint_shr;
----------------------------------------------------------------------------------------------------
overload and  : uniint_and_assign,uniint_and;
----------------------------------------------------------------------------------------------------
overload or   : uniint_or_assign;
----------------------------------------------------------------------------------------------------
overload xor  : uniint_xor_assign,unilogical_xor_assign;
----------------------------------------------------------------------------------------------------
overload not  : uniint_not_assign,uniint_not,unilogical_not;
----------------------------------------------------------------------------------------------------
overload abs  : uniint_abs_assign,uniint_abs,unireal_abs_assign,unireal_abs;
----------------------------------------------------------------------------------------------------
overload succ : uniint_succ_assign;
----------------------------------------------------------------------------------------------------
overload pred : uniint_pred_assign,uniint_pred;
----------------------------------------------------------------------------------------------------
overload <    : uniint_lt,unidata_size_lt,unidata_bitsize_lt{,unidata_lt},unireal_lt;
----------------------------------------------------------------------------------------------------
overload >    : uniint_gt,unidata_size_gt,unidata_addr_gt,unireal_gt;
----------------------------------------------------------------------------------------------------
overload <=   : uniint_le{,unireal_le},unireal_le;
----------------------------------------------------------------------------------------------------
overload >=   : uniint_ge,unidata_size_ge,unidata_bitsize_ge,unireal_ge;
----------------------------------------------------------------------------------------------------

protected

----- Interní tvar univerzálních typů --------------------------------------------------------------
type
  -- univerzální integer
  tuniint          = private array 1..uniint_precision div 8 of t_unsigned8;

type
  -- univerzální character
  tunichar         = private character unichar_precision;

type
  -- univerzální real
  tunireal         = record
      negative     : t_logical;                  -- T-záporné
      mantissa     : tuniint;                    -- matisa
      exponent     : tuniint;                    -- exponent
      end record;

type
  -- univerzální logical
  tunilogical      = private logical unilogical_precision;

type
  -- univerzální adresa a velikost datového objektu
  tunidata_addr    = private t_unsigned;         -- adresa (může být relativní)
  tunidata_size    = private t_unsigned;         -- velikost v bytech
  tunidata_bitsize = private t_unsigned;         -- velikost v bitech

type
  -- univerzální adresa a velikost proveditelného objektu
  tunicode_addr    = private t_unsigned;         -- adresa
  tunicode_size    = private t_unsigned;         -- velikost v bytech

end cc_unitype;
