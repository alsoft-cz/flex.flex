----------------------------------------------------------------------------------------------------
module public cc_unitype =
-- P©eklada‡ Flexu.
-- Definice lexi ln¡ch symbol–.
----------------------------------------------------------------------------------------------------
-- Ondra : 26.04.2000 : Vytvo©il
----------------------------------------------------------------------------------------------------

----- %%TECH Univerz ln¡ datov‚ typy ---------------------------------------------------------------
-- P©eklada‡ vyu‘¡v  pro ukl d n¡ konstant a adres ve v˜sledn‚m programu
-- n sleduj¡c¡ univerz ln¡ datov‚ typy. Konkr‚tn¡ form t dat je v‘dy d n
-- pou‘it˜m gener torem k¢du. P©eklada‡ je tedy nez visl˜ z hlediska d‚lky
-- strojov‚ho slova c¡lov‚ho procesoru. Jedin‚ omezen¡ je kladeno na procesor
-- prov dˆj¡c¡ makra. Ten mus¡ m¡t shodnou d‚lku strojov‚ho slova jako c¡lov˜
-- procesor, jinak si nedovedu p©edstavit mechanismus p©ed v n¡ ukazatel– -
-- kdy‘ deklaruji ukazatel U a vytvo©¡m metapromˆnnou typu U, tak U bude
-- konstruov n podle pravidel (d‚lky strojov‚ho slova) c¡lov‚ho procesoru,
-- ale z rove¤ ho mus¡ umˆt nativnˆ zpracov vat makroprocesor.
--
-- Operace s univerz ln¡mi typy jsou v tomto modulu. Modul je optimalizov n
-- pro pr ci s uveden˜mi d‚lkami univerz ln¡ch typ–, proto se p©i zmˆnˆ
-- nˆkter‚ho z univerz ln¡ch typ– mus¡ prov‚st i p©¡slu¨n  zmˆna algoritmu.
----------------------------------------------------------------------------------------------------



----- Univerz ln¡ datov‚ typy Flexu ----------------------------------------------------------------
const
  -- p©esnost celo‡¡seln‚ aritmetiky (v bitech)
  uniint_precision     = 160;

  -- p©esnost univerz ln¡ho znaku
  unichar_precision    = 32;

  -- p©esnost univerz ln¡ho logical
  unilogical_precision = 32;

type
  -- univerz ln¡ typy reprezentuj¡c¡ liter ly
  tuniint;                                       -- univerz ln¡ integer
  tunichar;                                      -- univerz ln¡ character
  tunireal;                                      -- univerz ln¡ real
  tunilogical;                                   -- univerz ln¡ logical

  -- univerz ln¡ adresa a velikost datov‚ho objektu
  tunidata_addr;                                 -- adresa (m–‘e b˜t relativn¡)
  tunidata_size;                                 -- velikost v bytech
  tunidata_bitsize;                              -- velikost v bitech

  -- univerz ln¡ adresa a velikost provediteln‚ho objektu
  tunicode_addr;                                 -- adresa
  tunicode_size;                                 -- velikost v bytech

  -- univerz ln¡ ‡¡slo zpr vy
  tunimsg;

  -- univerz ln¡ ‡¡slo typu (tag)
  tunitag;


----- Element rn¡ konstanty ------------------------------------------------------------------------
const
  -- NIL
  ui_nil           : tuniint;
  uc_nil           : tunichar;
  ur_nil           : tunireal;
  ul_nil           : tunilogical;

  -- rozsah podporovan˜ch ‡¡seln˜ch soustav
  ui_radix_first   : tuniint;
  ui_radix_last    : tuniint;

  -- z klad ¨estn ctkov‚ soustavy
  ui_radix_hex     : tuniint;

  -- p©esnost univerz ln¡ho cel‚ho ‡¡sla
  ui_precision     : tuniint;

  -- mal  cel  ‡¡sla
  ui_minus_1       : tuniint;
  ui_minus_2       : tuniint;
  ui_0             : tuniint;
  ui_1             : tuniint;
  ui_2             : tuniint;
  ui_3             : tuniint;
  ui_4             : tuniint;
  ui_5             : tuniint;
  ui_6             : tuniint;
  ui_7             : tuniint;
  ui_8             : tuniint;
  ui_9             : tuniint;
  ui_100           : tuniint;

  -- velk  cel  ‡¡sla
  ui_0_FFFF        : tuniint;
  ui_1_0           : tuniint;
  ui_1_1           : tuniint;
  ui_2_0           : tuniint;

  -- rozsah univerz ln¡ho znaku jako univerz ln¡ integer
  ui_unichar_first : tuniint;
  ui_unichar_last  : tuniint;

  -- mal  re ln  ‡¡sla
  ur_0             : tunireal;

  -- v˜znamn‚ adresy
  uda_0            : tunidata_addr;
{
  ud_1             : tunidata;
  ud_2             : tunidata;
  ud_4             : tunidata;
}
  -- v˜znamn‚ velikosti v bytech
  uds_0            : tunidata_size;
  uds_1            : tunidata_size;
  uds_2            : tunidata_size;
  uds_4            : tunidata_size;

  -- v˜znamn‚ velikosti v bitech
  udb_bits_per_byte: tunidata_bitsize;
  udb_1            : tunidata_bitsize;
  udb_8            : tunidata_bitsize;
  udb_16           : tunidata_bitsize;
  udb_32           : tunidata_bitsize;
  udb_64           : tunidata_bitsize;
  udb_80           : tunidata_bitsize;

  -- logick‚ hodnoty
  ul_false         : tunilogical;
  ul_true          : tunilogical;

----- Univerz ln¡ cel‚ ‡¡slo -----------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure signed_to_uniint (
    i              : in t_signed)
    return tuniint;
-- P©evod I na TUNIINT.
----------------------------------------------------------------------------------------------------
procedure unsigned_to_uniint (
    i              : in t_unsigned)
    return tuniint;
-- P©evod I na TUNIINT.
----------------------------------------------------------------------------------------------------
procedure unsigned_to_uniint_power2 (
    n              : in t_unsigned)
    return tuniint;
-- P©evod 2^N na TUNIINT.
----------------------------------------------------------------------------------------------------
procedure uniint_to_unsigned (
    ui             : in tuniint)
    return t_unsigned;
-- P©evod UI na T_UNSIGNED.
----------------------------------------------------------------------------------------------------
procedure uniint_to_signed (
    ui             : in tuniint)
    return t_signed;
-- P©evod UI na T_SIGNED.
----------------------------------------------------------------------------------------------------
procedure uniint_to_unichar (
    ui             : in tuniint)
    return tunichar;
-- P©evod UI na TUNICHAR.
----------------------------------------------------------------------------------------------------
procedure uniint_to_unireal (
    ui             : in tuniint)
                   return tunireal;
-- P©evod UI na TUNIREAL.
----------------------------------------------------------------------------------------------------
procedure uniint_to_unilogical (
    ui             : in tuniint)
                   return tunilogical;
-- P©evod UI na TUNILOGICAL.
----------------------------------------------------------------------------------------------------
procedure uniint_to_unidata_size (
    ui             : in tuniint)
    return tunidata_size;
-- P©evod UI na TUNIDATA_SIZE.
----------------------------------------------------------------------------------------------------
procedure uniint_to_unidata_bitsize (
    ui             : in tuniint)
    return tunidata_bitsize;
-- P©evod UI na TUNIDATA_BITSIZE.
----------------------------------------------------------------------------------------------------
procedure uniint_to_unidata_addr (
    ui             : in tuniint)
    return tunidata_addr;
-- P©evod UI na TUNIDATA_ADDR.
----------------------------------------------------------------------------------------------------
procedure uniint_load (
    ui             : out tuniint;                -- univerz ln¡ integer
    val            : in unchecked;               -- bin rn¡ ‡¡slo
    size           : in t_unsigned;              -- velikost hodnoty
    sign           : in t_logical);              -- T-signed
-- UI := VAL
----------------------------------------------------------------------------------------------------
procedure uniint_store (
    ui             : in tuniint;                 -- univerz ln¡ integer
    val            : out unchecked;              -- bin rn¡ ‡¡slo
    size           : in t_unsigned);             -- velikost hodnoty
-- VAL := UI
----------------------------------------------------------------------------------------------------
procedure uniint_sign (
    ui             : in tuniint)
                   return t_logical;
-- True, je-li UI z porn‚.
----------------------------------------------------------------------------------------------------
procedure uniint_add (
    A              : in tuniint;
    B              : in tuniint)
    return tuniint;
-- A + B
----------------------------------------------------------------------------------------------------
procedure uniint_add_assign (
    A              : in out tuniint;
    B              : in tuniint);
-- A := A + B
----------------------------------------------------------------------------------------------------
procedure uniint_sub (
    A              : in tuniint;
    B              : in tuniint)
    return tuniint;
-- A - B
----------------------------------------------------------------------------------------------------
procedure uniint_sub_assign (
    A              : in out tuniint;
    B              : in tuniint);
-- A := A - B
----------------------------------------------------------------------------------------------------
procedure uniint_mul_assign (
    A              : in out tuniint;
    B              : in tuniint);
-- A := A * B
----------------------------------------------------------------------------------------------------
procedure uniint_mul (
    A              : in tuniint;
    B              : in tuniint)
                   return tuniint;
-- A * B
----------------------------------------------------------------------------------------------------
procedure uniint_div_assign (
    A              : in out tuniint;
    B              : in tuniint);
-- A := A div B
----------------------------------------------------------------------------------------------------
procedure uniint_mod_assign (
    A              : in out tuniint;
    B              : in tuniint);
-- A := A mod B
----------------------------------------------------------------------------------------------------
procedure uniint_shl_assign (
    A              : in out tuniint;
    B              : in tuniint);
-- A := A shl B
----------------------------------------------------------------------------------------------------
procedure uniint_shr_assign (
    A              : in out tuniint;
    B              : in tuniint);
-- A := A shr B
----------------------------------------------------------------------------------------------------
procedure uniint_and_assign (
    A              : in out tuniint;
    B              : in tuniint);
-- A := A and B
----------------------------------------------------------------------------------------------------
procedure uniint_or_assign (
    A              : in out tuniint;
    B              : in tuniint);
-- A := A or B
----------------------------------------------------------------------------------------------------
procedure uniint_xor_assign (
    A              : in out tuniint;
    B              : in tuniint);
-- A := A xor B
----------------------------------------------------------------------------------------------------
procedure uniint_neg (
    A              : in tuniint)
    return tuniint;
-- - A
----------------------------------------------------------------------------------------------------
procedure uniint_neg_assign (
    A              : in out tuniint);
-- A := - A
----------------------------------------------------------------------------------------------------
procedure uniint_not_assign (
    A              : in out tuniint);
-- A := not A
----------------------------------------------------------------------------------------------------
procedure uniint_abs_assign (
    A              : in out tuniint);
-- A := abs A
----------------------------------------------------------------------------------------------------
procedure uniint_succ_assign (
    A              : in out tuniint);
-- A := succ A
----------------------------------------------------------------------------------------------------
procedure uniint_pred_assign (
    A              : in out tuniint);
-- A := pred A
----------------------------------------------------------------------------------------------------
procedure uniint_lt (
    A              : in tuniint;
    B              : in tuniint)
    return t_logical;
-- A < B
----------------------------------------------------------------------------------------------------
procedure uniint_le (
    A              : in tuniint;
    B              : in tuniint)
    return t_logical;
-- A <= B
----------------------------------------------------------------------------------------------------
procedure uniint_gt (
    A              : in tuniint;
    B              : in tuniint)
    return t_logical;
-- A > B
----------------------------------------------------------------------------------------------------
procedure uniint_ge (
    A              : in tuniint;
    B              : in tuniint)
    return t_logical;
-- A >= B
----------------------------------------------------------------------------------------------------
{
procedure uniint_ge_unidata (
    A              : in tuniint;
    B              : in tunidata)
    return t_logical;
-- A >= B
}
----------------------------------------------------------------------------------------------------
procedure uniint_is_power2 (
    A              : in tuniint)
                   return t_logical;
-- True, je-li A nˆjak  mocnina dvojky.
----------------------------------------------------------------------------------------------------
procedure uniint_get_power2 (
    A              : in tuniint)
                   return t_unsigned;
-- Exponent, je-li A nˆjak  mocnina dvojky.
----------------------------------------------------------------------------------------------------
procedure uniint_length (
    A              : in tuniint;
    B              : in tuniint)
    return tuniint;
-- D‚lka intervalu: B - A + 1
----------------------------------------------------------------------------------------------------
procedure uniint_test_shrink (
    A              : in tuniint;                 -- univerz ln¡ integer
    size           : in t_unsigned;              -- po‘adovan  velikost
    sign           : in t_logical)               -- T-signed, F-unsigned
                   return t_logical;             -- T-p©ete‡n¡
-- True, pokud A je vˆt¨¡ ne‘ SIZE byt– nebo m  chybn‚ znam‚nko.
----------------------------------------------------------------------------------------------------
procedure uniint_get_nth_byte (
    A              : in tuniint;                 -- univerz ln¡ integer
    n              : in t_unsigned)              -- pozice bytu (od 0)
    return t_unsigned8;
-- Z¡sk  N-t˜ byte zadan‚ho univerz ln¡ho integeru
----------------------------------------------------------------------------------------------------



----- Univerz ln¡ znak -----------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure char_to_unichar (
    c              : in t_char32)
                   return tunichar;
-- P©evod C na TUNICHAR.
----------------------------------------------------------------------------------------------------
procedure unichar_to_uniint (
    c              : in tunichar)
                   return tuniint;
-- P©evod TUNICHAR na TUNIINT.
----------------------------------------------------------------------------------------------------



----- Univerz ln¡ re ln‚ ‡¡slo ---------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure unireal_le (
    A              : in tunireal;
    B              : in tunireal)
    return t_logical;
-- A <= B
----------------------------------------------------------------------------------------------------



----- Univerz ln¡ logical --------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure logical_to_unilogical (
    A              : in t_logical)
                   return tunilogical;
-- P©evod A na UNILOGICAL.
----------------------------------------------------------------------------------------------------
procedure unilogical_to_logical (
    A              : in tunilogical)
                   return t_logical;
-- P©evod A na LOGICAL.
----------------------------------------------------------------------------------------------------
procedure unilogical_to_uniint (
    A              : in tunilogical)
                   return tuniint;
-- P©evod A na UNIINT.
----------------------------------------------------------------------------------------------------
procedure unilogical_xor_assign (
    A              : in out tunilogical;
    B              : in tunilogical);
-- A := A xor B
----------------------------------------------------------------------------------------------------
procedure unilogical_not (
    A              : in tunilogical)
                   return tunilogical;
-- not A
----------------------------------------------------------------------------------------------------



----- Univerz ln¡ adresa/velikost dat --------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure unsigned_to_unidata_size (
    i              : in t_unsigned)
    return tunidata_size;
-- P©evod I na TUNIDATA_SIZE.
----------------------------------------------------------------------------------------------------
procedure unsigned_to_unidata_addr (
    i              : in t_unsigned)
    return tunidata_addr;
-- P©evod I na TUNIDATA_ADDR.
----------------------------------------------------------------------------------------------------
procedure signed_to_unidata_addr (
    i              : in t_signed)
    return tunidata_addr;
-- P©evod I na TUNIDATA_ADDR.
----------------------------------------------------------------------------------------------------
procedure unidata_addr_to_size (
    ud             : in tunidata_addr)
    return tunidata_size;
-- Velmi neobvykl  operace: konverze adresy na velikost.
----------------------------------------------------------------------------------------------------
procedure unidata_size_to_addr (
    ud             : in tunidata_size)
    return tunidata_addr;
-- Velmi neobvykl  operace: konverze velikosti na adresu.
----------------------------------------------------------------------------------------------------
{
----------------------------------------------------------------------------------------------------
procedure unsigned_to_unidata (
    i              : in t_unsigned)
    return tunidata;
-- P©evod I na TUNIDATA.
----------------------------------------------------------------------------------------------------
procedure signed_to_unidata (
    i              : in t_signed)
    return tunidata;
-- P©evod I na TUNIDATA.
}
----------------------------------------------------------------------------------------------------
procedure unidata_size_to_unsigned (
    ud             : in tunidata_size)
    return t_unsigned;
-- P©evod UD na T_UNSIGNED.
----------------------------------------------------------------------------------------------------
procedure unidata_bitsize_to_unsigned (
    ud             : in tunidata_bitsize)
    return t_unsigned;
-- P©evod UD na T_UNSIGNED.
----------------------------------------------------------------------------------------------------
procedure unidata_addr_to_signed (
    ud             : in tunidata_addr)
    return t_signed;
-- P©evod UD na T_SIGNED.
----------------------------------------------------------------------------------------------------
procedure unidata_addr_to_unsigned (
    ud             : in tunidata_addr)
    return t_unsigned;
-- P©evod UD na T_UNSIGNED.
----------------------------------------------------------------------------------------------------
procedure unidata_size_to_uniint (
    ud             : in tunidata_size)
    return tuniint;
-- P©evod UD na TUNIINT.
----------------------------------------------------------------------------------------------------
procedure unidata_bitsize_to_uniint (
    ud             : in tunidata_bitsize)
    return tuniint;
-- P©evod UD na TUNIINT.
----------------------------------------------------------------------------------------------------
procedure unidata_addr_to_uniint (
    ud             : in tunidata_addr)
    return tuniint;
-- P©evod UD na TUNIINT.
----------------------------------------------------------------------------------------------------
procedure unidata_bits_to_bytes (
    ud             : in tunidata_bitsize)
    return tunidata_size;
-- P©evod velikosti v bitech na velikost v bytech se zaokrouhlen¡m nahoru.
----------------------------------------------------------------------------------------------------
procedure unidata_bytes_to_bits (
    ud             : in tunidata_size)
    return tunidata_bitsize;
-- P©evod velikosti v bytech na velikost v bitech.
----------------------------------------------------------------------------------------------------
procedure unidata_addr_align_by_size (
    A              : in out tunidata_addr;
    align          : in tunidata_size);
-- Zarovn  adresu A smˆrem nahoru na hranici dˆlitelnou velikost¡ ALIGN.
----------------------------------------------------------------------------------------------------
procedure unidata_size_lt (
    A              : in tunidata_size;
    B              : in tunidata_size)
    return t_logical;           
-- A < B
----------------------------------------------------------------------------------------------------
procedure unidata_bitsize_lt (
    A              : in tunidata_bitsize;
    B              : in tunidata_bitsize)
    return t_logical;           
-- A < B
----------------------------------------------------------------------------------------------------
procedure unidata_size_gt (
    A              : in tunidata_size;
    B              : in tunidata_size)
    return t_logical;
-- A > B
----------------------------------------------------------------------------------------------------
procedure unidata_addr_gt (
    A              : in tunidata_addr;
    B              : in tunidata_addr)
    return t_logical;
-- A > B
----------------------------------------------------------------------------------------------------
procedure unidata_size_ge (
    A              : in tunidata_size;
    B              : in tunidata_size)
    return t_logical;           
-- A >= B
----------------------------------------------------------------------------------------------------
procedure unidata_bitsize_ge (
    A              : in tunidata_bitsize;
    B              : in tunidata_bitsize)
    return t_logical;           
-- A >= B
----------------------------------------------------------------------------------------------------
procedure unidata_addr_add (
    A              : in tunidata_addr;
    B              : in tunidata_addr)
    return tunidata_addr;
-- A + B
----------------------------------------------------------------------------------------------------
procedure unidata_size_add (
    A              : in tunidata_size;
    B              : in tunidata_size)
    return tunidata_size;
-- A + B
----------------------------------------------------------------------------------------------------
procedure unidata_addr_add_assign (
    A              : in out tunidata_addr;
    B              : in tunidata_addr);
-- A := A + B
----------------------------------------------------------------------------------------------------
procedure unidata_size_add_assign (
    A              : in out tunidata_size;
    B              : in tunidata_size);
-- A := A + B
----------------------------------------------------------------------------------------------------
procedure unidata_size_sub (
    A              : in tunidata_size;
    B              : in tunidata_size)
    return tunidata_size;
-- A - B
----------------------------------------------------------------------------------------------------
procedure unidata_size_mul (
    A              : in tunidata_size;
    B              : in tunidata_size)
    return tunidata_size;
-- A * B
----------------------------------------------------------------------------------------------------
procedure unidata_size_mul_assign (
    A              : in out tunidata_size;
    B              : in tunidata_size);
-- A := A * B
----------------------------------------------------------------------------------------------------
procedure unidata_size_div (
    A              : in tunidata_size;
    B              : in tunidata_size)
    return tunidata_size;
-- A div B
----------------------------------------------------------------------------------------------------
procedure unidata_size_mod (
    A              : in tunidata_size;
    B              : in tunidata_size)
    return tunidata_size;
-- A mod B
----------------------------------------------------------------------------------------------------


----- Univerz ln¡ adresa: k¢d ----------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
procedure unicode_addr_to_unsigned (
    uc             : in tunicode_addr)
    return t_unsigned;
-- P©evod UP na T_UNSIGNED.
----------------------------------------------------------------------------------------------------
procedure unsigned_to_unicode_addr (
    x              : in t_unsigned)
    return tunicode_addr; 
-- P©evod T_UNSIGNED na TUNICODE_ADDR.
----------------------------------------------------------------------------------------------------



----- Univerz ln¡ ‡¡slo zpr vy ---------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure unimsg_to_unsigned (
    um             : in tunimsg)
    return t_unsigned;
-- P©evod UM na T_UNSIGNED.
----------------------------------------------------------------------------------------------------
procedure unimsg_succ_assign (
    A              : in out tunimsg);
-- succ A
----------------------------------------------------------------------------------------------------



----- Univerz ln¡ ‡¡slo typu (tag) -----------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure unitag_succ_assign (
    A              : in out tunitag);
-- succ A
----------------------------------------------------------------------------------------------------



----- Deklarace p©et¡‘en˜ch oper tor– pro univerz ln¡ typy -----------------------------------------

----------------------------------------------------------------------------------------------------
overload +    : uniint_add,uniint_add_assign,unidata_size_add,unidata_size_add_assign,
                unidata_addr_add,unidata_addr_add_assign;
----------------------------------------------------------------------------------------------------
overload -    : uniint_sub,uniint_sub_assign,uniint_neg,uniint_neg_assign,unidata_size_sub;
----------------------------------------------------------------------------------------------------
overload *    : uniint_mul,uniint_mul_assign,unidata_size_mul,unidata_size_mul_assign;
----------------------------------------------------------------------------------------------------
overload div  : uniint_div_assign,unidata_size_div;
----------------------------------------------------------------------------------------------------
overload mod  : uniint_mod_assign,unidata_size_mod;
----------------------------------------------------------------------------------------------------
overload shl  : uniint_shl_assign;
----------------------------------------------------------------------------------------------------
overload shr  : uniint_shr_assign;
----------------------------------------------------------------------------------------------------
overload and  : uniint_and_assign;
----------------------------------------------------------------------------------------------------
overload or   : uniint_or_assign;
----------------------------------------------------------------------------------------------------
overload xor  : uniint_xor_assign,unilogical_xor_assign;
----------------------------------------------------------------------------------------------------
overload not  : uniint_not_assign,unilogical_not;
----------------------------------------------------------------------------------------------------
overload abs  : uniint_abs_assign;
----------------------------------------------------------------------------------------------------
overload succ : uniint_succ_assign,unimsg_succ_assign,unitag_succ_assign;
----------------------------------------------------------------------------------------------------
overload pred : uniint_pred_assign;
----------------------------------------------------------------------------------------------------
overload <    : uniint_lt,unidata_size_lt,unidata_bitsize_lt{,unidata_lt};
----------------------------------------------------------------------------------------------------
overload >    : uniint_gt,unidata_size_gt,unidata_addr_gt;
----------------------------------------------------------------------------------------------------
overload <=   : uniint_le{,unireal_le};
----------------------------------------------------------------------------------------------------
overload >=   : uniint_ge,unidata_size_ge,unidata_bitsize_ge;
----------------------------------------------------------------------------------------------------

protected

----- Intern¡ tvar univerz ln¡ch typ– --------------------------------------------------------------
type
  -- univerz ln¡ integer
  tuniint          = private array 1..uniint_precision div 8 of t_unsigned8;

type
  -- univerz ln¡ character
  tunichar         = private character unichar_precision;

type
  -- univerz ln¡ real
  tunireal         = record
      sign         : t_logical;                  -- znam‚nko
      mantissa     : tuniint;                    -- matisa
      exponent     : tuniint;                    -- exponent
      end record;

type
  -- univerz ln¡ logical
  tunilogical      = private logical unilogical_precision;

type
  -- univerz ln¡ adresa a velikost datov‚ho objektu
  tunidata_addr    = private t_unsigned;         -- adresa (m–‘e b˜t relativn¡)
  tunidata_size    = private t_unsigned;         -- velikost v bytech
  tunidata_bitsize = private t_unsigned;         -- velikost v bitech

type
  -- univerz ln¡ adresa a velikost provediteln‚ho objektu
  tunicode_addr    = private t_unsigned;         -- adresa
  tunicode_size    = private t_unsigned;         -- velikost v bytech

type
  -- univerz ln¡ ‡¡slo zpr vy
  tunimsg          = private t_unsigned;

type
  -- univerz ln¡ ‡¡slo typu (tag)
  tunitag          = private t_unsigned;

end cc_unitype;
