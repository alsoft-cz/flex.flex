----------------------------------------------------------------------------------------------------
module private ci_gen =
-- Překladač Flexu.
-- Generování celé kompilační jednotky.
----------------------------------------------------------------------------------------------------
-- Ondra : 22.01.2003 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  standard,
  cc_def.cc_gc,
  cc_def.cc_var,
  cc_base,
  cc_base.cc_debug,
  cc_base.cc_rtl,
  cc_base.cc_sym,
  ci_def,
  ci_code,
  ci_code.ci_relo,
  ci_code.ci_rtl,
  ci_code.ci_instr,
  ci_block,
  cp_cpu.cp_32.cp_def,
  cp_cpu.cp_ia32.ci_abi,
  cg_gen.cg_ia32.ci_context,
  cg_gen.cg_ia32.ci_code.ci_operand,
  cg_gen.cg_ia32.ci_code.ci_operand.c_operand,
  cg_gen.cg_ia32.ci_fragment.ci_frame,
  cc_options;


----------------------------------------------------------------------------------------------------
procedure i_gen (
    curr           : in pentity;                 -- generovaný symbol
    count          : in out t_unsigned);         -- počet již vygenerovaných entit
-- Vygeneruje kód pro jeden symbol.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
procedure addcall (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o překladu
    psym           : in pentity_code) =           -- volaný podprogram
-- Přidá volání podprogramu.
-- Varianta [cg_gen.cg_ia32.ci_code.ci_instr.addcall], která si sama připraví kontext výrazu.
----------------------------------------------------------------------------------------------------
with
  ci_context;
  
var
  context          : iexprcontext;

begin
  -- připravit prázdný kontext
  i_createcontext(context,lm_gen,nil);

  -- zavolat skutečný [addjump]
  ci_instr.addcall(inst,info,context,psym);
  end addcall;



----------------------------------------------------------------------------------------------------
procedure i_instance (
    curr           : in out class tentity_code;  -- generovaný symbol
    inst           : in out picodeinst) =        -- instance
-- Alokuje novou instanci.
----------------------------------------------------------------------------------------------------
var
  psym             : pentity;

begin
  -- připravit instanci na generování
  i_prepare(curr);

  -- připravit instanci
  i_create_instance(curr,inst);

  -- default volací konvence
  if get_call_conv(curr)=icc_default
    then inst^.profile.call:=icc_flex;
    else inst^.profile.call:=get_call_conv(curr);
    end if;

  -- zvolit stack-frame
  if picodegen_subprog(curr.codegen)^.def_frame=isf_default
    then inst^.frame:=isf_fptr;
    else inst^.frame:=picodegen_subprog(curr.codegen)^.def_frame;
    end if;

  -- vytvořit seznam vnořených podprogramů
  if curr.nesting<>0 then
    -- jestliže to není top-level podprogram, pak sestavit seznam nadřazených podprogramů
    if curr.nesting-1>0 then
      -- alokovat paměť
      new inst^.nested.nlist range curr.nesting-1;
      
      -- zaregistruj do globalniho gc
      c_garbage_collector.get_instance^.register_memblock(inst^.nested.nlist);

      -- sestavit seznam
      psym:=curr.context.entity;
      inst^.nested.nlist^:length:=curr.nesting-1;
      for i in reverse inst^.nested.nlist^:range loop
        verify({VERIFY=}000500,psym=nil or psym^.etype not in ets_subprogram or pentity_code(psym)^.nesting<>i);
        inst^.nested.nlist^[i]:=pentity_code(psym);
        psym:=psym^.context.entity;
        end loop;
      end if;
    end if;
  end i_instance;
  
                                   
                                   
----------------------------------------------------------------------------------------------------
procedure i_gen_entry_modules (
    inst           : in out icodeinst;
    info           : in out igeninfo) =
-- Vygeneruje volání ENTRY všech modulů.
----------------------------------------------------------------------------------------------------
var
  srch             : tentitysearch;              -- hledátko
  
begin
  -- zavolat ENTRY všech modulů
  for i in 1..entrylist.count loop
    -- vyhledat ENTRY
    srch.find_local_all(sym_primary_context(entrylist.list^[i]^),id_entry);

    -- zavolat
    if srch.psym<>nil then addcall(inst,info,pentity_code(srch.psym)); end if;
    end loop;
  end i_gen_entry_modules;
  
  
  
----------------------------------------------------------------------------------------------------
procedure i_gen_exit_modules (
    inst           : in out icodeinst;
    info           : in out igeninfo) =
-- Vygeneruje volání EXIT všech modulů.
----------------------------------------------------------------------------------------------------
var
  srch             : tentitysearch;              -- hledátko

begin
  -- zavolat EXIT všech modulů
  for i in reverse 1..entrylist.count loop
    -- vyhledat EXIT
    srch.find_local_all(sym_primary_context(entrylist.list^[i]^),id_exit);

    -- zavolat
    if srch.psym<>nil then addcall(inst,info,pentity_code(srch.psym)); end if;
    end loop;
  end i_gen_exit_modules;
  


----------------------------------------------------------------------------------------------------
procedure i_gen_program_compile (
    curr           : in out tentity_compile) =   -- kompilační jednotka
-- Vygeneruje kód kompilační jednotky programu
----------------------------------------------------------------------------------------------------
var
  inst             : picodeinst;                 -- instance
  info             : igeninfo;                   -- informace o generování
  framehandler     : timm32;                     -- adresa položky HANDLER v exception-frame
  tg_endxframe     : itarget;                    -- návěští obsluhy neobsloužených výjimek
  context          : iexprcontext;               -- kontext výrazu

begin
  if o_is_option_by_entity(opt_dump_code,curr) then
    debug_dump('-------- Kompilacni jednotka --------------------------------------------------');
    end if;

  -- připravit instanci
  i_instance(curr,inst);

  -- připravit informace o generování
  initinfo(curr,info);

  -- pripravit prazdny kontext vyrazu
  i_createcontext(context,lm_gen,nil);

  -- vytvořit stack-frame
  i_gen_subprogram_prolog(curr,inst^,info);
  
  -- prolog bootstrap kódu kompilační jednotky
  i_gen_entrypoint_prolog(curr,inst^,info,context,framehandler,tg_endxframe,rtl_register_task_main);
  
  -- zavolat ENTRY všech modulů 
  i_gen_entry_modules(inst^,info);

  -- zavolat program
  declare var
    srch           : tentitysearch;              -- hledátko
    
  begin  
    srch.find_et_first(^curr,rc_primary,et_program,[]);
    if srch.psym<>nil then 
      addcall(inst^,info,pentity_code(srch.psym)); 
      end if;
    end declare;  
    
  -- zavolat EXIT všech modulů
  i_gen_exit_modules(inst^,info);

  -- epilog bootstrap kódu kompilační jednotky
  i_gen_entrypoint_epilog(curr,inst^,info,tg_endxframe);

  -- zrušit stack-frame
  i_gen_subprogram_epilog(curr,inst^,info);

  -- vyhodnotit lokální relokace
  localresolve(curr,inst^,info);
  end i_gen_program_compile;



-- %%TODO(?) - vykonnou cast i_gen_lib_compile presunout do os specific
----------------------------------------------------------------------------------------------------
procedure i_gen_library_compile (
    curr           : in out tentity_compile) =   -- kompilační jednotka
-- Vygeneruje kód kompilační jednotky knihovny
----------------------------------------------------------------------------------------------------
with
  ci_fragment;

var
  inst             : picodeinst;                 -- instance
  info             : igeninfo;                   -- informace o generování
  context          : iexprcontext;               -- kontext výrazu
  
    ------------------------------------------------------------------------------------------------
    procedure handle_reg (ii : in iinstr; reg : in ireg) =
    -- Nad registrem [reg] provede zadanou unární operaci.
    ------------------------------------------------------------------------------------------------
    var
      opreg        : c_operand;
      
    begin
      opreg.create_use_register(inst^,info,context,edt_unsigned,reg);
      addii(inst^,info,ii,opreg,op0,op0);
    leave
      opreg.free(info,context);
      end handle_reg;

      
      
    ------------------------------------------------------------------------------------------------
    procedure jump_on_reason (reason : in t_unsigned; tg : in itarget) =
    -- Podmíněný skok pokud je parametr [DllMain.fdwReason] roven zadané hodnotě [reason].
    ------------------------------------------------------------------------------------------------
    var
      opreason     : c_operand;                  -- parametr [DllMain.fdwReason]

    begin
      -- vytvořit operand reprezentující [fdwReason], 2. parametr [DllMain]
      opreason.create_memory_address_on_stack(inst^,edt_unsigned,4,signed_to_imm32(12));

      -- porovnat s dodanou hodnotou
      addopimm(inst^,info,context,ii_cmp,opreason,reason);

      -- skok
      addjump(inst^,info,context,ic_e,tg);

    leave  
      -- uvolnit operand
      opreason.free(info,context);
      end jump_on_reason;



    ------------------------------------------------------------------------------------------------
    procedure set_result (result : in t_unsigned) =
    -- Do EAX nastaví návratový kód procedury.
    ------------------------------------------------------------------------------------------------
    var
      opeax        : c_operand;

    begin
      -- alokovat EAX
      opeax.create_use_register(inst^,info,context,edt_unsigned,ir_eax);

      -- nastavit návratovou hodnotu
      addopimm(inst^,info,context,ii_mov,opeax,unsigned_to_imm32(result));

    leave
      -- uvolnit operand
      opeax.free(info,context);
      end set_result;

var
  tg_attach        : itarget;                    -- návěští obsluhy varianty [DLL_PROCESS_ATTACH]
  tg_detach        : itarget;                    -- návěští obsluhy varianty [DLL_PROCESS_DETACH]
  tg_end           : itarget;                    -- návěští konce procedury

begin
  if o_is_option_by_entity(opt_dump_code,curr) then
    debug_dump('-------- Kompilacni jednotka --------------------------------------------------');
    end if;

  -- připravit instanci
  i_instance(curr,inst);

  -- připravit informace o generování
  initinfo(curr,info);

  -- připravit prázdný kontext výrazu
  i_createcontext(context,lm_gen,nil);



  ----- 1. Společný prolog a rozhodovací logika ----------------------------------------------------

  -- vytvořit stack-frame
  i_gen_subprogram_prolog(curr,inst^,info);

  -- uložit rezervované registry
  handle_reg(ii_push,ir_ebx);
  handle_reg(ii_push,ir_esi);
  handle_reg(ii_push,ir_edi);

  -- alokovat návěští
  newtarget(info,tg_attach);
  newtarget(info,tg_detach);
  newtarget(info,tg_end);

  -- výběr varianty [DLL_PROCESS_ATTACH]
  jump_on_reason(1,tg_attach);
  
  -- výběr varianty [DLL_PROCESS_DETACH]
  jump_on_reason(0,tg_detach);
  
  -- a skok na konec procedury
  addjump(inst^,info,context,ic_ucond,tg_end);
  

  
  ----- 1. Obsluha varianty [DLL_PROCESS_ATTACH] ---------------------------------------------------
  declare var
    framehandler   : timm32;                     -- adresa položky HANDLER v exception-frame
    tg_endxframe   : itarget;                    -- návěští obsluhy neobsloužených výjimek
    
  begin  
    -- návěští skoku na obsluhu této varianty
    settarget(info,tg_attach,getaddr(inst^));

    -- prolog bootstrap kódu kompilační jednotky
    i_gen_entrypoint_prolog(curr,inst^,info,context,framehandler,tg_endxframe,rtl_register_task_dll);
    
    -- zavolat ENTRY všech modulů
    i_gen_entry_modules(inst^,info);

    -- epilog bootstrap kódu kompilační jednotky
    i_gen_entrypoint_epilog(curr,inst^,info,tg_endxframe,for do_finalize use false,for do_terminate use false);

    -- a skok na konec procedury
    addjump(inst^,info,context,ic_ucond,tg_end);
    end declare;

  

  ----- 2. Obsluha varianty [DLL_PROCESS_DETACH] ---------------------------------------------------
  declare var
    framehandler   : timm32;                     -- adresa položky HANDLER v exception-frame
    tg_endxframe   : itarget;                    -- návěští obsluhy neobsloužených výjimek
    
  begin  
    -- návěští skoku na obsluhu této varianty
    settarget(info,tg_detach,getaddr(inst^));

    -- prolog bootstrap kódu kompilační jednotky
    i_gen_entrypoint_prolog(curr,inst^,info,context,framehandler,tg_endxframe,rtl_register_task_dll,for do_initialize use false);
    
    -- zavolat EXIT všech modulů
    i_gen_exit_modules(inst^,info);

    -- epilog bootstrap kódu kompilační jednotky               
    i_gen_entrypoint_epilog(curr,inst^,info,tg_endxframe,for do_terminate use false);

    -- a skok na konec procedury
    addjump(inst^,info,context,ic_ucond,tg_end);
    end declare;


  
  ----- 3. Společný epilog -------------------------------------------------------------------------
  
  -- návěští skoku na konec obsluhy
  settarget(info,tg_end,getaddr(inst^));
                                          
  -- když se to dostalo až sem, tak se to patrně povedlo
  set_result(1);
  
  -- obnovit rezervované registry
  handle_reg(ii_pop,ir_edi);
  handle_reg(ii_pop,ir_esi);
  handle_reg(ii_pop,ir_ebx);

  -- zrušit stack-frame
  i_gen_subprogram_epilog(curr,inst^,info);

  -- vyhodnotit lokální relokace
  localresolve(curr,inst^,info);
  end i_gen_library_compile;



----------------------------------------------------------------------------------------------------
procedure i_gen_compile (
    curr           : in out tentity_compile) =   -- kompilační jednotka
-- Vygeneruje kód kompilační jednotky.
----------------------------------------------------------------------------------------------------
begin
  -- co generujeme?
  case curr.part_result
    -- knihovna
    when tpr_library do i_gen_library_compile(curr);
    
    -- program
    when tpr_program do i_gen_program_compile(curr);
    
    -- ostatni nezname
    when others do verify({VERIFY=}000667,true);
    end case;
  end i_gen_compile;



----------------------------------------------------------------------------------------------------
procedure i_gen_context (
    context        : in tcontext;                -- generovaný symbol
    count          : in out t_unsigned) =        -- počet již vygenerovaných entit
-- Vygeneruje kód pro jeden symbol.
----------------------------------------------------------------------------------------------------
var
  entity           : pentity;                    -- zpracovávaná entita
  region           : pregion;                    -- zpracovávaný region

begin
  -- vygenerovat kód pro všechny entity
  entity:=context.region^.entities.first;
  while entity<>nil loop
    -- vygenerovat
    i_gen(entity,count);

    -- další entita
    entity:=entity^.next;
    end loop;

  -- a pro všechny podregiony
  region:=context.region^.regions.first;
  while region<>nil loop
    -- vygenerovat
    i_gen_context(sym_build_context(context.entity,region),count);

    -- další region
    region:=region^.next;
    end loop;
  end i_gen_context;



----------------------------------------------------------------------------------------------------
procedure i_gen =
-- Vygeneruje kód pro jeden symbol.
----------------------------------------------------------------------------------------------------
with
  standard.console,
  cc_def.cc_codes;

var
  inst             : picodeinst;                 -- instance

begin
  -- zajímají nás pouze entity z aktuální parition
  if curr^.partition_id<>curr_partition then return end if;

  -- vygenerovat kód pro tento symbol
  if curr^.etype in ets_body then
    --write_line(sym_get_qid(curr));

    if o_is_option_by_entity(opt_dump_code,curr^) then
      debug_dump('-------- ' & sym_get_qid(curr) & ' --------');
      end if;

    begin
      -- připravit instanci
      i_instance(pentity_code(curr)^,inst);

      -- vygenerovat blok příkazů
      i_gen_block(pentity_code(curr)^,inst^);

    catch
      when compiler_error do 
          write_line(sym_get_qid(curr));
      {%%X ??? nemá tu být INTERNAL_ERROR ? } -- nic nedělat
      end;

    -- započítat a zobrazit voltmetr
    succ count;
    --showvoltmetr(v,count);
    end if;

  -- zpracovat všechny regiony
  for rcategory in tregioncategory loop
    if curr^.regions[rcategory]<>nil then 
      i_gen_context(sym_build_context(curr,curr^.regions[rcategory]),count);
      end if;
    end loop;
  end i_gen;



----------------------------------------------------------------------------------------------------
procedure i_estimate (
    curr           : in pentity;                 -- generovaný symbol
    total          : in out t_unsigned);         -- počet generovaných entit
-- Spočítá, kolik se bude generovat entit.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
procedure i_estimate_context (
    context        : in tcontext;                -- generovaný symbol
    total          : in out t_unsigned) =        -- počet již vygenerovaných entit
-- Spočítá, kolik se bude generovat entit.
----------------------------------------------------------------------------------------------------
var
  entity           : pentity;                    -- zpracovávaná entita
  region           : pregion;                    -- zpracovávaný region

begin
  -- vygenerovat kód pro všechny entity
  entity:=context.region^.entities.first;
  while entity<>nil loop
  #if #environment compiler_version;<>'4.0.3.14' then;
    declare 
      message tag_error : exception;
    begin
      if entity^.context.entity^:tag<>context.entity^:tag then
        raise tag_error;
        end if;
      end declare;
  #end if;
    
    -- zpracovat
    i_estimate(entity,total);

    -- další entita
    entity:=entity^.next;
    end loop;

  -- a pro všechny podregiony
  region:=context.region^.regions.first;
  while region<>nil loop
    -- vygenerovat
    i_estimate_context(sym_build_context(context.entity,region),total);

    -- další region
    region:=region^.next;
    end loop;
  end i_estimate_context;



----------------------------------------------------------------------------------------------------
procedure i_estimate =
-- Spočítá, kolik se bude generovat entit.
----------------------------------------------------------------------------------------------------
begin
  -- zajímají nás pouze entity z aktuální parition
  if curr^.partition_id<>curr_partition then return end if;

  -- započítat tuto entitu
  if curr^.etype in ets_body then
    succ total;
    end if;

  -- zpracovat všechny regiony
  for rcategory in tregioncategory loop
    if curr^.regions[rcategory]<>nil then 
      i_estimate_context(sym_build_context(curr,curr^.regions[rcategory]),total);
      end if;
    end loop;
  end i_estimate;



----------------------------------------------------------------------------------------------------
procedure i_codegen =
-- Hlavní smyčka generátoru kódu.
----------------------------------------------------------------------------------------------------
var
  total            : t_unsigned;
  count            : t_unsigned;

begin
  -- odhadnout délku generování, aby se dal zobrazit voltmetr
  total:=0;
  i_estimate(compi,total);

  -- vygenerovat kód všech prvků
  count:=0;
  i_gen(compi,count{,v});

  -- vygenerovat kod kompilační jednotky
  i_gen_compile(compi^);
  end i_codegen;



end ci_gen;
