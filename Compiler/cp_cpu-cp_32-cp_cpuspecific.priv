----------------------------------------------------------------------------------------------------
class private cp_cpuspecific =
-- Překladač Flexu.
-- Obecná unifikační vazba procesorově závislých charakteristik na překladač.
----------------------------------------------------------------------------------------------------
-- Ondra : 25.03.2002 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  cc_def.cc_codes,
  cc_def.cc_var,
  cp_cpu.cp_32.cp_def;

----------------------------------------------------------------------------------------------------
override getordparams1 =
-- Z velikosti čísla v bitech odvodí další strojově závislé hodnoty.
----------------------------------------------------------------------------------------------------
with
  advanced,
  advanced.low_level;

use
  advanced.low_level.bit_operations;

var
  x                : t_unsigned32;

begin
  -- je to přípustná velikost čísla
  if bits<>udb_8 and bits<>udb_16 and bits<>udb_32 and bits<>udb_64 then
    ce^.seterror({CCERR=}000378,ce_im_numsize);
    ce^.setinfo(hint_im_numsize);
    {%%POS}
    ce^.raiseerror;
    end if;

  -- odvodit velikost
  size:=unidata_bits_to_bytes(bits);

  -- odvodit meze
  if stype=dt_logical

    -- logický typ má fixní meze
    then
      lval:=cpu32_logical_lval;
      hval:=cpu32_logical_hval;

    -- ostatní ordinální typy mají meze podle počtu bitů
    else
      x:=unidata_bitsize_to_unsigned(bits); {%%TODO(???)}
      x div 8;
      x:=t_unsigned(bit_operations.bit_search_first_one(x));
      lval:=cpu32_intrange[{bit_search_first_one(}x {%%TODO(???) div 8)},stype=dt_signed,1];
      hval:=cpu32_intrange[{bit_search_first_one(}x {%%TODO(???) div 8)},stype=dt_signed,2];
      end if;
  end getordparams1;



----------------------------------------------------------------------------------------------------
override getordparams2 =
-- Z mezí čísla odvodí další strojově závislé hodnoty.
-- Je-li [native]=True, má výsledné číslo velikost alespoň strojového slova. V opačném případě se
-- použije nejmenší možná velikost, do které se hodnoty v daných mezích vejdou.
----------------------------------------------------------------------------------------------------
var
  i                : t_unsigned;

begin
  -- najít nejmenší možný rozsah
  if native
    then i:=cpu32_intrange_native;
    else i:=cpu32_intrange:first;
    end if; 
  while i<=cpu32_intrange:last and (lval<cpu32_intrange[i,stype=dt_signed,1]
  or hval>cpu32_intrange[i,stype=dt_signed,2]) loop succ i; end loop;
  verify({VERIFY=}000069,i>cpu32_intrange:last);

  -- velikost v bytech
  size:=unsigned_to_unidata_size(i*2+(i=0):ord);

  -- velikost v bitech
  bits:=unidata_bytes_to_bits(size);
  end getordparams2;



----------------------------------------------------------------------------------------------------
override getrealparams =
-- Z delta/digits odvodí další strojově závislé hodnoty. Delta/digits
-- je zadáno pouze přibližně a bude změněno.
----------------------------------------------------------------------------------------------------
var
  fp               : tfptype;

begin
  -- je to přípustná velikost čísla
  if bits<>udb_32 and bits<>udb_64 and bits<>udb_80 then
    ce^.seterror({CCERR=}000379,ce_im_floatsize);
    ce^.setinfo(hint_im_floatsize);
    {%%POS}
    ce^.raiseerror;
    end if;
 
{%%TODO(REAL)
  case stype
    -- delta definice
    when fdt_delta      do
        fp:=fp:first;
        while (fp<fp:last) and urcmpl(params.delta,cpu32_fpparams[fp].delta) loop succ fp; end loop;
        if (fp=fp:last) and urcmpl(params.delta,cpu32_fpparams[fp].delta) then
          ce^.seterror({CCERR=}000380,ce_im_delta);
          {%%POS}
          ce^.raiseerror;
          end if;


    -- digits definice
    when fdt_digits     do
        fp:=fp:first;
        while (fp<fp:last) and uicmpg(params.digits,cpu32_fpparams[fp].digits) loop succ fp; end loop;
        if (fp=fp:last) and uicmpg(params.digits,cpu32_fpparams[fp].digits) then
          ce^.seterror({CCERR=}000381,ce_im_digits);
          {%%POS}
          ce^.raiseerror;
          end if;


    when others do verify({VERIFY=}000237,true);
    end case;
}

  -- velikost čísla v bytech
  size:=unidata_bits_to_bytes(bits);

  -- další parametry
  if bits=udb_32 then params:=cpu32_fpparams[fp_32];
  elsif bits=udb_64 then params:=cpu32_fpparams[fp_64];
  elsif bits=udb_80 then params:=cpu32_fpparams[fp_80];
  end if;
  end getrealparams;



----------------------------------------------------------------------------------------------------
override getstrparams =
-- Z velikosti řetězce odvodí velikost.
----------------------------------------------------------------------------------------------------
var
  dsize            : tunidata_size;

begin
  -- velikost datové části řetězce
  dsize:=uniint_to_unidata_size(hval)*bsize;

  -- velikost interní části řetězce
  isize:=ud_lstrisize32;

  -- velikost celého řetězce
  size:=dsize+isize;

  -- není to moc ?
  if size>cpu32_maxtypesize then
    ce^.seterror({CCERR=}000382,ce_im_typesize);
    ce^.setinfo({%%TODO(LIB) formats(}hint_im_typesize{%%TODO(LIB) ,linttostr(cpu32_maxtypesize,tunidata:size))});
    {%%POS}
    ce^.raiseerror;
    end if;
  end getstrparams;



----------------------------------------------------------------------------------------------------
override getstrmaxhval =
-- Maximální horní mez řetězce podle velikosti prvku.
----------------------------------------------------------------------------------------------------
var
  size             : tunidata_size;

begin
  maxhval:=unidata_size_to_uniint((cpu32_maxtypesize-ud_lstrisize32) div bsize);
  end getstrmaxhval;



----------------------------------------------------------------------------------------------------
override getsetparams =
-- Z počtu prvků množiny odvodí její velikost.
----------------------------------------------------------------------------------------------------
begin
  -- size := (items + bits_per_byte - 1) div bits_per_byte
  size:=unidata_bits_to_bytes(uniint_to_unidata_bitsize(items));

  -- není to moc ?
  if size>cpu32_maxtypesize then
    ce^.seterror({CCERR=}000383,ce_im_typesize);
    ce^.setinfo({%%TODO(LIB) formats(}hint_im_typesize{%%TODO(LIB),linttostr(cpu32_maxtypesize,tunidata:size))});
    {%%POS}
    ce^.raiseerror;
    end if;
  end getsetparams;



----------------------------------------------------------------------------------------------------
override getdefaultord =
-- Parametry implicitního celočíselného typu.
----------------------------------------------------------------------------------------------------
with
  advanced,
  advanced.low_level;

use
  advanced.low_level.bit_operations;

var
  x                : t_unsigned;

begin
  case stype
    -- celočíselný
    when dt_signed,dt_unsigned do
        -- velikost čísla v bitech
        bits:=unidata_bytes_to_bits(unsigned_to_unidata_size(ldefint32));

        -- velikost čísla v bytech
        size:=unsigned_to_unidata_size(ldefint32);

        -- meze
        x:=ldefint32; {%%TODO(???) }
        x:=t_unsigned(bit_operations.bit_search_first_one(x));
        lval:=cpu32_intrange[x{%%TODO(???) bitsfl(ldefint32)},stype=dt_signed,1];
        hval:=cpu32_intrange[x{%%TODO(???) bitsfl(ldefint32)},stype=dt_signed,2];

    -- znakový
    when dt_char do
        -- velikost znaku v bitech
        bits:=unidata_bytes_to_bits(unsigned_to_unidata_size(ldefchar32));

        -- velikost znaku v bytech
        size:=unsigned_to_unidata_size(ldefchar32);

        -- meze
        x:=ldefchar32; {%%TODO(???) }
        x:=t_unsigned(bit_operations.bit_search_first_one(x));
        lval:=cpu32_intrange[x{%%TODO(???) bitsfl(ldefchar32)},false,1];
        hval:=cpu32_intrange[x{%%TODO(???) bitsfl(ldefchar32)},false,2];

    -- logický
    when dt_logical     do
        -- velikost logicalu v bitech
        bits:=udb_1;

        -- velikost logicalu v bytech
        size:=unsigned_to_unidata_size(ldeflogical32);

        -- meze
        lval:=cpu32_logical_lval;
        hval:=cpu32_logical_hval;

    end case;
  end getdefaultord;



----------------------------------------------------------------------------------------------------
override getdefaultreal =
-- Parametry implicitního reálného typu.
----------------------------------------------------------------------------------------------------
begin
  -- velikost čísla v bytech
  size:=cpu32_fpsize[cpu32_defaultfp];

  -- další parametry
  params:=cpu32_fpparams[cpu32_defaultfp];
  end getdefaultreal;



----------------------------------------------------------------------------------------------------
override layoutrecitem =
-- Umístění jedné položky v recordu/třídě.
----------------------------------------------------------------------------------------------------
var
  rounded_size     : tunidata_size;              -- zaokrouhledá velikost složky

begin
  -- zaokrouhlit velikost složky na nejbližší vyšší mocninu dvou
  if native_align then
    rounded_size:=unidata_size_align_to_nearest_power2(item^.typ.getctype^.size);
    end if;

  -- vypočítat zarovnanou adresu proměnné
  if native_align and then (rounded_size>uds_0 and rounded_size<align)
    then unidata_addr_align_by_size(varofs,rounded_size);
    else unidata_addr_align_by_size(varofs,align);
    end if;

  -- adresa proměnné
  item^.addr:=varofs;

  -- posunout aktuální offset
  varofs+unidata_size_to_addr(item^.typ.getctype^.size);

  -- upravit maximální dosažený offset
  if varofs>maxofs then
    maxofs:=varofs;
    end if;
  end layoutrecitem;



----------------------------------------------------------------------------------------------------
override forcelayoutrecitem =
-- Předepíše umístění jedné položky v recordu/třídě na zadanou pozici
----------------------------------------------------------------------------------------------------
begin
  -- adresa proměnné
  item^.addr:=pos;

  -- aktuální offset nastavit za právě umístěnou položku
  varofs:=pos;
  varofs+unidata_size_to_addr(item^.typ.getctype^.size);

  -- upravit maximální dosažený offset
  if varofs>maxofs then
    maxofs:=varofs;
    end if;
  end forcelayoutrecitem;



----------------------------------------------------------------------------------------------------
override getptrsize =
-- Velikost pointeru.
----------------------------------------------------------------------------------------------------
begin
  -- základní velikost
  size:=cpu32_ptrsize0;

  -- velikost dodatečných atributů
  for attrib in rtattrib loop
    if attrib in pattrib then 
      size+cpu32_rtattribsize[attrib]; 
      end if;
    end loop;
{
  if machine
    then size:=cpu32_machineptrsize;
    else size:=cpu32_ptrsize[pclass,pbase];
    end if;
}
  end getptrsize;



----------------------------------------------------------------------------------------------------
override getrtattribsize =
-- Velikost dynamického atributu.
----------------------------------------------------------------------------------------------------
begin
  size:=cpu32_rtattribsize[rta];
  end getrtattribsize;



----------------------------------------------------------------------------------------------------
override bytestobits =
-- Převod bytu na bity (co kdyby se vyskytl 10-bitový počítač, že).
----------------------------------------------------------------------------------------------------
begin
  bits:=unidata_bytes_to_bits(bytes);
  end bytestobits;



----------------------------------------------------------------------------------------------------
override immtobinary =
-- Převede přímou hodnotu do binárního tvaru.
----------------------------------------------------------------------------------------------------
with
  advanced,
  advanced.low_level;

use
  advanced.low_level.bit_operations,
  advanced.low_level.unchecked_memory_access;

var
  ofs              : t_unsigned32;               -- aktuální offset v generovaném poli
  base             : pentity_type;               -- typ báze
  basesize         : t_unsigned32;               -- velikost báze

    ------------------------------------------------------------------------------------------------
    procedure fillstruct (
        dest       : out unchecked;              -- cílové pole
        count      : in t_unsigned;              -- počet prvků pole
        src        : in unchecked;               -- zdrojové pole
        size       : in t_unsigned) =            -- velikost
    -- Vyplní pole DEST o COUNT prvcích velikosti SIZE konstantou SRC.
    ------------------------------------------------------------------------------------------------
    with
      advanced,
      advanced.low_level,
      advanced.low_level.unchecked_memory_access;

    begin
      for i in 1..count loop
        memory_copy(src,t_unsigned8array(dest)[(i-1)*size],size);
        end loop;
      end fillstruct;



    ------------------------------------------------------------------------------------------------
    procedure fillrange (
        val        : in timm_value;              -- hodnota
        lval       : in tuniint;                 -- dolní mez rozsahu
        hval       : in tuniint) =               -- horní mez rozsahu
    -- Vyplní rozsah položek zadanou hodnotou.
    ------------------------------------------------------------------------------------------------
    var
      ui           : tuniint;
      k            : t_unsigned32;

    begin
      -- hodnota prvku
      immtobinary(val,base,t_unsigned8array(bin)[ofs],base^.size);

      -- zduplikovat pro celý rozsah
      if hval>lval then
        -- délka úseku
        ui:=hval-lval;
        k:=uniint_to_unsigned(ui);

        -- vypnit
        fillstruct(t_unsigned8array(bin)[ofs+basesize],k,t_unsigned8array(bin)[ofs],basesize);

        -- další prvek
        ofs+basesize*k;
        end if;

      -- další prvek
      ofs+basesize;
      end fillrange;

var
  a                : tuniint;
  b                : tuniint;
  c                : tuniint;
  i_c              : t_unsigned;

begin
  -- konvertovat
  case imm.ic
    -- celé číslo
    when ic_ordinal   do 
        verify({VERIFY=}000585,unidata_size_to_unsigned(binsize)<>1 and unidata_size_to_unsigned(binsize)<>2 and unidata_size_to_unsigned(binsize)<>4{%%TODO(SET) not in [1,2,4]});
        uniint_store(imm.ui,bin,{%%X}unidata_size_to_unsigned(binsize));

    -- reálné číslo
    when ic_real      do unimplemented({UNIMP=}000096);

    -- kondenzované pole
    when ic_condensed do
        --u_nimplemented(96);
        ofs:=0;

        -- interní část řetězce
        if ptyp^.stype in dts_string then
          uniint_store(unsigned_to_uniint(imm.citems.len),bin,lstrisize32);
          ofs+lstrisize32;
          end if;

        -- typ báze
        base:=ptyp^.base.getctype;

        -- velikost báze
        basesize:=unidata_size_to_unsigned(base^.size);
        verify({VERIFY=}000586,basesize<>1 and basesize<>2 and basesize<>4 {%%TODO(SET) not in [1,2,4]});

        -- hodnoty prvků
        verify({VERIFY=}000587,lstrisize32*(ptyp^.stype in dts_string):ord+imm.citems.len*basesize>unidata_size_to_unsigned(binsize));
        i_c:=0;
        while i_c<imm.citems.isize*imm.citems.len loop
          uniint_load(a,imm.citems.items^[i_c],imm.citems.isize,base^.stype=dt_signed);
          uniint_store(a,t_unsigned8array(bin)[ofs],basesize);
          i_c+imm.citems.isize;
          ofs+basesize;
          end loop;


    -- agregát pole
    when ic_array     do
        ofs:=0;

        -- interní část řetězce
        if ptyp^.stype in dts_string then
          if imm.aitems^.list=nil or else imm.aitems^.list^:length=0
            -- pole je prázdné => řetězec je prázdný
            then a:=ui_0;
            -- v poli něco je => vzít poslední HVAL
            -- (pole je vzestupně setříděné podle rozsahů)
            else a:=imm.aitems^.list^[imm.aitems^.list^:length].hval;
            end if;
          uniint_store(a,bin,lstrisize32);
          ofs+lstrisize32;
          end if;

        -- typ báze
        base:=ptyp^.base.getctype;

        -- velikost báze
        basesize:=unidata_size_to_unsigned(base^.size);

        -- připravit dolní mez o jedničku nižší (v zápětí se to opraví)
        a:=ptyp^.srange.getctype^.lval-ui_1; {%%X nemůže tady dojít k nežádoucímu podtečení ? }

        -- zpracovat všechny uvedené intervaly a mezery mezi nimi vyplnit hodnotou OTHERS
        if imm.aitems^.list<>nil then
          for i in imm.aitems^.list^:range loop
            -- vyplnit OTHERS hodnotou
            a+ui_1;
            if a<imm.aitems^.list^[i].lval then
              b:=imm.aitems^.list^[i].lval-ui_1;
              fillrange(imm.aitems^.othersval,a,b);
              end if;

            -- hodnota prvku
            a:=imm.aitems^.list^[i].hval;
            fillrange(imm.aitems^.list^[i].val,imm.aitems^.list^[i].lval,a);
            end loop;
          end if;

        -- zbytek za posledním intervalem do konce pole dovyplnit hodnotou OTHERS
        if ptyp^.stype not in dts_string then
          b:=ptyp^.srange.getctype^.hval;
          if a<b then
            a+ui_1;
            fillrange(imm.aitems^.othersval,a,b);
            end if;
          end if;

        --u_nimplemented(96);


    -- agregát recordu
    when ic_record    do
        -- zpracovat všechny položky
        if imm.ritems^.list<>nil then
          for i in imm.ritems^.list^:range loop
            -- typ složky
            base:=imm.ritems^.list^[i].item^.typ.getctype;
            
            -- offset
            ofs:=unidata_addr_to_unsigned(imm.ritems^.list^[i].item^.addr);

            -- uložit hodnotu
            immtobinary(imm.ritems^.list^[i].val,base,t_unsigned8array(bin)[ofs],base^.size);
            end loop;
          end if;
        --u_nimplemented(96);


    -- agregát množiny
    when ic_set       do
        --u_nimplemented(135);

        -- typ báze
        base:=ptyp^.base.getctype;

        -- zpracovat všechny intervaly
        --%%X verify({VERIFY=}000529,imm.sitems^.lcount>imm.sitems^.lsize);
        if imm.sitems^.list<>nil then
          for i in imm.sitems^.list^:range loop
            a:=imm.sitems^.list^[i].lval-base^.lval;
            b:=imm.sitems^.list^[i].hval-base^.lval;
            while a<=b loop
              --uitouint(a,index);
              bit_operations.bit_set(bin,bit_operations.t_bit_index(uniint_to_unsigned(a)));
              a+ui_1;
              end loop;
            end loop;
          end if;

    -- NIL
    when ic_nil do unchecked_memory_access.memory_fill_zero(bin,unidata_size_to_unsigned(binsize));

    when others do verify({VERIFY=}000262,true);
    end case;
  end immtobinary;



----------------------------------------------------------------------------------------------------
override getimmstoragesize =
-- Minimální velikost prostoru pro uložení konstanty do EXE.
-- (Pro řetězce stačí rezervovat jen tolik paměti, kolik je potřeba na
-- všechny prvky a :length; pro ostatní typy je třeba alokovat
-- ptyp^.size bytu prostoru)
----------------------------------------------------------------------------------------------------
var
  isize            : tunidata_size;              -- pro kompatibilitu parametru
  hval             : tuniint;                    -- počet prvků řetězce

    ------------------------------------------------------------------------------------------------
    procedure compute_hval =
    -- Vypočítá počet prvků pole.
    ------------------------------------------------------------------------------------------------
    begin
      -- zjistit počet prvků
      case imm.ic
        -- kondenzovaný tvar
        when ic_condensed do hval:=unsigned_to_uniint(imm.citems.len);

        -- agregátní tvar
        when ic_array do
            if imm.aitems^.list=nil or else imm.aitems^.list^:length=0
              -- pole je prázdné => řetězec je prázdný
              then hval:=ui_0;
              -- v poli něco je => vzít poslední HVAL
              -- (pole je vzestupně setříděné podle rozsahů)
              else
                hval:=imm.aitems^.list^[imm.aitems^.list^:length].hval;
                end if;

        when others do verify({VERIFY=}000825,true);
        end case;
      end compute_hval;

begin
  case ptyp^.stype
    -- řetězce se ukládají v minimálním tvaru
    -- (ještě by se daly ukládat null-terminated...)
    when dt_string, dt_ustring do
        -- zjistit počet prvků
        compute_hval;

        -- vypočítat odpovídající velikost řetězce
        getstrparams(ptyp^.stype,size,isize,ptyp^.base.getctype^.size,hval);


    -- univerzální pole
    when dt_uniarray do
        -- zjistit velikost báze
        size:=ptyp^.base.getctype^.size;

        -- zjistit počet prvků
        compute_hval;

        -- dopočítat velikost pole podle počtu prvků
        size*uniint_to_unidata_size(hval)

    -- ostatní typy v plné velikosti
    when others do
        verify({VERIFY=}000588,ptyp^.stype in dts_unitype);
        size:=ptyp^.size;

    end case;
  end getimmstoragesize;
{
begin
  if ptyp^.stype in dts_string

    -- řetězce se ukládají v minimálním tvaru
    -- (ještě by se daly ukládat null-terminated...)
    then
      -- zjistit počet prvků
      case imm.ic
        -- kondenzovaný tvar
        when ic_condensed do hval:=unsigned_to_uniint(imm.citems.len);

        -- agregátní tvar
        when ic_array do
            if imm.aitems^.list=nil or else imm.aitems^.list^:length=0
              -- pole je prázdné => řetězec je prázdný
              then hval:=ui_0;
              -- v poli něco je => vzít poslední HVAL
              -- (pole je vzestupně setříděné podle rozsahů)
              else
                hval:=imm.aitems^.list^[imm.aitems^.list^:length].hval;
                end if;

        when others do verify({VERIFY=}000826,true);
        end case;

      -- vypočítat odpovídající velikost řetězce
      getstrparams(ptyp^.stype,size,isize,ptyp^.base.getctype^.size,hval);

    -- ostatní typy v plné velikosti
    else 
      size:=ptyp^.size;
      end if;
  end getimmstoragesize;
}


{
----------------------------------------------------------------------------------------------------
override setstackframe =
-- Nastaví typ stackframe procedury.
----------------------------------------------------------------------------------------------------
var
  frame            : istackframe;      -- typ stackframe

begin
  -- nemá již přiřazen typ stackframe ?
  if i_getstackframe(proc^)<>isf_default then
    ce^.seterror({CCERR=}000384,ce_stackframeset);
    ce^.setparam(symqident(proc));
    {%%POS}
    ce^.raiseerror;
    end if;

  -- určit typ stackframe
  i_idtostackframe(id,frame);
  if frame=isf_default then
    ce^.seterror({CCERR=}000385,ce_i_stackframe);
    ce^.setparam(id);
    {%%POS}
    ce^.raiseerror;
    end if;

  -- přiřadit konvenci
  i_setstackframe(proc^,frame);
  end setstackframe;
}


----------------------------------------------------------------------------------------------------
override unidata_addr_to_hex_string =
-- Převod UNIDATA_ADDR na hexadecimální zápis v délce podporované tímto CPU.
----------------------------------------------------------------------------------------------------
with
  standard.conversions;

begin
  result:=unsigned_to_string(imm32_to_unsigned(unidata_addr_to_imm32(ud)),[for radix use 16]);
  end unidata_addr_to_hex_string;



----------------------------------------------------------------------------------------------------
override unidata_size_to_hex_string =
-- Převod UNIDATA_SIZE na hexadecimální zápis v délce podporované tímto CPU.
----------------------------------------------------------------------------------------------------
with
  standard.conversions;

begin
  result:=unsigned_to_string(imm32_to_unsigned(unidata_size_to_imm32(ud)),[for radix use 16]);
  end unidata_size_to_hex_string;



----------------------------------------------------------------------------------------------------
entry =
-- Inicializace.
----------------------------------------------------------------------------------------------------
begin
  -- maximální velikost řetězce
  maxstrhval:=cpu32_string_hval;

  -- velikost interní části řetězce
  strisize:=cpu32_string_isize;

  -- implicitní zarovnání
  defaultalign:=cpu32_defaultalign;

  -- velikost interní části třídy
  classisize:=cpu32_classisize;

  -- offsety interních částí třídy
  class_tag:=imm32_to_unidata_addr(cpu32_class_tag);
  class_status:=imm32_to_unidata_addr(cpu32_class_status);
  end entry;



end cp_cpuspecific;
