----------------------------------------------------------------------------------------------------
class private c_operand =
-- Překladač Flexu.
-- Operand strojové instrukce.
----------------------------------------------------------------------------------------------------
-- Ondra : 14.04.2003 : Vytvořil.
----------------------------------------------------------------------------------------------------

with
  cp_cpu.cp_ia32.ci_abi,
  cg_gen.cg_ia32.ci_reg,
  cg_gen.cg_ia32.ci_reg.ci_alloc,
  cg_gen.cg_ia32.ci_code.ci_stack;

var
  -- režim alokace registru v závislosti na datovém typu
  alloc_mode       : static const array t_elementary_data_type of iregallocmode := [
    for edt_address use irm_addr,
    for edt_offset  use irm_addr,
    for edt_pointer use irm_addr,
    for others      use irm_int];

var
  orgtyp           : pentity_type;               -- původní typ souvisejícího podvýrazu
  orgtyp_set       : t_logical := false;         -- T-[orgtyp] byl již nastaven
  dirty            : t_logical;                  -- operand byl již alespoň jednou použit
  low_level        : t_logical;                  -- operand byl vytvořen low level operací

----------------------------------------------------------------------------------------------------
static init (
    _optype        : in t_operand_type;          -- typ operandu 
    _edtype        : in t_elementary_data_type;  -- elementární datový typ operandu
    _size          : in t_unsigned) =            -- požadovaná velikost registru
-- Počáteční inicializace nového operandu.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}000639,optype<>io_none or dirty);

  -- nastavit základní parametry operandu
  this.optype:=_optype;
  this.edtype:=_edtype;
  this.size  :=_size;

  -- operand je od teďka použitý
  dirty:=true;
  end init;



----------------------------------------------------------------------------------------------------
static create_imm =
-- Vytvoří nový operand typu [io_imm].
----------------------------------------------------------------------------------------------------
begin
  -- počáteční inicializace nového operandu
  init(io_imm,_edtype,_size);

  -- poznamenat si přímou hodnotu
  this.imm:=_imm;
  end create_imm;



----------------------------------------------------------------------------------------------------
static create_new_register =
-- Vytvoří nový operand typu [io_reg] a alokuje pro něj nový registr.
----------------------------------------------------------------------------------------------------
begin
  -- počáteční inicializace nového operandu
  init(io_reg,_edtype,_size);

  -- alokovat registr
  i_reg_alloc(inst,info,context,reg,size,alloc_mode[edtype]);
  end create_new_register;



----------------------------------------------------------------------------------------------------
static create_new_register_from_operand =
-- Vytvoří nový operand typu [io_reg]. Přednostně použije registr z dodaného dalšího operandu.
-- Pokud žádný vhodný nenajde, alokuje nový.
----------------------------------------------------------------------------------------------------
begin
  -- počáteční inicializace nového operandu
  init(io_reg,_edtype,_size);

  -- zkusit použít registr z dodaného operandu
  if _old_operand.optype=io_reg and i_reg_resize(_old_operand.reg.reg,size)<>ir_none then
    i_reg_use(inst,info,context,_old_operand.reg.reg,reg,size);
  elsif _old_operand.optype=io_mem and _old_operand.base.reg<>ir_none and i_reg_resize(_old_operand.base.reg,size)<>ir_none then
    i_reg_use(inst,info,context,_old_operand.base.reg,reg,size);
  elsif _old_operand.optype=io_mem and _old_operand.index.reg<>ir_none and i_reg_resize(_old_operand.index.reg,size)<>ir_none then
    i_reg_use(inst,info,context,_old_operand.index.reg,reg,size);

  -- nedá se nic nělat, alokovat nový registr
  else 
    i_reg_alloc(inst,info,context,reg,size,alloc_mode[edtype]);
    end if;  
  end create_new_register_from_operand;



----------------------------------------------------------------------------------------------------
static create_use_register =
-- Vytvoří nový operand typu [io_reg] a použije dodaný registr.
----------------------------------------------------------------------------------------------------
begin
  -- počáteční inicializace nového operandu
  init(io_reg,_edtype,iregsize[_reg]);

  -- použít dodaný registr
  i_reg_use(inst,info,context,_reg,reg,size);
  end create_use_register;



----------------------------------------------------------------------------------------------------
static create_memory_address =
-- Vytvoří operand typu [io_mem].
----------------------------------------------------------------------------------------------------
begin
  -- počáteční inicializace nového operandu
  init(io_mem,_edtype,_size);
  
  -- naplnit bázi a posunutí
  if _base<>ir_none then
    i_reg_use(inst,info,context,_base,base,idefregsize);
    end if;
  this.disp:=_disp;
  end create_memory_address;



----------------------------------------------------------------------------------------------------
static create_memory_address_on_stack =
-- Vytvoří operand typu [io_mem] bázovaný k frame pointeru.
----------------------------------------------------------------------------------------------------
begin
  -- počáteční inicializace nového operandu
  init(io_mem,_edtype,_size);

  -- naplnit bázi a posunutí
  if use_stack_ptr
    then this.base.reg:=ir_esp;
    else this.base.reg:=istackframereg[inst.frame];
    end if;
  this.disp:=_disp;
  end create_memory_address_on_stack;



----------------------------------------------------------------------------------------------------
static create_memory_address_from_operand =
-- Vytvoří operand typu [io_mem] podle dodaného původního operandu typu [io_reg] nebo [io_imm].
-- Původní operand neuvolňuje.
----------------------------------------------------------------------------------------------------
begin
  -- počáteční inicializace nového operandu
  init(io_mem,_edtype,_size);

  -- podle původního operandu natavit adresu
  case _old_operand.optype
    -- registr => naplnit bázi
    when io_reg do i_reg_use(inst,info,context,_old_operand.reg.reg,this.base,idefregsize);

    -- přímá hodnota => naplnit posunutí a zkopírovat relokaci
    when io_imm do 
        disp:=_old_operand.imm;
        copy_relo(_old_operand);

    -- nic jiného neumíme
    when others do verify({VERIFY=}000646);
    end case;
  end create_memory_address_from_operand;



----------------------------------------------------------------------------------------------------
static create_temporary =
-- Vytvoří operand typu [io_mem] a alokuje pro něj pracovní prostor na stacku.
----------------------------------------------------------------------------------------------------
begin
  -- počáteční inicializace nového operandu
  init(io_mem,_edtype,_size);

  -- určit bázový registr
  base.reg:=istackframereg[inst.frame];

  -- alokovat prostor
  alloctemp(inst,info,size,disp);
  end create_temporary;

         

----------------------------------------------------------------------------------------------------
static create_relative_address =
-- Vytvoří operand typu [io_rel]. Typ operandu automaticky nastaví na [edt_offset].
----------------------------------------------------------------------------------------------------
begin
  -- počáteční inicializace nového operandu
  init(io_rel,edt_offset,_size);
  end create_relative_address;



----------------------------------------------------------------------------------------------------
static create_condition =
-- Vytvoří operand typu [io_cc]. Typ operandu automaticky nastaví na [edt_unsigned].
----------------------------------------------------------------------------------------------------
begin
  -- počáteční inicializace nového operandu
  init(io_cc,edt_unsigned,0);

  -- poznamenat si přímou hodnotu
  this.cc:=_cc;
  end create_condition;



----------------------------------------------------------------------------------------------------
static create_on_stack =
-- Vytvoří operand typu [io_stack] reprezentující hodnotu uloženou na vrcholu stacku.
----------------------------------------------------------------------------------------------------
begin
  -- počáteční inicializace nového operandu
  init(io_stack,_edtype,_size);
  end create_on_stack;



----------------------------------------------------------------------------------------------------
static set_orgtyp =
-- Přiřadí operandu původní typ souvisejícího podvýrazu.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}001081,not dirty);

-- Interní kontrola zrušena, protože jeden operand často bez úprav přežije více pater generovaného
-- stromu.
-- -- tuto operanci lze provést nejvýše jednou
-- verify({VERIFY=}000997,orgtyp_set);

  -- přiřadit operandu původní typ souvisejícího podvýrazu.
  this.orgtyp:=orgtyp;
  orgtyp_set:=true;
  end set_orgtyp;

                 

----------------------------------------------------------------------------------------------------
static get_orgtyp =
-- Zjistí původní typ souvisejícího podvýrazu. Přednost má původní typ souvisejícího podvýrazu
-- nastavený v operandu, pokud se tak nestalo, použije se původní typ z dodaného kontextu.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}001082,not dirty);

  if orgtyp_set
    then result:=orgtyp
    else result:=context.orgtyp
    end if;
  end get_orgtyp;



----------------------------------------------------------------------------------------------------
static copy_from (
    _old_operand   : in c_operand) =             -- původní operand, ze kterého se kopírují údaje
-- Zkopíruje údaje z dodaného [_old_operand] do tohoto operandu.
----------------------------------------------------------------------------------------------------
begin
  -- %%TODO(ASSIGN) vzhledem k tomu, že zatím neexistuje přiřazení tříd spolu s ADJUST, tak se to řeší po položkách

  verify({VERIFY=}001080,not _old_operand.dirty);

  -- základní údaje
  optype    :=_old_operand.optype;
  edtype    :=_old_operand.edtype;
  size      :=_old_operand.size;

  -- relokace
  relo_info :=_old_operand.relo_info;

  -- způsob výpočtu run-time atributů
  rta_info:=_old_operand.rta_info;

  case optype
    -- prázdný operand, nemá se co kopírovat
    when io_none do verify({VERIFY=}001256);

    -- přímá hodnota
    when io_imm do
        imm  :=_old_operand.imm;

    -- informace o použitém registru
    when io_reg do
        reg  :=_old_operand.reg;

    -- informace o adrese [base+index*scale+displacement]
    when io_mem do
        base :=_old_operand.base;
        index:=_old_operand.index;
        scale:=_old_operand.scale;
        disp :=_old_operand.disp;

    -- relativní adresa
    when io_rel do
        rel  :=_old_operand.rel;

    -- podmínka
    when io_cc do 
        cc   :=_old_operand.cc;

    -- vrchol stacku
    when io_stack do
        -- není co kopírovat
    end case;

  -- cíl 
  target     :=_old_operand.target;
  disp_target:=_old_operand.disp_target;

  -- přídavné údaje inline assembleru
  spos       :=_old_operand.spos;

  -- interní proměnné
  orgtyp     :=_old_operand.orgtyp;
  orgtyp_set :=_old_operand.orgtyp_set;

  -- operand je odteď použitý
  dirty:=true;
  end copy_from;



----------------------------------------------------------------------------------------------------
static empty =
-- Zneplatní obsah tohoto operandu.
----------------------------------------------------------------------------------------------------
begin
  case optype
    -- prázdný operand
    when io_none do
        -- není co zneplatňovat

    -- přímá hodnota
    when io_imm do
        imm  :=nil;

    -- informace o použitém registru
    when io_reg do
        reg  :=nil;

    -- informace o adrese [base+index*scale+displacement]
    when io_mem do
        base :=nil;
        index:=nil;
        scale:=nil;
        disp :=nil;

    -- relativní adresa
    when io_rel do
        rel  :=nil;

    -- podmínka
    when io_cc do 
        cc   :=nil;

    -- vrchol stacku
    when io_stack do
        -- není co zneplatňovat
    end case;

  -- základní údaje
  optype     :=nil;
  edtype     :=nil;
  size       :=nil;

  -- relokace
  relo_info  :=nil;

  -- způsob výpočtu run-time atributů
  rta_info   :=nil;

  -- cíl 
  target     :=nil;
  disp_target:=nil;

  -- přídavné údaje inline assembleru
  spos       :=nil;

  -- interní proměnné
  orgtyp     :=nil;
  orgtyp_set :=false;
  end empty;



----------------------------------------------------------------------------------------------------
static clone =
-- Naklonuje operand.
----------------------------------------------------------------------------------------------------
begin
  -- %%X Tohle je možná trochu moc natvrdo. Nemělo by se to dělat spíš cestou vytvoření
  -- operandu podle vzoru, místo surového zkopírování a znovupoužití registrů?

  -- zkopírovat operand
  -- %%TODO(ASSIGN) this:=_old_operand;
  copy_from(_old_operand);

  -- znovupoužít všechny registry
  if optype=io_reg then
    i_reg_use(inst,info,context,reg.reg,reg,size);
  elsif optype=io_mem then
    if base.reg<>ir_none then i_reg_use(inst,info,context,base.reg,base,idefregsize); end if;
    if index.reg<>ir_none then i_reg_use(inst,info,context,index.reg,index,idefregsize); end if;
    end if;
  end clone;



----------------------------------------------------------------------------------------------------
static transfer =
-- Převede původní operand [old_operand] do tohoto operandu. Původní operand poté zneplatní, 
-- neuvolní však držené registry a další zdroje, protože ty přecházejí do vlastnictví tohoto 
-- operandu. Původní operand tedy již není třeba uvolňovat.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}000653,dirty);

  -- zkopírovat
  copy_from(_old_operand);

  -- zneplatnit obsah operandu
  _old_operand.empty; 
  end transfer;



----------------------------------------------------------------------------------------------------
static replace =
-- Zruší původní operand a nahradí ho dodaným operandem [old_operand]. Funguje jako kombinace [free]
-- a [transfer] s tím rozdílem, že je povoleno stejný operand použít dvakrát.
----------------------------------------------------------------------------------------------------
begin
  -- uvolnit tento operand
  free(info,context);

  -- dovolit opakované použití
  low_level:=false;
  dirty:=false;

  -- převést údaje z původního operandu
  transfer(_old_operand);
  end replace;



----------------------------------------------------------------------------------------------------
static free =
-- Zruší operand. Pokud používal nějaké registry, uvolní je.
-- Jestliže není [free] explicitně zavoláno, zavolá se automaticky při provedené [exit] operandu.
----------------------------------------------------------------------------------------------------
begin
  -- uvolnit zdroje
  if not low_level then
    case optype 
      -- registr
      when io_reg do
          i_reg_free(info,context,reg);

      -- adresa sestavená z až dvou registrů [base+index*scale+displacement]
      when io_mem do
          if base.reg<>ir_none then i_reg_free(info,context,base) end if;
          if index.reg<>ir_none then i_reg_free(info,context,index) end if;
      
      -- v jiných případech není co uvolňovat
      when others do -- nic nedělat
      end case;
    end if;

  -- zneplatnit obsah operandu
  empty;
  end free;



----------------------------------------------------------------------------------------------------
static retrieve =
-- Převede operand z podřízeného kontextu do nadřazeného.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}001083,not dirty);

  --%%FLEX
  --  i_reg_retrieve: reg, base, index

  -- převést registry z podřízeného kontextu do nadřazeného
  if optype=io_reg then
    declare var
      no_register  : static ioperreg := nil;
    begin
      i_reg_retrieve(inst,info,subcontext,context,reg,no_register);
      end declare;
  elsif optype=io_mem then
    i_reg_retrieve(inst,info,subcontext,context,base,index);
  else
    declare var
      no_register  : static ioperreg := nil;
    begin
      i_reg_retrieve(inst,info,subcontext,context,no_register,no_register);
      end declare;
    end if;
  end retrieve;



----------------------------------------------------------------------------------------------------
static refresh =
-- Aktualizuje jména registrů v operandu.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}001074,not dirty);

  -- aktualizovat jména registrů v operandu
  if optype=io_reg then
    i_reg_refresh(inst,info,context,reg);
  elsif optype=io_mem then
    if base.reg<>ir_none then i_reg_refresh(inst,info,context,base); end if;
    if index.reg<>ir_none then i_reg_refresh(inst,info,context,index); end if;
    end if;
  end refresh;



----------------------------------------------------------------------------------------------------
static adjust_size =
-- Upraví velikost operandu. Je-li operand typu [io_reg], tak vybere i příslušnou velikost registru.
-- Pokud registr nemá tak velkou subčást, způsobí interní chybu.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}001075,not dirty);

  -- změnit velikost operandu
  size:=_size;

  -- pro [io_reg] změnit velikost registru
  if optype=io_reg then
    reg.reg:=i_reg_resize(reg.reg,size);
    end if;
  end adjust_size;



----------------------------------------------------------------------------------------------------
static adjust_edtype =
-- Upraví elementární datový typ operandu.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}001076,not dirty);

  -- změnit elementární datový typ operandu
  edtype:=_edtype;
  end adjust_edtype;



----------------------------------------------------------------------------------------------------
static get_register =
-- Z operandu typu [io_reg] nebo [io_mem] předá ven registr. Pro [io_mem] vrací přednostě bázi.
----------------------------------------------------------------------------------------------------
begin
  case optype
    -- registr
    when io_reg do result:=reg.reg;

    -- adresa - až dva registry na výběr
    when io_mem do
        -- přednostně vrátit bázi; není-li k dispozici žádný registr, nic se neděje
        if base.reg<>ir_none 
          then result:=base.reg
          else result:=index.reg
          end if;
    
    when others do verify({VERIFY=}000647,true);
    end case;
  end get_register;



----------------------------------------------------------------------------------------------------
static get_all_uni_registers =
-- Vrátí množinu univerzálních registrů použitých operandem.
----------------------------------------------------------------------------------------------------
with
  advanced,
  advanced.low_level,
  advanced.low_level.bit_operations;

begin
  verify({VERIFY=}001085,not dirty);

  case optype
    -- registr
    when io_reg do 
        --%%TODO(SET) result:=[iregtouni[reg.reg]];
        if iregtouni[reg.reg]<>in_none then bit_set(result,t_bit_index(iregtouni[reg.reg]:ord)) end if;

    -- adresa - až dva registry na výběr
    when io_mem do
        --%%TODO(SET) if iregtouni[base.reg]<>in_none then result+iuniregset:[iregtouni[base.reg]] end if;
        --%%TODO(SET) if iregtouni[index.reg]<>in_none then result+iuniregset:[iregtouni[index.reg]] end if;
        if iregtouni[base.reg]<>in_none then bit_set(result,t_bit_index(iregtouni[base.reg]:ord)) end if;
        if iregtouni[index.reg]<>in_none then bit_set(result,t_bit_index(iregtouni[index.reg]:ord)) end if;

    -- žádný jiný operand v sobě registr nemá
    when others do -- nic nedělat
    end case;
  
  -- Poznámka: Do výsledné množiny by se neměly dostat registry, které se mapují na [in_none].
  verify({VERIFY=}001064,in_none in result);
  end get_all_uni_registers;



----------------------------------------------------------------------------------------------------
static depends_on =
-- True, jestliže tento operand závisí na dodaném operandu [_other_op]. Závislé operandy se poznají
-- tak, že sdílejí alespoň jeden registr.
----------------------------------------------------------------------------------------------------
begin
  -- Poznámka: Registry, jako například EBP či ESP, které se mapují na [in_none], se do množiny
  -- vypočtené metodou [get_all_uni_registers] jistě nedostanou.
  result:=get_all_uni_registers*_other_op.get_all_uni_registers<>iuniregset:[];
  end depends_on;



----------------------------------------------------------------------------------------------------
static transform_imm_to_rel =
-- Transformuje operand typu [io_imm] na operand typu [io_rel].
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}001077,optype<>io_imm);

  -- změnit typ operandu
  optype:=io_rel;

  -- převzít hodnoty
  rel:=imm;

  -- vypucovat původní hodnoty
  imm:=nil;
  end transform_imm_to_rel;



----------------------------------------------------------------------------------------------------
static transform_imm_to_mem =
-- Transformuje operand typu [io_imm] na operand typu [io_mem].
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}000654,optype<>io_imm);

  -- změnit typ operandu
  optype:=io_mem;
  edtype:=_edtype;
  size:=_size;

  -- z registru sestavit bázi
  disp:=imm;

  -- a přímou hodnotu pro jistotu poslat do háje
  imm:=nil;
  end transform_imm_to_mem;



----------------------------------------------------------------------------------------------------
static transform_reg_to_mem =
-- Transformuje operand typu [io_reg] na operand typu [io_mem]. Registr použije jako bázi.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}000648,optype<>io_reg);

  -- změnit typ operandu
  optype:=io_mem;
  edtype:=_edtype;
  size:=_size;

  -- z registru sestavit bázi
  base:=reg;

  -- a registr pro jistotu poslat do háje
  reg:=nil;
  end transform_reg_to_mem;



----------------------------------------------------------------------------------------------------
static transform_imm_or_reg_to_mem =
-- Transformuje operand typu [io_reg] na operand typu [io_mem]. Registr použije jako bázi.
----------------------------------------------------------------------------------------------------
begin
  case optype
    when io_reg do transform_reg_to_mem(_edtype,_size)
    when io_imm do transform_imm_to_mem(_edtype,_size)
    when others do verify({VERIFY=}000962,true);
    end case;
  end transform_imm_or_reg_to_mem;



----------------------------------------------------------------------------------------------------
static transform_mem_to_imm =
-- Transformuje operand typu [io_mem], který obsahuje pouze displacement a žádné registry, na 
-- operand typu [io_imm]. Velikost výsledného operandu je 4 a typ edt_address, má-li přiřazen 
-- relokabilní objekt, nebo edt_offset v ostatních případech. Z toho plyne, že případné relokace 
-- zůstanou zachovány.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}000651,optype<>io_mem or else base.reg<>ir_none or else index.reg<>ir_none);

  -- zm2nit typ operandu
  optype:=io_imm;
  size:=4;
  if relo_info.rtype<>irt_none
    then edtype:=edt_address
    else edtype:=edt_offset
    end if;

  -- převzít přímou hodnotu
  imm:=disp;

  -- a vypucovat údaje původního operandu
  disp:=nil;
  end transform_mem_to_imm;



----------------------------------------------------------------------------------------------------
static set_imm =
-- Nastaví přímou hodnotu operandu.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}000649,optype<>io_imm);
  imm:=_imm;
  end set_imm;



----------------------------------------------------------------------------------------------------
static set_cc =
-- Nastaví hotnodu podmínky operandu.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}000650,optype<>io_imm);
  cc:=_cc;
  end set_cc;



----------------------------------------------------------------------------------------------------
static set_target =
-- Operandu typu [io_rel] přiřadí návěští cíle.
----------------------------------------------------------------------------------------------------
begin 
  verify({VERIFY=}001078,not dirty);
  this.disp_target:=_target;
  end set_target;



----------------------------------------------------------------------------------------------------
static adjust_relative_address_size = 
-- Pro operand typu [io_rel] upraví velikost adresního pole podle vzdálenosti k cíli.
----------------------------------------------------------------------------------------------------
with
  cg_gen.cg_ia32.ci_code.ci_relo;

var
  addr             : t_unsigned32;               -- cílová adresa

begin
  verify({VERIFY=}001079,not dirty);
 
  -- cílová adresa (pro zjednodušení)
  gettarget(info,disp_target,addr);

  -- máme adresu ?
  if addr<>iunknownaddr

    -- adresa je již známa => zpětný skok
    then
      -- %%X zde se přímo počítá s délkou instrukce, kterou budu teprve přidávat.
      -- nemohlo by to v budoucnu přinést problémy ?

      -- lze to zapakovat na short jump ?
      if addr+127>=inst.c^:length+2

        -- ano
        then
          size:=1;
          rel:=signed_to_imm32(t_signed32(addr)-t_signed32(inst.c^:length+2));

        -- ne, musí to být near jump
        else
          size:=4;
          rel:=signed_to_imm32(t_signed32(addr)-t_signed32(inst.c^:length+5+(_cc<>ic_ucond):ord));
          end if;

      -- cíl skoku již nepotřebujeme
      target:=iunknowntarget;

    -- adresa ještě není známa => dopředný skok
    else
      -- operand
      target:=disp_target;

      -- velikost
      if _cc in icondset:[ic_cxz,ic_ecxz]
        -- výjimka pro (E)CXZ: vždy je to jen short jump
        then size:=1
        -- v ostatních případech zvolíme implicitně near jump
        else size:=4;
        end if;
      end if;
  end adjust_relative_address_size;



----------------------------------------------------------------------------------------------------
static shift_displacement =
-- Přičte k operandu zadaný posuv [disp].
----------------------------------------------------------------------------------------------------
var 
  modtemp   : t_mod_unsigned32;

begin
  verify({VERIFY=}000482,optype<>io_mem);

  -- přičíst posuv
  modtemp:=t_mod_unsigned32(this.disp);
  modtemp+t_mod_unsigned32(signed_to_imm32(_disp)); 
  this.disp:=timm32(modtemp);
  end shift_displacement;



----------------------------------------------------------------------------------------------------
static unshift_displacement =
-- Odečte od operandu zadaný posuv [disp].
----------------------------------------------------------------------------------------------------
var 
  modtemp   : t_mod_unsigned32;

begin
  verify({VERIFY=}000497,optype<>io_mem);

  -- odečíst posuv
  modtemp:=t_mod_unsigned32(this.disp);
  modtemp-t_mod_unsigned32(signed_to_imm32(_disp));
  this.disp:=timm32(modtemp);
  end unshift_displacement;



----------------------------------------------------------------------------------------------------
static shift_by_index =
-- Přičte k adresnímu operandu zadaný posuv [reg]*[scale].
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}000525,optype<>io_mem or else index.reg<>ir_none or else _index not in ir_r32);
  
  -- doplnit indexní registr
  i_reg_use(inst,info,context,_index{iunitoreg[_index,4]},index,4);

  -- doplnit měřítko
  this.scale:=_scale;
  end shift_by_index;



----------------------------------------------------------------------------------------------------
static shift_by_base =
-- Nastaví bázi operandu na registr [_base].
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}000652,optype<>io_mem or else base.reg<>ir_none or else _base not in ir_r32);
  
  -- doplnit bázový registr
  i_reg_use(inst,info,context,_base{iunitoreg[_base,4]},base,4);
  end shift_by_base;



----------------------------------------------------------------------------------------------------
static shift_by_base_or_index =
-- Přičte k adresnímu operandu zadaný posuv [_index], a to ve formě indexního nebo bázového registru
-- podle toho, který je volný. Preferuje bázový registr.
----------------------------------------------------------------------------------------------------
begin
  if base.reg=ir_none
    then shift_by_base(inst,info,context,_index)
    else shift_by_index(inst,info,context,_index,1)
    end if;
  end shift_by_base_or_index;



----------------------------------------------------------------------------------------------------
#template set_relo_body_template (_rtype,data,partition_id);
----------------------------------------------------------------------------------------------------
  verify({VERIFY=}001086,not dirty);
  
  -- vyplnit typ relokace a související entitu
  this.relo_info.rtype:=_rtype;
  data;

  -- vyplnit ID cílové partition podle ID uloženého v odkazované entitě
  this.relo_info.rpartition:=partition_id;
  #end set_relo_body_template;



----------------------------------------------------------------------------------------------------
static set_relo_entity =
-- Přiřadí k operandu relokabilní entitu.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}001384,_entity=nil);
  set_relo_body_template(irt_entity,this.relo_info.rentity:=_entity,_entity^.partition_id);
  end set_relo_entity;



----------------------------------------------------------------------------------------------------
static set_relo_imm =
-- Přiřadí k operandu relokabilní přímou hodnotu (v podobě odpovídajícího uzlu stromu).
----------------------------------------------------------------------------------------------------
with
  cc_def.cc_var;
  
begin
  set_relo_body_template(irt_imm,this.relo_info.rexpr:=_expr,curr_partition);
  end set_relo_imm;



----------------------------------------------------------------------------------------------------
static set_relo_interface =
-- Přiřadí k operandu relokabilní interface třídy reprezentující jeho fake tag.
----------------------------------------------------------------------------------------------------
begin
  set_relo_body_template(irt_interface,this.relo_info.rinterface:=_interface,_interface^.instance.getcentity^.partition_id);
  end set_relo_interface;



----------------------------------------------------------------------------------------------------
static set_relo_section =
-- Přiřadí k operandu relokabilní adresu začátku sekce v image.
----------------------------------------------------------------------------------------------------
with
  cc_def.cc_var;
  
begin
  set_relo_body_template(irt_section,this.relo_info.rsection:=_section,curr_partition);
  end set_relo_section;
  
  

----------------------------------------------------------------------------------------------------
static copy_relo =
-- Zkopíruje informace o relokabilním objektu z dodaného operandu [_old_operand].
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}001089,not dirty);
  relo_info:=_old_operand.relo_info;
  end copy_relo;



----------------------------------------------------------------------------------------------------
static set_rta_mode =
-- Nastaví způsob zjištění zadaného run-time atributu tohoto operandu.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}001090,not dirty);
  rta_info[_rta].mode:=_rta_mode;
  rta_info[_rta].indirection:=_rta_indirection;
  end set_rta_mode;



----------------------------------------------------------------------------------------------------
static set_rta_modes =
-- Dávkově nastaví způsoby zjištění všech run-time atributů tohoto operandu.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}001091,not dirty);
  for rta in rtattrib loop
    set_rta_mode(rta,_rta_modes[rta],_rta_indirection);
    end loop;
  end set_rta_modes;



----------------------------------------------------------------------------------------------------
static create_imm_low_level =
-- Vytvoří nový operand typu [io_imm].
----------------------------------------------------------------------------------------------------
begin
  -- vytvořit operand
  create_imm(_edtype,_size,_imm);

  -- operand byl vytvořen low-level operací
  low_level:=true;
  end create_imm_low_level;



----------------------------------------------------------------------------------------------------
static create_use_register_low_level =
-- Vytvoří nový operand typu [io_reg] a použije dodaný registr, ale nezvýší mu počet použití.
----------------------------------------------------------------------------------------------------
begin
  -- počáteční inicializace nového operandu
  init(io_reg,_edtype,iregsize[_reg]);

  -- naplnit registr
  reg.reg:=_reg;

  -- operand byl vytvořen low-level operací
  low_level:=true;
  end create_use_register_low_level;



----------------------------------------------------------------------------------------------------
static create_memory_address_low_level =
-- Vytvoří nový operand typu [io_mem] s prázdnou bází, indexem i posunutím.
----------------------------------------------------------------------------------------------------
begin
  -- počáteční inicializace nového operandu
  init(io_mem,_edtype,_size);

  -- operand byl vytvořen low-level operací
  low_level:=true;
  end create_memory_address_low_level;



----------------------------------------------------------------------------------------------------
static create_relative_address_low_level =
-- Vytvoří operand typu [io_rel]. Typ operandu automaticky nastaví na [edt_offset].
-- Relativní adresa je implicitně prázdná. Pro nastavení adresy na relokabilní symbol se musí
-- použít [set_target] nebo [set_relo_*].
----------------------------------------------------------------------------------------------------
begin
  -- počáteční inicializace nového operandu
  init(io_rel,edt_offset,_size);

  -- operand byl vytvořen low-level operací
  low_level:=true;
  end create_relative_address_low_level;



----------------------------------------------------------------------------------------------------
static shift_by_base_low_level =
-- Přičte k adresnímu operandu zadanou bázi [_base].
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}000656,optype<>io_mem or else base.reg<>ir_none or else not low_level);
  
  -- doplnit bázový registr
  this.base.reg:=_base;
  end shift_by_base_low_level;



----------------------------------------------------------------------------------------------------
static shift_by_index_low_level =
-- Přičte k adresnímu operandu zadaný posuv [_index]*[_scale].
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}000655,optype<>io_mem or else index.reg<>ir_none or else not low_level);
  
  -- doplnit indexní registr
  this.index.reg:=_index;

  -- doplnit měřítko
  this.scale:=_scale;
  end shift_by_index_low_level;



----------------------------------------------------------------------------------------------------
static base_on_stack_low_level =
-- Bázuje operand vzhledem k frame pointeru.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}001093,optype<>io_mem or else base.reg<>ir_none or else not low_level);

  -- současnou bázi vypucovat a nastavit na frame pointer
  base:=nil;
  base.reg:=istackframereg[inst.frame];
  end base_on_stack_low_level;



----------------------------------------------------------------------------------------------------
static clear_relo_low_level =
-- Zruší relokaci.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}001092,not dirty);
  relo_info:=nil;
  end clear_relo_low_level;



----------------------------------------------------------------------------------------------------
exit =
-- Finalizace.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}000645,optype<>io_none and not low_level);
  end exit;

end c_operand;
