----------------------------------------------------------------------------------------------------
module private cc_text =
-- Překladač Flexu.
-- Čtení zdrojáku.
----------------------------------------------------------------------------------------------------
-- Ondra : 25.04.2000 : Vytvořil
----------------------------------------------------------------------------------------------------

with
#if #declared profiler_lex; #and then; profiler_lex then;
  rdtsc_profile;
#end if;
  standard,
  standard.characters,
  standard.characters.ascii,
  standard.characters.ascii.cp1250,
  standard.characters.ascii.cp895,
  standard.streams,
  standard.console,
  standard.files,
  standard.conversions,
  cc_def.cc_codes,
  cc_def.cc_var,
  cc_lex;


----------------------------------------------------------------------------------------------------
class private c_source_file = 
----------------------------------------------------------------------------------------------------
const
    usize          : t_unsigned = 1024;
    unreadmax      : t_offset = 8;
    readsize       : t_offset = 4;

var
    -- streams
    infile         : aliased c_file_input_stream;
    coder          : aliased c_input_stream_text_recoder;
    dec            : aliased c_character_decoder_utf8;
    sbuffer        : p_input_stream_buffer;
    input          : p_input_stream;

    -- position info
    num            : t_unsigned;                 -- cislo souboru
    eod            : t_logical;                  -- indikator konce souboru
    last_column    : t_unsigned;                 -- delka predchoziho radku
    column         : t_unsigned;                 -- aktualni sloupec
    lines          : t_unsigned;                 -- aktualni radek

    include        : t_logical;                  -- T-je to includovaný soubor
    effective      : t_logical;                  -- T-poslední zpracovávaný řádek byl efektivní
    effective_lines: t_unsigned;

    -- generic packet reader
    packet         : t_data_packet;              -- aktualni packet
    position       : t_offset;                   -- pozice v packetu

    -- unget support
    unreadpos      : t_offset;                   -- zaporna pozice pred packetem
    unreadlen      : t_offset;                   -- delka dat v unread bufferu
    unreadbuff     : aliased array 0..7 of aliased t_data_byte; -- unget buffer



  --------------------------------------------------------------------------------------------------
  static open =
  --------------------------------------------------------------------------------------------------
  var
    f              : p_file;

  begin
    this.include:=include;
    column:=0;
    lines:=1;
    
    -- otevru soubor
    if cfg_sharing 
      then infile.open(name,tfss_shared_read,false);
      else infile.open(name,tfss_not_shared,false);
      end if;

    -- nastavim decoder
    --dec.set_codepage(^cp1250_to_ascii);
    --dec.set_codepage(^cp895_to_ascii);
    coder.init_recoder(^infile,^dec,nil);

    -- rozhodnu se pro buffer
    infile.get_file(f);
    
    if true or f^.get_size<=16_384 then
      input:=^c_input_stream:(coder);
    else
      -- pripojim a spustim buffer
      infile.set_optimal_packet_size(16_384);
      new sbuffer;
      sbuffer^.init_input_buffer(^c_input_stream:(coder));
      input:=^c_input_stream:(sbuffer^);
      end if;

    -- registruju soubor
    used_files^.add_file_name(name,num);

  catch
    when file_error do
        ce^.seterror({CCERR=}000578,ce_f_open);
        ce^.setparam(name);
        ce^.raiseerror;
    end open;



  ------------------------------------------------------------------------------------------------
  static close =
  ------------------------------------------------------------------------------------------------
  begin
    -- uvolnim posledni packet
    discard_packet(packet);

    -- zavru soubor
    input^.close;
    if sbuffer<>nil then
      discard sbuffer;
      end if;
    end close;



  --------------------------------------------------------------------------------------------------
  static ungetchar =
  --------------------------------------------------------------------------------------------------
  begin
    -- zjistuju jestli jsme na zacatku packetu
    if position>=readsize then
      --write('~!');
      position - readsize;
    else
      --if unreadlen<readsize then raise stream_error; end if;
      --if unreadpos>0 then
      --  write('~#');
      --else
      --  write('~%');
      --  end if;
      unreadpos + (readsize-position);
      position:=0;
      end if;

    -- vratim pozici
    eod:=false;
    --if column>0 then
      pred column;
    --else
      --column:=last_column;
      --pred lines;
      --end if;
    end ungetchar;



  ------------------------------------------------------------------------------------------------
  static getchar =
  ------------------------------------------------------------------------------------------------
  var
    _data          : p_data_array;
    readbytes      : t_offset;
    readun         : t_offset;
    name           : p_text_name;             -- jméno otvíraného souboru
    invalidchar    : t_logical;

  begin
    _data:unchecked:=^char;

    -- pokud jsme pred zacatkem packetu
    if unreadpos<>0 then
      if readsize>=unreadpos then
        readun:=unreadpos;
      else
        readun:=readsize;
        end if;
      copy_data(^unreadbuff,unreadlen-unreadpos,_data,readbytes,readun);
      unreadpos - readun;
      readbytes + readun;
      end if;

    -- pokud byl konec dat
    if packet.style=t_dps_signal and then packet.signal=t_dpss_eod then
      --write('~0');
      char:ord:=0;
      eod:=true;
      return;
      end if;

    -- stale jsme nevycetli cely znak
    while (readsize>readbytes) loop
      -- pokud neni platny packet, stahni ho
      if packet.style=t_dps_invalid then
        invalidchar:=false;
        begin
          input^.read_packet(packet,t_ro_default);
        catch 
          when stream_invalid_data do
          invalidchar:=true;
          end;
        --%%TODO move into catch and drop invalidchar bool
        if invalidchar then
          ce^.seterror({CCERR=}000577,ce_illegal_char);
          get_full_name(name);
          ce^.setparam(name^);
          discard name;
          ce^.raiseerror;
          end if;
        --write('~?');
        end if;

      -- pokud neni packet signal
      if packet.style<>t_dps_signal then
        copy_from_packet(packet,position,_data,readbytes,readsize-readbytes);
        if position=packet.size then
          --zapamatuju si posledni byty ze stareho packetu
          if position>=unreadmax then
            readun:=unreadmax;
            unreadlen:=0;
          else
            readun:=position;
            --move
            copy_data(^unreadbuff,readun,^unreadbuff,0,unreadlen-readun);
            unreadlen - readun;
            end if;
          
          position - readun;
          copy_from_packet(packet,position,^unreadbuff,unreadlen,readun);

          -- uvolnim stary packet
          position:=0;
          discard_packet(packet);
          packet:=nil;
          end if;
      -- pokud je packet signal
      else
        -- end of data
        if packet.signal=t_dpss_eod then
          --write('~0');
          char:ord:=0;
          eod:=true;
          return;
        -- cokoliv jineho
        else
          discard_packet(packet);
          packet:=nil;
          end if;
        end if;
      end loop;
      --write_char(t_char32(char));

      -- nastavim pozici
      eod:=false;
      succ column;
    end getchar;

  
  
  ------------------------------------------------------------------------------------------------
  static get_file_name =
  ------------------------------------------------------------------------------------------------
  var
    f              : p_file;

  begin
    infile.get_file(f);
    result:=f^.name;
    end get_file_name;



  ------------------------------------------------------------------------------------------------
  static get_full_name =
  ------------------------------------------------------------------------------------------------
  var
    f              : p_file;

  begin
    infile.get_file(f);
    f^.name.compose_name(name);
    end get_full_name;



  ------------------------------------------------------------------------------------------------
  static is_eof =
  ------------------------------------------------------------------------------------------------
  begin
    result:=eod;
    end is_eof;



  ------------------------------------------------------------------------------------------------
  static next_line =
  ------------------------------------------------------------------------------------------------
  begin
    if effective then
      succ effective_lines;
      end if;
    effective:=false;
    last_column:=column;
    column:=0;
    succ lines;
    end next_line;



  ------------------------------------------------------------------------------------------------
  static get_effective =
  ------------------------------------------------------------------------------------------------
  begin
    result:=effective_lines;
    end get_effective;



  ------------------------------------------------------------------------------------------------
  static get_lines =
  ------------------------------------------------------------------------------------------------
  begin
    result:=lines;
    end get_lines;



  ------------------------------------------------------------------------------------------------
  static get_position =
  ------------------------------------------------------------------------------------------------
  begin
    pos.line:=lines;
    pos.col:=column;
    pos.num:=num;
    end get_position;



  ------------------------------------------------------------------------------------------------
  static get_length =
  ------------------------------------------------------------------------------------------------
  begin
    if pos.line=lines then
      pos.len:=column-pos.col+1;
      end if;
    end get_length;



  ------------------------------------------------------------------------------------------------
  static is_include =
  ------------------------------------------------------------------------------------------------
  begin
    result:=include;
    end is_include;



  ------------------------------------------------------------------------------------------------
  static is_effective =
  ------------------------------------------------------------------------------------------------
  begin
    result:=effective;
    end is_effective;


  ------------------------------------------------------------------------------------------------
  static set_effective =
  ------------------------------------------------------------------------------------------------
  begin
    effective:=true;
    end set_effective;

  
  ------------------------------------------------------------------------------------------------
  static check_meta_statements =
  ------------------------------------------------------------------------------------------------
  begin
    if metastack:length>0 then
      for i in metastack:range loop
        ce^.seterror({CCERR=}000569,ce_meta_no_end);
        ce^.setpos(metastack[i].pos);
        end loop;
      metastack:=nil;
      end if;
    end check_meta_statements;
  end c_source_file;


var
  -- popis [t_open_file_type]
  t_open_file_type_txt : const array t_open_file_type of t_char32str := [
      for oft_separate use 'Separate ',
      for oft_include  use 'Include  ',
      for oft_open     use 'Open     '];

----------------------------------------------------------------------------------------------------
procedure text_open =
-- Otevře nový soubor zadaného jména a umístí ho na vrchol zásobníku otevřených souborů.
----------------------------------------------------------------------------------------------------
use
  supervised c_source_file;

var
  source_file      : p_source_file;
  s                : t_char32str;

begin
  -- vypsat zpávu na výstup
  if cfg_verbosity>=vl_verbose then 
    output^.write(t_open_file_type_txt[open_type]);
    output^.write_line(name);
    end if;

  -- alokovat paměť
  new source_file;

  -- inicializovat
  source_file^.open(name,include);

  -- poznamenat do listingu
  s:='Compiling ' & name; -- %%TODO(RTATTRIB:LAST)
  listing^.write_line(s);
  listing^.start_indent;

  -- zařadit na stack
  source_file^.next:=lex_input;
  lex_input:=source_file;

  -- založit implicitní lexikální analyzátor
  lex_set_default_lexer;

rollback
  -- při chybě poslat do háje
  discard source_file;
  end text_open;



----------------------------------------------------------------------------------------------------
procedure text_close =
-- Zavře soubor na vrcholu zásobníku otevřených souborů a přejde k nadřazenému.
-- Před zavřením zkontroluje ukončení všech blokových metapříkazů v aktuálním souboru.
----------------------------------------------------------------------------------------------------
use
  supervised c_source_file;

var
  source_file      : p_source_file;

begin
  -- konec odsazení v listingu
  listing^.end_indent;

  -- je ukončen podmíněný překlad ?
  lex_input^.check_meta_statements;

  -- zrušit lexikální analyzátor
  lex_pop_default_lexer;

  -- vyjmout ze stacku vrchní soubor
  source_file:=lex_input;
  lex_input:=source_file^.next;

  total_lines + source_file^.get_lines();
  effective_lines + source_file^.get_effective();

  begin
    -- oznámit dokončení překladu tohoto souboru
    if cfg_verbosity>=vl_default then
      output^.write('Compiled  ');
      declare var
        text_name    : p_text_name;                -- plain-text jméno souboru
      begin
        source_file^.get_full_name(text_name);
        output^.write(text_name^);
      leave
        discard text_name;
        end declare;
      output^.write(' (');
      output^.write(unsigned_to_string(source_file^.get_lines));
      output^.write('/');
      output^.write(unsigned_to_string(source_file^.get_effective));
      output^.write_line(')');
      end if;

    source_file^.close;

  leave
    -- uvolnit soubor
    discard source_file;
    end;
  end text_close;
end cc_text;
