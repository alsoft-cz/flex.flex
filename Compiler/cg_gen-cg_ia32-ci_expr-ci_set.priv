----------------------------------------------------------------------------------------------------
module private ci_set =
-- Překladač Flexu.
-- Množinové operace.
----------------------------------------------------------------------------------------------------
-- Ondra : 23.04.2003 : Vytvořil
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure i_gen_op_compare_set =
-- Porovnávání polí (= <>).
----------------------------------------------------------------------------------------------------
begin
  -- množiny lze vždy porovnávat jako binární bloky
  i_gen_op_compare_binary(inst,info,context,expr,vysl);
  end i_gen_op_compare_set;



----------------------------------------------------------------------------------------------------
procedure i_gen_op_set =
-- Množinové operace.
----------------------------------------------------------------------------------------------------
with
  ci_integer;

var
  size             : t_unsigned32;               -- velikost operandů

    ------------------------------------------------------------------------------------------------
    procedure genfunc_or : t_genopfunc =
    -- Generování operace sjednocení.
    ------------------------------------------------------------------------------------------------
    begin
      addii(inst,info,ii_or,op1,op2,op0);
      end genfunc_or;



    ------------------------------------------------------------------------------------------------
    procedure genfunc_andnot : t_genopfunc =
    -- Generování operace rozdílu.
    ------------------------------------------------------------------------------------------------
    begin
      i_gen_simple_op_with_unary(inst,info,context,ii_not,ii_and,op1,op2);
      end genfunc_andnot;



    ------------------------------------------------------------------------------------------------
    procedure genfunc_and : t_genopfunc =
    -- Generování operace průniku.
    ------------------------------------------------------------------------------------------------
    begin
      addii(inst,info,ii_and,op1,op2,op0);
      end genfunc_and;



    ------------------------------------------------------------------------------------------------
    procedure adjust_size (
        expr       : in pexpnode;
        op         : in c_operand) =
    -- Upraví velikost [op] tak, aby odpovídala hodnotě formálně očekávané v instrukcích BTx.
    ------------------------------------------------------------------------------------------------
    begin
      -- přímé hodnoty jsou imm8, ostatní je formálně r/m32
      if expr^.concatkind=nck_component and op.optype=io_imm
      then
        op.adjust_size(1);

      else
        op.adjust_size(4);
        end if;
      end adjust_size;



    ------------------------------------------------------------------------------------------------
    procedure genop (
        op1        : c_operand;
        op2        : c_operand;
        is_component: t_logical) =
    -- Generování vlastní operace.
    ------------------------------------------------------------------------------------------------
    begin
      -- je to připojení komponenty?
      if is_component
        then
          -- BTx formálně vyžaduje pro přímé hodnoty imm8, ostatní je formálně r/m32
          op1.adjust_size(4);
          if op2.optype=io_imm
          then
            op2.adjust_size(1);

          else
            op2.adjust_size(4);
            end if;

          case expr^.oper
            -- vložení do množiny --> BTS
            when op_union do
                --i_gen_simple_op(inst,info,context,ii_bts,op1,op2);
                addii(inst,info,ii_bts,op1,op2,op0);

            -- vyjmutí z množiny --> BTR
            when op_diff  do
                --i_gen_simple_op(inst,info,context,ii_btr,op1,op2);
                addii(inst,info,ii_btr,op1,op2,op0);

            -- průnik
            when op_isect do
                --  BT op1, op2
                --  PUSHF
                --  <fillz>
                --  POPF
                --  JNC @empty
                --  BTS op1, op2
                -- @empty:
                declare var
                  optmp    : c_operand;
                  tg_empty : itarget;

                begin
                  -- zjistit, jestli v množině prvek je
                  addii(inst,info,ii_bt,op1,op2,op0);
                  addii(inst,info,ii_pushf,op0,op0,op0);

                  -- vyprázdnit množinu
                  optmp.clone(inst,info,context,op1);
                  if optmp.optype=io_reg
                    then
                      addii(inst,info,ii_xor,optmp,optmp,op0);

                    else
                      declare var
                        newcontext: iexprcontext;

                      begin
                        -- vyprázdnit pomocí [i_gen_fillz_static] v odděleném kontextu (pro uchování registrů)
                        i_newcontext(context,newcontext,lm_gen,expr^.t.getctype);
                        i_gen_fillz_static(inst,info,newcontext,optmp,size);
                        optmp.retrieve(inst,info,newcontext,context);
                        op1.refresh(inst,info,context);
                        op2.refresh(inst,info,context);
                        end declare;
                      end if;

                  -- pokud tam byl, přidat zpět jako jediný prvek
                  newtarget(info,tg_empty);
                  addii(inst,info,ii_popf,op0,op0,op0);
                  addjump(inst,info,context,ic_nc,tg_empty);
                  addii(inst,info,ii_bts,op1,op2,op0);
                  settarget(info,tg_empty,getaddr(inst));
                leave
                  optmp.free(info,context);
                  end declare;

            when others do
                verify({VERIFY=}001492,true);
            end case;

        else
          case expr^.oper
            -- množinové + --> OR
            when op_union do
                i_gen_simple_op(inst,info,context,ii_or,op1,op2);

            -- množinové - --> AND NOT
            when op_diff  do
                i_gen_simple_op_with_unary(inst,info,context,ii_not,ii_and,op1,op2);

            -- množinové * --> AND
            when op_isect do
                i_gen_simple_op(inst,info,context,ii_and,op1,op2);

            when others do
                verify({VERIFY=}001302,true);
            end case;
          end if;
      end genop;



    ------------------------------------------------------------------------------------------------
    procedure work_small =
    -- Verze pro "malé množiny", tzn. 1>=size>=4.
    ------------------------------------------------------------------------------------------------

      ----------------------------------------------------------------------------------------------
      procedure is_component_present (
          list       : in pexpnode)                -- seznam výrazů
          return t_logical =
      -- Zjistí, zda je v seznamu výrazů nějaká komponenta (nck_component).
      ----------------------------------------------------------------------------------------------
      var
        p            : pexpnode;

      begin
        p:=list;
        -- hledat nck_component
        while p<>nil loop
          if p^.concatkind=nck_component then
            -- nalezeno => konec
            result:=true;
            return;
            end if;

          -- další
          p:=p^.next;
          end loop;

        -- nenalezen žádný nck_component
        result:=false;
        end is_component_present;

    begin
      -- není to speciální případ 3B množiny, nebo nemáme tu nějaké připojení prvku (nck_component) ?
      if size=3 or is_component_present(expr^.sub)
        -- musíme provést specializovaně
        then
          declare var
            el         : pexpnode;               -- levý podvýraz
            er         : pexpnode;               -- pravý podvýraz
            op1        : c_operand;              -- levý operand
            newcontext : iexprcontext;           -- kontext podvýrazů
            vsize      : t_unsigned;             -- "virtuální velikost" -- pro 3B množiny je rovna 4, jinak prostě vsize=size

          begin
            vsize:=size;
            -- "virtuální velikost" pro 3B množiny:
              -- operandy mají sice 3B, ale to nám CPU nesežere, takže budeme počítat ve 4B a ignorovat ten 1B navíc
              -- %%X Tohle teoreticky muze selhat (AV) v pripade, ze ta 3-bajtova mnozina bude ulozena na
              -- poslednich 3 platnych bajtech oblasti pameti (napr. na konci segmentu). Ale kdo by takovou silenost delal??
              -- %%TODO Dodelat i_gen_load_value_to_register (a kvuli tomu i dalsi funkce) tak, aby
              -- umoznoval "korektne" nacist i 3-bajtovou promennou (nejlepe volitelne) pomoci MOV+SHL+MOV.
              -- Tohle je ponekud zaplata.
            if size=3 then
              vsize:=4;
              end if;

            -- rozdělit na podvýrazy
            expr^.get(el,er);

            -- načíst první operand
            if el^.concatkind=nck_component
              then
                i_newcontext(context,newcontext,lm_reg_all,expr^.t.getctype);
                newcontext.rsize:=4;

              else
                i_newcontext(context,newcontext,lm_gen,expr^.t.getctype);
                end if;
            i_load(inst,info,newcontext,context,el,op1);

            -- obnovit registry
            op1.refresh(inst,info,context);

            -- specializovaná finta pro 3B množiny
            if size=3 then
              adjust_size(el,op1);
              end if;

            -- pokud první operand je prvek, vyrobíme z něj množinu tím, že ho použijeme jako 1<<el
            if el^.concatkind=nck_component then
              declare var
                optmp: c_operand;

              begin
                -- (BTS potřebuje 32-bitový registr)
                optmp.create_new_register(inst,info,context,edt_binary,4);

                -- XOR reg,reg
                addii(inst,info,ii_xor,optmp,optmp,op0);

                -- BTS reg,op1
                addii(inst,info,ii_bts,optmp,op1,op0);

                -- nastavit správnou velikost
                optmp.adjust_size(vsize);

                -- dál pracovat s optmp
                op1.replace(info,context,optmp);
              leave
                optmp.free(info,context);
                end declare;

            else
              -- jinak ho načteme do registru
              i_gen_load_value_to_register(inst,info,context,nil,op1,for force_reg use true);
              end if;

            -- zpracovat pravé podvýrazy
            loop
              declare var
                op2  : c_operand;                  -- pravý operand

              begin
                -- vygenerovat a načíst pravý podvýraz
                if er^.concatkind=nck_component
                  then
                    i_newcontext(context,newcontext,lm_reg,expr^.t.getctype);
                    newcontext.rsize:=4;

                  else
                    i_newcontext(context,newcontext,lm_gen,expr^.t.getctype);
                    end if;
                i_load(inst,info,newcontext,context,er,op2);

                -- obnovit registry
                op1.refresh(inst,info,context);
                op2.refresh(inst,info,context);

                -- pro 3B množiny předstírat, že jsou 4-bajtové (přímá složka musí být jednobajtová)
                if size=3 then
                  adjust_size(er,op2);
                  end if;

                -- vygenerovat operaci
                genop(op1,op2,er^.concatkind=nck_component);

              leave
                -- uvolnit pravý operand
                op2.free(info,context);
                end declare;

              -- další operand
              er:=er^.next;
              until er=nil;

            -- uložíme výsledek do dočasné proměnné
            vysl.create_temporary(inst,info,edt_binary,vsize);
            op1.adjust_size(vsize);
            addii(inst,info,ii_mov,vysl,op1,op0);

            -- pokud je to s přiřazením, nakonec zkopírovat
            if expr^.assign then
              -- vygenerovat kód pro zkopírování množiny do prvního operandu
              i_gen_simple_assign(inst,info,context,op1,vysl);
              op1.adjust_size(size);
              end if;

            -- (u trojbajtových množin) zahodíme přebytečný bajt
            vysl.adjust_size(size);
          leave
            -- uvolnit levý operand
            op1.free(info,context);
            end declare;

        else
          -- provést coby integerovou operaci
          i_gen_op_integer(inst,info,context,expr,vysl);
          verify({VERIFY=}000625,vysl.optype not in t_operand_type_set:[io_reg,io_mem]);

          -- množina je agregátní typ, takže se od nás očekává adresa a ne rovnou hodnota
{%%TODO(RTATTRIB)
          -- %%FLEX Tohle se řeší pomocí EDT_BINARY, předělat.
          if vysl.optype=io_reg then
            -- uložit do temporary proměnné
            i_gen_loadtemp(inst,info,context,vysl);
            end if;
}
         end if;
      end work_small;



    ------------------------------------------------------------------------------------------------
    procedure work_block =
    -- Verze pro "velké množiny", tzn. size>4. Obecná bloková operace.
    ------------------------------------------------------------------------------------------------
    var
      el         : pexpnode;                     -- levý podvýraz
      er         : pexpnode;                     -- pravý podvýraz
      op1        : c_operand;                    -- levý operand
      newcontext : iexprcontext;                 -- kontext podvýrazů
      optemp     : c_operand;                    -- dočasný výsledek operace
      first_op   : t_logical;                    -- zpracováváme první dvojici operandů?
      genopfunc  : p_genopfunc;                  -- funkce pro vygenerování příslušné operace
      reservedregs: t_unsigned32;                -- počet potřebných registrů pro [genopfunc]

    begin
      -- rozdělit na podvýrazy
      expr^.get(el,er);

      -- operace
      case expr^.oper
        -- množinové + --> OR
        when op_union do
            genopfunc:=^genfunc_or;

        -- množinové - --> AND NOT
        when op_diff  do
            genopfunc:=^genfunc_andnot;

        -- množinové * --> AND
        when op_isect do
            genopfunc:=^genfunc_and;

        when others do
            verify({VERIFY=}001313,true);
        end case;

      -- levý operand
      i_newcontext(context,newcontext,lm_addr,expr^.t.getctype);
      i_load(inst,info,newcontext,context,el,op1);

      -- obnovit registry
      op1.refresh(inst,info,context);

      -- pracujeme s operandem v paměti
      op1.transform_imm_or_reg_to_mem(edt_binary,4{size});
      first_op:=true;
      i_gen_reduceop(inst,info,context,op1);

      -- připravit místo pro výsledek
      optemp.create_temporary(inst,info,edt_binary,size);

      -- pro op_diff s pamětí budeme při blokové operaci potřebovat dodatečný registr
      if expr^.oper=op_diff then
        -- a pokud je první příkaz navíc komponenta, potřebujeme ještě jeden registr navíc
        if el^.concatkind=nck_component
          then reservedregs:=2;
          else reservedregs:=1;
          end if;
        end if;

      loop
        declare var
          op_left    : c_operand;          -- aktuální levý operand (op1 nebo mezivýsledek)
          op2        : c_operand;          -- operand 2

        begin
          -- levý operand -- buď první operand, nebo mezivýsledek
          if first_op
            then
              -- je prvním operandem komponenta?
              if el^.concatkind=nck_component
                -- ano=>musíme nejprve z operandu vyrobit dočasnou proměnnou
                then
                  {declare var
                    optmp : c_operand;

                  begin
                    -- prázdná množina
                    optmp.clone(inst,info,context,optemp);}
                    i_gen_fillz_static(inst,info,context,optemp,size);
                  {leave
                    optmp.free(info,context);
                    end declare;}

                  -- plus daná komponenta:
                  -- dostanem ji do 32-bitového registru
                  i_newcontext(context,newcontext,lm_reg_all,el^.t.getctype);
                  newcontext.rsize:=4;
                  i_load(inst,info,newcontext,context,el,op2);

                  -- obnovit registry
                  optemp.refresh(inst,info,context);
                  op2.refresh(inst,info,context);

                  -- BTS formálně vyžaduje r/m32
                  optemp.adjust_size(4);

                  -- vložit prvek do dočasné proměnné
                  addii(inst,info,ii_bts,optemp,op2,op0);

                  -- dál pracujeme s dočasnou proměnnou
                  op_left.clone(inst,info,context,optemp);

                -- a není pravý operand komponenta?
                elsif er^.concatkind=nck_component then
                  -- ano, pak ovšem musíme levý operand přesunout do dočasné proměnné, abychom ho nezničili
                  declare var
                    optmp : c_operand;

                  begin
                    -- levý operand
                    i_newcontext(context,newcontext,lm_gen,el^.t.getctype);
                    i_load(inst,info,newcontext,context,el,op2);

                    -- přesunout do dočasné proměnné
                    --i_newcontext(context,newcontext,lm_gen,el^.t.getctype);
                    optmp.clone(inst,info,{new}context,optemp);
                    i_gen_move_static(inst,info,{new}context,op2,optmp,size);
                    op2.retrieve(inst,info,newcontext,context);
                    op1.refresh(inst,info,context);
                    optmp.refresh(inst,info,context);
                    optemp.refresh(inst,info,context);
                  leave
                    optmp.free(info,context);
                    end declare;

                  -- a dočasná proměnná se bude používat jako levý operand
                  op_left.clone(inst,info,context,optemp);

                -- ne=>oba operandy jsou množiny=>můžeme první operand použít rovnou
                else
                  op_left.clone(inst,info,context,op1);
                  end if;

              first_op:=false;

            else
              -- k-tý operand, levým operandem je dočasná proměnná
              op_left.clone(inst,info,context,optemp);
              end if;

          -- je aktuální operand množina, nebo prvek?
          if er^.concatkind=nck_component
            -- prvek
            then
              -- pravý operand (potřebujeme ho dostat do 32-bitového registru pro BTx [mem], r32)
              i_newcontext(context,newcontext,lm_reg_all,er^.t.getctype);
              newcontext.rsize:=4;
              i_load(inst,info,newcontext,context,er,op2);

              -- obnovit registry
              op_left.refresh(inst,info,context);
              op2.refresh(inst,info,context);
              optemp.refresh(inst,info,context);

              -- příslušná operace s komponentou
              genop(op_left,op2,true);

            -- množina
            else
              -- pravý operand
              i_newcontext(context,newcontext,lm_addr,expr^.t.getctype);
              i_load(inst,info,newcontext,context,er,op2);

              -- obnovit registry
              op_left.refresh(inst,info,context);
              op2.refresh(inst,info,context);
              optemp.refresh(inst,info,context);

              -- i s operandem 2 pracujeme v paměti
              op2.transform_imm_or_reg_to_mem(edt_binary,4);
              i_gen_reduceop(inst,info,context,op2);

              -- bloková operace
              i_gen_block_op(inst,info,context,op_left,op2,optemp,size,genopfunc,reservedregs);
              end if;

        leave
          -- uvolnit operandy
          op_left.free(info,context);
          op2.free(info,context);
          end declare;

        -- další pravý operand
        er:=er^.next;
        until er=nil;

      -- předat výsledek
      vysl.transfer(optemp);

      -- pokud je to s přiřazením, nakonec zkopírovat
      if expr^.assign then
        -- vygenerovat kód pro zkopírování množiny do prvního operandu
        i_gen_move_static(inst,info,context,vysl,op1,size);
        end if;
    leave
      -- uvolnit levý operand
      op1.free(info,context);
      end work_block;


begin
  -- zjistit velikost operandů
  size:=value_size_from_expr(expr);

  -- je to vhodná velikost?
  if {size=1 or size=2 or size=4{%%TODO(SET) size in [1,2,4]}} size<=4
    -- příznivá velikost => optimalizovaná verze celočíselnou aritmetikou
    then work_small;

    -- nepříznivá velikost => složitě (obecná bloková operace)
    else work_block;
    end if;
  end i_gen_op_set;



----------------------------------------------------------------------------------------------------
procedure i_gen_op_in_set =
-- Test náležení do množiny.
----------------------------------------------------------------------------------------------------
var
  el               : pexpnode;                   -- levý podvýraz
  er               : pexpnode;                   -- pravý podvýraz
  op1              : c_operand;                  -- operand 1
  op2              : c_operand;                  -- operand 2
  newcontext       : iexprcontext;               -- kontext podvýrazů
  pbase            : pentity_type;               -- typ báze množiny
  lval             : timm32;                     -- dolní mez báze množiny

begin
  -- podvýrazy
  expr^.get(el,er);

  -- bude potřeba typ báze množiny
  pbase:=er^.t.getctype^.base.getctype;

  -- dolní mez báze množiny
  lval:=uniint_to_imm32(pbase^.lval);

  -- načíst testovanou hodnotu do registru
  -- %%X Zde jsem záměrně nepředal očekávaný typ výrazu i když je režim
  -- generování LM_REG. Nikde jinde se to takhle nedělá, ale já potřebuji,
  -- aby byl výsledek 32-bitový (aby správně fungovalo BT). Nemělo by se
  -- to dělat nějak jinak (například dodatečně registr rozšířit) ?
  i_newcontext(context,newcontext,lm_reg,nil{pbase});
  i_load(inst,info,newcontext,context,el,op1);

  -- načíst množinu (pravý operand)
  i_newcontext(context,newcontext,lm_gen,er^.t.getctype);
  i_load(inst,info,newcontext,context,er,op2);

  -- obnovit registry
  op1.refresh(inst,info,context);
  op2.refresh(inst,info,context);

  -- co je pravý operand zač
  case op2.optype

    -- registr
    when io_reg do
       -- rozhodně ho převést na 32 bitů
       op2.adjust_size(4);

       -- a co levý operand ?
       case op1.optype

         -- přímá hodnota
         when io_imm do
             -- odečíst dolní mez báze množiny
             op1.set_imm(op1.imm-lval);

             -- hodnota je jistě 8-mi bitová v rozsahu 0..31
             verify({VERIFY=}000434,op1.imm>31);
             op1.adjust_size(1);

             -- BT <registr>,<přímá hodnota>
             addii(inst,info,ii_bt,op2,op1,op0);

         -- registr
         when io_reg do
             -- převést i druhý operand na 32 bitů
             op1.adjust_size(4);

             -- odečíst dolní mez
             if lval<>timm32(0) then
               declare var
                 optemp : c_operand;
               begin
                 optemp.create_imm(edt_unsigned,0,lval);
                 addii(inst,info,ii_sub,op1,optemp,op0);
               leave
                 optemp.free(info,context);
                 end declare;
               end if;

             -- BT <registr>,<registr>
             addii(inst,info,ii_bt,op2,op1,op0);

         when others do verify({VERIFY=}000431,true);
         end case;

    -- paměť
    when io_mem do
       declare var
         size      : t_unsigned;                 -- velikost množiny pro zjednodušení
       begin
         size:=value_size_from_expr(er);

         -- a co levý operand ?
         case op1.optype
           -- přímá hodnota
           when io_imm do
               declare var
                 bitsize : t_unsigned;           -- velikost množiny v bitech směrem dolů zarovnaná na 32 bitů
               begin  
                 -- odečíst dolní mez báze množiny
                 op1.set_imm(op1.imm-lval);

                 -- vypočítat velikost množiny v bitech směrem dolů zarovnanou na 32 bitů
                 bitsize:=(op2.size div 4)*32;

                 -- množina má 1, 2 nebo 3 byty
                 if op2.size<4 then
                   declare var
                     optemp : c_operand;
                   begin
                     -- potřebujeme pracovní registr
                     optemp.create_new_register(inst,info,context,edt_binary,4);

                     -- 3 byty
                     if op2.size=3 then
                       -- načíst horní byte
                       op2.shift_displacement(2);
                       op2.adjust_size(1);
                       addii(inst,info,ii_movzx,optemp,op2,op0);
                       addii(inst,info,ii_shl,optemp,op_16,op0);

                       -- načíst dolní dva byty
                       op2.unshift_displacement(2);
                       op2.adjust_size(2);
                       optemp.adjust_size(2);
                       addii(inst,info,ii_mov,optemp,op2,op0);
                       optemp.adjust_size(4);

                     -- 1 nebo 2 byty
                     else
                       -- načíst dolní dva byty
                       addii(inst,info,ii_movzx,optemp,op2,op0);
                       end if;

                     -- uvolnit původní operand a nahradit ho pracovním operandem
                     op2.replace(info,context,optemp);

                   leave
                     -- uvolnit pracovní operand
                     optemp.free(info,context);
                     end declare;

                 -- index spadá pod hranici 32bitově zaokrouhlené velikosti množiny
                 elsif op1.imm<bitsize then
                   -- vypočítat offset do množiny
                   op2.shift_displacement(imm32_to_signed({%%TODO(MOD)}timm32(t_mod_unsigned32(op1.imm) shr 5)));
                                          --%%X Ta konverze na SIGNED je dost divná. DISP je přeci
                                          -- taky TIMM32, tak proč nejde shiftnout o jinou TIMM32?

                   -- z čísla bitu nás od teď zajímá jen spodních 5 bitů
                   op1.set_imm({%%TODO(MOD)}timm32(t_mod_unsigned32(op1.imm) and 2$1_1111));

                   -- z celé množiny nás nyní zajímají jen čtyři byty
                   op2.adjust_size(4);

                 -- index spadá nad hranici 32bitově zaokrouhlené velikosti množiny
                 elsif op1.imm>=bitsize then
                   verify({VERIFY=}000495,op2.size<4);

                   -- vypočítat číslo bitu v rámci posledních čtyř bytů
                   op1.set_imm(op1.imm-unsigned_to_imm32(op2.size-4)*timm32(8));

                   -- vypočítat offset na poslední čtyři byty množiny
                   op2.shift_displacement(t_signed(op2.size-4));

                   -- z celé množiny nás nyní zajímají jen čtyři byty
                   op2.adjust_size(4);

                 -- jiný případ by neměl nastat
                 else
                   verify({VERIFY=}000496,true);
                   end if;

                 -- číslo bitu je teď 8-mi bitové mezi 0..31
                 op1.adjust_size(1);

                 -- BT <paměť>,<přímá hodnota>
                 addii(inst,info,ii_bt,op2,op1,op0);
                 end declare;

           -- registr
           when io_reg do
               -- procesor přistupuje k paměti po 32bitových slovech,
               -- takže musíme opravit velikost operandu
               -- if op2.size mod 4<>0 then u_nimplemented(134);

               -- převést i druhý operand na 32 bitů
               op1.adjust_size(4);

               -- odečíst dolní mez
               if lval<>timm32(0) then
                 declare var
                   optemp : c_operand;
                 begin
                   optemp.create_imm(edt_unsigned,0,lval);
                   addii(inst,info,ii_sub,op1,optemp,op0);
                 leave
                   optemp.free(info,context);
                   end declare;
                 end if;

               -- instrukce BT akceptuje jen 32bitové operandy, i když pracuje s libovolně dlouhými
               op2.adjust_size(4);

               -- %%X Následující instrukce může obecně způsobit Access Violation, pokud
               -- bude konec množiny, jejíž velikost nebude násobkech 4, ležet na hranici
               -- stránky. Správně by měla zavolat nějaká RTL funkce, která provede stejný
               -- rozhodovací proces jako v předchozí variantě OP1.OPTYPE=IO_IMM.

               -- BT <paměť>,<registr>
               addii(inst,info,ii_bt,op2,op1,op0);

           when others do verify({VERIFY=}000798,true);
           end case;
        end declare;

    when others do verify({VERIFY=}000430,true);
    end case;

  -- výsledek
  if expr^.oper=op_notin
    then vysl.create_condition(ic_nc);
    else vysl.create_condition(ic_c);
    end if;

leave
  -- uvolnit operandy
  op1.free(info,context);
  op2.free(info,context);
  end i_gen_op_in_set;



end ci_set;
