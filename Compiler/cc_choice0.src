----- %%TECH Práce se seznamem výběrů --------------------------------------------------------------
-- Vzhledek k tomu, že Delphi neumí textové substituce, musí být práce se
-- seznamem výběrů řešena jako $INCLUDE a jednotlivé varianty algoritmu se
-- volí pomocí direktiv:
--    CC_CHOICE_CASE    - varianty v CASE
--    CC_CHOICE_ARRAY   - agregát pole/řetězce
--    CC_CHOICE_SET     - agregát množiny
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure issue_duplicates_warning (
    context        : in tcontext;                -- aktuální kontext
    choice         : in pexpnode) =              -- souvisejicí výběr (nil pro neznámý)
-- Pomocná procedura; vyvolá varování "Duplicate choice".
----------------------------------------------------------------------------------------------------
begin
  ce^.setwarning(context,{CCERR=}000001,cw_duplicate_choice);
  -- %%TODO Zobrazovat, který výběr je duplicitní; ce^.setparam(...);
  if choice<>nil then
    choice^.errpos;
    end if;
  end issue_duplicates_warning;



----------------------------------------------------------------------------------------------------
procedure choice_cardinality =
-- Spočítá počet prvků v daném seznamu intervalů.
-- Např. {<3;5>,<10;15>} má kardinalitu 9
----------------------------------------------------------------------------------------------------
begin
  -- speciální případ: prázdný seznam
  if clist.list=nil then
    return;
    end if;

  -- sčítej postupně velikosti jednotlivých intervalů
  for i in clist.list^:range loop
    result + (clist.list^[i].hval-clist.list^[i].lval+ui_1);
    end loop;
  end choice_cardinality;



----------------------------------------------------------------------------------------------------
procedure choice_range_is_in =
-- Zjistí, jestli interval <lval;hval> je obsažen v zadaném seznamu.
-- Pokud je interval prázdný (<7;3>), vrací true.
----------------------------------------------------------------------------------------------------
var
    i              : t_unsigned;
    l              : tuniint;

begin
  -- speciální případ: prázdný interval typu <7;3> je obsažen v každé množině
  if lval>hval then
    result:=true;
    return;
    end if;

  -- speciální případ: prázdný seznam výběrů: žádný neprázdný interval uvnitř není
  if clist.list=nil then 
    return;
    end if;

  -- najít první interval
  i:=clist.list^:first;
  while i<=clist.list^:last and then clist.list^[i].hval<lval loop
    succ i;
    end loop;

  -- odteď musí být navazující intervaly až do [rval]
  l:=lval;
  while l<=hval and i<=clist.list^:last loop
    if clist.list^[i].lval>l then
      -- díra mezi aktuálním [l] a [clist.list^[i].lval] => neobsahuje
      result:=false;
      return;
      end if;

    -- posuň se až za konec tohoto intervalu
    l:=clist.list^[i].hval+ui_1;
    succ i;
    end loop;

  -- nalezli jsme celý požadovaný interval?
  result:=l>hval;
  end choice_range_is_in;



----------------------------------------------------------------------------------------------------
procedure choice_extend =
-- Rozšíří CLIST o COUNT položek (pokud je to potřeba).                       
----------------------------------------------------------------------------------------------------
var
  _list            : clist.list:type;

begin
  if clist.list=nil then
    new clist.list range count;
    c_garbage_collector.get_instance^.register_memblock(clist.list);

  elsif clist.list^:length+count>clist.list^:last then
    --%%TODO(ADJUST) adjust clist.list range clist.list^:length+count;
    new _list range clist.list^:length+count;
    c_garbage_collector.get_instance^.register_memblock(_list);

    _list^:=clist.list^;

    c_garbage_collector.get_instance^.unregister_memblock(clist.list);
    discard clist.list;
    clist.list:=_list;
    end if;
  end choice_extend;



----------------------------------------------------------------------------------------------------
procedure choice_add_single =
-- Vloží do seznamu optimalizovaných výběrů jednu hodnotu.                    
----------------------------------------------------------------------------------------------------
use
  advanced,
  advanced.low_level,
  advanced.low_level.unchecked_memory_access;

var
  ui1      : tuniint;
  ui2      : tuniint;
  i        : t_unsigned;
  _x       : clist.list^:base;

    ------------------------------------------------------------------------------------------------
    procedure prepend_clist =
    -- %%TODO(CONCAT) Na začátek řetězce CLIST vloží prvek _X.
    ------------------------------------------------------------------------------------------------
    begin
      succ clist.list^:length;
      for i in reverse clist.list^:first..clist.list^:last-1 loop
        clist.list^[i+1]:=clist.list^[i];
        end loop;
      clist.list^[1]:=_x;
      end prepend_clist;

begin
  -- úplně první hodnota 
  if clist.list=nil or else clist.list^:length=0 then
    -- realokovat paměť 
    choice_extend(clist,1);

    -- přidat jako první prvek %%TODO(AGGREGATE)
    _x.lval:=ui;
    _x.hval:=ui;
  #if cc_choice=CC_CHOICE_ARRAY then;
    _x.val:=imm;
  #end if;
    clist.list^ & _x;

  -- před prvním intervalem (ostře menší) 
  elsif ui<clist.list^[1].lval then
  #if cc_choice<>cc_choice_array then;
    -- vypočítat [1].LVAL-1 
    ui1:=clist.list^[1].lval-ui_1;

    if ui1=ui

      -- těsně před prvním intervalem => prodloužit interval 
      then
        clist.list^[1].lval:=ui;

      -- jinak přidat další interval 
      else #end if;
        -- realokovat paměť 
        choice_extend(clist,1);

        -- přidat jako první %%TODO(AGGREGATE) 
        _x.lval:=ui;
        _x.hval:=ui;
      #if cc_choice=cc_choice_array then;
        _x.val:=imm;
      #end if;
        prepend_clist; --%%TODO(CONCAT) clist.list^:=_x & clist.list^;
      #if cc_choice<>cc_choice_array then;
        end if;
      #end if;

  -- za posledním intervalem (ostře větší) 
  elsif ui>clist.list^[clist.list^:length].hval then
  #if cc_choice<>cc_choice_array then;
    -- vypočítat [last].HVAL+1 
    ui1:=clist.list^[clist.list^:length].hval+ui_1;

    if ui1=ui

      -- těsně za posledním intervalem => prodloužit 
      then
        clist.list^[clist.list^:length].hval:=ui;

      -- jinak přidat další interval 
      else #end if;
        -- realokovat paměť 
        choice_extend(clist,1);

        -- přidat jako poslední %%TODO(AGGREGATE) 
        _x.lval:=ui;
        _x.hval:=ui;
      #if cc_choice=cc_choice_array then;
        _x.val:=imm;
      #end if;
        clist.list^ & _x;
      #if cc_choice<>cc_choice_array then;
        end if;
      #end if;

  -- někde mezi
  else
    -- přidávaná hodnota patří do některého z již existujících intervalů
    -- nebo mezi některé dva existující intervaly
    i:=1;
    loop
      -- spadá do tohoto intervalu ?
      if ui>=clist.list^[i].lval and ui<=clist.list^[i].hval then
        -- ohlásit varování
        if warn_duplicate then
          issue_duplicates_warning(context,choice);
          end if;

        -- a konec
        break;

      -- teď je hodnota jistě nad horní mezí (jinak by se zpracovala
      -- v minulé iteraci) a jistě to není poslední interval (jinak by se
      -- zpracovala jako výjima ještě před touto větví IF), takže stačí
      -- testovat proti dolní mezi následujícího intervalu, jestli neleží
      -- mezi I-tým a I+1-ním intervalem.
      elsif ui<clist.list^[i+1].lval then
      #if cc_choice<>cc_choice_array then;
        -- vypočítat [I].HVAL+1 a [I+1].LVAL-1
        ui1:=clist.list^[i].hval+ui_1;
        ui2:=clist.list^[i+1].lval-ui_1;

        -- vyplňuje přesně mezeru mezi intervaly I a I+1 ?
        if ui1=ui2 then
          -- sloučit I-tý a I+1-ní interval %%TODO(SLICE)
          clist.list^[i].hval:=clist.list^[i+1].hval;
          advanced.low_level.unchecked_memory_access.memory_copy(clist.list^[i+2],clist.list^[i+1],(clist.list^:length-(i+1))*clist.list^[1]:size);
          pred clist.list^:length;

        -- je těsně nad horní mezí I-tého intervalu ?
        elsif ui1=ui then
          -- prodloužit I-tý interval
          clist.list^[i].hval:=ui;

        -- je těsně pod dolní mezí I+1-ního intervalu ?
        elsif ui2=ui then
          -- prodloužit I+1-ní interval
          clist.list^[i+1].lval:=ui;

        -- žádná příznivá situace, musíme přidat interval
        else #end if;
          -- realokovat paměť
          choice_extend(clist,1);

          -- posunout %%TODO(SLICE)
          advanced.low_level.unchecked_memory_access.memory_copy(clist.list^[i+1],clist.list^[i+2],(clist.list^:length-i)*clist.list^[1]:size);
          succ clist.list^:length;

          -- vložit na místo I+1-ního výběru
          clist.list^[i+1].lval:=ui;
          clist.list^[i+1].hval:=ui;
        #if cc_choice=cc_choice_array then;
          clist.list^[i+1].val:=imm;
        #else;
          end if;
        #end if;

        -- a konec 
        break;
        end if;

      -- další interval 
      succ i;
      end loop;
    end if;
  end choice_add_single;



----------------------------------------------------------------------------------------------------
procedure choice_add_range =
-- Vloží do seznamu optimalizovaných výběrů rozsah hodnot.                    
----------------------------------------------------------------------------------------------------
use
  advanced,
  advanced.low_level,
  advanced.low_level.unchecked_memory_access;

    ------------------------------------------------------------------------------------------------
    procedure delint (
        a          : in t_unsigned;              -- dolní index posloupnosti rušených intervalů
        b          : in t_unsigned) =            -- horní index posloupnosti rušených intervalů
    -- Zruší intervaly v rozsahu A..B.
    ------------------------------------------------------------------------------------------------
    begin
      -- %%TODO(SLICE) 
      advanced.low_level.unchecked_memory_access.memory_copy(clist.list^[b+1],clist.list^[a],(clist.list^:length-b)*clist.list^[1]:size);
      clist.list^:length-(b-a+1);
      end delint;

type
  -- pozice meze přidávaného intervalu vůči existujícím intervalům
  tboundarypos     = enum
      tbp_between;                               -- mezi dvěma intervaly
      tbp_inside;                                -- uvnitř intervalu
      tbp_attached;                              -- těsně u intervalu
      end enum;
  tboundaryposset  = set of tboundarypos;

var
  ui1              : tuniint;
  ui2              : tuniint;
  i                : t_unsigned;
  j                : t_unsigned;
  lval_pos         : tboundarypos;               -- pozice dolní meze vůči existujícím int.
  hval_pos         : tboundarypos;               -- pozice horní meze vůči existujícím int.
  _x               : clist.list^:base;

    ------------------------------------------------------------------------------------------------
    procedure prepend_clist =
    -- %%TODO(CONCAT) Na začátek řetězce CLIST vloží prvek _X.
    ------------------------------------------------------------------------------------------------
    begin
      succ clist.list^:length;
      for i in reverse clist.list^:first..clist.list^:last-1 loop
        clist.list^[i+1]:=clist.list^[i];
        end loop;
      clist.list^[1]:=_x;
      end prepend_clist;

begin
  -- úplně první hodnota 
  if clist.list=nil or else clist.list^:length=0 then
    -- realokovat paměť 
    choice_extend(clist,1);

    -- přidat jako první prvek 
    _x.lval:=lval;
    _x.hval:=hval;
  #if cc_choice=cc_choice_array then;
    _x.val:=imm;
  #end if;
    clist.list^ & _x;

  -- před prvním intervalem (ostře menší) 
  elsif hval<clist.list^[1].lval then
  #if cc_choice<>cc_choice_array then;
    -- vypočítat [1].LVAL-1 
    ui1:=clist.list^[1].lval-ui_1;

    if ui1=hval

      -- těsně před prvním intervalem => prodloužit 
      then
        clist.list^[1].lval:=lval;

      -- jinak přidat další interval 
      else #end if;
        -- realokovat paměť 
        choice_extend(clist,1);

        -- přidat jako první %%TODO(AGGREGATE) 
        _x.lval:=lval;
        _x.hval:=hval;
      #if cc_choice=cc_choice_array then;
        _x.val:=imm;
      #end if;
        prepend_clist; --%%TODO(CONCAT) clist.list^:=_x & clist.list^;
      #if cc_choice<>cc_choice_array then;
        end if;
      #end if;

  -- za posledním intervalem (ostře větší) 
  elsif lval>clist.list^[clist.list^:length].hval then
  #if cc_choice<>cc_choice_array then;
    -- vypočítat [last].HVAL+1 
    ui1:=clist.list^[clist.list^:length].hval+ui_1;

    if ui1=lval

      -- těsně za posledním intervalem => prodloužit 
      then
        clist.list^[clist.list^:length].hval:=hval;

      -- jinak přidat další interval 
      else #end if; 
        -- realokovat paměť 
        choice_extend(clist,1);

        -- přidat jako poslední %%TODO(AGGREGATE) 
        _x.lval:=lval;
        _x.hval:=hval;
      #if cc_choice=cc_choice_array then;
        _x.val:=imm;
      #end if;
        clist.list^ & _x;
      #if cc_choice<>cc_choice_array then;
        end if;
      #end if;

  -- někde mezi
  else
  #if cc_choice=cc_choice_array then;
    unimplemented({UNIMP=}000131);
  #else;
    -- zjistit, kde leží dolní mez přidávaného intervalu
    i:=1;
    ui1:=lval-ui_1;
    loop
      -- leží před tímto intervalem
      if lval<clist.list^[i].lval then
        lval_pos:=tbp_between;
        break;

      -- leží v tomto intervalu
      elsif lval<=clist.list^[i].hval then
        lval_pos:=tbp_inside;
        break;

      -- leží těsně za tímto intervalem
      elsif ui1=clist.list^[i].hval then
        lval_pos:=tbp_attached;
        break;
        end if;

      -- další interval
      succ i;
      verify({VERIFY=}000533,i>clist.list^:length);
      end loop;

    -- zjistit, kde leží horní mez přidávaného intervalu
    j:=clist.list^:length;
    ui1:=hval+ui_1;
    loop
      -- leží za tímto intervalem
      if hval>clist.list^[j].hval then
        hval_pos:=tbp_between;
        break;

      -- leží v tomto intervalu
      elsif hval>=clist.list^[j].lval then
        hval_pos:=tbp_inside;
        break;

      -- leží těsně před tímto intervalem
      elsif ui1=clist.list^[j].lval then
        hval_pos:=tbp_attached;
        break;
        end if;

      -- další interval
      pred j;
      verify({VERIFY=}000534,j=0);
      end loop;

    -- každá mez intervalu leží v nějakém jiném intervalu
    if (lval_pos=tbp_inside) and (hval_pos=tbp_inside) then
      -- zahrnuje více intervalů ?
      if j>i then
        -- horní mez J-tého intervalu převzít do I-tého
        clist.list^[i].hval:=clist.list^[j].hval;

        -- zrušit (I+1)-ní až J-tý interval
        delint(i+1,j);
        end if;

    -- každá mez leží těsně vedle jiného intervalu
    elsif ((lval_pos=tbp_attached) and (hval_pos=tbp_attached))
    -- nebo levá leží těsně vedle a pravá uvnitř
    or ((lval_pos=tbp_attached) and (hval_pos=tbp_inside))
    -- nebo pravá leží těsně vedle a levá uvnitř
    or ((lval_pos=tbp_inside) and (hval_pos=tbp_attached))
    then
      -- horní mez J-tého intervalu převzít do I-tého
      clist.list^[i].hval:=clist.list^[j].hval;

      -- zrušit (I+1)-ní až J-tý interval
      delint(i+1,j);

      -- varovat, že máme duplicity
      if warn_duplicate then
        issue_duplicates_warning(context, choice);
        end if;

    -- celý interval spadá mezi dva intervaly
    elsif (lval_pos=tbp_between) and (hval_pos=tbp_between) and (i=j+1) then
      -- realokovat paměť
      choice_extend(clist,1);

      -- udělat místo v první položce
      advanced.low_level.unchecked_memory_access.memory_copy(clist.list^[i],clist.list^[i+1],(clist.list^:length-i+1)*clist.list^[1]:size);
      succ clist.list^:length;

      -- přidat interval
      clist.list^[i].lval:=lval;
      clist.list^[i].hval:=hval;

    -- celý interval obklopuje jeden či více intervalů
    elsif (lval_pos=tbp_between) and (hval_pos=tbp_between) and (i<=j) then
      -- prodloužit interval            
      clist.list^[i].lval:=lval;
      clist.list^[i].hval:=hval;

      -- zrušit (I+1)-ní až J-tý interval
      if i<j then
        delint(i+1,j);
        end if;

      -- varovat, že máme duplicity
      if warn_duplicate then
        issue_duplicates_warning(context, choice);
        end if;

    -- levá mez leží těsně za či uvnitř intervalu, pravá mezi
    elsif (lval_pos in tboundaryposset:[tbp_inside,tbp_attached]) and (hval_pos=tbp_between) then
      -- prodloužit I-tý interval
      clist.list^[i].hval:=hval;

      -- zrušit (I+1)-ní až J-tý interval
      if j>i then
        delint(i+1,j);
        end if;

      -- varovat o případných duplicitách
      if lval_pos=tbp_inside or j>i then
        if warn_duplicate then
          issue_duplicates_warning(context, choice);
          end if;
        end if;

    -- pravá mez leží těsně před či uvnitř intervalu, levá mezi
    elsif (lval_pos=tbp_between) and (hval_pos in tboundaryposset:[tbp_inside,tbp_attached]) then
      -- prodloužit J-tý interval
      clist.list^[j].lval:=lval;

      -- zrušit I-tý až (J-1)-ní interval
      if j>i then
        delint(i,j-1);
        end if;

      -- varovat o případných duplicitách
      if hval_pos=tbp_inside or j>i then
        if warn_duplicate then
          issue_duplicates_warning(context, choice);
          end if;
        end if;

    -- jiné případy nemohou nastat
    else 
      verify({VERIFY=}000459,true);
      end if;
  #end if;
    end if;
  end choice_add_range;



#if cc_choice<>cc_choice_array then;
----------------------------------------------------------------------------------------------------
procedure choice_remove_single =
-- Odebere ze seznamu optimalizovaných výběrů jednu hodnotu.
----------------------------------------------------------------------------------------------------
use
  advanced,
  advanced.low_level,
  advanced.low_level.unchecked_memory_access;

var
  i                : t_unsigned;
  is_modified      : t_logical;

begin
  -- seznam je prázdný => není co odstraňovat
  if clist.list=nil or else clist.list^:length=0 then 
    return; 
    end if;

  -- zatím nebyl seznam upraven
  is_modified:=false;

  -- zkusit najít správný interval
  i:=1;
  while i<=clist.list^:length loop
    -- jednobodový interval ? 
    if clist.list^[i].lval=ui and clist.list^[i].hval=ui then
      -- interval odstranit %%TODO(SLICE)
      advanced.low_level.unchecked_memory_access.memory_copy(clist.list^[i+1],clist.list^[i],(clist.list^:length-i)*clist.list^[1]:size);
      pred clist.list^:length;

      -- změněno
      is_modified:=true;

      -- a konec 
      break;

    -- neshoduje se levá mez ? 
    elsif clist.list^[i].lval=ui then
      -- posunout levou mez intervalu
      clist.list^[i].lval:=clist.list^[i].lval+ui_1;

      -- změněno
      is_modified:=true;

      -- a konec 
      break;

    -- neshoduje se pravá mez ? 
    elsif clist.list^[i].hval=ui then
      -- posunout pravou mez intervalu 
      clist.list^[i].hval:=clist.list^[i].hval-ui_1;

      -- změněno
      is_modified:=true;

      -- a konec 
      break;

    -- neleží uvnitř ? 
    elsif ui>clist.list^[i].lval and ui<clist.list^[i].hval then
      -- prodloužit %%TODO(SLICE)
      choice_extend(clist,1);
      advanced.low_level.unchecked_memory_access.memory_copy(clist.list^[i],clist.list^[i+1],(clist.list^:length-(i-1))*clist.list^[1]:size);
      succ clist.list^:length;

      -- vypočítat horní mez intervalu vlevo od UI 
      clist.list^[i].hval:=ui-ui_1;

      -- vypočítat dolní mez intervalu vpravo od UI
      clist.list^[i+1].lval:=ui+ui_1;

      -- změněno
      is_modified:=true;

      -- a konec 
      break;
      end if;

    -- další interval 
    succ i;
    end loop;

  #if cc_choice=cc_choice_case then;
  -- pokud jsme změnili seznam, poznačit do [modified]
  if is_modified then
    modified:=true;
    end if;
  #end if;
  end choice_remove_single;



----------------------------------------------------------------------------------------------------
procedure choice_remove_range =
-- Odebere ze seznamu optimalizovaných výběrů rozsah hodnot.
----------------------------------------------------------------------------------------------------
use
  advanced,
  advanced.low_level,
  advanced.low_level.unchecked_memory_access;

var
  i                : t_unsigned;
  is_modified      : t_logical;

begin
  -- seznam je prázdný => není co odstraňovat 
  if clist.list=nil or else clist.list^:length=0 then 
    return; 
    end if;

  -- zatím nebyl seznam upraven
  is_modified:=false;

  -- zkusit najít správný interval 
  i:=1;
  while i<=clist.list^:length loop
    -- pokrývá celý interval 
    if lval<=clist.list^[i].lval and hval>=clist.list^[i].hval then
      -- interval odstranit
      advanced.low_level.unchecked_memory_access.memory_copy(clist.list^[i+1],clist.list^[i],(clist.list^:length-i)*clist.list^[1]:size);
      pred clist.list^:length;

      -- změněno
      is_modified:=true;

      -- ještě nemůžeme končit 

    -- pokrývá levou polovinu intervalu 
    elsif lval<=clist.list^[i].lval and hval>=clist.list^[i].lval then
      -- posunout levou mez intervalu 
      clist.list^[i].lval:=hval+ui_1;

      -- změněno
      is_modified:=true;

      -- a konec, další intervaly jsou již jistě větší
      break;

    -- pokrývá pravou polovinu intervalu
    elsif lval<=clist.list^[i].hval and hval>=clist.list^[i].hval then
      -- posunout pravou mez intervalu
      clist.list^[i].hval:=lval-ui_1;

      -- změněno
      is_modified:=true;

      -- ještě nemůžeme končit

    -- pokrývá vnitřek intervalu
    elsif lval>clist.list^[i].lval and hval<clist.list^[i].hval then
      -- prodloužit %%TODO(SLICE)
      choice_extend(clist,1);
      advanced.low_level.unchecked_memory_access.memory_copy(clist.list^[i],clist.list^[i+1],(clist.list^:length-(i-1))*clist.list^[1]:size);
      succ clist.list^:length;

      -- změněno
      is_modified:=true;

      -- vypočítat horní mez intervalu vlevo od LVAL
      clist.list^[i].hval:=lval-ui_1;

      -- vypočítat dolní mez intervalu vpravo od HVAL
      clist.list^[i+1].lval:=hval+ui_1;

      -- a konec, další intervaly jsou již jistě disjunktní
      break;

    -- leží celý pod tímto intervalem
    elsif hval<clist.list^[i].lval then
      -- konec, další intervaly jsou ještě větší
      break;
      end if;

    -- další interval 
    succ i;
    end loop;

  #if cc_choice=cc_choice_case then;
  -- pokud jsme změnili seznam, poznačit do [modified]
  if is_modified then
    modified:=true;
    end if;
  #end if;
  end choice_remove_range;
#end if;



#if cc_choice=cc_choice_case then;

----------------------------------------------------------------------------------------------------
procedure choice_merge =
-- Provede sjednocení dvou seznamů optimalizovaných výběrů do jednoho.
----------------------------------------------------------------------------------------------------
var
  empty_ctx        : tcontext;                   -- docasny kontext

begin
  -- pokud je [clist2] dosud nenaplněn, není co dělat
  if clist2.list=nil then
    return;
    end if;

  -- sjednocení funguje prostým přidáním všech intervalů z [clist2] do [clist1]
  -- ale musí být zakázané generování varování
  for i in clist2.list^:range loop
    if clist2.list^[i].lval=clist2.list^[i].hval
      then choice_add_single(empty_ctx,clist1,clist2.list^[i].lval,nil,false);
      else choice_add_range(empty_ctx,clist1,clist2.list^[i].lval,clist2.list^[i].hval,nil,false);
      end if;
    end loop;
  end choice_merge;



----------------------------------------------------------------------------------------------------
procedure choice_subtract =
-- Odečte obsah [clist_right] od [clist_left], výsledek uloží zpět do [clist_left].
----------------------------------------------------------------------------------------------------
var
  modified         : t_logical;                  -- byl seznam změněn?

begin
  -- pokud je [clist_right] dosud nenaplněn, není co dělat
  if clist_right.list=nil then
    return;
    end if;

  -- seznam zatím nebyl změněn
  modified:=false;

  -- odečtení funguje prostým odebráním všech intervalů z [clist_right] od [clist_left]
  for i in clist_right.list^:range loop
    if clist_right.list^[i].lval=clist_right.list^[i].hval
      then choice_remove_single(clist_left,clist_right.list^[i].lval,modified);
      else choice_remove_range(clist_left,clist_right.list^[i].lval,clist_right.list^[i].hval,modified);
      end if;
    end loop;

  -- pokud bylo něco odečteno, vyhodit případné varování
  if warn_subtract and modified then
    issue_duplicates_warning(context, choice);
    end if;
  end choice_subtract;



----------------------------------------------------------------------------------------------------
procedure choice_reduce =
-- Zredukuje počet potřebných intervalů v [requested] tak, že případně rozšíří tyto intervaly
-- o části intervalů, které jsou k dispozici v [covered].
----------------------------------------------------------------------------------------------------
var
    i              : t_unsigned;
    empty_context  : tcontext;                   -- dočasný kontext

begin
  -- pokud je [requested] dosud nenaplněn, není co redukovat
  if requested.list=nil then
    return;
    end if;
  
  -- projdeme všechny mezery mezi intervaly v [requested] a slučujeme intervaly, mezi kterými je
  -- mezera pokryta v [covered]
  i:=1;
  while i<requested.list^:length loop
    -- je mezera pokryta?
    if choice_range_is_in(requested.list^[i].hval+ui_1,requested.list^[i+1].lval-ui_1,covered)
      then
        --sloučit oba intervaly přidáním mezery a zkusit znovu
        if requested.list^[i].hval+ui_1=requested.list^[i+1].lval-ui_1
          then choice_add_single(empty_context,requested,requested.list^[i].hval+ui_1,nil,false);
          else choice_add_range(empty_context,requested,requested.list^[i].hval+ui_1,requested.list^[i+1].lval-ui_1, nil,false);
        end if;

      else
        -- jinak pokročit k další mezeře
        succ i;
        end if;
    end loop;

  end choice_reduce;

#end if;
