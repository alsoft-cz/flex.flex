----------------------------------------------------------------------------------------------------
module public ci_instr =
-- P©eklada‡ Flexu.
-- Generov n¡ instrukc¡.
----------------------------------------------------------------------------------------------------
-- Ondra : 05.04.2002 : Vytvo©il
----------------------------------------------------------------------------------------------------

with
  cc_def.cc_unitype,
  cc_base,
  cc_base.cc_rtl,
  cg_gen.cg_ia32.ci_code.ci_operand;

use
  cc_def.cc_lexsym;

extend
  cp_cpu.cp_ia32.ci_instr;

type
  -- pole v instrukci
  iinstrfield      = enum
      iif_imm1;                                  -- p©¡m  hodnota 1
      iif_imm2;                                  -- p©¡m  hodnota 2
      iif_disp;                                  -- displacement
      end enum;

----------------------------------------------------------------------------------------------------
procedure addii (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o p©ekladu
    ii             : in iinstr;                  -- instrukce
    op1            : in c_operand;               -- operand 1
    op2            : in c_operand;               -- operand 2
    op3            : in c_operand);              -- operand 3
-- P©id  instrukci.
----------------------------------------------------------------------------------------------------
procedure addip (
    inst           : in out icodeinst;           -- instance
    info           : in igeninfo;                -- informace o p©ekladu
    prefix         : in iprefix);                -- instruk‡n¡ prefix
-- P©id  prefix.
----------------------------------------------------------------------------------------------------
procedure addbytes (
    inst           : in out icodeinst;           -- instance
    info           : in igeninfo;                -- informace o p©ekladu
    bytes          : t_unsigned8string);         -- ©etˆzec p©id van˜ch byt–
-- P©id  sekvenci byt–.
----------------------------------------------------------------------------------------------------
procedure addjump (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o p©ekladu
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    cond           : in icond;                   -- podm¡nka skoku
    target         : in itarget);                -- c¡l skoku
-- P©id  (ne)podm¡nˆn˜ relativn¡ skok dan˜ absolutn¡ c¡lovou adresou.
----------------------------------------------------------------------------------------------------
procedure addloop (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o p©ekladu
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    target         : in itarget);                -- c¡l skoku
-- P©id  LOOP na danou absolutn¡ c¡lovou adresou.
----------------------------------------------------------------------------------------------------
procedure addcall (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o p©ekladu
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    psym           : in pentity_code);           -- volan˜ podprogram
-- P©id  vol n¡ podprogramu.
----------------------------------------------------------------------------------------------------
procedure addcallrtl (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o p©ekladu
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    rtl            : in t_rtl_entity);           -- volan˜ intern¡ podprogram
-- P©id  vol n¡ intern¡ho podprogramu.
----------------------------------------------------------------------------------------------------
--procedure addpushud (
--    inst           : in out icodeinst;           -- instance
--    info           : in igeninfo;                -- informace o p©ekladu
--    ud             : in tunidata);               -- UD
---- P©id  PUSH UD.
----------------------------------------------------------------------------------------------------
procedure addpushofs (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o p©ekladu
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    ofs            : in timm32);                 -- [EBP+ofs]
-- P©id  LEA registr,[frameptr+ofs]; PUSH registr.
----------------------------------------------------------------------------------------------------
procedure addmovaddr (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o p©ekladu
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    ofs            : in timm32;                  -- [EBP+ofs]
    target         : in itarget);                -- c¡l
-- P©id  MOV [EBP+ofs],<adresa n vˆ¨t¡>
----------------------------------------------------------------------------------------------------
procedure addopimm (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o p©ekladu
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    ii             : in iinstr;                  -- instrukce
    op             : in c_operand;               -- operand
    value          : in t_unsigned32);           -- hodnota
-- P©id  <ii> <op>,<value>.
----------------------------------------------------------------------------------------------------
procedure addsubimm (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o p©ekladu
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    op             : in c_operand;               -- operand
    value          : in t_unsigned32);           -- hodnota
-- P©id  SUB <op>,<value>.
-- Pokud je VALUE=1, pou‘ije se instrukce DEC.
----------------------------------------------------------------------------------------------------
procedure addaddimm (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o p©ekladu
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    op             : in c_operand;               -- operand
    value          : in t_unsigned32);           -- hodnota
-- P©id  ADD <op>,<value>.
-- Pokud je VALUE=1, pou‘ije se instrukce INC.
----------------------------------------------------------------------------------------------------
procedure addopreg (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o p©ekladu
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    ii             : in iinstr;                  -- instrukce
    reg            : in ireg;                    -- registr (prvn¡ operand)
    op             : in c_operand);              -- druh˜ operand
-- P©id  <ii> <reg>,<op>.
----------------------------------------------------------------------------------------------------
procedure addset (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o p©ekladu
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    cc             : in icond;                   -- podm¡nka
    op1            : in c_operand);              -- operand
-- SETcc se spr vnou specifikac¡ reprezentace p©¡padn˜m roz¨¡©en¡m v˜sledku.
----------------------------------------------------------------------------------------------------
procedure addcmov (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o p©ekladu
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    cc             : in icond;                   -- podm¡nka
    op1            : in c_operand;               -- operand 1
    op2            : in c_operand);              -- operand 2
-- Podm¡nˆn˜ MOV (CMOVcc) OP1:=OP2 pokud NEN‹ splnˆna podm¡nka CC.
-- %%X Je k t‚ negaci podm¡nky d–vod ? Pop©¡padˆ zmˆnit.
----------------------------------------------------------------------------------------------------
procedure checkii (
    ipos           : in cc_lexsym.lexposblock;   -- pozice instrukce
    ii             : in iinstr;                  -- instrukce
    op1            : in c_operand;               -- operand 1
    op2            : in c_operand;               -- operand 2
    op3            : in c_operand);              -- operand 3
-- Kontrola spr vnosti instrukce.
----------------------------------------------------------------------------------------------------
procedure getaddr (
    inst           : in icodeinst)               -- instance
    return t_unsigned32;                         -- line rn¡ adresa
-- Vr t¡ aktu ln¡ adresu.
----------------------------------------------------------------------------------------------------
procedure getfieldaddr (
    info           : in igeninfo;                -- informace o p©ekladu
    field          : in iinstrfield)             -- pole v instrukci
    return t_unsigned32;                         -- line rn¡ adresa
-- Vr t¡ adresu konkr‚tn¡ho pole v posledn¡ instrukci.
----------------------------------------------------------------------------------------------------
procedure setfield (
    inst           : in out icodeinst;           -- instance
    disp           : in t_unsigned;              -- adresa hodnoty
    value          : in t_unsigned32);           -- line rn¡ adresa
-- Do pole na zadan‚ adrese dopln¡ hodnotu.
-- (hodnota se do c¡lov‚ho pole PžI€TE)
----------------------------------------------------------------------------------------------------

end ci_instr;