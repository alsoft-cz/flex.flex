----------------------------------------------------------------------------------------------------
module public ci_instr =
-- Překladač Flexu.
-- Generování instrukcí.
----------------------------------------------------------------------------------------------------
-- Ondra : 05.04.2002 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  cc_def.cc_unitype,
  cc_base,
  cc_base.cc_rtl,
  cg_gen.cg_ia32.ci_code.ci_operand;

use
  cc_def.cc_lexsym;

extend
  cp_cpu.cp_ia32.ci_instr;

type
  -- pole v instrukci
  iinstrfield      = enum
      iif_imm1;                                  -- přímá hodnota 1
      iif_imm2;                                  -- přímá hodnota 2
      iif_disp;                                  -- displacement
      end enum;

----------------------------------------------------------------------------------------------------
procedure addii (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o překladu
    ii             : in iinstr;                  -- instrukce
    op1            : in c_operand;               -- operand 1
    op2            : in c_operand;               -- operand 2
    op3            : in c_operand);              -- operand 3
-- Přidá instrukci.
----------------------------------------------------------------------------------------------------
procedure addip (
    inst           : in out icodeinst;           -- instance
    info           : in igeninfo;                -- informace o překladu
    prefix         : in iprefix);                -- instrukční prefix
-- Přidá prefix.
----------------------------------------------------------------------------------------------------
procedure addbytes (
    inst           : in out icodeinst;           -- instance
    info           : in igeninfo;                -- informace o překladu
    bytes          : in t_code_array);           -- řetězec přidávaných bytů
-- Přidá sekvenci bytů.
----------------------------------------------------------------------------------------------------
procedure addjump (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o překladu
    context        : in out iexprcontext;        -- kontext generování výrazu
    cond           : in icond;                   -- podmínka skoku
    target         : in itarget;                 -- cíl skoku
    prediction     : in ijumpprediction := ijp_none); -- predikce skoku
-- Přidá (ne)podmíněný relativní skok daný absolutní cílovou adresou.
----------------------------------------------------------------------------------------------------
procedure addloop (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o překladu
    context        : in out iexprcontext;        -- kontext generování výrazu
    target         : in itarget);                -- cíl skoku
-- Přidá LOOP na danou absolutní cílovou adresou.
----------------------------------------------------------------------------------------------------
procedure addraise (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o překladu
    context        : in out iexprcontext;        -- kontext generování výrazu
    msg            : in t_rtl_entity_message);   -- vyvolavana vyjimka
-- Vygeneruje volani jazykem definovane vyjimky bez parametru
----------------------------------------------------------------------------------------------------
procedure addcall (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o překladu
    context        : in out iexprcontext;        -- kontext generování výrazu
    psym           : in pentity_code);           -- volaný podprogram
-- Přidá volání podprogramu.
----------------------------------------------------------------------------------------------------
procedure addcallrtl (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o překladu
    context        : in out iexprcontext;        -- kontext generování výrazu
    rtl            : in t_rtl_entity;            -- volaný interní podprogram
    save_regs      : in t_logical:=false);       -- ulozit pouzite registry?
-- Přidá volání interního podprogramu.
----------------------------------------------------------------------------------------------------
--procedure addpushud (
--    inst           : in out icodeinst;           -- instance
--    info           : in igeninfo;                -- informace o překladu
--    ud             : in tunidata);               -- UD
---- Přidá PUSH UD.
----------------------------------------------------------------------------------------------------
procedure addpushofs (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o překladu
    context        : in out iexprcontext;        -- kontext generování výrazu
    ofs            : in timm32);                 -- [EBP+ofs]
-- Přidá LEA registr,[frameptr+ofs]; PUSH registr.
----------------------------------------------------------------------------------------------------
procedure addmovaddr (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o překladu
    context        : in out iexprcontext;        -- kontext generování výrazu
    ofs            : in timm32;                  -- [EBP+ofs]
    target         : in itarget);                -- cíl
-- Přidá MOV [EBP+ofs],<adresa návěští>
----------------------------------------------------------------------------------------------------
procedure addopimm (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o překladu
    context        : in out iexprcontext;        -- kontext generování výrazu
    ii             : in iinstr;                  -- instrukce
    op             : in c_operand;               -- operand
    value          : in t_unsigned32);           -- hodnota
-- Přidá <ii> <op>,<value>.
----------------------------------------------------------------------------------------------------
procedure addopimmex (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o překladu
    context        : in out iexprcontext;        -- kontext generování výrazu
    ii             : in iinstr;                  -- instrukce
    op             : in c_operand;               -- operand
    value          : in t_unsigned32;            -- hodnota
    value_type     : in t_elementary_data_type;  -- el. datovy typ hodnoty
    value_size     : in t_unsigned);             -- velikost hodnoty (0=univerzální velikost)
-- Přidá <ii> <op>,<value>.
----------------------------------------------------------------------------------------------------
procedure addsubimm (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o překladu
    context        : in out iexprcontext;        -- kontext generování výrazu
    op             : in c_operand;               -- operand
    value          : in t_unsigned32);           -- hodnota
-- Přidá SUB <op>,<value>.
-- Pokud je VALUE=1, použije se instrukce DEC.
----------------------------------------------------------------------------------------------------
procedure addaddimm (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o překladu
    context        : in out iexprcontext;        -- kontext generování výrazu
    op             : in c_operand;               -- operand
    value          : in t_unsigned32);           -- hodnota
-- Přidá ADD <op>,<value>.
-- Pokud je VALUE=1, použije se instrukce INC.
----------------------------------------------------------------------------------------------------
procedure addopreg (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o překladu
    context        : in out iexprcontext;        -- kontext generování výrazu
    ii             : in iinstr;                  -- instrukce
    reg            : in ireg;                    -- registr (první operand)
    op             : in c_operand);              -- druhý operand
-- Přidá <ii> <reg>,<op>.
----------------------------------------------------------------------------------------------------
procedure addset (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o překladu
    context        : in out iexprcontext;        -- kontext generování výrazu
    cc             : in icond;                   -- podmínka
    op1            : in c_operand);              -- operand
-- SETcc se správnou specifikací reprezentace případným rozšířením výsledku.
----------------------------------------------------------------------------------------------------
procedure addcmov (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o překladu
    context        : in out iexprcontext;        -- kontext generování výrazu
    cc             : in icond;                   -- podmínka
    op1            : in c_operand;               -- operand 1
    op2            : in c_operand);              -- operand 2
-- Podmíněný MOV (CMOVcc) OP1:=OP2 pokud NENÍ splněna podmínka CC.
-- %%X Je k té negaci podmínky důvod ? Popřípadě změnit.
----------------------------------------------------------------------------------------------------
procedure checkii (
    ipos           : in cc_lexsym.lexposblock;   -- pozice instrukce
    ii             : in iinstr;                  -- instrukce
    op1            : in c_operand;               -- operand 1
    op2            : in c_operand;               -- operand 2
    op3            : in c_operand);              -- operand 3
-- Kontrola správnosti instrukce.
----------------------------------------------------------------------------------------------------
procedure getaddr (
    inst           : in icodeinst)               -- instance
    return t_unsigned32;                         -- lineární adresa
-- Vrátí aktuální adresu.
----------------------------------------------------------------------------------------------------
procedure getfieldaddr (
    info           : in igeninfo;                -- informace o překladu
    field          : in iinstrfield)             -- pole v instrukci
    return t_unsigned32;                         -- lineární adresa
-- Vrátí adresu konkrétního pole v poslední instrukci.
----------------------------------------------------------------------------------------------------
procedure setfield (
    inst           : in out icodeinst;           -- instance
    disp           : in t_unsigned;              -- adresa hodnoty
    value          : in t_unsigned32);           -- lineární adresa
-- Do pole na zadané adrese doplní hodnotu.
-- (hodnota se do cílového pole PŘIČTE)
----------------------------------------------------------------------------------------------------

end ci_instr;
