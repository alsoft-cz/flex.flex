----------------------------------------------------------------------------------------------------
module public cc_def =
-- Překladač Flexu.
-- Základní deklarace.
----------------------------------------------------------------------------------------------------
-- Ondra : 25.04.2000 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  standard,
  standard.characters;

----- Základní deklarace ---------------------------------------------------------------------------
type
  -- společný předek interních struktur překladače
  t_flex_record    = record
      end record;
  p_flex_record    = ^class t_flex_record;

----------------------------------------------------------------------------------------------------
class abstract c_flex_class = 
-- Společný předek interních tříd překladače.
----------------------------------------------------------------------------------------------------
    
    end c_flex_class;

----------------------------------------------------------------------------------------------------
class abstract c_flex_construct = extend c_flex_class;
-- Společný předek interních tříd překladače reprezentujících nějakou jazykovou konstrukci.
----------------------------------------------------------------------------------------------------

    var
      erroneous    : t_logical;                  -- příznak, zda v této konstrukci je chyba

    ------------------------------------------------------------------------------------------------
    virtual abstract errpos;
    -- K poslední hlášené chybě/hintu/warningu/... doplní pozici odpovídající této konstrukci.
    ------------------------------------------------------------------------------------------------

    end c_flex_construct;

type
  p_flex_class     = ^class c_flex_class;
  p_flex_construct = ^class c_flex_construct;

type
  -- způsob, jak zachytávat chybu resume_error
  t_catch_mode     = enum
      catch_mode_implicit;                       -- implicitní chování - záleží na typu uzlu
      catch_mode_catch;                          -- vždy zachytí chybu
      catch_mode_raise;                          -- zachycená chyba je znovu vyvolána
      end enum;


----- Identifikátory -------------------------------------------------------------------------------
type
  -- znak identifikátoru
  tidentchar       = protected character 32;

  -- identifikátor entity
  tentityident     = private string of tidentchar;
  pentityident     = ^tentityident;

  -- interní zkrácený identifikátor
  tshortident      = protected tentityident range 63;
  pshortident      = ^tshortident;

  -- kvalifikovaný identifikátor entity
  t_qualified_entity_ident = private tentityident;
  p_qualified_entity_ident = ^t_qualified_entity_ident;

  -- externí identifikátor entity
  t_external_entity_ident = private string of tidentchar;
  p_external_entity_ident = ^t_external_entity_ident;

const
  -- NIL systémového řetězce
  sysstr_nil       = '';
  sysstr_nil_image = 'NIL';


----------------------------------------------------------------------------------------------------
procedure entityident_to_string (
    ident          : in tentityident)
                   return t_char32str;
-- Převede identifikátor na řetězec.
----------------------------------------------------------------------------------------------------
procedure string_to_entityident (
    txt            : in t_char32str)
                   return pentityident;
-- Převede řetězec na identifikátor.
-- Volajici uvolni vraceny identifikator.
----------------------------------------------------------------------------------------------------
procedure entityident_to_external_entity_ident (
    ident          : in tentityident)
                   return p_external_entity_ident;
-- Převede identifikátor na externí identifikátor.
-- Volajici uvolni vraceny identifikator.
----------------------------------------------------------------------------------------------------
procedure external_entity_ident_to_string (
    ident          : in t_external_entity_ident)
                   return t_char32str;
-- Převede externí identifikátor na řetězec.
----------------------------------------------------------------------------------------------------
procedure string_to_external_entity_ident (
    txt            : in t_char32str)
                   return p_external_entity_ident;
-- Převede řetězec na externí identifikátor.
-- Volajici uvolni vraceny identifikator.
----------------------------------------------------------------------------------------------------
procedure qualified_entity_ident_to_string (
    ident          : in t_qualified_entity_ident)
                   return t_char32str;
-- Převede kvalifikovaný identifikátor na řetězec.
----------------------------------------------------------------------------------------------------
procedure string_to_qualified_entity_ident (
    txt            : in t_char32str)
                   return p_qualified_entity_ident;
-- Převede řetězec na kvalifikovaný identifikátor.
-- Volajici uvolni vraceny identifikator.
----------------------------------------------------------------------------------------------------
procedure qualified_entity_ident_to_external_entity_ident (
    ident          : in t_qualified_entity_ident)
                   return p_external_entity_ident;
-- Převede kvalifikovaný identifikátor na externí identifikátor.
-- Volajici uvolni vraceny identifikator.
----------------------------------------------------------------------------------------------------

        
        
----- Partitiony -----------------------------------------------------------------------------------
type
  -- kód partition
  t_partition_id   = private t_unsigned;

type
  -- typ partition
  t_partition_type = enum
      part_standalone;                           -- standalone kompilační jednotka
      part_runtime;                              -- runtime partition kompilační jednotky
      part_global;                               -- globální partition kompilační jednotky
      part_temporary;                            -- dočasná partition kompilační jednotky
      end enum;
  t_partition_type_set = set of t_partition_type;

const
  -- typy partition, které obsahují run-time podporu
  parts_contains_runtime = t_partition_type_set:[part_standalone,part_runtime];
  -- typy partition, které vyžadují automatický překlad run-time podpory
  parts_compile_runtime  = t_partition_type_set:[part_standalone];
  -- typy partition, které obsahují program
  parts_contains_program = t_partition_type_set:[part_standalone,part_temporary];

var
  -- popisné jméno typu partition
  t_partition_type_txt : const array t_partition_type of t_char32str := [
      for part_standalone use 'Standalone',
      for part_runtime    use 'Run-time',
      for part_global     use 'Global',
      for part_temporary  use 'Temporary'];
  
{%OFF}
  -- identifikátor typu partition
  t_partition_type_name : const array t_partition_type of t_char32str := [
      for part_standalone use 'STANDALONE',
      for part_runtime    use 'RUNTIME',
      for part_global     use 'GLOBAL',
      for part_temporary  use 'TEMPORARY'];
  
  -- identifikátor typu partition pro účely exportu
  t_partition_type_export_id : const aliased array t_partition_type of t_char32str := [
      for part_standalone use 'standalone',
      for part_runtime    use 'runtime',
      for part_global     use 'global',
      for part_temporary  use 'temporary'];
{%ON}

----------------------------------------------------------------------------------------------------
procedure get_partition_type_by_name (
    part_type_name : in t_char32ustr;            -- jméno typu partition
    part_type      : out t_partition_type;       -- zjištěný typ partition
    os             : in c_text_writer);          -- výstupní stream
-- Nastaví typ partition podle jeho jména. Pro neznámé typy způsobí výjimku [config_error].   
----------------------------------------------------------------------------------------------------
            
type
  -- výsledný tvar přeložené partition
  t_partition_result = enum
      tpr_auto_select;                           -- automaticky zvolit vhodný tvar
      tpr_program;                               -- spustitelný program
      tpr_library;                               -- dynamicky linkovaná knihovna
      end enum;

var
  -- popis [tcompilationtype] pro účely exportu
{%OFF}
  t_partition_result_export_id : const aliased array t_partition_result of t_char32str := [
      for tpr_auto_select use 'auto_select',
      for tpr_program     use 'program',
      for tpr_library     use 'library'];
{%ON}       

type
  -- bezpečnostní úroveň entity ovlivňující možnosti použití některých jazykových konstrukcí
  t_security_level = protected t_unsigned;
  
const  
  -- význačné bezpečnostní úrovně
  sl_maximal_security      = t_security_level:first; -- maximální bezpečnost: zcela důvěryhodné/potenciálně maximálně nebezpečné
  sl_minimal_security      = t_security_level:last;  -- minimální bezpečnost: zcela nedůvěryhodné/nemůže způsobit žádnou škodu
  
  -- bezpečnostní úrovně vybraných jazykových konstrukcí
  sl_inline_assembly       = t_security_level(100);  -- inline asembler                                +
  sl_import_entity         = t_security_level(100);  -- import entity                                  +
  sl_export_entity         = t_security_level(100);  -- export entity                                  +
  sl_attr_unchecked        = t_security_level(100);  -- použití atributu :unchecked                    +
  sl_spec_position         = t_security_level(100);  -- specifikace atributu :position                 +
  sl_machine_pointer       = t_security_level(100);  -- deklarace a použití machine pointeru           *
  sl_unchecked_pointer     = t_security_level(100);  -- deklarace a použití unchecked pointeru         *
  sl_unchecked_param       = t_security_level(100);  -- deklarace a použití unchecked parametru        *

{
----------------------------------------------------------------------------------------------------
#template check_security_level (
    num,                                         -- číslo chyby
    context,                                     -- kontext
    req_sec_level,                               -- požadovaná bezepčnostní úroveň
    err_pos,                                     -- pozice konstruktu
    param);                                      -- volitelný parametr
-- Zkontroluje, jestli bezpečnostní úroveň dodaného kontextu je dostatečná (tj. <=) vzhledem 
-- k dodané požadované bezpečnostní úrovni.
----------------------------------------------------------------------------------------------------
{
  if context.entity^.sec_level>req_sec_level then
    ce^.seterror(num,ce_forbidden_construct);
    param;
    err_pos;
    end if;
}    
  #end check_security_level;
}



{
----------------------------------------------------------------------------------------------------
#template verify (code,cond);
----------------------------------------------------------------------------------------------------
  if cond then _verify(code,true) end if;
  #end verify;

----------------------------------------------------------------------------------------------------
#template verifyx (code,cond,pos);
----------------------------------------------------------------------------------------------------
  if cond then _verifyx(code,true,pos) end if;
  #end verifyx;

----------------------------------------------------------------------------------------------------
#template verifyc (code,cond);
----------------------------------------------------------------------------------------------------
  if cond then _verifyc(code,true) end if;
  #end verifyc;
}
----------------------------------------------------------------------------------------------------
procedure verify (
    code           : in t_unsigned;              -- kod interní chyby
    cond           : in t_logical := true);      -- T-chyba
-- Je-li COND=True způsobí interní chybu CODE.
----------------------------------------------------------------------------------------------------
procedure unimplemented (
    code           : in t_unsigned);             -- kod interní chyby
-- Způsobí chybu Neimplementováno.
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
#separate public cc_gc;
#separate private cc_gc;
-- garbage colelctor
----------------------------------------------------------------------------------------------------
#separate public cc_unitype;
#separate private cc_unitype;
-- Univerzální aritmetika.
----------------------------------------------------------------------------------------------------
#separate cc_codes;
-- Kódy chyb a varování
----------------------------------------------------------------------------------------------------



----- Parametry překladače -------------------------------------------------------------------------
type
  -- parametry překladu
  tcompvar         = record
      options      : p_flex_record;              -- parametry překladače
      warns        : cc_codes.twarningcodeset;   -- varování
      hints        : cc_codes.thintcodeset;      -- hinty
      diags        : cc_codes.tdiagcodeset;      -- diagnostická hlášení
      end record;

var
{%OFF}
  opt_warning      : const tshortident := 'WARNING';
  opt_hint         : const tshortident := 'HINT';
  opt_diag         : const tshortident := 'DIAGNOSTIC';
{%ON}

----------------------------------------------------------------------------------------------------
#separate public cc_lexsym;
-- Definice lexikálních symbolů.
----------------------------------------------------------------------------------------------------
#separate public cc_desc;
-- Popisy cílových platforem.
----------------------------------------------------------------------------------------------------
#separate public cc_env;
-- #environment proměnné.
----------------------------------------------------------------------------------------------------
#separate public cc_entity;
-- Definice tabulky symbolů.
----------------------------------------------------------------------------------------------------
#separate public cc_errors;
-- Seznam chybových hlášení.
----------------------------------------------------------------------------------------------------
#separate public cc_tree;
-- Společné deklarace pro rozklad výrazu a bloku.
----------------------------------------------------------------------------------------------------
#separate public cc_cpuspecific;
#separate private cc_cpuspecific;
-- Vlastnosti specifické pro konkrétní procesor.
----------------------------------------------------------------------------------------------------
#separate public cc_osspecific;
#separate private cc_osspecific;
-- Vlastnosti specifické pro konkrétní operační systém.
----------------------------------------------------------------------------------------------------
#separate public cc_files;
-- Seznam souborů.
----------------------------------------------------------------------------------------------------
#separate public cc_var;
#separate private cc_var;
-- Řídící proměnné pro překlad.
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
procedure verifyx (
    code           : in t_unsigned;              -- kod interní chyby
    cond           : in t_logical;               -- T-chyba
    pos            : in cc_lexsym.lexposblock);  -- pozice chyby
-- Je-li [cond]=True způsobí interní chybu [code]. Pozici chyby nastaví na [pos].
----------------------------------------------------------------------------------------------------
procedure verifyc (
    code           : in t_unsigned;              -- kod interní chyby
    cond           : in t_logical := true);      -- T-chyba
-- Je-li [cond]=True způsobí interní chybu [code]. Pozici nastaví na aktuální lexikální element.
----------------------------------------------------------------------------------------------------
procedure unimplementedx (
    code           : in t_unsigned;              -- kod interní chyby
    pos            : in cc_lexsym.lexposblock);  -- pozice chyby
-- Způsobí chybu Neimplementováno.
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
-- %%TODO(SECURITY) Dočasné, odstranit a změnit na textovou substituci (viz zakomentovaná výše), až
-- přestane pada generování codeview.
procedure check_security_level (
    num : cc_errors.t_message_num;                                         -- číslo chyby
    context : cc_entity.tcontext;                                     -- kontext
    req_sec_level : t_security_level) =                               -- požadovaná bezepčnostní úroveň
-- Zkontroluje, jestli bezpečnostní úroveň dodaného kontextu je dostatečná (tj. <=) vzhledem 
-- k dodané požadované bezpečnostní úrovni.
----------------------------------------------------------------------------------------------------
begin
  if context.entity^.sec_level>req_sec_level then
    cc_var.ce^.seterror(num,cc_codes.ce_forbidden_construct);
    cc_var.ce^.loadpos;
    end if;
  end check_security_level;

end cc_def;
