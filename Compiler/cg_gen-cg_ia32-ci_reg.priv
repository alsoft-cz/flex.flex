----------------------------------------------------------------------------------------------------
module private ci_reg =
-- P©eklada‡ Flexu.
-- Pr ce s registry.
----------------------------------------------------------------------------------------------------
-- Ondra : 05.04.2002 : Vytvo©il
----------------------------------------------------------------------------------------------------

#if dump_reg then;
----------------------------------------------------------------------------------------------------
procedure debug_dump_reg (
    context        : in iexprcontext;            -- aktu ln¡ kontext v˜razu
    op             : in t_char32ustr) =          --
----------------------------------------------------------------------------------------------------
with
  standard.conversions,
  cc_base,cc_base.cc_debug;

var
  s                : t_char32str;

begin
  s:=unsigned_to_string(context.dump_level) & ' ' & op & ': ';
  for uni in in_first..in_last loop
    s & iuniregtxt[uni] & '(';
    if context.reginfo[uni].mapping=0
      then s & '-)';
      else s & unsigned_to_string(context.reginfo[uni].mapping) & ')';
      end if;
    case context.reginfo[uni].status
      when irs_local  do s & 'local  ';
      when irs_used   do s & 'used   ';
      when irs_pushed do s & 'pushed ';
      when irs_frozen do s & 'frozen ';
      end case;
    s & unsigned_to_string(context.reginfo[uni].used) & '  ';
    --if uni=in_edx then s & #13#10+'           '; end if;
    end loop;
  debug_dump(s);
  end debug_dump_reg;
#end if;



----------------------------------------------------------------------------------------------------
procedure i_reg_get_available =
-- Vr t¡ mno‘inu v¨ech voln˜ch registr–.
----------------------------------------------------------------------------------------------------
var
  uni              : iunireg;

begin
  availregs:=iuniregset:[in_first..in_last]-context.active;
{ %%OLD
  availregs:=[];
  for uni in in_first..in_last loop
    if info.reginfo[uni].used=0 then availregs+[uni]; end if;
    end loop;
}
  end i_reg_get_available;



----------------------------------------------------------------------------------------------------
procedure i_reg_reserve_available =
-- Vr t¡ mno‘inu v¨ech voln˜ch registr–, kromˆ registr– z EXCLUSION.
-- Pokud nen¡ k dispozici alespo¤ MINREGS registr–, alokuje nˆjak‚ pou‘it‚.
----------------------------------------------------------------------------------------------------
with
  standard.console,
  advanced,
  advanced.low_level,
  advanced.low_level.bit_operations,
  ci_uni;

    ------------------------------------------------------------------------------------------------
    procedure card (
        s          : in iuniregset) 
        return t_unsigned =
    -- Kardinalita mno‘iny.
    ------------------------------------------------------------------------------------------------
    begin
      result:=0;
      for i in in_first..in_last loop 
        if i in s then succ result end if;
        end loop;
      end card;

var
  mapping          : iregnum;                    -- pro kompatibilitu parametru
  bit8             : t_logical;                  -- T-bude pot©eba 8-mi bitov˜ reg.

begin
  bit8:=_bit8;

  -- jak‚ registry jsou teƒ voln‚ ?
  i_reg_get_available(context,availregs);

  -- vynechat zak zan‚ registry
  availregs:=availregs-exclusion;

  -- doplnit na minim ln¡ po‘adovan˜ po‡et
  while card(availregs{+exclusion})<minregs loop
    declare var
      uni          : iunireg;

    begin
      -- nal‚zt registr
      if bit8 and (availregs-in_no8bit=iuniregset:[])
        -- vy©¡dit po‘adavek na 8mi bitov˜ registr
        then
          i_uni_find(context,uni,1,irm_int,false,availregs+exclusion);
          bit8:=false;
        -- nal‚zt libovoln˜ registr
        else 
          i_uni_find(context,uni,4,irm_int,false,availregs+exclusion);
          end if;
      verify({VERIFY=}000818,uni=in_none);

      -- zahrnout mezi voln‚ registry
      --%%TODO availregs+iuniregset:[uni];
      bit_set(availregs,t_bit_index(uni:ord));
      end declare;
    end loop;

  -- pou‘¡t v¨echny registry
  for uni in in_first..in_last loop
    if uni in availregs then 
      i_uni_use(inst,info,context,uni,mapping); 
      end if;
    end loop;

{ %%OLD
  -- doplnit na minim ln¡ po‘adovan˜ po‡et
  while card(availregs{+exclusion})<minregs loop
    -- nal‚zt registr
    if bit8 and (availregs-in_no8bit=[])
      -- vy©¡dit po‘adavek na 8mi bitov˜ registr
      then
        findunireg(info,uni,1,irm_int,availregs+exclusion);
        bit8:=false;
      -- nal‚zt libovoln˜ registr
      else findunireg(info,uni,4,irm_int,availregs+exclusion);
    verify({VERIFY=}000819,uni=in_none);

    -- zahrnout mezi voln‚ registry
    availregs+[uni];
    end loop;

  -- pou‘¡t v¨echny registry
  for uni in in_first..in_last loop
    if uni in availregs then useunireg(inst,info,uni); end if;
    end loop;
}
  end i_reg_reserve_available;



----------------------------------------------------------------------------------------------------
procedure i_reg_free_available =
-- Uvoln¡ mno‘inu voln˜ch registr–.
----------------------------------------------------------------------------------------------------
with
  ci_uni;

begin
  -- uvolnit v¨echny registry
  for uni in in_first..in_last loop
    if uni in availregs then i_uni_free(info,context,uni); end if;
    end loop;
{ %%OLD
  -- uvolnit v¨echny registry
  for uni in in_first..in_last loop
    if uni in availregs then freeunireg(info,uni); end if;
    end loop;
}
  availregs:=[];
  end i_reg_free_available;



----------------------------------------------------------------------------------------------------
procedure i_reg_are_available =
-- True, je-li k dispozici alespo¤ jeden N-bytov˜ registr.
----------------------------------------------------------------------------------------------------
begin
  result:=false;
  for uni in in_first..in_last loop
    if not (uni in context.active) and (iunitoreg[uni,n]<>ir_none) then
      result:=true;
      return;
      end if;
    end loop;
  end i_reg_are_available;



----------------------------------------------------------------------------------------------------
procedure i_reg_get_count =
-- Spo‡¡t , kolik je n-bytov˜ch registr– v REGS.
----------------------------------------------------------------------------------------------------
begin
  -- kolik m me n-bytov˜ch registr– ?
  result:=0;
  for uni in in_first..in_last loop
    if uni in regs and then iunitoreg[uni,n]<>ir_none then succ result; end if;
    end loop;
  end i_reg_get_count;



----------------------------------------------------------------------------------------------------
procedure i_reg_resize =
-- P©evede registr na zadanou velikost.
----------------------------------------------------------------------------------------------------
begin
  result:=iunitoreg[iregtouni[reg],size];
  end i_reg_resize;



----------------------------------------------------------------------------------------------------
procedure i_reg_save_used =
-- Ulo‘¡ na stack v¨echny pou‘it‚ registry.
----------------------------------------------------------------------------------------------------
with
  ci_uni;

var
  mapping          : iregnum;                    -- pro kompatibilitu parametru

begin
  for uni in in_first..in_last loop
    if context.reginfo[uni].status in iregstatusset:[irs_used,irs_pushed] then
      i_uni_use(inst,info,context,uni,mapping);
      end if;
    end loop;
  end i_reg_save_used;



----------------------------------------------------------------------------------------------------
#separate private ci_alloc;
-- Alok tor registr–.
----------------------------------------------------------------------------------------------------
#separate private ci_uni;
-- Primitiva pro pr ci s univerz ln¡mi registry.
----------------------------------------------------------------------------------------------------

end ci_reg;
