----------------------------------------------------------------------------------------------------
module private ci_reg =
-- Překladač Flexu.
-- Práce s registry.
----------------------------------------------------------------------------------------------------
-- Ondra : 05.04.2002 : Vytvořil
----------------------------------------------------------------------------------------------------

#if dump_reg then;
----------------------------------------------------------------------------------------------------
procedure debug_dump_reg (
    context        : in iexprcontext;            -- aktuální kontext výrazu
    op             : in t_char32ustr) =          --
----------------------------------------------------------------------------------------------------
with
  standard.conversions,
  cc_base,cc_base.cc_debug;

var
  s                : t_char32str;

begin
  s:=unsigned_to_string(context.dump_level) & ' ' & op & ': ';
  for uni in in_first..in_last loop
    s & iuniregtxt[uni] & '(';
    if context.reginfo[uni].mapping=0
      then s & '-)';
      else s & unsigned_to_string(context.reginfo[uni].mapping) & ')';
      end if;
    case context.reginfo[uni].status
      when irs_local  do s & 'local  ';
      when irs_used   do s & 'used   ';
      when irs_pushed do s & 'pushed ';
      when irs_frozen do s & 'frozen ';
      end case;
    s & unsigned_to_string(context.reginfo[uni].used) & '  ';
    --if uni=in_edx then s & #13#10+'           '; end if;
    end loop;
  debug_dump(s);
  end debug_dump_reg;
#end if;



----------------------------------------------------------------------------------------------------
procedure i_reg_get_available =
-- Vrátí množinu všech volných registrů.
----------------------------------------------------------------------------------------------------
var
  uni              : iunireg;

begin
  availregs:=iuniregset:[in_first..in_last]-context.active;
  end i_reg_get_available;



----------------------------------------------------------------------------------------------------
procedure i_reg_reserve_available =
-- Vrátí množinu všech volných registrů, kromě registrů z EXCLUSION.
-- Pokud není k dispozici alespoň MINREGS registrů, alokuje nějaké použité.
----------------------------------------------------------------------------------------------------
with
  standard.console,
  advanced,
  advanced.low_level,
  advanced.low_level.bit_operations,
  ci_uni;

    ------------------------------------------------------------------------------------------------
    procedure card (
        s          : in iuniregset) 
        return t_unsigned =
    -- Kardinalita množiny.
    ------------------------------------------------------------------------------------------------
    begin
      result:=0;
      for i in in_first..in_last loop 
        if i in s then succ result end if;
        end loop;
      end card;

var
  mapping          : iregnum;                    -- pro kompatibilitu parametru
  bit8             : t_logical;                  -- T-bude potřeba 8-mi bitový reg.

begin
  bit8:=_bit8;

  -- jaké registry jsou teď volné ?
  i_reg_get_available(context,availregs);

  -- vynechat zakázané registry
  availregs-exclusion;

  -- doplnit na minimální požadovaný počet
  while card(availregs{+exclusion})<minregs loop
    declare var
      uni          : iunireg;

    begin
      -- nalézt registr
      if bit8 and (availregs-in_no8bit=iuniregset:[])
        -- vyřídit požadavek na 8mi bitový registr
        then
          i_uni_find(context,uni,1,irm_int,false,availregs+exclusion);
          bit8:=false;
        -- nalézt libovolný registr
        else 
          i_uni_find(context,uni,4,irm_int,false,availregs+exclusion);
          end if;
      verify({VERIFY=}000818,uni=in_none);

      -- zahrnout mezi volné registry
      --%%TODO availregs+iuniregset:[uni];
      bit_set(availregs,t_bit_index(uni:ord));
      end declare;
    end loop;

  -- použít všechny registry
  for uni in in_first..in_last loop
    if uni in availregs then 
      i_uni_use(inst,info,context,uni,mapping); 
      end if;
    end loop;

{ %%OLD
  -- doplnit na minimální požadovaný počet
  while card(availregs{+exclusion})<minregs loop
    -- nalézt registr
    if bit8 and (availregs-in_no8bit=[])
      -- vyřídit požadavek na 8mi bitový registr
      then
        findunireg(info,uni,1,irm_int,availregs+exclusion);
        bit8:=false;
      -- nalézt libovolný registr
      else findunireg(info,uni,4,irm_int,availregs+exclusion);
    verify({VERIFY=}000819,uni=in_none);

    -- zahrnout mezi volné registry
    availregs+[uni];
    end loop;

  -- použít všechny registry
  for uni in in_first..in_last loop
    if uni in availregs then useunireg(inst,info,uni); end if;
    end loop;
}
  end i_reg_reserve_available;



----------------------------------------------------------------------------------------------------
procedure i_reg_free_available =
-- Uvolní množinu volných registrů.
----------------------------------------------------------------------------------------------------
with
  ci_uni;

begin
  -- uvolnit všechny registry
  for uni in in_first..in_last loop
    if uni in availregs then i_uni_free(info,context,uni); end if;
    end loop;
{ %%OLD
  -- uvolnit všechny registry
  for uni in in_first..in_last loop
    if uni in availregs then freeunireg(info,uni); end if;
    end loop;
}
  availregs:=[];
  end i_reg_free_available;



----------------------------------------------------------------------------------------------------
procedure i_reg_are_available =
-- True, je-li k dispozici alespoň jeden N-bytový registr.
----------------------------------------------------------------------------------------------------
begin
  result:=false;
  for uni in in_first..in_last loop
    if not (uni in context.active) and (iunitoreg[uni,n]<>ir_none) then
      result:=true;
      return;
      end if;
    end loop;
  end i_reg_are_available;



----------------------------------------------------------------------------------------------------
procedure i_reg_get_count =
-- Spočítá, kolik je n-bytových registrů v REGS.
----------------------------------------------------------------------------------------------------
begin
  -- kolik máme n-bytových registrů ?
  result:=0;
  for uni in in_first..in_last loop
    if uni in regs and then iunitoreg[uni,n]<>ir_none then succ result; end if;
    end loop;
  end i_reg_get_count;



----------------------------------------------------------------------------------------------------
procedure i_reg_resize =
-- Převede registr na zadanou velikost.
----------------------------------------------------------------------------------------------------
begin
  -- měnit velikost high part registru takhle opravdu nelze
  verify({VERIFY=}001034,reg in ir_r8h);
  result:=iunitoreg[iregtouni[reg],size];
  end i_reg_resize;



----------------------------------------------------------------------------------------------------
procedure i_reg_save_used =
-- Uloží na stack všechny použité registry.
----------------------------------------------------------------------------------------------------
with
  ci_uni;

var
  mapping          : iregnum;                    -- pro kompatibilitu parametru

begin
  for uni in in_first..in_last loop
    if context.reginfo[uni].status in iregstatusset:[irs_used,irs_pushed] then
      i_uni_use(inst,info,context,uni,mapping);
      end if;
    end loop;
  end i_reg_save_used;



----------------------------------------------------------------------------------------------------
procedure i_reg_save_used_local =
-- Uloží na stack všechny aktivně lokálně použité registry.
----------------------------------------------------------------------------------------------------
with
  ci_uni;

begin
  for uni in in_first..in_last loop
    if context.reginfo[uni].status=irs_used and context.reginfo[uni].used>0 then
      i_uni_save(inst,info,context,uni,save_data[uni]);
      end if;
    end loop;
  end i_reg_save_used_local;



----------------------------------------------------------------------------------------------------
procedure i_reg_restore_used_local =
-- Obnoví ze stacku všechny aktivně lokálně použité registry.
----------------------------------------------------------------------------------------------------
with
  ci_uni;

begin
  for uni in in_first..in_last loop
    if context.reginfo[uni].status=irs_used and context.reginfo[uni].used>0 then
      i_uni_restore(inst,info,context,uni,save_data[uni]);
      end if;
    end loop;
  end i_reg_restore_used_local;



----------------------------------------------------------------------------------------------------
#separate private ci_alloc;
-- Alokátor registrů.
----------------------------------------------------------------------------------------------------
#separate private ci_uni;
-- Primitiva pro práci s univerzálními registry.
----------------------------------------------------------------------------------------------------

end ci_reg;
