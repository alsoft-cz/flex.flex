----------------------------------------------------------------------------------------------------
class private typeview =
-- Pohled na typ
----------------------------------------------------------------------------------------------------

    var
      _tview       : ttypeview;                  -- typ pohledu
      ptyp         : pentity_type;                   -- typ
    --_tag         : typetaginfo;                -- typová informace
    --bounds       : tboundstype;                -- typ rozsahu

    ------------------------------------------------------------------------------------------------
    static init =
    -- Sestaví pohled na zadaný typ.
    ------------------------------------------------------------------------------------------------
    begin
      -- základní údaje
      ptyp:=_ptyp;
    --_tag:=tag_static;
    --bounds:=tbs_static;

      -- zjistit typ pohledu
      _tview:=t_gettypeview(_context,_ptyp);
      end init;



    ------------------------------------------------------------------------------------------------
    static initunchecked =
    -- Sestaví Unchecked view na zadaný typ.
    ------------------------------------------------------------------------------------------------
    begin
      -- základní údaje
      ptyp:=_ptyp;

      -- typ pohledu je Unchecked view
      _tview:=tview_unchecked;
      end initunchecked;



    ------------------------------------------------------------------------------------------------
    static initfull =
    -- Sestaví Full view na zadaný typ (pokud to lze, tj. jen v případě, že
    -- by to standardně bylo Partial view).
    ------------------------------------------------------------------------------------------------
    begin
      -- základní údaje
      ptyp:=_ptyp;
    --_tag:=tag_static;
    --bounds:=tbs_static;

      -- zjistit typ pohledu
      _tview:=t_gettypefullview(_ptyp);
      end initfull;



    ------------------------------------------------------------------------------------------------
    static initaggregate =
    -- Sestaví pohled na libovolný agregátní typ.
    ------------------------------------------------------------------------------------------------
    begin
      -- základní údaje
      ptyp:=nil;

      -- typ pohled je agregát
      _tview:=tview_aggregate;
      end initaggregate;



    ------------------------------------------------------------------------------------------------
    static tview =
    -- Typ pohledu.
    ------------------------------------------------------------------------------------------------
    begin
      result:=_tview;
      end tview;



    ------------------------------------------------------------------------------------------------
    static stype =
    -- Datový typ.
    ------------------------------------------------------------------------------------------------
    begin
      verify({VERIFY=}000175,not isclass and ((ptyp=nil) or (_tview<>tview_full)));
      result:=ptyp^.stype;
      end stype;



    ------------------------------------------------------------------------------------------------
    static isclass =
    -- True, je-li typ třída.
    ------------------------------------------------------------------------------------------------
    begin
      result:=ptyp<>nil and _tview in ttypeviewset:[tview_full,tview_incomplete] and ptyp^.stype=dt_class;
      end isclass;



    ------------------------------------------------------------------------------------------------
    static compat =
    -- Determinace kompatibility.
    ------------------------------------------------------------------------------------------------
    begin
      verify({VERIFY=}000176,_tview<>tview_full or ptyp=nil);
      result:=ptyp^.compat;
      end compat;



    ------------------------------------------------------------------------------------------------
    static evaluated =
    -- Úroveň vyhodnocení typu.
    ------------------------------------------------------------------------------------------------
    begin
      verify({VERIFY=}000749,ptyp=nil);
      result:=ptyp^.evaluated;
      end evaluated;



    ------------------------------------------------------------------------------------------------
    static tagged =
    -- True, je-li typ tagged.
    ------------------------------------------------------------------------------------------------
    begin
      verify({VERIFY=}000750,ptyp=nil);
      result:=tf_tagged in ptyp^.tflags;
      end tagged;



    ------------------------------------------------------------------------------------------------
    static getutype =
    -- Typ (včetně NIL).
    ------------------------------------------------------------------------------------------------
    begin
      result:=ptyp;
      end getutype;



    ------------------------------------------------------------------------------------------------
    static getctype =
    -- Typ (NIL => internal_error).
    ------------------------------------------------------------------------------------------------
    begin
      verify({VERIFY=}000263,ptyp=nil);
      result:=ptyp;
      end getctype;



    ------------------------------------------------------------------------------------------------
    static getancestor =
    -- Předek typu.
    ------------------------------------------------------------------------------------------------
    begin
      --verify({VERIFY=}000751,not isclass and ((ptyp=nil) or (_tview<>tview_full)));
      --result.init(_context,pentity_type(ptyp^.ancestor.getuentity));

      verify({VERIFY=}000752,not isclass and (_tview not in ttypeviewset:[tview_incomplete,tview_partial,tview_full] or ptyp=nil));

      -- jak jsme na tom s viditelností předka
      if _tview=tview_partial and ptyp^.derive<>td_private_extension

        -- u Partial view na typ, není s výjimkou Private extension předek viditelný
        then result.init(_context,nil)

        -- u Full view a Partial view s Private extension je předek normálně viditelný
        else result.init(_context,pentity_type(ptyp^.ancestor.getuentity));
        end if;
      end getancestor;



    ------------------------------------------------------------------------------------------------
    static getbase =
    -- Typ báze.
    ------------------------------------------------------------------------------------------------
    begin
      verify({VERIFY=}000172,_tview<>tview_full or ptyp=nil or ptyp^.stype not in dts_u_base);
      result.init(_context,pentity_type(ptyp^.base.getutype));
      end getbase;



    ------------------------------------------------------------------------------------------------
    static getrange =
    -- Typ rozsahu.
    ------------------------------------------------------------------------------------------------
    begin
      verify({VERIFY=}000173,_tview<>tview_full or ptyp=nil or ptyp^.stype not in dts_index);
      result.init(_context,pentity_type(ptyp^.srange.getutype));
      end getrange;



    ------------------------------------------------------------------------------------------------
    static getbits =
    -- Velikost v bitech.
    ------------------------------------------------------------------------------------------------
    begin
      verify({VERIFY=}000174,_tview<>tview_full or ptyp=nil or ptyp^.stype not in dts_bitsize_defined);
      result:=ptyp^.bits;
      end getbits;



    ------------------------------------------------------------------------------------------------
    static getintaritm =
    -- Celočíselná aritmetika.
    ------------------------------------------------------------------------------------------------
    begin
      verify({VERIFY=}000220,_tview<>tview_full or ptyp=nil or ptyp^.stype not in dts_ordinal);
      result:=ptyp^.intaritm;
      end getintaritm;



    ------------------------------------------------------------------------------------------------
    static getpclass =
    -- Třída pointeru.
    ------------------------------------------------------------------------------------------------
    begin
      verify({VERIFY=}000170,_tview<>tview_full or ptyp=nil or ptyp^.stype<>dt_pointer);
      result:=ptyp^.pclass;
      end getpclass;



    ------------------------------------------------------------------------------------------------
    static getpflags =
    -- Parametry pointeru.
    ------------------------------------------------------------------------------------------------
    begin
      verify({VERIFY=}000171,_tview<>tview_full or ptyp=nil or ptyp^.stype<>dt_pointer);
      result:=ptyp^.pflags;
      end getpflags;



    ------------------------------------------------------------------------------------------------
    static getpbase =
    -- Kompatibilita báze pointeru.
    ------------------------------------------------------------------------------------------------
    begin
      verify({VERIFY=}000208,_tview<>tview_full or ptyp=nil or ptyp^.stype<>dt_pointer);
      result:=ptyp^.pbase;
      end getpbase;



    ------------------------------------------------------------------------------------------------
    static getpattrib =
    -- Dynamické atributy uložené v pointeru.
    ------------------------------------------------------------------------------------------------
    begin
      verify({VERIFY=}000328,_tview<>tview_full or ptyp=nil or ptyp^.stype<>dt_pointer);
      result:=ptyp^.pattrib;
      end getpattrib;



    ------------------------------------------------------------------------------------------------
    static getpaccess =
    -- Determina přístupu báze pointeru.
    ------------------------------------------------------------------------------------------------
    begin
      verify({VERIFY=}000547,_tview<>tview_full or ptyp=nil or ptyp^.stype<>dt_pointer);
      result:=ptyp^.paccess;
      end getpaccess;



    ------------------------------------------------------------------------------------------------
    static getlval =
    -- Dolní mez (:first).
    -- Pro ordinální typy.
    ------------------------------------------------------------------------------------------------
    begin
      verify({VERIFY=}000753,_tview<>tview_full or ptyp=nil or ptyp^.stype not in dts_ordinal);
      result:=ptyp^.lval;
      end getlval;



    ------------------------------------------------------------------------------------------------
    static gethval =
    -- Horní mez (:last).
    -- Pro ordinální typy.
    ------------------------------------------------------------------------------------------------
    begin
      verify({VERIFY=}000754,_tview<>tview_full or ptyp=nil or ptyp^.stype not in dts_ordinal);
      result:=ptyp^.hval;
      end gethval;



    ------------------------------------------------------------------------------------------------
    static get_fxplow =
    -- Lowest value of the type.
    -- For fixed-point types.
    ------------------------------------------------------------------------------------------------
    begin
      verify({VERIFY=}001420,_tview<>tview_full or ptyp=nil or ptyp^.stype not in dts_fixed);
      result:=ptyp^.fxp.low;
      end get_fxplow;



    ------------------------------------------------------------------------------------------------
    static get_fxphigh =
    -- Highest value of the type.
    -- For fixed-point types.
    ------------------------------------------------------------------------------------------------
    begin
      verify({VERIFY=}001421,_tview<>tview_full or ptyp=nil or ptyp^.stype not in dts_fixed);
      result:=ptyp^.fxp.high;
      end get_fxphigh;



    ------------------------------------------------------------------------------------------------
    static getlength =
    -- Délka rozsahu (:length, :last-:first+1).
    ------------------------------------------------------------------------------------------------
    begin
      verify({VERIFY=}000271,_tview<>tview_full or ptyp=nil or ptyp^.stype not in dts_ordinal);
      result:=uniint_length(ptyp^.lval,ptyp^.hval);
      end getlength;



    ------------------------------------------------------------------------------------------------
    static is_abstract =
    -- True, je-li typ abstraktní.
    ------------------------------------------------------------------------------------------------
    begin
      verify({VERIFY=}000694,_tview not in ttypeviewset:[tview_full,tview_incomplete] or ptyp=nil);
      result:=ptyp^.is_abstract;
      end is_abstract;



    ------------------------------------------------------------------------------------------------
    static hassize =
    -- True, lze-li zjistit velikost typu.
    ------------------------------------------------------------------------------------------------
    begin
      result:=ptyp<>nil and ptyp^.evaluated=etd_full;
      end hassize;



    ------------------------------------------------------------------------------------------------
    static getsize =
    -- Velikost typu.
    ------------------------------------------------------------------------------------------------
    begin
      verify({VERIFY=}000182,not hassize);
      result:=ptyp^.size;
      end getsize;



    ------------------------------------------------------------------------------------------------
    static setunchecked =
    -- Označí typ jako UNCHECKED.
    ------------------------------------------------------------------------------------------------
    begin
      _tview:=tview_unchecked;
      end setunchecked;

    end typeview;
