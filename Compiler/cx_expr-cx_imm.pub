----------------------------------------------------------------------------------------------------
module public cx_imm =
-- Překladač Flexu.
-- Operace s přímou hodnotou.
----------------------------------------------------------------------------------------------------
-- Ondra : 24.07.2001 : Vytvořil.
----------------------------------------------------------------------------------------------------

with
  cc_def.cc_lexsym,
  cx_expr.cx_def;

----------------------------------------------------------------------------------------------------
#separate public cx_array;
-- Práce s agregátem pole.
----------------------------------------------------------------------------------------------------
#separate public cx_set;
-- Práce s agregátem množiny.        
----------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------
procedure store_ordinal (
    imm            : out timm_value;             -- přímá hodnota
    ui             : in tuniint);                -- univerzální integer
-- Uloží do přímé hodnoty univerzální integer.
----------------------------------------------------------------------------------------------------
procedure store_real (
    imm            : out timm_value;             -- přímá hodnota
    ur             : in tunireal);               -- univerzální real
-- Uloží do přímé hodnoty univerzální real.
----------------------------------------------------------------------------------------------------
procedure store_nil (
    imm            : out timm_value);            -- přímá hodnota
-- Uloží do přímé hodnoty NIL.
----------------------------------------------------------------------------------------------------
procedure store_string (
    imm            : out timm_value;             -- přímá hodnota
    str            : in plexaggregate);          -- znakový agregát
-- Uloží do přímé hodnoty znakový agregát.
-- (Nealokuje paměť, jen převezme pointer).
----------------------------------------------------------------------------------------------------
procedure store_sysstr (
    imm            : out timm_value;             -- přímá hodnota
    s              : in t_char32ustr);           --řetězec
-- Uloží do přímé hodnoty systémový řetězec.
----------------------------------------------------------------------------------------------------
procedure store_imm (
    imm            : out timm_value;             -- přímá hodnota
    from           : in timm_value);             -- zdrojová přímá hodnota
-- Zkopíruje do přímé hodnoty jinou přímou hodnotu.
-- (vytváří fyzickou kopii).
----------------------------------------------------------------------------------------------------
procedure store_array (
    imm            : out timm_value;             -- přímá hodnota
    items          : in t_unsigned);             -- předalokovaný počet položek
-- Vytvoří přímou hodnotu typu agregát pole.
----------------------------------------------------------------------------------------------------
procedure store_array_item (
    context        : in tcontext;                -- aktuální kontext
    imm            : in out timm_value;          -- přímá hodnota
    val            : in tuniint;                 -- index
    item           : in timm_value;              -- hodnota položky
    choice         : in pexpnode);               -- související výběr
-- Uloží do přímé hodnoty (agregátu pole) hodnotu položek v určitém rozsahu.
----------------------------------------------------------------------------------------------------
procedure store_array_items_range (
    context        : in tcontext;                -- aktuální kontext
    imm            : in out timm_value;          -- přímá hodnota
    lval           : in tuniint;                 -- dolní mez
    hval           : in tuniint;                 -- horní mez
    item           : in timm_value;              -- hodnota položky
    choice         : in pexpnode);               -- související výběr
-- Uloží do přímé hodnoty (agregátu pole) hodnotu položek v určitém rozsahu.
----------------------------------------------------------------------------------------------------
procedure store_array_others (
    imm            : in out timm_value;          -- přímá hodnota
    item           : in timm_value);             -- hodnota položky
-- Uloží do přímé hodnoty (agregátu pole) hodnotu OTHERS.
----------------------------------------------------------------------------------------------------
procedure store_record (
    imm            : out timm_value);            -- přímá hodnota
-- Vytvoří přímou hodnotu typu agregát řetězce.
----------------------------------------------------------------------------------------------------
procedure store_record_item (
    context        : in tcontext;                -- aktuální kontext
    imm            : in out timm_value;          -- přímá hodnota
    pitem          : in pentity_var;             -- související položka
    item           : in timm_value);             -- hodnota položky
-- Uloží do přímé hodnoty (agregátu recordu) hodnotu jedné položky.
----------------------------------------------------------------------------------------------------
procedure store_record_others (
    imm            : in out timm_value;          -- přímá hodnota
    item           : in timm_value);             -- hodnota položky
-- Uloží do přímé hodnoty (agregátu recordu) hodnotu OTHERS.
----------------------------------------------------------------------------------------------------
procedure store_set (
    imm            : out timm_value);            -- přímá hodnota
-- Vytvoří přímou hodnotu typu agregát množiny.
----------------------------------------------------------------------------------------------------
procedure store_set_item (
    context        : in tcontext;                -- aktuální kontext
    imm            : in out timm_value;          -- přímá hodnota
    val            : in tuniint;                 -- ukládaná hodnota
    warn_duplicates: in t_logical:=true;         -- T-varovat při duplicitách
    choice         : in pexpnode:=nil);          -- související výběr
-- Uloží do přímé hodnoty (agregátu množiny) položku.
----------------------------------------------------------------------------------------------------
procedure store_set_items_range (
    context        : in tcontext;                -- aktuální kontext
    imm            : in out timm_value;          -- přímá hodnota
    lval           : in tuniint;                 -- dolní mez
    hval           : in tuniint;                 -- horní mez
    warn_duplicates: in t_logical:=true;         -- T-varovat při duplicitách
    choice         : in pexpnode:=nil);          -- související výběr
-- Uloží do přímé hodnoty (agregátu množiny) položky v určitém rozsahu.
----------------------------------------------------------------------------------------------------
procedure load_uniint (
    imm            : in timm_value;              -- přímá hodnota
    ui             : out tuniint);               -- celé číslo
-- Z přímé hodnoty načte univerzální celé číslo.
----------------------------------------------------------------------------------------------------
procedure load_unireal (
    imm            : in timm_value;              -- přímá hodnota
    ur             : out tunireal);              -- reálné číslo
-- Z přímé hodnoty načte univerzální reálné číslo
----------------------------------------------------------------------------------------------------
procedure load_unilogical (
    imm            : in timm_value;              -- přímá hodnota
    ul             : out tunilogical);           -- celé číslo
-- Z přímé hodnoty načte univerzální logickou hodnotu.
----------------------------------------------------------------------------------------------------
procedure load_sysstr (
    imm            : in timm_value;              -- přímá hodnota
    s              : out t_char32ustr);          -- řetězec
-- Z přímé hodnoty načte systémový řetězec.
----------------------------------------------------------------------------------------------------
procedure load_image (
    imm            : in timm_value;              -- přímá hodnota
    t              : in typeview;                -- typ pro formátování
    s              : out t_char32ustr);          -- výsledný řetězec
-- Z přímé hodnoty načte její textovou reprezentaci.
----------------------------------------------------------------------------------------------------
procedure imm_settype (
    curr           : in tcontext;                -- překládaný prvek
    imm            : in out timm_value;          -- přímá hodnota
    oldtype        : in typeview;                -- původní typ
    newtype        : in typeview;                -- nový typ
    change         : out t_logical);             -- T-změnila se interní reprezentace
-- Konvertuje přímou hodnotu starého typu na nový typ.
----------------------------------------------------------------------------------------------------
procedure imm_check (
    curr           : in tcontext;                -- překládaný prvek
    imm            : in timm_value;              -- přímá hodnota
    t              : in typeview);               -- typ hodnoty
-- Kontrola správnosti přímé hodnoty.
----------------------------------------------------------------------------------------------------
procedure imm_get_length (
    imm            : in timm_value;              -- přímá hodnota
    length         : out tuniint);               -- délka znakového agregátu
-- Délka znakového agregátu.
----------------------------------------------------------------------------------------------------
procedure imm_isnil (
    imm            : in timm_value)              -- přímá hodnota
                   return t_logical;             -- T-kongruentní s NIL
-- True, je-li přímá hodnota NIL nebo NIL-ekvivalentní.
----------------------------------------------------------------------------------------------------
procedure imm_isfullset (
    imm            : in timm_value;              -- přímá hodnota
    ptyp           : in pentity_type)            -- typ množiny
                   return t_logical;             -- T-kongruentní s NIL
-- True, je-li přímá hodnota ekvivalentní úplné množině.
----------------------------------------------------------------------------------------------------
procedure imm_union (
    context        : in tcontext;                -- aktuální kontext
    A              : in out timm_value;          -- množina na levé straně
    B              : in timm_value);             -- množina na pravé straně
-- Sjednocení dvou množin.
----------------------------------------------------------------------------------------------------
procedure imm_diff (
    A              : in out timm_value;          -- množina na levé straně
    B              : in timm_value);             -- množina na pravé straně
-- Rozdíl dvou množin.
----------------------------------------------------------------------------------------------------
procedure imm_isect (
    context        : in tcontext;                -- aktuální kontext
    A              : in out timm_value;          -- množina na levé straně
    B              : in timm_value);             -- množina na pravé straně
-- Průnik dvou množin.
----------------------------------------------------------------------------------------------------
procedure imm_cmp (
    imm1           : in timm_value;              -- levý operand
    imm2           : in timm_value;              -- pravý operand
    oper           : in tcmpoper;                -- typ porovnání
    cmp            : out t_logical;              -- výsledek porovnání
    typ            : in typeview;                -- typ operandů
    context        : in tcontext);               -- kontext operace
-- Porovnání dvou přímých hodnot.
----------------------------------------------------------------------------------------------------
procedure imm_concat_strings_assign (
    imm1           : in out timm_value;          -- levý (a výsledný) operand
    imm2           : in timm_value);             -- pravý operand
-- Zřetězí konstantní řetězce. Neošetřuje případ aplikace operátoru & na komponentu,
-- tento případ je řešen zvlášť.
----------------------------------------------------------------------------------------------------
{%%TODO(CONCAT) dodělat
procedure imm_concat_string_component_assign (
    imm1           : in out timm_value;          -- levý (a výsledný) operand
    imm2           : in timm_value);             -- pravý operand
-- Zřetězí konstantní řetězec a komponentu.
----------------------------------------------------------------------------------------------------
procedure imm_concat_components_assign (
    imm1           : in out timm_value;          -- levý (a výsledný) operand
    imm2           : in timm_value);             -- pravý operand
-- Zřetězí konstantní komponenty do řetězce.
----------------------------------------------------------------------------------------------------
}


end cx_imm;
