----------------------------------------------------------------------------------------------------
module private cd_type =
-- Překladač Flexu.
-- Definice typů.
----------------------------------------------------------------------------------------------------
-- Ondra : 07.11.2001 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  cc_sym,
  cd_create,cd_attr,cd_util,
  cx_expr,cx_expr.cx_def,cx_expr.cx_compile;

const
  -- definice typu
  lex_define       = lexsymset:[lex_signed,lex_unsigned,lex_imod,lex_enum,lex_logical,
                                lex_character,lex_range,{lex_digits,lex_delta,}lex_float,lex_fixed,
                                lex_ptr,lex_set,lex_array,lex_string,lex_record,lex_procedure,
                                lex_message,lex_task,lex_tag];

  -- determinace typu
  lex_determ       = lexsymset:[lex_range];

const
  plistinit        = 1;                          -- počáteční paměť pro předky
  plistdelta       = 4;                          -- změna paměti pro předky

----------------------------------------------------------------------------------------------------
procedure p_def_ordinal (
    context        : in tcontext;                -- nadřazený kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext;                -- primární kontext typu
    stype          : in tdatatype) =             -- st_signed nebo st_unsigned
-- Definice ordinálního typu SIGNED, UNSIGNED, LOGICAL nebo CHARACTER.
----------------------------------------------------------------------------------------------------
var
  expr             : pexpnode;

begin
  -- datový typ
  curr.stype:=stype;

  -- výraz
  x_vyraz(curr_context,expr,es_expr);
  curr.expr.setexpr(expr);
  end p_def_ordinal;



----------------------------------------------------------------------------------------------------
procedure p_def_modular (
    context        : in tcontext;                -- nadřazený kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext) =              -- primární kontext typu
-- Modulární SIGNED, UNSIGNED.
----------------------------------------------------------------------------------------------------
var
  lex              : lexsym;                     -- lexikální symbol

begin
  -- modulární aritmetika
  curr.intaritm:=tia_modular;

  -- SIGNED nebo UNSIGNED
  getlex(curr_context,lex);
  case lex
    when lex_signed   do p_def_ordinal(context,curr,curr_context,dt_signed);
    when lex_unsigned do p_def_ordinal(context,curr,curr_context,dt_unsigned);
    when others do
        ce^.seterror({CCERR=}000243,ce_x_un_signed);
        ce^.loadpos;
        {%%RESUME ce^.raiseerror;}
        ce^.resumeerror;
    end case;
  end p_def_modular;



----------------------------------------------------------------------------------------------------
procedure p_def_range (
    context        : in tcontext;                -- nadřazený kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext) =              -- primární kontext typu
-- Definice typu rozsahem.
----------------------------------------------------------------------------------------------------
var
  expr             : pexpnode;

begin
  -- datový typ
  curr.stype:=dt_ordinal;

  -- výraz
  x_vyraz(curr_context,expr,es_range);
  curr.expr.setexpr(expr);
  end p_def_range;



----------------------------------------------------------------------------------------------------
procedure p_def_enum (
    context        : in tcontext;                -- nadřazený kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext) =              -- primární kontext typu
-- Definice typu ENUM.
----------------------------------------------------------------------------------------------------
use
  cc_sym.cc_advanced;

var
  lex              : lexsym;                     -- lexikální symbol
  pitem            : pentity_enum;               -- prvek výčtového typu
  item_context     : tcontext;                   -- kontext prvku výčtového typu
--parent       : reftype;      -- předek
  order            : t_unsigned;                 -- pořadí výčtového prvku
  pos              : lexposblock;                -- pozice prvku
--id           : ident;

begin
  -- datový typ
  curr.stype:=dt_enum;

  -- přeložit a zařadit identifikátory
  order:=0;
  loop
    -- začátek deklarace
    d_create(curr_context,pentity(pitem),item_context,et_enum,pos);

    -- poznamenat pořadí a typ
    pitem^.order:=order;
    pitem^.typ:=^curr;

    -- ještě zařadit do tabulky identifikátorů kontextu
    cc_sym.cc_advanced.sym_add_ident(context,pitem^.id,pitem);

    -- atributy
    p_attribute(item_context);

    -- středník
    if followlex(item_context,lex_scol) then
      ce^.seterror({CCERR=}000244,ce_x_scol);
      ce^.loadpos;
      {%%RESUME ce^.raiseerror;}
      end if;

    -- konec deklarace
    d_end(pitem^,pos);

    -- pořadí příštího prvku
    succ order;

    -- bude ještě nějaký prvek ?
    looklex(curr_context,lex);
    until lex<>lex_id;

  -- END ENUM
  if followendkw(curr_context,lex_enum) then
    ce^.seterror({CCERR=}000245,ce_x_end_enum);
    ce^.loadpos2;
    {%%RESUME ce^.raiseerror;}
    end if;
  end p_def_enum;



----------------------------------------------------------------------------------------------------
procedure p_def_float (
    context        : in tcontext;                -- nadřazený kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext) =              -- primární kontext typu
{ Ondra 3.4.2003 : Zrušeno, float se nově definuje počtem bitů.
    dtype          : in tfloatdeftype) =         -- st_signed nebo st_unsigned
}
-- Definice typu floating-point číslo.
----------------------------------------------------------------------------------------------------
var
  expr             : pexpnode;

begin
  -- datový typ
  curr.stype:=dt_float;

{ Ondra 3.4.2003 : Zrušeno, float se nově definuje počtem bitů.
  -- poznamenat si o jakou definici se jedná
  curr.dtype:=dtype;
}
  -- výraz
  x_vyraz(curr_context,expr,es_expr);
  curr.expr.setexpr(expr);
  end p_def_float;



----------------------------------------------------------------------------------------------------
procedure p_def_fixed (
    context        : in tcontext;                -- nadřazený kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext) =              -- primární kontext typu
-- Definice typu fixed-point číslo.
----------------------------------------------------------------------------------------------------
var
  expr             : pexpnode;

begin
  unimplemented({UNIMP=}000211);
{
  -- datový typ
  curr.stype:=dt_fixed;

  -- výraz
  x_vyraz(curr_context,expr,es_expr);
  curr.expr.setexpr(expr);
}
  end p_def_fixed;



----------------------------------------------------------------------------------------------------
procedure p_def_pointer (
    context        : in tcontext;                -- nadřazený kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext) =              -- primární kontext typu
-- Definice typu pointer.
----------------------------------------------------------------------------------------------------
var
  lex              : lexsym;                     -- lexikální symbol

begin
  -- datový typ
  curr.stype:=dt_pointer;

  -- kompatibilita báze
  getlex(curr_context,lex);
  case lex
    -- UNCHECKED
    when lex_unchecked  do curr.pbase:=pb_unchecked;

    -- CLASS
    when lex_class      do curr.pbase:=pb_class;

    -- cokoliv jiného se nás netýká
    when others do ungetlex;
    end case;

  -- determinace přístupu
  p_varaccess(curr_context,curr.paccess);

  -- bázový typ
  looklex(curr_context,lex);
  if lex in lex_expr_start+lex_define

    -- bázový typ je uveden
    then
      p_typeidef(context,curr_context,curr.base);

    -- bázový typ není uveden
    else
      -- v tom případě ale musel být uveden modifikátor UNCHECKED
      if curr.pbase<>pb_unchecked then
        ce^.seterror({CCERR=}000246,ce_x_typ);
        ce^.setinfo(hint_ptrunchecked);
        ce^.loadpos;
        {%%RESUME ce^.raiseerror;}
        ce^.resumeerror;
        end if;
      end if;
  end p_def_pointer;



----------------------------------------------------------------------------------------------------
procedure p_def_set (
    context        : in tcontext;                -- nadřazený kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext) =              -- primární kontext typu
-- Definice typu množina.
----------------------------------------------------------------------------------------------------
begin
  -- datový typ
  curr.stype:=dt_set;

  -- OF
  if followlex(curr_context,lex_of) then
    ce^.seterror({CCERR=}000247,ce_x_of);
    ce^.loadpos;
    {%%RESUME ce^.raiseerror;}
    end if;

  -- bázový typ
  p_typeidef(context,curr_context,curr.base);
  end p_def_set;



----------------------------------------------------------------------------------------------------
procedure p_def_array (
    context        : in tcontext;                -- nadřazený kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext;                -- primární kontext typu
    nested         : in t_logical) =             -- T-vnorene volani
-- Definice typu pole.
----------------------------------------------------------------------------------------------------
var
  lex              : lexsym;                     -- lexikální symbol
  pos              : lexposblock;                -- pozice
  base             : pentity_type;               -- vnořené pole jako bázový typ
  base_context     : tcontext;                   -- kontext vnořeného pole
  expr             : pexpnode;

begin
  if checklex(curr_context,lex_of)

    -- neomezené pole
    then
      -- je-li to vnořené volání, tak musí následovat rozsah
      if nested then
        {%%X upřesnit chybové hlášení }
        ce^.seterror({CCERR=}000248,ce_x_rozsah);
        ce^.loadpos;
        {%%RESUME ce^.raiseerror;}
        ce^.resumeerror;
        end if;

      -- datový typ
      curr.stype:=dt_uarray;

      -- ALIASED
      p_aliased_access(curr_context,curr.saliased);

      -- bázový typ
      p_typeidef(context,curr_context,curr.base);

    -- normální pole
    else
      -- datový typ
      curr.stype:=dt_array;

      -- rozsah
      x_vyraz(curr_context,expr,es_range);
      curr.srange.setexpr(expr);

      -- další symbol
      getlex(curr_context,lex);

      case lex
        -- OF
        when lex_of     do
            -- ALIASED
            p_aliased_access(curr_context,curr.saliased);
  
            -- bázový typ
            p_typeidef(context,curr_context,curr.base);

        -- čárka
        when lex_comma  do
            -- nový typ
            d_create_without_name({%%TODO(Ondra) nemá tu být jen CONTEXT ??}curr_context,pentity(base),base_context,et_type,nil,pos);
            curr.base.settype(base);
            d_next(base^,pos);

            -- definice pole
            p_def_array(context,base^,base_context,true);

            -- konec deklarace
            d_end(base^,pos);

        -- cokoliv jiného je chyba
        when others do
            ce^.seterror({CCERR=}000249,ce_x_of_comma);
            ce^.loadpos;
            {%%RESUME ce^.raiseerror;}
            ce^.resumeerror;
        end case
      end if;
  end p_def_array;



----------------------------------------------------------------------------------------------------
procedure p_def_string (
    context        : in tcontext;                -- nadřazený kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext) =              -- primární kontext typu
-- Definice typu řetězec.
----------------------------------------------------------------------------------------------------
var
  expr             : pexpnode;

begin
  if checklex(curr_context,lex_of)

    -- neomezený řetězec
    then
      -- datový typ
      curr.stype:=dt_ustring;

    -- normální řetězec
    else
      -- datový typ
      curr.stype:=dt_string;

      -- počet prvků
      x_vyraz(curr_context,expr,es_expr);
      curr.expr.setexpr(expr);

      -- OF
      if followlex(curr_context,lex_of) then
        ce^.seterror({CCERR=}000250,ce_x_of);
        ce^.loadpos;
        {%%RESUME ce^.raiseerror;}
        end if;
      end if;

  -- ALIASED
  p_aliased_access(curr_context,curr.saliased);

  -- bázový typ
  p_typeidef(context,curr_context,curr.base);
  end p_def_string;



----------------------------------------------------------------------------------------------------
procedure p_slozky (
    context        : in tcontext;                -- nadřazený kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext) =              -- primární kontext typu
-- Složky recordu.
----------------------------------------------------------------------------------------------------
var
  lex              : lexsym;                     -- lexikální symbol
  pitem            : pentity_var;                -- složka
  pitemtyp         : reftype;                    -- typ složky
  item_context     : tcontext;                   -- kontext složky
  parent           : reftype;                    -- typ předka
  pos              : lexposblock;                -- pozice složky
  expr             : pexpnode;                   -- inicializační výraz

begin
  loop
    -- další symbol
    looklex(curr_context,lex);
    if lex<>lex_id then break; end if;

    -- začátek deklarace
    d_create(curr_context,pentity(pitem),item_context,et_var,pos);

    -- poznamenat další údaje
    pitem^.mclass:=mc_record;

    -- dvojtečka
    if followlex(item_context,lex_col) then
      ce^.seterror({CCERR=}000251,ce_x_col);
      ce^.loadpos;
      {%%RESUME ce^.raiseerror;}
      end if;

    -- ALIASED
    p_aliased_access(item_context,pitem^.valiased);

    -- typ
    p_typeidef(context,item_context,pitem^.typ);

    -- může následovat přiřazení a implicitní hodnota
    if checklex(item_context,lex_assign) then
      -- implicitní hodnota
      x_vyraz(item_context,expr,es_expr);
      pitem^.init.setexpr(expr);
      end if;

    -- atributy
    p_attribute(item_context);

    -- konec deklarace
    d_end(pitem^,pos);

    -- středník
    if followlex(curr_context,lex_scol) then
      ce^.seterror({CCERR=}000252,ce_x_scol);
      ce^.loadpos;
      {%%RESUME ce^.raiseerror;}
      end if;

    end loop;
  end p_slozky;



----------------------------------------------------------------------------------------------------
procedure p_def_record (
    context        : in tcontext;                -- nadřazený kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext) =              -- primární kontext typu
-- Definice typu record.
----------------------------------------------------------------------------------------------------
var
  lex              : lexsym;                     -- lexikální symbol
--varofs       : tunidata;     -- aktuální offset

begin
  -- datový typ
  curr.stype:=dt_record;

  -- složky
--udload0(varofs);
  p_slozky(context,curr{,varofs},curr_context);

  -- velikost recordu
--curr.size:=varofs;

  -- END RECORD
  if followendkw(curr_context,lex_record) then
    ce^.seterror({CCERR=}000253,ce_x_end_record);
    ce^.loadpos2;
    {%%RESUME ce^.raiseerror;}
    end if;
  end p_def_record;



----------------------------------------------------------------------------------------------------
procedure p_paramlist (
    context        : in tcontext;                -- nadřazený kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext;                -- primární kontext typu
    nomode         : in t_logical;               -- vynechat Mode a Control
    parcount       : out t_unsigned) =           -- počet parametrů
-- Seznam formálních parametrů.
----------------------------------------------------------------------------------------------------
label
  R1;

var
  lex              : lexsym;                     -- lexikální symbol
  pparam           : pentity_param;              -- parametr
  param_context    : tcontext;                   -- kontext parametru
  parmode          : parammode;                  -- mód parametru
  parpass          : parampass;                  -- předání parametru
  paraliased       : t_mem_aliased;              -- povolení aliased přístupu
  num              : t_unsigned;                 -- pořadí parametru
  expr             : pexpnode;                   -- inicializační výraz
  pos              : lexposblock;                -- pozice

begin
  parcount:=0;

  -- levá závorka
  if not checklex(curr_context,lex_lpar) then return; end if;

  num:=0;
  loop
    expr:=nil;

    -- začátek deklarace
    d_create(curr_context,pentity(pparam),param_context,et_param,pos);

    -- dvojtečka
    if followlex(param_context,lex_col) then
      ce^.seterror({CCERR=}000254,ce_x_col);
      ce^.loadpos;
      {%%RESUME ce^.raiseerror;}
      end if;

    if nomode

      -- bez Mode a Control
      then 
        p_typename(context,curr_context,pparam^.typ);
        parmode:=pm_in;
        parpass:=pp_default;

      -- s Mode a Control
      else
        ----- %%LANG -----------------------------------------------------
        -- Módy parametrů procedury:
        --
        --  Mode    ::= IN | OUT | IN OUT
        --
        --  Control ::= STATIC | REF | UNCHECKED | CLASS | VIRTUAL
        --
        ------------------------------------------------------------------

        -- %%TECH Doplnění implicitní volací konvence PP_REF pro módy OUT
        -- a IN OUT je klíčové pro správné vyhodnocení deklarace v E_PARAM.

        -- IN
        if checklex(param_context,lex_in) then
          -- další symbol
          if checklex(param_context,lex_out)

            -- IN OUT
            then
              parmode:=pm_inout;
              parpass:=pp_ref;

            -- IN
            else
              parmode:=pm_in;
              parpass:=pp_default;
              end if;

        -- OUT
        elsif checklex(param_context,lex_out) then
          parmode:=pm_out;
          parpass:=pp_ref;

        -- není uveden mód
        else
          parmode:=pm_in;
          parpass:=pp_default;
          end if;

        -- předání parametru
        getlex(param_context,lex);
        case lex
          when lex_static    do
              -- OUT a IN OUT se nesmí předávat hodnotou
              if parmode in parammodeset:[pm_out,pm_inout] then
                ce^.seterror({CCERR=}000255,ce_i_static);
                ce^.setinfo(hint_par_no_static);
                ce^.loadpos;
                {%%RESUME ce^.raiseerror;}
                goto R1;
                end if;
              parpass:=pp_value;

          when lex_ref       do parpass:=pp_ref;
          when lex_unchecked do parpass:=pp_unchecked;
          when lex_class     do parpass:=pp_class;
          when lex_virtual   do
              parpass:=pp_virtual;
              -- je jasné, že procedura obsahuje alespoň jeden
              -- řídící parametr virtuálního volání
              curr.rflags+procflagset:[rf_virtual];

          when others do ungetlex;
          end case;

      R1:
        -- další symbol
        looklex(param_context,lex);
        if lex in lexsymset:[lex_scol,lex_assign,lex_rpar]

          -- typ parametru není uveden
          then
            -- smí mít parametr vynechán typ ?
            if parpass<>pp_unchecked then
              ce^.seterror({CCERR=}000256,ce_wrongdecl);
              ce^.setinfo(hint_no_param_type);
              ce^.loadpos;
              {%%RESUME ce^.raiseerror;}
              ce^.resumeerror;
              end if;

          -- typ parametru je uveden
          else
            -- jméno typu
            p_typename(context,curr_context,pparam^.typ);
            end if;
        end if;

    -- počáteční hodnota
    if checklex(param_context,lex_assign) then
      -- smí mít parametr implicitní hodnotu ?
      if parmode=pm_inout or not pparam^.typ.isset then
        ce^.seterror({CCERR=}000257,ce_no_in_out_default);
        ce^.loadpos;
        end if;

      -- přeložit výraz
      x_vyraz(param_context,expr,es_expr);
      end if;

    -- doplnit údaje
    pparam^.mode:=parmode;
    pparam^.pass:=parpass;
    pparam^.paliased:=true; -- %%LANG Parametr je vždy aliased.
    pparam^.num:=num;
    pparam^.init.setexpr(expr);
    succ num;

    -- konec deklarace
    d_end(pparam^,pos);

    until not checklex(curr_context,lex_scol);

  -- pravá závorka
  if followlex(curr_context,lex_rpar) then
    ce^.seterror({CCERR=}000258,ce_x_rpar);
    ce^.loadpos;
    {%%RESUME ce^.raiseerror;}
    end if;

  -- kolik parametrů bylo deklarováno
  parcount:=num;
  end p_paramlist;



----------------------------------------------------------------------------------------------------
procedure p_def_procedure =
-- Definice typu procedura.
----------------------------------------------------------------------------------------------------
var
  lex              : lexsym;                     -- lexikální symbol
  pos              : lexposblock;                -- pozice
  result_context   : tcontext;                   -- kontext typu návratové hodnoty

begin
  -- datový typ
  curr.stype:=dt_procedure;

  -- parametry
  p_paramlist(context,curr,curr_context,false,curr.parcount);

  -- typ návratové hodnoty
  if checklex(curr_context,lex_return) then

    -- začátek deklarace
    d_create_without_name(curr_context,pentity(curr.result),result_context,et_param,^id_result,pos);

    -- Mode
    curr.result^.mode:=pm_out;

    -- Control
    getlex(result_context,lex);
    case lex
      when lex_class    do curr.result^.pass:=pp_class;
      when lex_virtual  do 
          curr.result^.pass:=pp_virtual;

          -- je jasné, že procedura obsahuje alespoň jeden
          -- řídící parametr virtuálního volání
          curr.rflags+procflagset:[rf_virtual];

      when others do
          -- poslední symbol vrátit do vstupu, nebyl pro nás
          ungetlex;

          -- %%TECH Doplnění implicitní volací konvence PP_DEFAULT je klíčové pro
          -- správné vyhodnocení deklarace v E_PARAM.
          curr.result^.pass:=pp_default;
      end case;

    -- jméno typu
    p_typename(context,result_context,curr.result^.typ);

    -- konec deklarace
    d_end(curr.result^,pos);
    end if;
  end p_def_procedure;



----------------------------------------------------------------------------------------------------
procedure p_def_message =
-- Definice typu zpráva.
----------------------------------------------------------------------------------------------------
begin
  -- datový typ
  curr.stype:=dt_message;

  -- parametry
  p_paramlist(context,curr,curr_context,false,curr.parcount);
  end p_def_message;



----------------------------------------------------------------------------------------------------
procedure p_def_task =
-- Definice typu task.
----------------------------------------------------------------------------------------------------
begin
  -- datový typ
  curr.stype:=dt_task;

  -- parametry
  p_paramlist(context,curr,curr_context,false,curr.parcount);
  end p_def_task;



----------------------------------------------------------------------------------------------------
procedure p_def_tag (
    context        : in tcontext;                -- nadřazený kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext) =              -- primární kontext typu
-- Definice typu tag.
----------------------------------------------------------------------------------------------------
begin
  -- datový typ
  curr.stype:=dt_tag;
  end p_def_tag;



----------------------------------------------------------------------------------------------------
procedure p_typedef (
    context        : in tcontext;                -- nadřazený kontext
    curr           : in out tentity_type;        -- typ
    curr_context   : in tcontext;                -- primární kontext typu
    lex            : in lexsym) =                -- již načtený lexikální symbol
-- Definice typu.
----------------------------------------------------------------------------------------------------
begin
  case lex
    when lex_signed     do p_def_ordinal(context,curr,curr_context,dt_signed);
    when lex_unsigned   do p_def_ordinal(context,curr,curr_context,dt_unsigned);
    when lex_imod       do p_def_modular(context,curr,curr_context);
    when lex_enum       do p_def_enum(context,curr,curr_context);
    when lex_logical    do p_def_ordinal(context,curr,curr_context,dt_logical);
    when lex_character  do p_def_ordinal(context,curr,curr_context,dt_char);
    when lex_range      do p_def_range(context,curr,curr_context);
{ Ondra 3.4.2003 : Zrušeno, float se nově definuje počtem bitů.
    when lex_digits     do p_def_float(context,curr,curr_context,fdt_digits);
    when lex_delta      do p_def_float(context,curr,curr_context,fdt_delta);
}
    when lex_float      do p_def_float(context,curr,curr_context);
    when lex_fixed      do p_def_fixed(context,curr,curr_context);
    when lex_ptr        do p_def_pointer(context,curr,curr_context);
    when lex_set        do p_def_set(context,curr,curr_context);
    when lex_array      do p_def_array(context,curr,curr_context,false);
    when lex_string     do p_def_string(context,curr,curr_context);
    when lex_record     do p_def_record(context,curr,curr_context);
    when lex_procedure  do p_def_procedure(context,curr,curr_context);
    when lex_message    do p_def_message(context,curr,curr_context);
    when lex_task       do p_def_task(context,curr,curr_context);
    when lex_tag        do p_def_tag(context,curr,curr_context);
    when others         do verifyc({VERIFY=}000058,true);
    end case;
  end p_typedef;



----------------------------------------------------------------------------------------------------
procedure p_typeedef =
-- Definice typu jako součást deklarace.
----------------------------------------------------------------------------------------------------
var
  lex              : lexsym;                     -- lexikální symbol
  pparent          : reftype;                    -- předek typu
  expr             : pexpnode;                   -- výraz

begin
  -- ABSTRACT
  curr.is_abstract:=checklex(curr_context,lex_abstract);
   
  -- další symbol
  getlex(curr_context,lex);

  if lex in lex_define

    -- přímo definice typu
    then
      -- je to root typ
      curr.derive:=td_root;

      -- definice
      p_typedef(context,curr,curr_context,lex);

    -- jméno typu
    else
      ungetlex;

      -- jméno typu předka
      x_vyraz(curr_context,expr,es_name);

      -- dosadit jako předka
      curr.ancestor.setexpr(expr);

      -- constraint/extension
      getlex(curr_context,lex);
      case lex
        -- range constraint
        when lex_range  do
            curr.derive:=td_constrained;

            -- rozsah/výraz
            x_vyraz(curr_context,expr,es_choice);
            curr.expr.setexpr(expr);

        -- type extension
        when lex_with do
            -- rozšíření musí být regulární
            curr.tkind:=tk_regular;

            -- není tam PRIVATE ?
            getlex(curr_context,lex);
            if lex=lex_private

              -- private extension
              then
                -- PRIVATE smí být jen v PUBLIC/PROTECTED části modulu/třídy
                if not ((context.entity^.etype in ets_modular)
                and (context.region^.vsect in tentityvisibleset:[etv_public,etv_protected])) then
                  ce^.seterror({CCERR=}000259,ce_i_extension);
                  ce^.setinfo(hint_private_extension);
                  {%%RESUME ce^.raiseerror;}
                  ce^.resumeerror;
                  end if;

                -- private extension
                curr.derive:=td_private_extension;

              -- normální extension
              else
                -- normální extension
                curr.derive:=td_extension;

                if lex in lex_define

                  -- definice
                  then p_typedef(context,curr,curr_context,lex)

                  -- jméno
                  else
                    ungetlex;
                    unimplemented({UNIMP=}000058);
                    end if;
                end if;

        -- triviální derivace
        when others do
            curr.derive:=td_unconstrained;
            ungetlex;
        end case;
      end if;
  end p_typeedef;



----------------------------------------------------------------------------------------------------
procedure p_private_extension =
-- Private extension declaration.
----------------------------------------------------------------------------------------------------
var
  lex              : lexsym;                     -- lexikální symbol

begin
  -- další symbol
  getlex(curr_context,lex);

  -- definice
  p_typedef(context,curr,curr_context,lex);
  end p_private_extension;



----------------------------------------------------------------------------------------------------
procedure p_typeidef =
-- Jméno typu nebo definice jako součást implicitní deklarace.
----------------------------------------------------------------------------------------------------
var
  lex              : lexsym;                     -- lexikální symbol
  pos              : lexposblock;                -- pozice implicitní deklarace typu
  ityp             : pentity_type;               -- implicitně deklarovaný typ
  ityp_context     : tcontext;                   -- kontext implicitně deklarovaného typu

begin
  -- další symbol
  getlex(context,lex);
  if lex in lex_define

    -- implicitní deklarace
    then
      --u_nimplemented(20);

      -- začátek deklarace
      d_create_without_name(context,pentity(ityp),ityp_context,et_type,nil,pos);
      ptyp.settype(ityp);
      d_next(ityp^,pos);

      -- definice
      p_typedef(context,ityp^,ityp_context,lex);

      -- konec deklarace
      d_end(ityp^,pos);

    -- jméno typu
    else
      ungetlex;

      -- jméno typu
      p_typename(context,curr,ptyp);
      end if;

  -- další symbol
  getlex(context,lex);
  if lex in lex_determ

    -- determinace odvozeného typu
    then
      unimplemented({UNIMP=}000021);

    -- bez determinace
    else 
      ungetlex;
      end if;
  end p_typeidef;



----------------------------------------------------------------------------------------------------
procedure p_typename =
-- Jméno typu.
----------------------------------------------------------------------------------------------------
var
  expr             : pexpnode;

begin
  -- jméno
  x_vyraz(context,expr,es_name);
  ptyp.setexpr(expr);
  end p_typename;



end cd_type;
