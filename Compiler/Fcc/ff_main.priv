----------------------------------------------------------------------------------------------------
module private ff_main =
-- Flex Command-line Compiler
----------------------------------------------------------------------------------------------------

with
  standard,
  standard.names,
  compiler,
  cc_def,
  cc_def.cc_codes;   {%%TODO(MESSAGE) kvuli config_error }

----------------------------------------------------------------------------------------------------
procedure fcc_main =
-- Hlavní program.
----------------------------------------------------------------------------------------------------
with
  standard,
  standard.console,
  standard.conversions,
  standard.program_control,
  ff_lib,
  ff_lib.ff_text_output,
  ff_lib.ff_files,
  ff_lib.ff_cmd_line;

use
  cc_def.cc_var;

var
  compiler         : c_flex_compiler;            -- instance překladače
  config           : c_compilation_config;       -- konfigurace překladu

begin
  -- initial copyright notice
  write_line(flex_product_name); 
  write_line(flex_copyright);
#if #declared flex_license_notice; then;
  write_line(flex_license_notice);
#end if;
  write_line('');

  -- připravit seznam jmen dostupných souborů
  init_external_file_source;

  declare var
    full_cmd_line  : p_char32ustr;               -- příkazový řádek

  begin
    -- získat příkazový řádek
    get_command_line(full_cmd_line);

    -- zpracovat řádkové parametry
    parse_command_line(full_cmd_line,console_writer^,config);

  leave
    -- uvolnit paměť
    discard full_cmd_line;
    end declare;

  -- bylo uvedeno jméno souboru ?
  if config.src_name=nil then
    write_line('Source file name not specified');
    raise fcc_error;
    end if;

  -- připravit všechna jména souborů
  config.prepare_names;

  -- inicializovat compiler podle nastavene platformy, cpu etc.
  compiler.init(flex_version_string);

  -- přeložit
  compiler.compile(console_writer^,config.src_name^,config.exe_name^,config.lib_name^,config.lst_name^,config.ctm_name^);

  -- vypsat seznam chyb na obrazovku a do listingu
  print_errors(console_writer^);
  print_errors(compiler.get_listing_writer^);

  -- připravit exit-code tohoto procesu podle počtu zjištěných chyb
  set_task_exit_code(cc_def.cc_var.ce^.error_count);

  -- zavrit soubor listingu
  compiler.finalize;

catch
  when fcc_error do
      -- nic nedělat, případné chybové hlášení je již zobrazené

  when config_error do                                                            
      {%%TODO(MESSAGE)  az bude predavani messagi do procedur, tak se to da vyhodit }  
      write_line('Configuration error');
  end fcc_main;

end ff_main;