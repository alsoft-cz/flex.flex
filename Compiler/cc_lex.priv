----------------------------------------------------------------------------------------------------
module private cc_lex =
-- Překladač Flexu.
-- Lexikální analyzátor.
----------------------------------------------------------------------------------------------------
-- Ondra : 25.04.2000 : Vytvořil
----------------------------------------------------------------------------------------------------

with
#if #declared profiler_lex; #and then; profiler_lex then;
  rdtsc_profile,
#end if;
  cc_var,
  cc_def.cc_codes;

var
  -- aktuální rozšíření lexikální analýzy
  behavior         : {%%TODO(TASK)} p_lex_behavior;

-- dopředné deklarace
class abstract c_lexer; type p_lexer = ^class c_lexer;

----------------------------------------------------------------------------------------------------
class public abstract c_lexer = 
-- Lexikální analyzátor - zdroj lexikálních elementů.
----------------------------------------------------------------------------------------------------

    type
      -- unget buffer na jeden lexikální element
      lexungetbuffer = record
          valid    : t_logical;                  -- T-obsah bufferu je platný
          lex      : lexsym;                     -- lexikální element
          val      : lexval;                     -- hodnota elementu
          pos      : lexpos;                     -- pozice elementu
          end record;

    var
      -- buffer na poslední lexikální element
      last         : lexungetbuffer;

      -- buffer na posledních několik pozic lexikálních elementů
      last_pos     : array 0..2 of lexpos;       -- kruhový buffer na pozice posledních tří elementů
      last_pos_curr: t_unsigned;                 -- index do kruhového bufferu

    ------------------------------------------------------------------------------------------------
    virtual discardable return t_logical; 
    -- True, je-li lexikální analyzátor na jedno použití.
    ------------------------------------------------------------------------------------------------
    virtual top_level return t_logical;  
    -- True, je-li to top-level lexikální analyzátor, který nesmí být odstraněn bez toho, že by se
    -- přešlo k nadřazenému souboru.
    ------------------------------------------------------------------------------------------------
    virtual abstract get_lex_element;
    -- Získá ze vstupu jeden lexikální prvek a naplní jím složku [last].
    -- Vrátí-li lexikální analyzátor hodnotu [lex_nul], volající zavolá [get_lex_element] znovu.
    -- Vrátí-li lexikální analyzátor hodnotu [lex_eof] a existuje ještě nějaký další lexikální
    -- analyzátor, zavolá volající [lex_pop_lexer] a volání [get_lex_element] opakuje, jinak
    -- [lex_eof] odpovídá skutečného konci souboru.
    ------------------------------------------------------------------------------------------------
    static unget_lex_element;
    -- Posledně přečtený element vrátí zpět do vstupu - obsah unget buffer označí za platný.
    ------------------------------------------------------------------------------------------------
    static reget_lex_element;
    -- Simuluje vyčtení elementu z unget bufferu - obsah unget bufferu označí za neplatný.
    ------------------------------------------------------------------------------------------------
    static get_lex_pos (
        level      : in lexlevel;                -- který element zpět nás zajímá
        pos        : out lexpos);                -- získaná pozice
    -- Získá pozici lexikálního elementu.
    ------------------------------------------------------------------------------------------------
    virtual optimize_memory (
        val        : in lexval);                 -- hodnota symbolu
    -- Optimalizuje paměť využitou posledně vráceným lexikálním elementem.
    ------------------------------------------------------------------------------------------------
    static store_last_position;
    -- Uloži pozici posledního elementu do bufferu pozic.
    ------------------------------------------------------------------------------------------------

  supervised

    var
      next         : p_lexer;                    -- další lexikální analyzátor na stacku

    end c_lexer;

----------------------------------------------------------------------------------------------------
class private abstract c_lexer = 
-- Lexikální analyzátor - zdroj lexikálních elementů.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    virtual discardable =
    -- True, je-li lexikální analyzátor na jedno použití.
    ------------------------------------------------------------------------------------------------
    begin
      result:=true;
      end discardable;



    ------------------------------------------------------------------------------------------------
    virtual top_level =
    -- True, je-li to top-level lexikální analyzátor, který nesmí být odstraněn bez toho, že by se
    -- přešlo k nadřazenému souboru.
    ------------------------------------------------------------------------------------------------
    begin
      result:=false;
      end top_level;



    ------------------------------------------------------------------------------------------------
    static unget_lex_element =
    -- Posledně přečtený element vrátí zpět do vstupu - obsah unget buffer označí za platný.
    ------------------------------------------------------------------------------------------------
    begin
      -- označit obsah unget bufferu za platný
      last.valid:=true;

      -- posunout index v bufferu pozic zpět
      if last_pos_curr=last_pos:first
        then last_pos_curr:=last_pos:last;
        else pred last_pos_curr;
        end if;
      end unget_lex_element;



    ------------------------------------------------------------------------------------------------
    static reget_lex_element =
    -- Simuluje vyčtení elementu z unget bufferu - obsah unget bufferu označí za neplatný.
    ------------------------------------------------------------------------------------------------
    begin
      -- označit obsah unget bufferu za neplatný
      last.valid:=false;

      -- posunout index v bufferu pozic dopředu
      last_pos_curr:=(last_pos_curr+1) mod last_pos:length;
      end reget_lex_element;



    ------------------------------------------------------------------------------------------------
    static get_lex_pos =
    -- Získá pozici lexikálního elementu.
    ------------------------------------------------------------------------------------------------
    var
      i            : t_unsigned;

    begin
      -- připravit si index pozice
      i:=last_pos_curr;
      if level=ll_prev then
        if i=last_pos:first
          then i:=last_pos:last
          else pred i;
          end if;
        end if;

      -- je pozice k dispozici ?
      if last_pos[i].num<>0

        -- ano => předat ven
        then pos:=last_pos[i]

        -- ne => musíme se zkusit zeptat předka
        else
          -- musí být však nějaký předek k dispozici
          if next=nil then return end if;

          -- hledáme-li předchozí element a v tomto lexeru není k dispozici ani aktuální,
          -- propagovat beze změny níž, jinak vždy redukovat na dotaz na aktuální element
          if level=ll_prev and last_pos[last_pos_curr].num=0
            then next^.get_lex_pos(ll_prev,pos);
            else next^.get_lex_pos(ll_curr,pos);
            end if;
          end if;
      end get_lex_pos;



    ------------------------------------------------------------------------------------------------
    virtual optimize_memory =
    -- Optimalizuje paměť využitou posledně vráceným lexikálním elementem.
    ------------------------------------------------------------------------------------------------
    begin 
      -- implicitně nic nedělat
      end optimize_memory;



    ------------------------------------------------------------------------------------------------
    static store_last_position =
    -- Uloži pozici posledního elementu do bufferu pozic.
    ------------------------------------------------------------------------------------------------
    begin
      last_pos_curr:=(last_pos_curr+1) mod last_pos:length;
      last_pos[last_pos_curr]:=last.pos;
      end store_last_position;
  
    end c_lexer;

----------------------------------------------------------------------------------------------------
procedure lex_set_lexer (
    lexer          : in p_lexer);
-- Nastaví aktuální lexikální analyzátor na zadaný [lexer].
----------------------------------------------------------------------------------------------------
procedure lex_pop_lexer;
-- Přejde od současného k předchozímu lexikálnímu analyzátoru.
----------------------------------------------------------------------------------------------------
procedure lex_get_lex_element (
    lex            : out lexsym{;                -- ziskaný lexikální element
    val            : out lexval;                 -- hodnota elementu
    pos            : out lexpos});               -- pozice elementu
-- Získá ze vstupu jeden lexikální prvek.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
#separate public cc_lex0;
-- Lexikální analyzátor, oddělení lexikálních elementů.
----------------------------------------------------------------------------------------------------
#separate public cc_pre;
-- Preprocesor. 
----------------------------------------------------------------------------------------------------



var
  -- aktuální lexikální analyzátor
  lexer            : {%%TODO(TASK)} p_lexer;

----------------------------------------------------------------------------------------------------
procedure getlex =
-- Přečte ze vstupu jeden lexikální element.
----------------------------------------------------------------------------------------------------
var
  xlex             : lexsym;                     -- ziskany elementu
--xval             : lexval;                     -- hodnota elementu
--xpos             : lexpos;                     -- pozice elementu
  xend             : t_logical;                  -- T-konec čtení symbolů

begin
#if #declared profiler_lex; #and then; profiler_lex then;
  rdtsc_start;
  succ _getlex;
#end if;

  loop
    -- přečíst symbol ze vstupu
    lex_get_lex_element(xlex{,xval,xpos});

    -- je tento symbol zajímavý pro preprocesor ?
    if xlex=lex_id or xlex=lex_meta_id {xlex in lexsymset:[lex_meta_id,lex_id]}

      -- ano => zavolat preprocesor
      then cc_pre.p_preprocessor(context,xlex,lexer^.last.val{xval},xend);

      -- ne => konec
      else xend:=true;
      end if;
    until xend;

  -- lexikální element předat ven
  lex:=xlex;

#if #declared profiler_lex; #and then; profiler_lex then;
  rdtsc_stop(_getlex_t);
#end if;
  end getlex;



----------------------------------------------------------------------------------------------------
procedure ungetlex =
-- Posledně přečtený lexikální element vrátí zpět do vstupu.
-- Flex je LL(1), takže se lze vrátit vždy jen o jeden symbol.
----------------------------------------------------------------------------------------------------
begin
#if #declared profiler_lex; #and then; profiler_lex then;
  rdtsc_start;
  succ _ungetlex;
#end if;

  lexer^.unget_lex_element;

#if #declared profiler_lex; #and then; profiler_lex then;
  rdtsc_stop(_ungetlex_t);
#end if;
  end ungetlex;



----------------------------------------------------------------------------------------------------
procedure looklex =
-- Přečte ze vstupu jeden lexikální element, ale neodstraní ho ze vstupu (getlex+ungetlex).
----------------------------------------------------------------------------------------------------
begin
  getlex(context,lex);
  ungetlex;
  end looklex;



----------------------------------------------------------------------------------------------------
procedure checklex =
-- Podívá se na následující lexikální element, a pokud je shodný se zadaným, tak vrátí True
-- a odstraní ho ze vstupu. V opačném případě vrátí False a vstup nezmění.
----------------------------------------------------------------------------------------------------
var
  lex1             : lexsym;

begin
  getlex(context,lex1);
  result:=lex=lex1;
  if not result then
    ungetlex;
    end if;
  end checklex;



----------------------------------------------------------------------------------------------------
procedure ignorelex =
-- Je-li následující symbol LEX, tak ho odignoruje, jinak ponechá.
----------------------------------------------------------------------------------------------------
var
  lex1             : lexsym;

begin
  getlex(context,lex1);
  if lex<>lex1 then ungetlex; end if;
  end ignorelex;



----------------------------------------------------------------------------------------------------
procedure followlex =
-- Přečte ze vstupu lexikální element a zkontroluje ho proti zadanému. Pokud se shodují, vrátí
-- False a element odstraní ze vstupu. V opačném případě vrátí True a element a) ponechá ve
-- vstupu, b) odstraní ze vstupu, pokud je podobný zadanému.
----------------------------------------------------------------------------------------------------
var
  xlex             : lexsym;

begin
  -- přečíst symbol
  getlex(context,xlex);
  if lex=xlex

    -- stejné, není co řešit
    then
      result:=false;
      return;

    -- rozdílné, určitě chyba
    else
      result:=true;
      end if;

  -- nejsou podobné ?
  for i in lexsimilar:range loop
    if (lexsimilar[i].l1=lex and lexsimilar[i].l2=xlex)
    or (lexsimilar[i].l1=xlex and lexsimilar[i].l2=lex)
    then return end if;
    end loop;

  {%%X ještě by to mohl být identifikátor podobný klíčovému slovu }

  -- jsou rozdílné, odsimulovat
  ungetlex;
  end followlex;



----------------------------------------------------------------------------------------------------
procedure followendkw =
-- Přečte ze vstupu sekvenci "END <klíčové slovo>".
-- Procedura se chová obdobně jako FOLLOWLEX.
----------------------------------------------------------------------------------------------------
var
  lex1             : lexsym;                     -- lexikální symboly
  lex2             : lexsym;                     -- lexikální symboly

begin
  -- přečíst první symbol (END)
  getlex(context,lex1);
  if lex1 not in lexsymset:[lex_end,lex_id] then
    result:=true;
    ungetlex;
    return
    end if;

  -- přečíst druhý symbol (klíčové slovo)
  getlex(context,lex2);

  -- END <klíčové slovo>
  if lex1=lex_end and lex2=kw then
    result:=false

  -- END <středník>
  -- <identifikátor> <středník>
  elsif lex2=lex_scol then
    result:=true;
    ungetlex;

  -- END <identifikátor>
  -- <identifikátor> <klíčové slovo>
  -- <identifikátor> <identifikátor>
  -- <jiný blábol>
  else
    result:=true;
    end if;
  end followendkw;



----------------------------------------------------------------------------------------------------
procedure followendid =
-- Přečte ze vstupu sekvenci "END <identifikátor>".
-- Procedura se chová obdobně jako FOLLOWLEX.
----------------------------------------------------------------------------------------------------
var
  lex1             : lexsym;                     -- lexikální symboly
  lex2             : lexsym;                     -- lexikální symboly

begin
  -- přečíst první symbol (END)
  getlex(context,lex1);
  if lex1 not in lexsymset:[lex_end,lex_id] then
    result:=true;
    ungetlex;
    return;
    end if;

  -- přečíst druhý symbol (klíčové slovo)
  getlex(context,lex2);

  -- END <identifikátor>
  if (lex1=lex_end and lex2=lex_id) and then getlexid^=id then
    result:=false

  -- END <středník> 
  -- <identifikátor> <středník> 
  elsif lex2=lex_scol then
    result:=true;
    ungetlex;

  -- END <klíčové slovo> 
  -- <identifikátor> <klíčové slovo>
  -- <identifikátor> <identifikátor> 
  -- <jiný blábol> 
  else
    result:=true;
    end if;
  end followendid;



----------------------------------------------------------------------------------------------------
procedure resumelex =
-- Vyčítá symboly, dokud nenarazí na hledaný symbol nebo na terminátor.       
----------------------------------------------------------------------------------------------------
begin
  loop
    -- další symbol 
    getlex(context,xlex);

    -- nalezen LEX 
    if xlex=lex then
      case rl
        when rl_skip  do -- nic
        when rl_leave do ungetlex;
        when others   do verify({VERIFY=}000188,true);
        end case;
      break;

    -- nalezen TERM 
    elsif xlex=term then
      case rt
        when rt_skip   do -- nic
        when rt_leave  do ungetlex;
        when rt_resume do ungetlex; ce^.resumeerror;
        when rt_fail   do ce^.raiseerror;
        when others    do verify({VERIFY=}000189,true);
        end case;
      break;

    -- konec textu 
    elsif xlex=lex_eof then 
      ce^.raiseerror;
      end if;
    end loop;
  end resumelex;



----------------------------------------------------------------------------------------------------
procedure getlexpos =
-- Vrátí pozici lexikálního prvku.
----------------------------------------------------------------------------------------------------
begin
  lexer^.get_lex_pos(level,pos);
  if after then
    pos.col+pos.len;
    pos.len:=0;
    end if;
  end getlexpos;



----------------------------------------------------------------------------------------------------
procedure getlexposall =
-- Vrátí pozici lexikálního prvku (začátek i konec).
----------------------------------------------------------------------------------------------------
begin
  getlexpos(pos.b,level,false);
  getlexpos(pos.e,level,true);
  end getlexposall;



----------------------------------------------------------------------------------------------------
procedure cmplexposb =
-- True <=> POS1 < POS2
----------------------------------------------------------------------------------------------------
begin
  result:=pos1.num=pos2.num and (pos1.line<pos2.line or (pos1.line=pos2.line and pos1.col<pos2.col));
  end cmplexposb;



----------------------------------------------------------------------------------------------------
procedure cmplexposa =
-- True <=> POS1 > POS2
----------------------------------------------------------------------------------------------------
begin
  result:=pos1.num=pos2.num and (pos1.line>pos2.line or (pos1.line=pos2.line and pos1.col>pos2.col));
  end cmplexposa;



----------------------------------------------------------------------------------------------------
procedure getlexid =
-- Posledně přečtený lexikální element: identifikátor.
----------------------------------------------------------------------------------------------------
begin
  result:=lexer^.last.val.id;
  lexer^.last.val.id_used:=true;
  end getlexid;



----------------------------------------------------------------------------------------------------
procedure getlextxt =
-- Posledně přečtený lexikální element: textový tvar lexikálního elementu ze vstupu.
----------------------------------------------------------------------------------------------------
begin
  result:=lexer^.last.val.txt;
  lexer^.last.val.txt_used:=true;
  end getlextxt;



----------------------------------------------------------------------------------------------------
procedure getlexui =
-- Posledně přečtený lexikální element: hodnota celočíselného literálu.
----------------------------------------------------------------------------------------------------
begin
  --%%X Doplnit formální kontrolu
  result:=lexer^.last.val.ui;
  end getlexui;



----------------------------------------------------------------------------------------------------
procedure getlexur =
-- Posledně přečtený lexikální element: hodnota reálného literálu.
----------------------------------------------------------------------------------------------------
begin
  --%%X Doplnit formální kontrolu
  result:=lexer^.last.val.ur;
  end getlexur;



----------------------------------------------------------------------------------------------------
procedure getlexstring =
-- Posledně přečtený lexikální element: hodnota znakového agregátu.
----------------------------------------------------------------------------------------------------
begin
  --%%X Doplnit formální kontrolu
  result:=lexer^.last.val.str;
  end getlexstring;



----------------------------------------------------------------------------------------------------
procedure getlexcode =
-- Posledně přečtený lexikální element: hodnota doplňkového kódu.
----------------------------------------------------------------------------------------------------
begin
  --%%X Doplnit formální kontrolu
  result:=lexer^.last.val.code;
  end getlexcode;



----------------------------------------------------------------------------------------------------
procedure getlexval =
-- Posledně přečtený lexikální element: celá hodnota.
----------------------------------------------------------------------------------------------------
begin
  val:=lexer^.last.val;
  end getlexval;



----------------------------------------------------------------------------------------------------
procedure setlex =
-- Změní posledně přečtený lexikální element.
----------------------------------------------------------------------------------------------------
begin
  lexer^.last.lex:=lex;
  end setlex;



----------------------------------------------------------------------------------------------------
procedure setlexid =
-- Změní identifikátor související s posledně přečteným lexikálním elementem.
----------------------------------------------------------------------------------------------------
begin
  lexer^.last.val.id:=id;
  lexer^.last.val.id_used:=true;
  end setlexid;



----------------------------------------------------------------------------------------------------
procedure setlexval =
-- Změní hodnotu posledně přečteného lexikálního symbolu.
----------------------------------------------------------------------------------------------------
begin
  lexer^.last.val:=val;
  lexer^.last.val.id_used:=true;
  lexer^.last.val.txt_used:=true;
  end setlexval;



----------------------------------------------------------------------------------------------------
procedure lex_set_lexer =
-- Nastaví aktuální lexikální analyzátor na zadaný [lexer].
----------------------------------------------------------------------------------------------------
use
  supervised c_lexer;

begin
  -- zařadit do seznamu
  lexer^.next:=current module.lexer;
  current module.lexer:=lexer;
  end lex_set_lexer;



----------------------------------------------------------------------------------------------------
procedure lex_pop_lexer =
-- Přejde od současného k předchozímu lexikálnímu analyzátoru.
----------------------------------------------------------------------------------------------------
use
  supervised c_lexer;

var
  x                : p_lexer;

begin
  -- zamapatovat si aktuální lexer
  x:=lexer;

  -- přejít k předchozímu
  lexer:=lexer^.next;
  verify({VERIFY=}000637,lexer=nil);

  -- dosavadní zrušit
  if x^.discardable then 
    discard x;
    end if;
  end lex_pop_lexer;



----------------------------------------------------------------------------------------------------
procedure lex_get_lex_element =
-- Získá ze vstupu jeden lexikální prvek.
----------------------------------------------------------------------------------------------------
use
  supervised cc_base.cc_text;

begin
#if #declared profiler_lex; #and then; profiler_lex then;
  rdtsc_start;
  succ _lex_get_lex_element;
#end if;

  loop
    -- přečíst element
    if lexer^.last.valid

      -- použít element z bufferu
      then
        lexer^.reget_lex_element;

      -- načíst čerstvý element
      else
        lexer^.get_lex_element;
        end if;

    case lexer^.last.lex
      -- identifikátor
      when lex_id do
          -- zkusit vyhledat v tabulce klíčových slov
          if behavior<>nil then
            behavior^.search_keyword(lexer^.last.val.id^,lexer^.last.lex,lexer^.last.val);
            end if;
          break;

      -- konec řádku
      when lex_eoln do
          -- hlásit jen je-li to požadováno
          if behavior<>nil and then behavior^.report_eol then
            break;
            end if;

      -- je-li to [lex_nul], pak opakujeme
      when lex_nul do -- nic nedělat

      -- konec toku elementů 
      when lex_eof do
          -- máme v zásobě ještě další analyzátor ? => přejít k němu
          if not lexer^.top_level then lex_pop_lexer;

          -- byl soubor includovaný ? => přejít k nadřazenému
          elsif cc_base.cc_text.lex_input^.is_include then 
            cc_base.cc_text.text_close;

          -- jinak předat konec souboru ven
          else 
            break;
            end if;

      -- je to nějaký konkrétní element ? => vrátit ho
      when others do break;
      end case;
    end loop;

  -- pozici získaného elementu přesunout do bufferu pozic
  lexer^.store_last_position;

  -- získaný element předat ven
  lex:=lexer^.last.lex;
{
  val:=lexer^.last.val;
  pos:=lexer^.last.pos;
}
#if #declared profiler_lex; #and then; profiler_lex then;
  rdtsc_stop(_lex_get_lex_element_t);
#end if;
  end lex_get_lex_element;



----------------------------------------------------------------------------------------------------
procedure lex_set_default_lexer =
-- Rezerva do budoucna: nastaví implicitní lexikální analyzátor. Zatím pouze alokuje standardní
-- lexikální analyzátor.
----------------------------------------------------------------------------------------------------
var
  x                : ^cc_lex0;

begin
  -- vytvořit implicitní lexikální analyzátor
  new x;

  -- zařadit do zpracování
  lex_set_lexer(x);
  end lex_set_default_lexer;



----------------------------------------------------------------------------------------------------
procedure lex_pop_default_lexer =
-- Zruší implicitní lexikální analyzátor.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}000775,lexer=nil or else not lexer^.top_level);
  lex_pop_lexer;
  end lex_pop_default_lexer;



----------------------------------------------------------------------------------------------------
class private abstract c_lex_behavior = 
-- Policy třída implementující modifikaci chování lexikálního analyzátoru.
----------------------------------------------------------------------------------------------------

    var
      -- původní nastavená modifikace chování
      saved_behavior : p_lex_behavior;



    ------------------------------------------------------------------------------------------------
    entry =
    -- Inicializace.
    ------------------------------------------------------------------------------------------------
    begin
      -- zařadit se na stack modifikací chování
      saved_behavior:=behavior;
      behavior:=^this;
      end entry;



    ------------------------------------------------------------------------------------------------
    exit =
    -- Finalizace.
    ------------------------------------------------------------------------------------------------
    begin
      -- vyřadit se ze stacku modifikací chování
      behavior:=saved_behavior;
      end exit;

    end c_lex_behavior;



----------------------------------------------------------------------------------------------------
class private c_lex_behavior_flex =
-- Modifikace chování lexikálního analyzátoru: Flex - nehlásí konce řádků, překládá klíčová slova.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override search_keyword =
    -- Vyhledání klíčového slova podle jeho textové reprezentace.
    ------------------------------------------------------------------------------------------------
    with
      standard.characters,
      standard.characters.ascii;

    var
      zac            : t_unsigned;
      stred_unsigned : t_unsigned;
      stred          : t_unsigned;
      kon            : t_unsigned;
      first_c        : tidentchar;

    begin
      -- klíčová slova neobsahují znaky _ a 0..9
      if not val.can_be_kw then 
        return;
        end if;

      -- %%TODO(OVERLOAD) - zmenit ascii_char_to_upper na char_to_upper
      -- zkusit najít klíčové slovo
      first_c:=ascii_char_to_upper(txt[1]);
      
      if first_c<lexkeywords_index:first or first_c>lexkeywords_index:last then return; end if;
--    %%TODO(IN) if first_c not in lexkeywords_index:range:type then return end if;

      zac:=lexkeywords_index[first_c].first;
      if zac<>nil {and then txt:length<=lexkeywords_index[first_c:ord].max_length} then
        kon:=lexkeywords_index[first_c].last;
        loop
          stred:=(zac+kon) div 2;
          if txt>lexkeywords[stred].txt
            then zac:=stred+1
            else kon:=stred
            end if;
          until zac>=kon;
        if ({%%TODO(IN)}zac>=lexkeywords:first and zac<=lexkeywords:last) and then txt=lexkeywords[zac].txt
          -- nalezeno
          then lex:=lexkeywords[zac].lex
          -- nenalezeno
          -- else lex:=lex_nul
          end if;
        end if;
      end search_keyword;

    end c_lex_behavior_flex;



----------------------------------------------------------------------------------------------------
class private c_lex_behavior_plain =
-- Modifikace chování lexikálního analyzátoru: Nic - nehlásí konce řádků, nepřekládá klíčová slova.
----------------------------------------------------------------------------------------------------

    ------------------------------------------------------------------------------------------------
    override search_keyword =
    -- Vyhledání klíčového slova podle jeho textové reprezentace.
    ------------------------------------------------------------------------------------------------
    begin
      -- nic nedělat
      end search_keyword;

    

    ------------------------------------------------------------------------------------------------
    entry =
    -- Inicializace
    ------------------------------------------------------------------------------------------------
    begin
      -- povolit hlášení konců řádků
      report_eol:=true;
      end entry;
    
    end c_lex_behavior_plain;



----------------------------------------------------------------------------------------------------
#separate private cc_lex0;
-- Lexikální analyzátor, oddělení lexikálních elementů.
----------------------------------------------------------------------------------------------------
#separate private cc_pre;
-- Preprocesor. 
----------------------------------------------------------------------------------------------------
          
var
  -- %%TECH instanciovat implicitní modifikaci chování lexikálního analyzátoru
  default_behavior : c_lex_behavior_flex;

end cc_lex;
