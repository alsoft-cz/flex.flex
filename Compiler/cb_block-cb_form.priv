----------------------------------------------------------------------------------------------------
module private cb_form =
-- Překladač Flexu.
-- Formální kontrola bloku příkazů.
----------------------------------------------------------------------------------------------------
-- Ondra : 01.10.2001 : Vytvořil
----------------------------------------------------------------------------------------------------

with
  cd_decl,cd_decl.cd_eval;

type
  -- character cyklu, ve kterém je příkaz vnořen
  t_loop_kind      = enum
      lk_none;                                   -- žádný cyklus
      lk_for;                                    -- FOR cyklus
      lk_others;                                 -- ostatní cykly
      end enum;

  -- kontext příkazu
  blcontext        = record
      in_msg       : t_logical;                  -- T-příkaz je obsažen v obsluze zprávy
      in_loop      : t_loop_kind;                -- T-příkaz je obsažen v cyklu
      in_catch     : t_logical;                  -- T-příkaz je obsažen v části CATCH
      end record;

----- %%TECH ---------------------------------------------------------------------------------------
-- Nepředpokládá se rušení nebo vytváření nových uzlů stromu.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
procedure b_form_node (
    curr           : in tcontext;                -- překládaný prvek
    bl             : in pblnode;                 -- příkaz
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo;              -- informace o průběhu analýzy
    catch_mode     : in t_catch_mode:=catch_mode_implicit); -- způsob, jak zachytávat chyby resume_error
-- Formální kontrola jednoho uzlu.
----------------------------------------------------------------------------------------------------




----------------------------------------------------------------------------------------------------
procedure b_form_sequence (
    curr           : in tcontext;                -- překládaný prvek
    list           : in bllist;                  -- první uzel sekvence
    all            : out t_logical;              -- T-všechny příkazy zkontrolovány
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola posloupnosti příkazů.
----------------------------------------------------------------------------------------------------
var
  p                : pblnode;

begin
  -- optimistický předpoklad
  all:=true;

  -- označit všechny návěští jako přístupé
  {%%X Optimalizovat: provádět jen pro bloky, }
  -- ve kterých skutečně nějaké návěští je.
  p:=list.first;
  while p<>nil loop
    if p^.btype=bt_label then pbllabel(p)^.plabel^.reachable:=true; end if;
    p:=p^.next;
    end loop;

  -- formální kontrola všech příkazů
  p:=list.first;
  while p<>nil loop
    -- formální kontrola příkazu
    b_form_node(curr,p,context,info,catch_mode_catch);

    -- povedla se formální kontrola ?
    if p^.zprac<bp_form then all:=false; end if;

    -- další příkaz
    p:=p^.next;
    end loop;

  -- označit všechny návěští jako nepřístupné
  p:=list.first;
  while p<>nil loop
    if p^.btype=bt_label then
      pbllabel(p)^.plabel^.reachable:=false;
      end if;
    p:=p^.next;
    end loop;
  end b_form_sequence;



----------------------------------------------------------------------------------------------------
procedure b_form_cmd (
    curr           : in tcontext;                -- překládaný prvek
    bl             : in pblcmd;                  -- příkaz
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola přiřazovacího příkazu.
----------------------------------------------------------------------------------------------------
var
  e                : tentityeval;

begin
  -- vyhodnodit výraz
  x_evaluate(curr,bl^.expr,ek_assign,nil,eu_none,info.final,e);
  {%%X Nějaký divný: jeden příkaz by neměl mít vliv na celý blok }
  if e_part(info.eval,e) then return; end if;

  -- formální kontrola příkazu úspěšně dokončena
  bl^.zprac:=bp_form;
  end b_form_cmd;



----------------------------------------------------------------------------------------------------
procedure b_form_break (
    curr           : in tcontext;                -- překládaný prvek
    bl             : in pblbreak;                -- příkaz
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola příkazu BREAK.
----------------------------------------------------------------------------------------------------
begin
  -- break smí být jen v cyklu
  if context.in_loop=lk_none then
    ce^.seterror({CCERR=}000002,ce_i_break);
    ce^.setinfo(hint_break);
    bl^.errpos(bp_begin);
    {%%X ce^.raiseerror;}
    ce^.resumeerror;
    end if;

  -- BREAK uvnitř FOR cyklu je považován za neobvyklou konstrukci
  if context.in_loop=lk_for then
    ce^.setwarning(curr,{CCERR=}000564,cw_strange_design);
    bl^.errpos(bp_begin);
    end if;

  -- formální kontrola příkazu úspěšně dokončena
  bl^.zprac:=bp_form;
  end b_form_break;



----------------------------------------------------------------------------------------------------
procedure b_form_return (
    curr           : in tcontext;                -- překládaný prvek
    bl             : in pblreturn;               -- příkaz
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola příkazu RETURN.
----------------------------------------------------------------------------------------------------
begin
  -- není co kontrolovat

  -- formální kontrola příkazu úspěšně dokončena
  bl^.zprac:=bp_form;
  end b_form_return;



----------------------------------------------------------------------------------------------------
procedure b_form_raise (
    curr           : in tcontext;                -- překládaný prvek
    bl             : in pblraise;                -- příkaz
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola příkazu RAISE.
----------------------------------------------------------------------------------------------------
var
  e                : tentityeval;

begin
  -- je uvedeno jméno zprávy ?
  if bl^.msg<>nil

    -- je uvedeno
    then
      x_evaluate(curr,bl^.msg,ek_context_send,nil,eu_none,info.final,e);
      if e_part(info.eval,e) then return; end if;

    -- není uvedeno => musí to být v části CATCH
    else
      if not context.in_catch then
        ce^.seterror({CCERR=}000003,ce_i_raise);
        ce^.setinfo(hint_raise);
        bl^.errpos(bp_begin);
        {%%X ce^.raiseerror;}
        ce^.resumeerror;
        end if;
      end if;

  -- je uvedeno jméno tasku ?
  if bl^.dest<>nil then
    unimplemented({UNIMP=}000207);
    end if;

  -- formální kontrola příkazu úspěšně dokončena
  bl^.zprac:=bp_form;
  end b_form_raise;



----------------------------------------------------------------------------------------------------
procedure b_form_send (
    curr           : in tcontext;                -- překládaný prvek
    bl             : in pblsend;                 -- příkaz
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola příkazu SEND.
----------------------------------------------------------------------------------------------------
begin

  -- formální kontrola příkazu úspěšně dokončena
  bl^.zprac:=bp_form;
  end b_form_send;



----------------------------------------------------------------------------------------------------
procedure b_form_goto (
    curr           : in tcontext;                -- překládaný prvek
    bl             : in pblgoto;                 -- příkaz
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola příkazu GOTO.
----------------------------------------------------------------------------------------------------
begin
  ----- %%TECH Princip kontroly správnosti GOTO ----------------------------------------------------
  -- Na začátku vyhodnocení posloupnosti příkazu (B_FORM_SEQUENCE) se u všech
  -- návěští nastaví příznak REACHABLE. Při ukončení kontroly sekvence se
  -- opět všechny příznaky shodí.
  --   V kontrole GOTO se pak jen testuje, zda odkazované návěští je dostupné
  -- či nikoliv. Nedostupné návěští znamená nepovolený skok do vnořené
  -- posloupnosti (vnitřek cyklu, IF, skok mezi sekcemi (CATCH, LEAVE) apod.)
  --
  -- %%X Mělo by se to předělat. Ten příznak REACHABLE je pěkná záplata, je
  -- to provozní informace, která nemá v popisu entity co dělat. Lepší by bylo
  -- sestavovat lokální seznam dostupných návěští.
  --------------------------------------------------------------------------------------------------

  -- návěští musí být umístěno
  if not bl^.plabel^.placed then
    ce^.seterror({CCERR=}000004,ce_badlabel);
    --%%TODO(LIB) ce^.setinfo(formats(hint_label_not_placed,bl^.plabel^.id^));
    bl^.errpos(bp_begin);
    {%%RESUME ce^.raiseerror;}
    return;
    end if;

  -- návěští musí být přístupné
  if not bl^.plabel^.reachable then
    ce^.seterror({CCERR=}000005,ce_badlabel);
    ce^.setinfo(hint_bad_label);
    bl^.errpos(bp_begin);
    {%%RESUME ce^.raiseerror;}
    return;
    end if;

  -- formální kontrola příkazu úspěšně dokončena
  bl^.zprac:=bp_form;
  end b_form_goto;



----------------------------------------------------------------------------------------------------
procedure b_form_new (
    curr           : in tcontext;                -- překládaný prvek
    bl             : in pblnew;                  -- příkaz
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola příkazu NEW.
----------------------------------------------------------------------------------------------------
var
  ptyp             : pentity_type;               -- typ proměnné
  e                : tentityeval;

begin
  -- vyhodnodit výraz
  x_evaluate(curr,bl^.xvar,ek_var_pointer,nil,eu_write,info.final,e);
  {%%X Nějaký divný: jeden příkaz by neměl mít vliv na celý blok }
  if e_part(info.eval,e) then return; end if;

  -- budeme potřebovat typ proměnné
  ptyp:=bl^.xvar^.t.getctype;
  verify({VERIFY=}000741,ptyp^.stype<>dt_pointer);

  -- kontrola přístupu
  case ptyp^.paccess
    -- bez omezení
    when va_norm do { nic nedělat };

    -- PROTECTED
    when va_protected do
        unimplemented({UNIMP=}000208);

    -- CONST
    when va_const do
        ce^.seterror({CCERR=}000006,ce_i_varaccess);
        bl^.xvar^.errpos;
        ce^.resumeerror;

    when others do verify({VERIFY=}000742,true);
    end case;

  -- pointer na abstraktní typ je dovolen jen tehdy, když je uveden i TAG
  if bl^.xtag=nil and then ptyp^.base.isset and then ptyp^.base.getctype^.is_abstract then
    ce^.seterror({CCERR=}000007,ce_i_type);
    bl^.xvar^.errpos;
    ce^.resumeerror;
    end if;
  
  -- je uveden TAG ?
  if bl^.xtag<>nil then
    -- pointer musí být CLASS
    if ptyp^.pbase<>pb_class then
      ce^.seterror({CCERR=}000008,ce_noclassptr);
      bl^.xtag^.errpos;
      ce^.resumeerror;
      end if;

    -- vyhodnotit
    x_evaluate(curr,bl^.xtag,ek_expr_tag,nil,eu_use,info.final,e);
    {%%X Nějaký divný: jeden příkaz by neměl mít vliv na celý blok }
    if e_part(info.eval,e) then return; end if;
    end if;

  -- je uveden RANGE ?
  if bl^.xrange<>nil

    -- ano je
    then
      -- je to ^uchecked
      if (ptyp^.pbase=pb_unchecked) and not ptyp^.base.isset then
        x_evaluate(curr,bl^.xrange,ek_expr_integer,nil,eu_use,info.final,e);
        {%%X Nějaký divný: jeden příkaz by neměl mít vliv na celý blok }
        if e_part(info.eval,e) then return; end if;

      -- je to ^neomezené pole/řetězec
      elsif ptyp^.base.getctype^.stype in dts_unconstrained then
        x_evaluate(curr,bl^.xrange,ek_expr_integer,ptyp^.base.getctype^.srange.getctype,eu_use,info.final,e);
        {%%X Nějaký divný: jeden příkaz by neměl mít vliv na celý blok }
        if e_part(info.eval,e) then return; end if;

      -- nic jiného nemůže mít RANGE
      else
        ce^.seterror({CCERR=}000009,ce_nounconstrainedptr);
        bl^.xrange^.errpos;
        ce^.resumeerror;
        end if;

      {%%LANG pokud je současně uvedeno TAG, musí být unconstrained }

    -- ne => nesmí to být ^neomezené pole/řetězec nebo ^unchecked
    else
      --%%LANG nevadí, pokud je současně uvedeno TAG, musí být ale constrained
      --%%X Tohle zkontrolovat, nějak mi to není jasné
      if bl^.xtag=nil and ((ptyp^.pbase=pb_unchecked and not ptyp^.base.isset)
      or ptyp^.base.getctype^.stype in dts_unconstrained) then
        ce^.seterror({CCERR=}000010,ce_sizenotknown);
        bl^.xvar^.errpos;
        ce^.resumeerror;
        end if;
      end if;

  -- formální kontrola příkazu úspěšně dokončena
  bl^.zprac:=bp_form;
  end b_form_new;



----------------------------------------------------------------------------------------------------
procedure b_form_discard (
    curr           : in tcontext;                -- překládaný prvek
    bl             : in pbldiscard;              -- příkaz
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola příkazu DISCARD.
----------------------------------------------------------------------------------------------------
var
  e                : tentityeval;

begin
  -- vyhodnodit výraz
  x_evaluate(curr,bl^.xvar,ek_var_pointer,nil,eu_change,info.final,e);
  {%%X Nějaký divný: jeden příkaz by neměl mít vliv na celý blok }
  if e_part(info.eval,e) then return; end if;

  -- formální kontrola příkazu úspěšně dokončena
  bl^.zprac:=bp_form;
  end b_form_discard;



----------------------------------------------------------------------------------------------------
procedure b_form_adjust (
    curr           : in tcontext;                -- překládaný prvek
    bl             : in pbladjust;               -- příkaz
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola příkazu ADJUST.
----------------------------------------------------------------------------------------------------
var
  ptyp             : pentity_type;               -- typ proměnné
  e                : tentityeval;

begin
  -- vyhodnodit výraz
  x_evaluate(curr,bl^.xvar,ek_var_pointer,nil,eu_write,info.final,e);
  {%%X Nějaký divný: jeden příkaz by neměl mít vliv na celý blok }
  if e_part(info.eval,e) then return; end if;

  -- budeme potřebovat typ proměnné
  ptyp:=bl^.xvar^.t.getctype;
  verify({VERIFY=}000743,ptyp^.stype<>dt_pointer);

  -- kontrola přístupu
  case ptyp^.paccess
    -- bez omezení
    when va_norm do { nic nedělat };

    -- PROTECTED
    when va_protected do
        unimplemented({UNIMP=}000209);

    -- CONST
    when va_const do
        ce^.seterror({CCERR=}000011,ce_i_varaccess);
        bl^.xvar^.errpos;
        ce^.resumeerror;

    when others do verify({VERIFY=}000744,true);
    end case;

  -- je to ^uchecked
  if ptyp^.pbase=pb_unchecked and not ptyp^.base.isset then
    x_evaluate(curr,bl^.xrange,ek_expr_integer,nil,eu_use,info.final,e);
    {%%X Nějaký divný: jeden příkaz by neměl mít vliv na celý blok }
    if e_part(info.eval,e) then return; end if;

  -- je to ^neomezené pole/řetězec
  elsif ptyp^.base.getctype^.stype in dts_unconstrained then
    x_evaluate(curr,bl^.xrange,ek_expr_integer,ptyp^.base.getctype^.srange.getctype,eu_use,info.final,e);
    {%%X Nějaký divný: jeden příkaz by neměl mít vliv na celý blok }
    if e_part(info.eval,e) then return; end if;

  -- nic jiného nelze ADJUST
  else
    ce^.seterror({CCERR=}000012,ce_i_type);
    bl^.xrange^.errpos;
    ce^.resumeerror;
    end if;

  -- formální kontrola příkazu úspěšně dokončena
  bl^.zprac:=bp_form;
  end b_form_adjust;



----------------------------------------------------------------------------------------------------
procedure b_form_delay (
    curr           : in tcontext;                -- překládaný prvek
    bl             : in pbldelay;                -- příkaz
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola příkazu DELAY.
----------------------------------------------------------------------------------------------------
begin

  -- formální kontrola příkazu úspěšně dokončena
  bl^.zprac:=bp_form;
  end b_form_delay;



----------------------------------------------------------------------------------------------------
procedure b_form_if (
    curr           : in tcontext;                -- překládaný prvek
    bl             : in pblif;                   -- příkaz
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola příkazu IF.
----------------------------------------------------------------------------------------------------
var
  sub              : pblif_cond;                 -- větve IF
  all              : t_logical;                  -- vyhodnocení bloku
  allx             : t_logical;                  -- vyhodnocení bloku
  e                : tentityeval;

begin
  -- optimistický předpoklad
  all:=true;

  -- formální kontrola všech větví
  sub:=pblif_cond(bl^.sub.first);
  while sub<>nil loop
    verify({VERIFY=}000098,sub^.btype<>bt_if_cond);

    -- kontrola podmínky
    if sub^.cond<>nil then
      x_evaluate(curr,sub^.cond,ek_cond,nil,eu_read,info.final,e,catch_mode_catch);
      {%%X Nějaký divný: jeden příkaz by neměl mít vliv na celý blok }
      all and not e_part(info.eval,e);
      end if;

    -- kontrola bloku
    b_form_sequence(curr,sub^.sub,allx,context,info);
    all and allx;

    -- další větev
    sub:=pblif_cond(sub^.next);
    end loop;

  -- povedla se formální kontrola všech větví ?
  if not all then return; end if;

  -- formální kontrola příkazu úspěšně dokončena
  bl^.zprac:=bp_form;
  end b_form_if;



----------------------------------------------------------------------------------------------------
procedure b_form_loop (
    curr           : in tcontext;                -- překládaný prvek
    bl             : in pblloop;                 -- příkaz
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola příkazu LOOP.
----------------------------------------------------------------------------------------------------
var
  newcontext       : blcontext;                  -- nový kontext
  all              : t_logical;                  -- vyhodnocení bloku
  e                : tentityeval;

begin
  -- připravit nový kontext
  newcontext:=context;
  newcontext.in_loop:=lk_others;

  -- vyhodnotit blok
  b_form_sequence(curr,bl^.sub,all,newcontext,info);

  -- vyhodnotit podmínku
  if bl^.cond<>nil then
    -- vyhodnodit výraz
    x_evaluate(curr,bl^.cond,ek_cond,nil,eu_read,info.final,e,catch_mode_catch);
    {%%X Nějaký divný: jeden příkaz by neměl mít vliv na celý blok }
    all and not e_part(info.eval,e);
    end if;

  -- vyhodnotil se blok ?
  if not all then return; end if;

  -- formální kontrola příkazu úspěšně dokončena
  bl^.zprac:=bp_form;
  end b_form_loop;



----------------------------------------------------------------------------------------------------
procedure b_form_for (
    curr           : in tcontext;                -- překládaný prvek
    bl             : in pblfor;                  -- příkaz
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola příkazu FOR.
----------------------------------------------------------------------------------------------------
use
  cc_base,cc_base.cc_sym;

var
  newcontext       : blcontext;                  -- nový kontext
--xvar             : pentity_var;                -- řídící proměnná cyklu
  all              : t_logical;                  -- vyhodnocení bloku
--e                : tentityeval;

begin
  -- připravit nový kontext
  newcontext:=context;
  newcontext.in_loop:=lk_for;

  -- řídící proměnná i rozsah jsou již vyhodnoceny

{ Ondra 10.12.2002 : Původní verze bez implicitní deklarace proměnné:

  -- vyhodnotit jméno řídící proměnné
  x_evaluate(curr,bl^.xvar,ek_var_ordinal,nil,eu_write,true,e);
  -- %%X Nějaký divný: jeden příkaz by neměl mít vliv na celý blok
  if e_part(info.eval,e) then return; end if;

  -- řídící proměnná cyklu musí být lokální v překládaném prvku
  x_get_symbol(bl^.xvar,pentity(xvar));
  if xvar^.context.entity<>^curr then
    ce^.seterror({CCERR=}000013,ce_i_looppar);
    bl^.xvar^.errpos;
    ce^.resumeerror;
    end if;

  -- řídící proměnná cyklu nesmí být parametr procedury
  if xvar^.pparam<>nil then
    ce^.seterror({CCERR=}000014,ce_i_looppar);
    bl^.xvar^.errpos;
    ce^.resumeerror;
    end if;

  -- řídící proměnná cyklu nemůže mít jen tak ledajakou paměťovou třídu
  verify({VERIFY=}000413,not (curr.entity^.etype in ets_subprogram+tentitytypeset:[et_program]));
  if ((curr.entity^.etype=et_program) and (xvar^.mclass<>mc_static))
  or ((curr.entity^.etype in ets_subprogram) and (xvar^.mclass<>mc_auto)) then
    ce^.seterror({CCERR=}000015,ce_i_looppar);
    bl^.xvar^.errpos;
    ce^.resumeerror;
    end if;

  -- vyhodnotit rozsah
  if bl^.xrange<>nil then
    x_evaluate(curr,bl^.xrange,ek_range,xvar^.typ.getctype,eu_read,true,e);
    -- %%X Nějaký divný: jeden příkaz by neměl mít vliv na celý blok
    if e_part(info.eval,e) then return; end if;
    end if;
}

  -- vyhodnotit blok
  b_form_sequence(cc_base.cc_sym.sym_build_context(curr.entity,bl^.for_region){curr},bl^.sub,all,newcontext,info);

  -- vyhodnotil se blok ?
  if not all then return; end if;

  -- formální kontrola příkazu úspěšně dokončena
  bl^.zprac:=bp_form;
  end b_form_for;



----------------------------------------------------------------------------------------------------
procedure b_form_while (
    curr           : in tcontext;                -- překládaný prvek
    bl             : in pblwhile;                -- příkaz
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola příkazu WHILE.
----------------------------------------------------------------------------------------------------
var
  newcontext       : blcontext;                  -- nový kontext
  all              : t_logical;                  -- vyhodnocení bloku
  allx             : t_logical;                  -- vyhodnocení bloku
  e                : tentityeval;

begin
  -- připravit nový kontext
  newcontext:=context;
  newcontext.in_loop:=lk_others;

  -- vyhodnotit podmínku
  x_evaluate(curr,bl^.cond,ek_cond,nil,eu_read,info.final,e,catch_mode_catch);
  {%%X Nějaký divný: jeden příkaz by neměl mít vliv na celý blok }
  all:=not e_part(info.eval,e);

  -- vyhodnotit blok
  b_form_sequence(curr,bl^.sub,allx,newcontext,info);
  all and allx;

  -- vyhodnotil se blok ?
  if not all then return; end if;

  -- formální kontrola příkazu úspěšně dokončena
  bl^.zprac:=bp_form;
  end b_form_while;



----------------------------------------------------------------------------------------------------
procedure b_form_case (
    curr           : in tcontext;                -- překládaný prvek
    bl             : in pblcase;                 -- příkaz
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola příkazu CASE
----------------------------------------------------------------------------------------------------
var
  blwhen           : pblwhen_c;                  -- větev CASE
  all              : t_logical;                  -- T-všechny příkazy zkontrolovány
  e                : tentityeval;
  allx             : t_logical;
  main_expr        : t_logical;                  -- příznak, zda byl vyhodnocen řídící výraz

begin
  -- vyhodnotit řídící výraz
  x_evaluate(curr,bl^.expr,ek_expr_ordinal,nil,eu_read,true,e,catch_mode_catch);

  -- zanést informaci o vyhodnocení části do celku
  main_expr:=not e_part(info.eval,e);

  -- zpracovat všechny výběry
  all:=true;
  blwhen:=pblwhen_c(bl^.sub.first);
  while blwhen<>nil loop
    case blwhen^.ctype
      -- seznam výběrů
      when bct_choice do
          -- pokud byl vyhodnocen řídící výraz, vyhodnotit příkaz when
          if main_expr then
            verify({VERIFY=}000418,blwhen^.list=nil or else blwhen^.list^:length=0);
            for i in blwhen^.list^:range loop
              x_evaluate(curr,blwhen^.list^[i],ek_context_case,bl^.expr^.t.getctype,eu_use,info.final,e,catch_mode_catch);
              all and not e_part(info.eval,e);
              end loop;
            end if;

      -- OTHERS
      when bct_others do -- nic nedělat

      when others do verify({VERIFY=}000419,true);
      end case;

    -- formální kontrola příkazů
    b_form_sequence(curr,blwhen^.sub,allx,context,info);
    all:=all and allx;

    -- formální kontrola příkazu úspěšně dokončena
    if all and main_expr then blwhen^.zprac:=bp_form; end if;

    -- další WHEN
    blwhen:=pblwhen_c(blwhen^.next);
    end loop;

  -- %%TECH Zbytek formální kontroly (kontroly výběrů) se nestandardně provádí
  -- během optimalizace. Je to z toho důvodu, že se tak stejné datové
  -- struktury mohou vypočítávat jen jednou a zároveň lze optimalizovat.

  -- povedla se formální kontrola všech příkazů ?
  if not all then return; end if;

  -- formální kontrola příkazu úspěšně dokončena
  bl^.zprac:=bp_form;
  end b_form_case;



----------------------------------------------------------------------------------------------------
procedure b_form_accept (
    curr           : in tcontext;                -- překládaný prvek
    bl             : in pblaccept;               -- příkaz
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola příkazu ACCEPT
----------------------------------------------------------------------------------------------------
begin

  -- formální kontrola příkazu úspěšně dokončena
  bl^.zprac:=bp_form;
  end b_form_accept;



----------------------------------------------------------------------------------------------------
procedure b_form_catch (
    curr           : in tcontext;                -- překládaný prvek
    list           : in bllist;                  -- příkaz
    all            : out t_logical;              -- T-všechny příkazy zkontrolovány
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola části CATCH.
----------------------------------------------------------------------------------------------------
var
  newcontext       : blcontext;                  -- nový kontext
  e                : tentityeval;
  blwhen           : pblwhen_m;
  allx             : t_logical;

begin
  -- připravit nový kontext
  newcontext:=context;
  newcontext.in_catch:=true;

  -- zpracovat všechny výběry
  all:=true;
  blwhen:=pblwhen_m(list.first);
  while blwhen<>nil loop
    case blwhen^.ctype
      -- seznam jmen výjimek
      when bct_choice do
          verify({VERIFY=}000311,blwhen^.list=nil or else blwhen^.list^:length=0);
          for i in blwhen^.list^:range loop
            x_evaluate(curr,blwhen^.list^[i],ek_context_accept,nil,eu_use,info.final,e,catch_mode_catch);
            all and not e_part(info.eval,e);
            end loop;

      -- OTHERS
      when bct_others do -- nic nedělat

      when others do verify({VERIFY=}000308,true);
      end case;

    -- formální kontrola příkazů
    b_form_sequence(curr,blwhen^.sub,allx,newcontext,info);
    all:=all and allx;

    -- formální kontrola příkazu úspěšně dokončena
    if all then blwhen^.zprac:=bp_form; end if;

    -- další WHEN
    blwhen:=pblwhen_m(blwhen^.next);
    end loop;
  end b_form_catch;


----------------------------------------------------------------------------------------------------
procedure b_form_block (
    curr           : in tcontext;                -- překládaný prvek
    bl             : in pblblock;                -- příkaz
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola bloku příkazů.
----------------------------------------------------------------------------------------------------
var
  newcontext       : blcontext;                  -- nový kontext
  all1             : t_logical;                  -- zpracování příkazové části
  all2             : t_logical;                  -- zpracování části CATCH
  all3             : t_logical;                  -- zpracování části ROLLBACK
  all4             : t_logical;                  -- zpracování části COMMIT
  all5             : t_logical;                  -- zpracování části LEAVE

begin
  -- připravit nový kontext
  newcontext:=context;
  newcontext.in_catch:=false;

  -- příkazová část
  b_form_sequence(curr,bl^.sub,all1,newcontext,info);

  -- část CATCH
  b_form_catch(curr,bl^.bcatch,all2,newcontext,info);

  -- část ROLLBACK
  b_form_sequence(curr,bl^.brollback,all3,newcontext,info);

  -- část COMMIT
  b_form_sequence(curr,bl^.bcommit,all4,newcontext,info);

  -- část LEAVE
  b_form_sequence(curr,bl^.bleave,all5,newcontext,info);

  -- povedla se formální kontrola všech větví  ?
  if not (all1 and all2 and all3 and all4 and all5) then return; end if;

  -- formální kontrola příkazu úspěšně dokončena
  bl^.zprac:=bp_form;
  end b_form_block;



----------------------------------------------------------------------------------------------------
procedure b_form_protected (
    curr           : in tcontext;                -- překládaný prvek
    bl             : in pblblock;                -- příkaz
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola protected bloku příkazů.
----------------------------------------------------------------------------------------------------
begin
  b_form_block(curr,bl,context,info);
  end b_form_protected;



----------------------------------------------------------------------------------------------------
procedure b_form_sequential (
    curr           : in tcontext;                -- překládaný prvek
    bl             : in pblblock;                -- příkaz
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola sekvenčního bloku příkazů.
----------------------------------------------------------------------------------------------------
begin
  b_form_block(curr,bl,context,info);
  end b_form_sequential;



----------------------------------------------------------------------------------------------------
procedure b_form_declare (
    curr           : in tcontext;                -- překládaný prvek
    bl             : in pbldeclare;              -- příkaz
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola bloku příkazů s lokálními deklaracemi.
----------------------------------------------------------------------------------------------------
with
  cc_base,
  cc_base.cc_sym;

begin
  b_form_block(sym_build_context(curr.entity,bl^.declare_region),bl,context,info);
  end b_form_declare;



----------------------------------------------------------------------------------------------------
procedure b_form_label (
    curr           : in tcontext;                -- překládaný prvek
    bl             : in pbllabel;                -- příkaz
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola návěští.
----------------------------------------------------------------------------------------------------
begin
  -- není moc co kontrolovat

  -- formální kontrola příkazu úspěšně dokončena
  bl^.zprac:=bp_form;
  end b_form_label;



----------------------------------------------------------------------------------------------------
procedure b_form_asm (
    curr           : in tcontext;                -- překládaný prvek
    bl             : in pbllabel;                -- příkaz
    context        : in blcontext;               -- aktuální kontext
    info           : in out blinfo) =            -- informace o průběhu analýzy
-- Formální kontrola inline assembleru.
----------------------------------------------------------------------------------------------------
begin
  -- není moc co kontrolovat

  -- formální kontrola příkazu úspěšně dokončena
  bl^.zprac:=bp_form;
  end b_form_asm;



----------------------------------------------------------------------------------------------------
procedure b_form_node =
-- Formální kontrola jednoho uzlu.
----------------------------------------------------------------------------------------------------
begin
  verify({VERIFY=}000022,bl=nil);

  -- jednou zkontrolované příkazy přeskočit
  if bl^.zprac<>pred bp_form then return end if;

  -- pokud je uzel chybný, nezpracovávat
  if bl^.erroneous then return end if;

  -- zkontrolovat výraz
  case bl^.btype
    -- přiřazovací příkaz
    when bt_cmd         do b_form_cmd(curr,pblcmd(bl),context,info);

    -- příkaz BREAK
    when bt_break       do b_form_break(curr,pblbreak(bl),context,info);

    -- příkaz RETURN
    when bt_return      do b_form_return(curr,pblreturn(bl),context,info);

    -- příkaz RAISE
    when bt_raise       do b_form_raise(curr,pblraise(bl),context,info);

    -- příkaz SEND
    when bt_send        do b_form_send(curr,pblsend(bl),context,info);

    -- příkaz GOTO
    when bt_goto        do b_form_goto(curr,pblgoto(bl),context,info);

    -- příkaz NEW
    when bt_new         do b_form_new(curr,pblnew(bl),context,info);

    -- příkaz DISCARD
    when bt_discard     do b_form_discard(curr,pbldiscard(bl),context,info);

    -- příkaz ADJUST
    when bt_new         do b_form_adjust(curr,pbladjust(bl),context,info);

    -- příkaz DELAY
    when bt_delay       do b_form_delay(curr,pbldelay(bl),context,info);

    -- příkaz IF
    when bt_if          do b_form_if(curr,pblif(bl),context,info);

    -- příkaz LOOP
    when bt_loop        do b_form_loop(curr,pblloop(bl),context,info);

    -- příkaz FOR
    when bt_for         do b_form_for(curr,pblfor(bl),context,info);

    -- příkaz WHILE
    when bt_while       do b_form_while(curr,pblwhile(bl),context,info);

    -- příkaz CASE
    when bt_case        do b_form_case(curr,pblcase(bl),context,info);

    -- příkaz ACCEPT
    when bt_accept      do b_form_accept(curr,pblaccept(bl),context,info);

    -- blok příkazu
    when bt_block       do b_form_block(curr,pblblock(bl),context,info);

    -- protected blok příkazu
    when bt_protected   do b_form_protected(curr,pblblock(bl),context,info);

    -- sekvenční blok příkazu
    when bt_sequential  do b_form_sequential(curr,pblblock(bl),context,info);

    -- blok příkazů s lokálními deklaracemi
    when bt_declare     do b_form_declare(curr,pbldeclare(bl),context,info);

    -- návěští
    when bt_label       do b_form_label(curr,pbllabel(bl),context,info);

    -- kód v assembleru
    when bt_asm         do b_form_asm(curr,pbllabel(bl),context,info);

    -- jiné symboly tu nemají co dělat
    when others do verify({VERIFY=}000023,true);
    end case;

catch 
    when resume_error do
        -- kontrola
        verify({VERIFY=}000856,bl^.zprac>=bp_form or else info.eval=ete_evaluated);

        -- nastavit příznak, že tento uzel byl chybný
        bl^.erroneous:=true;

        -- znovu vyvolat vyjímku
        if block_catch_resume_error(catch_mode,bl^.btype) then raise;end if;
  end b_form_node;



----------------------------------------------------------------------------------------------------
procedure b_form =
-- Formální kontrola bloku příkazů.
----------------------------------------------------------------------------------------------------
var
  context          : blcontext;

begin
  -- provést formální kontrolu
  b_form_node(curr,bl,context,info,catch_mode);
  end b_form;



end cb_form;
