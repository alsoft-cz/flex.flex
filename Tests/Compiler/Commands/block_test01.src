program block_test01 =

with
  standard.conversions,
  standard.console;

var
  i : unsigned 32;

begin
  i:=4;

  -- nekonst. podmínka
  if i=4 then
    write_line('if-then branch');
  
  -- konst. podmínka
  elsif false then
    write_line('FAULT (false branch)');

  -- konst. podm.
  elsif 0=0*i then
    write_line('last possible branch');

  -- nekonst. podm.
  elsif i=i then
    write_line('FAULT (unreachable branch)');

  -- else větev
  else
    write_line('FAULT (unreachable else branch)');
    end if;


  -- konst. podm.
  if 4=5-7 then
    write_line('FAULT (false cond.)');

  -- konst. podm.
  elsif 4=67-27 and true then
    write_line('FAULT (false cond.)');

  -- konst. podm.
  elsif true=true then
    write_line('exchanged for if statement');
    end if;


  -- konst. podm.
  if 4=5-7 then
    write_line('FAULT (false cond.)');

  -- konst. podm.
  elsif 4=67-27 and true then
    write_line('FAULT (false cond.)');

  -- else větev
  else
    write_line('exchanged for if statement');
    end if;


  write_line('Nothing should be displayed between this line and ...');
  -- konst. podm.
  if 4=5-7 then
    write_line('FAULT (false cond.)');

  -- konst. podm.
  elsif 4=67-27 and true then
    write_line('FAULT (false cond.)');

  -- konst. podm.
  elsif false then
    write_line('FAULT (false cond.)');
    end if;
  write_line('... this line');


  write_line('Nothing should be displayed between this line and ...');
  while 3=6 loop
    write_line('FAULT (false cond, while)');
    end loop;
  write_line('... this line');

  i:=0;
  while 3=3 loop
    write_line('Displayed 4 times (broken loop).');
    succ i;
    if i=4 then
      break;
      end if;
    end loop;


  loop
    write_line('Displayed once only');
    write_line('Just testing... ;-)');
    until 4-5=-1;

  loop
    write_line('Displayed once only (broken loop)');
    break;
    write_line('FAULT (succeeding break statement)');
    until 4-5=1;
  write_line('Displayed once, after loop break.');

  i:=0;
  loop
    write_line('Displayed 3 times (broken loop)');
    succ i;
    if i=3 then
      break;
      end if;
    until 4-5=1;

  
  for j in 1..6 loop
    write_line('Displayed 6 times.');
    end loop;

  i:=0;
  for j in 1..10 loop
    write_line('Displayed 5 times (broken loop).');
    succ i;
    if i=5 then
      break;
      end if;
    end loop;

  for j in 5..5 loop
    write_line('Displayed once only.');
    end loop;

  for j in 5..5 loop
    write_line('Displayed once only (one-pass for with hard break).');
    break;
    write_line('FAULT (succeeding break statement)');
    end loop;
  write_line('Displayed once, after loop break.');

  write_line('Nothing should be displayed between this line and...');
  for j in 1..-4 loop
    write('FAULT (should be skipped due empty range, for); displayed for ');
    write_line(signed_to_string(j));
    end loop;
  write_line('... this line');

  for j in 7-4..6-3 loop
    write_line('Displayed once only.');
    end loop;
{
  declare
  type
    test_type1 = enum
      v1;
      v2;
      v3;
      v4;
      end enum;

    test_type2 = set of test_type1;

  const
    set1 = test_type2:[v1,v2,v4];

  begin
    for j in test_type1:range loop
      write_line('Displayed 4 times.');
      end loop;
    end declare;
}
  declare
    type
      test_type1 = enum
        v1;
        v2;
        v3;
        end enum;

      test_type2 = enum
        v;
        end enum;
{    
    var
      t : test_type1;
}
  begin
{
    for t loop
      write_line('Displayed 3 times.');
      end loop;
}
    for j in test_type1 loop
      write_line('Displayed 3 times.');
      end loop;
    for j in test_type2 loop
      write_line('Displayed once only.');
      if j=v
        then write_line('Just testing... OK :-)');
        else write_line('Problem, var missing ???');
        end if;
      end loop;
    end declare;
  
  for j in 1..3 loop
    write('Displayed 3 times (for ');
    write(unsigned_to_string(j));
    write_line(').');
    end loop;

  for j in reverse 1..4 loop
    write('Displayed 4 times (for ');
    write(unsigned_to_string(j));
    write_line(').');
    end loop;

  write_line('Nothing should be displayed between this line and...');
  for j in reverse 5..1 loop
    write('FAULT (should be skipped due empty range, for); displayed for ');
    write_line(unsigned_to_string(j));
    end loop;
  write_line('... this line');


  i:=0;
  loop
    write_line('Infinite loop');
    succ i;
    if i=5 then
      write_line('  Broken after 5 iterations.');
      break;
      end if;
    until 0=1;

  i:=0;
  while true loop
    write_line('Infinite loop');
    succ i;
    if i=4 then
      write_line('  Broken after 4 iterations.');
      break;
      end if;
    end loop;


  end block_test01;
