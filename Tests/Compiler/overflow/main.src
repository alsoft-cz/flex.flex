#option warning(unused_entity,false);

program main =

use 
  standard,
  standard.console;



type 
  
  t_logical        = logical 32;
  t_logical8       = logical 8;
  t_logical16      = logical 16;
  t_logical32      = logical 32;
  
  
  t_unsigned8      = unsigned 8;  -- 0..255
  t_signed8        = signed 8;    -- -128..127
  
  t_unsigned16     = unsigned 16; -- 0..65535
  t_signed16       = signed 16;   -- -32768..32767
  
  t_signed32       = signed 32;   -- 
  t_unsigned32     = unsigned 32; --

  t_unsigned8_ranged_0_255        = t_unsigned8 range 0..255;
  t_unsigned8_ranged_0_127        = t_unsigned8 range 0..127;
  t_unsigned8_ranged_128_255      = t_unsigned8 range 128..255;
  t_unsigned8_ranged_0_1          = t_unsigned8 range 0..1;

  t_signed8_ranged_m128_0         = t_signed8 range -128..0;
  t_signed8_ranged_1_127          = t_signed8 range 1..127;
  t_signed8_ranged_m1_1           = t_signed8 range -1..1;

  t_unsigned16_ranged_0_32767     = t_unsigned16 range 0..32767;
  t_unsigned16_ranged_32768_65535 = t_unsigned16 range 32768..65535;
  t_unsigned16_ranged_10000_40000 = t_unsigned16 range 10000..40000;

  t_signed16_ranged_m32768_0      = t_signed16 range -32768..0;
  t_signed16_ranged_1_32767       = t_signed16 range 1..32767;
  t_signed16_ranged_m300_30000    = t_signed16 range -300..30000;
  t_signed16_ranged_m1_1          = t_signed16 range -1..1;

  t_unsigned32_ranged_0_7FFFFFFF  = t_unsigned32 range 0..$7FFFFFFF;
  t_unsigned32_ranged_80000000_FFFFFFFF = t_unsigned32 range $80000000..$FFFFFFFF;

  t_signed32_ranged_80000000_0  = t_signed32 range -2147483648..0;
  t_signed32_ranged_1_7FFFFFFF  = t_signed32 range 1..$7FFFFFFF;

  
  t_enum8_4 = enum
    e8_4_nula;e8_4_jedna;e8_4_dva;e8_4_tri;
    end enum;

  t_enum8_8 = enum
    e8_8_nula;e8_8_jedna;e8_8_dva;e8_8_tri;e8_8_ctyri;e8_8_pet;e8_8_sest;e8_8_sedm;
    end enum;

  {t_enum_16 = enum
    #include 'enum16.inc';
    end enum;

  t_enum_32 = enum
    #include 'enum32.inc';
    end enum;}


  t_array_1_10     = array 1..10 of t_unsigned8;

  t_array_1_300    = array 1..300 of t_unsigned8;

  t_array_1_100000 = array 1..100_000 of t_unsigned8;

  t_array          = array of t_unsigned8;


  t_string_10     = string 10 of t_unsigned8;

  t_string_300    = string 300 of t_unsigned8;

  t_string_100000 = string 100_000 of t_unsigned8;

  t_string        = string of t_unsigned8;

  

procedure assert(condition : t_logical) =
begin  
  if not condition then
    #syntax asm;
      int 3
    #end asm;
    end if;
  end assert;


  
#template should_throw(vyraz);
  
  declare
  var
    thrown : t_logical;
  
  begin
    standard.console.write_line('Should throw...');
    
    thrown:=false;
    vyraz;
    catch 
      when constraint_error do 
        thrown:=true;
    leave
      if thrown then
        standard.console.write_line('...and thrown.');
      else
        standard.console.write_line('...but did not throw!!');
        end if;
        
      assert(thrown);
    end declare; 
  
  #end should_throw;



#template should_not_throw(vyraz);
  
  declare
  var
    thrown : t_logical;
  
  begin
    standard.console.write_line('Should not throw');

    thrown:=false;
    vyraz;

    catch 
      when constraint_error do thrown:=true;

    leave
      if thrown then
        standard.console.write_line('...but did throw!!');
      else
        standard.console.write_line('...and did not throw.');
        end if;

      assert(not thrown);
    end declare; 
  
  #end should_not_throw;



{
Az budou fungovat vnorene sablony (#UNEXPAND) nasledujici bude fungovat a pouzilo by se:
#expand for_all;
  #for values use; 1,2,100,300,500,40,50
  #for perform use; #unexpand test_simple_assigment_that_should_not_throw(var1,var2);
#end for_all;


#template for_all(values,perform);
  declare 
  var
    _values       : array 0..100 of from_var:type := [values];
    next_val      : t_unsigned32;

  begin
    for i in _values loop
      perform;
      next_val:=succ i;
      if _values[i]=_values[next_val] break; end if;
      end loop;
    end var;

  #end test_simple_assigment;



#template test_simple_assigments_that_should_throw(from_val,to_val);
  from_val:=_values[i];
  should_throw(to_val:=from_val:type(from_val));
  #end test_simple_assigments_that_should_throw;


#template test_simple_assigments_that_should_not_throw(from_val,to_val);
  from_val:=_values[i];
  should_throw(to_val:=from_val:type(from_val));
  #end test_simple_assigments_that_should_throw;
}


var
  -- LOGICKE TYPY
  l8_1   : t_logical8;
  l16_1  : t_logical16;
  l32_1  : t_logical32;

  -- JEDNODUCHE TYPY
  us8_1  : t_unsigned8;
  us8_2  : t_unsigned8;

  s8_1   : t_signed8;
  s8_2   : t_signed8;
  s8_3   : t_signed8;
  s8_4   : t_signed8;

  us16_1 : t_unsigned16;
  us16_2 : t_unsigned16;

  s16_1  : t_signed16;
  s16_2  : t_signed16;
  s16_3  : t_signed16;
  s16_4  : t_signed16;

  us32_1  : t_unsigned32;
  us32_2  : t_unsigned32;

  s32_1 : t_signed32;
  s32_2 : t_signed32;

  -- JEDNODCUHE RANGED TYPY
  us8_r_0_255_1               : t_unsigned8_ranged_0_255;
  us8_r_0_255_2               : t_unsigned8_ranged_0_255;

  us8_r_0_127_1               : t_unsigned8_ranged_0_127;
  us8_r_0_127_2               : t_unsigned8_ranged_0_127;

  us8_r_128_255_1             : t_unsigned8_ranged_128_255;
  us8_r_128_255_2             : t_unsigned8_ranged_128_255;

  us8_r_0_1_1                 : t_unsigned8_ranged_0_1;
  us8_r_0_1_2                 : t_unsigned8_ranged_0_1;

  s8_r_m128_0_1               : t_signed8_ranged_m128_0;
  s8_r_m128_0_2               : t_signed8_ranged_m128_0;

  s8_r_1_127_1                : t_signed8_ranged_1_127;
  s8_r_1_127_2                : t_signed8_ranged_1_127;

  s8_r_m1_1_1                 : t_signed8_ranged_m1_1;
  s8_r_m1_1_2                 : t_signed8_ranged_m1_1;

  us16_r_0_32767_1            : t_unsigned16_ranged_0_32767;
  us16_r_0_32767_2            : t_unsigned16_ranged_0_32767;

  us16_r_32768_65535_1        : t_unsigned16_ranged_32768_65535;
  us16_r_32768_65535_2        : t_unsigned16_ranged_32768_65535;

  us16_r_10000_40000_1        : t_unsigned16_ranged_10000_40000;
  us16_r_10000_40000_2        : t_unsigned16_ranged_10000_40000;

  s16_r_m32768_0_1            : t_signed16_ranged_m32768_0;
  s16_r_m32768_0_2            : t_signed16_ranged_m32768_0;

  s16_r_1_32767_1             : t_signed16_ranged_1_32767;
  s16_r_1_32767_2             : t_signed16_ranged_1_32767;

  s16_r_m300_30000_1          : t_signed16_ranged_m300_30000;
  s16_r_m300_30000_2          : t_signed16_ranged_m300_30000;

  s16_r_m1_1_1                : t_signed16_ranged_m1_1;
  s16_r_m1_1_2                : t_signed16_ranged_m1_1;

  -- VYCTOVE TYPY
  e8_4_1                      : t_enum8_4;
  e8_4_2                      : t_enum8_4;

  e8_8_1                      : t_enum8_8;
  e8_8_2                      : t_enum8_8;

  -- POLE
  a8_1_10_1                   : t_array_1_10;
  a8_1_10_2                   : t_array_1_10;

  a8_1_300_1                  : t_array_1_300;
  a8_1_300_2                  : t_array_1_300;

  a8_1_100000_1               : t_array_1_100000;
  a8_1_100000_2               : t_array_1_100000;

  pa8_1                       : ^t_array;
  pa8_2                       : ^t_array;

  -- RETEZCE
  str8_10_1                   : t_string_10;
  str8_10_2                   : t_string_10;

  str8_300_1                  : t_string_300;
  str8_300_2                  : t_string_300;

  str8_100000_1               : t_string_100000;
  str8_100000_2               : t_string_100000;

  str8_1                      : ^t_string;
  str8_2                      : ^t_string;


   
begin
  
  -- I. PRIRAZENI A PRETYPOVANI

  
  -- I.a.   LOGICAL

  -- unsigned 8 --> t_logical8
  l8_1:=false;
  should_not_throw(us8_1:=t_unsigned8(l8_1));

  l8_1:=true;
  should_not_throw(us8_1:=t_unsigned8(l8_1));


  -- t_logical8 --> unsigned 8
  us8_1:=false:ord;
  should_not_throw(l8_1:=t_logical8(us8_1));

  us8_1:=true:ord;
  should_not_throw(l8_1:=t_logical8(us8_1));


  
  -- I.b.   INTEGER
  
  -- unsigned 8 --> unsigned 8
  us8_1:=0;
  should_not_throw(us8_2:=us8_1);

  us8_1:=128;
  should_not_throw(us8_2:=us8_1);

  us8_1:=255;
  should_not_throw(us8_2:=us8_1);


  -- signed 8 --> signed 8
  s8_1:=-1;
  should_not_throw(s8_2:=s8_1);

  s8_1:=127;
  should_not_throw(s8_2:=s8_1);

  s8_1:=-128;
  should_not_throw(s8_2:=s8_1);


  -- unsigned 16 --> unsigned 16
  us16_1:=0;
  should_not_throw(us16_2:=us16_1);

  us16_1:=32768;
  should_not_throw(us16_2:=us16_1);

  us16_1:=65535;
  should_not_throw(us16_2:=us16_1);


  -- signed 16 --> signed 16
  s16_1:=-1;
  should_not_throw(s16_2:=s16_1);

  s16_1:=32767;
  should_not_throw(s16_2:=s16_1);

  s16_1:=-32768;
  should_not_throw(s16_2:=s16_1);


  -- unsigned 8 --> signed 8
  us8_1:=0;
  should_not_throw(s8_1:=t_signed8(us8_1));

  us8_1:=128;
  should_throw(s8_1:=t_signed8(us8_1));

  us8_1:=255;
  should_throw(s8_1:=t_signed8(us8_1));

  us8_1:=255;
  s8_1:=0;
--  should_throw(t_unsigned8(s8_1):=us8_1); -- ?????


  -- signed 8 --> unsigned 8
  s8_1:=0;
  should_not_throw(us8_1:=t_unsigned8(s8_1));

  s8_1:=-1;
  should_throw(us8_1:=t_unsigned8(s8_1));

  s8_1:=-1;
  us8_1:=0;
--  should_throw(t_signed8(us8_1):=s8_1); -- ?????

  s8_1:=-128;
  should_throw(us8_1:=t_unsigned8(s8_1));

  s8_1:=-128;
  us8_1:=0;
--  should_throw(t_signed8(us8_1):=s8_1); -- ?????


  -- unsigned 16 --> signed 16
  us16_1:=0;
  should_not_throw(s16_1:=t_signed16(us16_1));

  us16_1:=32767;
  should_not_throw(s16_1:=t_signed16(us16_1));
  
  us16_1:=32768;
  should_throw(s16_1:=t_signed16(us16_1));

  us16_1:=65535;
  should_throw(s16_1:=t_signed16(us16_1));

  us16_1:=65535;
  s16_1:=0;
--  should_throw(t_unsigned16(s16_1):=us16_1); -- ?????


  -- signed 16 --> unsigned 16
  s16_1:=0;
  should_not_throw(us16_1:=t_unsigned16(s16_1));

  s16_1:=32767;
  should_not_throw(us16_1:=t_unsigned16(s16_1));

  s16_1:=-1;
  should_throw(us16_1:=t_unsigned16(s16_1));

  s16_1:=-32768;
  should_throw(us16_1:=t_unsigned16(s16_1));

  s16_1:=-1;
  us16_1:=0;
--  should_throw(t_signed16(us16_1):=s16_1); -- ?????

  s16_1:=-32768;
  us16_1:=0;
--  should_throw(t_signed16(us16_1):=s16_1); -- ?????


  -- unsigned 32 --> signed 32
  us32_1:=0;
  should_not_throw(s32_1:=t_signed32(us32_1));

  us32_1:=$7FFFFFFF;
  should_not_throw(s32_1:=t_signed32(us32_1));
 
  us32_1:=$80000000;
  should_throw(s32_1:=t_signed32(us32_1));

  us32_1:=$FFFFFFFF;
  should_throw(s32_1:=t_signed32(us32_1));

  us32_1:=$80000000;
  s32_1:=0;
--  should_throw(t_unsigned32(s32_1):=us32_1); -- ?????

  us32_1:=$FFFFFFFF;
  s32_1:=0;
--  should_throw(t_unsigned32(s32_1):=us32_1); -- ?????


  -- signed 32 --> unsigned 32
  s32_1:=0;
  should_not_throw(us32_1:=t_unsigned32(s32_1));

  s32_1:=$7FFFFFFF;
  should_not_throw(us32_1:=t_unsigned32(s32_1));

  s32_1:=-1;
  should_throw(us32_1:=t_unsigned32(s32_1));

  s32_1:=-2147483648;
  should_throw(us32_1:=t_unsigned32(s32_1));

  s32_1:=-1;
  us32_1:=0;
--  should_throw(t_signed32(us32_1):=s32_1); -- ?????

  s32_1:=-1;
  us32_1:=2147483648;
--  should_throw(t_signed32(us32_1):=s32_1); -- ?????

  
  -- signed 16 --> signed 8
  s16_1:=1;
  should_not_throw(s8_1:=s16_1);

  s16_1:=127;
  should_not_throw(s8_1:=s16_1);

  s16_1:=128;
  should_throw(s8_1:=s16_1);

  s16_1:=-128;
  should_not_throw(s8_1:=s16_1);

  us8_1:=255;
  should_throw(s8_1:=t_signed8(us8_1));

  -- unsigned 16 --> unsigned 8
  us16_1:=1;
  should_not_throw(us8_1:=t_unsigned8(us16_1));

  us16_1:=255;
  should_not_throw(us8_1:=t_unsigned8(us16_1));

  us16_1:=256;
  should_throw(us8_1:=t_unsigned8(us16_1));



  -- I.c.   RANGED INTEGER
  
 
  -- unsigned 8 --> unsigned 8 range 0..255
  us8_1:=0;
  should_not_throw(us8_r_0_255_1:=us8_1);

  us8_1:=255;
  should_not_throw(us8_r_0_255_1:=us8_1);

 
  -- unsigned 0..255 --> unsigned 8
  us8_r_0_255_1:=0;
  should_not_throw(us8_1:=us8_r_0_255_1);

  us8_r_0_255_1:=255;
  should_not_throw(us8_1:=us8_r_0_255_1);

  
  -- unsigned 8 range 0..127 --> unsigned 8 range 0..127
  us8_r_0_127_1:=0;
  should_not_throw(us8_r_0_127_2:=us8_r_0_127_1);

  us8_r_0_127_1:=100;
  should_not_throw(us8_r_0_127_2:=us8_r_0_127_1);

  us8_r_0_127_1:=127;
  should_not_throw(us8_r_0_127_2:=us8_r_0_127_1);


  -- unsigned 8 range 0..127 --> signed 16 range 1..32767
  us8_r_0_127_1:=0;
  should_throw(s16_r_1_32767_1:=t_signed16_ranged_1_32767(us8_r_0_127_1));

  us8_r_0_127_1:=1;
  should_not_throw(s16_r_1_32767_1:=t_signed16_ranged_1_32767(us8_r_0_127_1));

  us8_r_0_127_1:=127;
  should_not_throw(s16_r_1_32767_1:=t_signed16_ranged_1_32767(us8_r_0_127_1));

  us8_r_0_127_1:=127;
  should_not_throw(s16_r_1_32767_1:=t_signed16_ranged_1_32767(us8_r_0_127_1));


  -- signed 16 range -32768..0 --> signed 16 range -32768..0
  s16_r_m32768_0_1:=-1;
  should_not_throw(s16_r_m32768_0_2:=s16_r_m32768_0_1);

  s16_r_m32768_0_1:=-1000;
  should_not_throw(s16_r_m32768_0_2:=s16_r_m32768_0_1);

  s16_r_m32768_0_1:=-32768;
  should_not_throw(s16_r_m32768_0_2:=s16_r_m32768_0_1);


  -- unsigned 16 range 10000..40000 --> signed 16 range -300..30000
  us16_r_10000_40000_1:=10000;
  should_not_throw(s16_r_m300_30000_1:=t_signed16_ranged_m300_30000(us16_r_10000_40000_1));

  us16_r_10000_40000_1:=10000;
  s16_r_m300_30000_1:=10000;
  should_not_throw(t_unsigned16_ranged_10000_40000(s16_r_m300_30000_1):=us16_r_10000_40000_1);

  us16_r_10000_40000_1:=30000;
  should_not_throw(s16_r_m300_30000_1:=t_signed16_ranged_m300_30000(us16_r_10000_40000_1));

  us16_r_10000_40000_1:=30000;
  s16_r_m300_30000_1:=10000;
  should_not_throw(t_unsigned16_ranged_10000_40000(s16_r_m300_30000_1):=us16_r_10000_40000_1);

  us16_r_10000_40000_1:=40000;
  should_throw(s16_r_m300_30000_1:=t_signed16_ranged_m300_30000(us16_r_10000_40000_1));

  us16_r_10000_40000_1:=40000;
  s16_r_m300_30000_1:=0;
  should_throw(t_unsigned16_ranged_10000_40000(s16_r_m300_30000_1):=us16_r_10000_40000_1);


  -- signed 16 range 1..32767 --> unsigned 8 range 0..127
  s16_r_1_32767_1:=1;
  should_not_throw(us8_r_0_127_1:=t_unsigned8_ranged_0_127(s16_r_1_32767_1));

  s16_r_1_32767_1:=127;
  should_not_throw(us8_r_0_127_1:=t_unsigned8_ranged_0_127(s16_r_1_32767_1));

  s16_r_1_32767_1:=128;
  should_throw(us8_r_0_127_1:=t_unsigned8_ranged_0_127(s16_r_1_32767_1));

  s16_r_1_32767_1:=32767;
  should_throw(us8_r_0_127_1:=t_unsigned8_ranged_0_127(s16_r_1_32767_1));


  -- signed 16 range -300..30000 --> signed 8 range -128..0
  s16_r_m300_30000_1:=-128;
  should_not_throw(s8_r_m128_0_1:=t_signed8_ranged_m128_0(s16_r_m300_30000_1));

  s16_r_m300_30000_1:=0;
  should_not_throw(s8_r_m128_0_1:=t_signed8_ranged_m128_0(s16_r_m300_30000_1));

  s16_r_m300_30000_1:=-300;
  should_throw(s8_r_m128_0_1:=t_signed8_ranged_m128_0(s16_r_m300_30000_1));

  s16_r_m300_30000_1:=30000;
  should_throw(s8_r_m128_0_1:=t_signed8_ranged_m128_0(s16_r_m300_30000_1));

  
  -- signed 16 range -300..30000 --> unsigned 8 range 0..127
  s16_r_m300_30000_1:=0;
  should_not_throw(us8_r_0_127_1:=t_unsigned8_ranged_0_127(s16_r_m300_30000_1));

  s16_r_m300_30000_1:=-1;
  should_throw(us8_r_0_127_1:=t_unsigned8_ranged_0_127(s16_r_m300_30000_1));

  s16_r_m300_30000_1:=-300;
  should_throw(us8_r_0_127_1:=t_unsigned8_ranged_0_127(s16_r_m300_30000_1));

  s16_r_m300_30000_1:=127;
  should_not_throw(us8_r_0_127_1:=t_unsigned8_ranged_0_127(s16_r_m300_30000_1));

  s16_r_m300_30000_1:=30000;
  should_throw(us8_r_0_127_1:=t_unsigned8_ranged_0_127(s16_r_m300_30000_1));



  -- I.d.   ENUM
 
  -- enum 8 --> enum8
  e8_4_1:=e8_4_nula;
  should_not_throw(e8_4_2:=e8_4_1);

  e8_4_1:=e8_4_tri;
  should_not_throw(e8_4_2:=e8_4_1);

  
  -- enum 8 --> unsigned 8
  e8_8_1:=e8_8_ctyri;
  should_not_throw(us8_1:=e8_8_1:ord);

  
  -- enum 8 --> unsigned 8 ranged 0..1
  e8_4_1:=e8_4_dva;
  should_throw(us8_r_0_1_1:=e8_4_1:ord);

  
  -- enum 8 --> signed 8 range -1..1
  e8_4_1:=e8_4_dva;
  should_throw(s8_r_m1_1_1:=t_signed8(e8_4_1:ord));

  
  -- unsigned 16 range 0..32767 --> enum 8
  us16_r_0_32767_1:=1;
  should_not_throw(e8_8_1:=t_enum8_8(us16_r_0_32767_1));

  us16_r_0_32767_1:=8;
  should_throw(e8_8_1:=t_enum8_8(us16_r_0_32767_1));

  us16_r_0_32767_1:=0;
  should_not_throw(e8_8_1:=t_enum8_8(us16_r_0_32767_1));

  us16_r_0_32767_1:=32767;
  should_throw(e8_8_1:=t_enum8_8(us16_r_0_32767_1));
  

  -- unsigned 16 range 32768..65535 --> enum 8
  us16_r_32768_65535_1:=32768;
  should_throw(e8_8_1:=t_enum8_8(us16_r_32768_65535_1));

  us16_r_32768_65535_1:=65535;
  should_throw(e8_8_1:=t_enum8_8(us16_r_32768_65535_1));


  -- enum 8 s 8 prvky --> enum 8 se 4 prvky
  e8_8_1:=e8_8_jedna;
  should_not_throw(e8_4_1:=t_enum8_4(e8_8_1:ord));

  e8_8_1:=e8_8_tri;
  should_not_throw(e8_4_1:=t_enum8_4(e8_8_1:ord));

  e8_8_1:=e8_8_pet;
  should_throw(e8_4_1:=t_enum8_4(e8_8_1:ord));

  e8_8_1:=e8_8_sedm;
  should_throw(e8_4_1:=t_enum8_4(e8_8_1:ord));


  -- enum 8 se 4 prvky --> enum 8 s 8 prvky
  e8_4_1:=e8_4_nula;
  should_not_throw(e8_8_1:=t_enum8_8(e8_4_1:ord));

  e8_4_1:=e8_4_jedna;
  should_not_throw(e8_8_1:=t_enum8_8(e8_4_1:ord));

  e8_4_1:=e8_4_dva;
  should_not_throw(e8_8_1:=t_enum8_8(e8_4_1:ord));

  e8_4_1:=e8_4_tri;
  should_not_throw(e8_8_1:=t_enum8_8(e8_4_1:ord));



  -- II. CELOCISELNE ARITMETICKE OPERACE


  --  II.a. SCITANI ODCITANI NASOBENI

  us8_1:=0;
  us8_2:=0;
  should_not_throw(us8_1+us8_2);

  us32_1:=0;
  us32_2:=0;
  should_not_throw(us32_1+us32_2);
  
  
  -- unsigned 8 <op> konstanta
  us8_1:=0;
  should_not_throw(us8_1+1);
  us8_1:=0;
  should_not_throw(us8_1+255);
  us8_1:=1;
  should_throw(us8_1+255);
  
  us8_1:=0;
  should_throw(us8_1-1);
  us8_1:=0;
  should_throw(us8_1-255);
--  us8_1:=0;
--  should_throw(us8_1-512);
  
  us8_1:=1;
  should_not_throw(us8_1*1);
  us8_1:=1;
  should_not_throw(us8_1*255);
  us8_1:=128;
  should_throw(us8_1*2);
  us8_1:=64;
  should_throw(us8_1*4);
  
  us8_1:=1;
  should_throw(us8_1*(-1));
--  us8_1:=1;
--  should_throw(us8_1*(-255));
--  us8_1:=128;
--  should_throw(us8_1*(-2));


  -- signed 16 <op> konstanta
  s16_1:=0;
  should_not_throw(s16_1+1);
  s16_1:=0;
  should_not_throw(s16_1+32767);
  s16_1:=1;
  should_throw(s16_1+32767);
  
  s16_1:=0;
  should_not_throw(s16_1-1);
  
  s16_1:=-1;
  should_not_throw(s16_1-32767);
  s16_1:=-2;
  should_throw(s16_1-32767);
  
  s16_1:=1;
  should_not_throw(s16_1*1);
  s16_1:=1;
  should_not_throw(s16_1*32767);
  s16_1:=2;
  should_throw(s16_1*32767);
  
  s16_1:=1;
  should_not_throw(s16_1*(-1));
  s16_1:=1;
  should_not_throw(s16_1*(-32768));
  s16_1:=2;
  should_throw(s16_1*(-32768));


  -- vicenasobny <op>
  s16_1:=0;
  s16_2:=2;
  s16_3:=2;
  s16_4:=8192;
  should_not_throw(s16_1:=s16_2*s16_4);
  should_throw(s16_1:=s16_2*s16_3*s16_4);
  should_not_throw(s16_1:=s16_2*s16_4*(-1));
  should_not_throw(s16_1:=s16_2*s16_3*s16_4*(-1));

  s8_1:=0;
  s8_2:=1;
  s8_3:=63;
  s8_4:=64;
  should_not_throw(s8_1:=s8_3+s8_4);
  should_throw(s8_1:=s8_2+s8_3+s8_4);
  should_not_throw(s8_1:=-s8_2-s8_3-s8_4);
  should_throw(s8_1:=-s8_2-s8_3-s8_4-s8_2);


  -- unsigned 16 <op> signed 16 range -32768..0
  us16_1:=0;
  s16_r_m32768_0_1:=0;
  should_not_throw(t_signed16_ranged_m32768_0(us16_1)+s16_r_m32768_0_1);
  should_not_throw(us16_1+t_unsigned16(s16_r_m32768_0_1));

  us16_1:=1;
  s16_r_m32768_0_1:=0;
  should_throw(t_signed16_ranged_m32768_0(us16_1)+s16_r_m32768_0_1);
  should_not_throw(us16_1+t_unsigned16(s16_r_m32768_0_1));

  us16_1:=0;
  s16_r_m32768_0_1:=-1;
  should_throw(t_signed16_ranged_m32768_0(us16_1)+s16_r_m32768_0_1);
  should_throw(us16_1+t_unsigned16(s16_r_m32768_0_1));

  us16_1:=65535;
  s16_r_m32768_0_1:=0;
  should_throw(t_unsigned16(s16_r_m32768_0_1)+us16_1);


  --   II.b. SUCC PRED

  -- unsigned 8
  us8_1:=0;
  should_not_throw(succ us8_1);

  us8_1:=254;
  should_not_throw(succ us8_1);

  us8_1:=255;
  should_throw(succ us8_1);

  us8_1:=1;
  should_not_throw(pred us8_1);

  us8_1:=0;
  should_throw(pred us8_1);

  -- signed 8
  s8_1:=0;
  should_not_throw(succ s8_1);

  s8_1:=126;
  should_not_throw(succ s8_1);

  s8_1:=127;
  should_throw(succ s8_1);

  s8_1:=1;
  should_not_throw(pred s8_1);

  s8_1:=0;
  should_not_throw(pred s8_1);

  s8_1:=-127;
  should_not_throw(pred s8_1);

  s8_1:=-128;
  should_throw(pred s8_1);

  -- unsigned 16
  us16_1:=0;
  should_not_throw(succ us16_1);

  us16_1:=65534;
  should_not_throw(succ us16_1);

  us16_1:=65535;
  should_throw(succ us16_1);

  us16_1:=1;
  should_not_throw(pred us16_1);

  us16_1:=0;
  should_throw(pred us16_1);

  -- signed 16
  s16_1:=0;
  should_not_throw(succ s16_1);

  s16_1:=32766;
  should_not_throw(succ s16_1);

  s16_1:=32767;
  should_throw(succ s16_1);

  s16_1:=1;
  should_not_throw(pred s16_1);

  s16_1:=0;
  should_not_throw(pred s16_1);

  s16_1:=-32767;
  should_not_throw(pred s16_1);

  s16_1:=-32768;
  should_throw(pred s16_1);
  
  -- unsigned 32
  us32_1:=0;
  should_not_throw(succ us32_1);

  us32_1:=$FFFFFFFE;
  should_not_throw(succ us32_1);

  us32_1:=$FFFFFFFF;
  should_throw(succ us32_1);

  us32_1:=1;
  should_not_throw(pred us32_1);

  us32_1:=0;
  should_throw(pred us32_1);

  -- signed 32
  s32_1:=0;
  should_not_throw(succ s32_1);

  s32_1:=2147483646;
  should_not_throw(succ s32_1);

  s32_1:=2147483647;
  should_throw(succ s32_1);

  s32_1:=1;
  should_not_throw(pred s32_1);

  s32_1:=0;
  should_not_throw(pred s32_1);

  s32_1:=-2147483647;
  should_not_throw(pred s32_1);

  s32_1:=-2147483648;
  should_throw(pred s32_1);

  -- signed 16 range -1..1
  s16_r_m1_1_1:=0;
  should_not_throw(succ s16_r_m1_1_1);

  s16_r_m1_1_1:=1;
  should_throw(succ s16_r_m1_1_1);

  s16_r_m1_1_1:=1;
  should_not_throw(pred s16_r_m1_1_1);

  s16_r_m1_1_1:=0;
  should_not_throw(pred s16_r_m1_1_1);

  s16_r_m1_1_1:=-1;
  should_throw(pred s16_r_m1_1_1);

  -- signed 8 range -128..0
  s8_r_m128_0_1:=-1;
  should_not_throw(succ s8_r_m128_0_1);

  s8_r_m128_0_1:=0;
  should_throw(succ s8_r_m128_0_1);

  s8_r_m128_0_1:=0;
  should_not_throw(pred s8_r_m128_0_1);

  s8_r_m128_0_1:=-127;
  should_not_throw(pred s8_r_m128_0_1);

  s8_r_m128_0_1:=-128;
  should_throw(pred s8_r_m128_0_1);


  --   II.c. NEG

  -- signed 8
  s8_1:=0;
  should_not_throw(s8_1:=(-s8_1));

  s8_1:=1;
  should_not_throw(s8_1:=(-s8_1));

  s8_1:=126;
  should_not_throw(s8_1:=(-s8_1));

  s8_1:=127;
  should_not_throw(s8_1:=(-s8_1));

  s8_1:=-127;
  should_not_throw(s8_1:=(-s8_1));

  s8_1:=-128;
  should_throw(s8_1:=(-s8_1));

  -- signed 16
  s16_1:=0;
  should_not_throw(s16_1:=(-s16_1));

  s16_1:=1;
  should_not_throw(s16_1:=(-s16_1));

  s16_1:=32766;
  should_not_throw(s16_1:=(-s16_1));

  s16_1:=32767;
  should_not_throw(s16_1:=(-s16_1));

  s16_1:=-32767;
  should_not_throw(s16_1:=(-s16_1));

  s16_1:=-32768;
  should_throw(s16_1:=(-s16_1));
  
  -- signed 32
  s32_1:=0;
  should_not_throw(s32_1:=(-s32_1));

  s32_1:=1;
  should_not_throw(s32_1:=(-s32_1));

  s32_1:=2147483646;
  should_not_throw(s32_1:=(-s32_1));

  s32_1:=2147483647;
  should_not_throw(s32_1:=(-s32_1));

  s32_1:=-2147483647;
  should_not_throw(s32_1:=(-s32_1));

  s32_1:=-2147483648;
  should_throw(s32_1:=(-s32_1));

  -- signed 16 range 1..32767
  s16_r_1_32767_1:=1;
  should_throw(s16_r_1_32767_1:=(-s16_r_1_32767_1));

  s16_r_1_32767_1:=32766;
  should_throw(s16_r_1_32767_1:=(-s16_r_1_32767_1));

  s16_r_1_32767_1:=32767;
  should_throw(s16_r_1_32767_1:=(-s16_r_1_32767_1));

  -- signed 16 range -32768..0
  s16_r_m32768_0_1:=0;
  should_not_throw(s16_r_m32768_0_1:=(-s16_r_m32768_0_1)); -- ?????

  s16_r_m32768_0_1:=-1;
  should_throw(s16_r_m32768_0_1:=(-s16_r_m32768_0_1));

  s16_r_m32768_0_1:=-32768;
  should_throw(s16_r_m32768_0_1:=(-s16_r_m32768_0_1));


  
  -- III. BITOVE OPERACE (jen pro typy s modularni aritmetikou)

  --   III.a. SHL SHR



  -- IV. INDEXOVANI POLE
  
  us8_1:=0;
  should_throw(us8_1:=a8_1_10_1[us8_1]);

  us8_1:=1;
  should_not_throw(us8_1:=a8_1_10_1[us8_1]);

  us8_1:=10;
  should_not_throw(us8_1:=a8_1_10_1[us8_1]);

  us8_1:=255;
  should_throw(us8_1:=a8_1_10_1[us8_1]);

  
  us32_1:=0;
  should_throw(us8_1:=a8_1_10_1[us32_1]);

  us32_1:=1;
  should_not_throw(us8_1:=a8_1_10_1[us32_1]);

  us32_1:=10;
  should_not_throw(us8_1:=a8_1_10_1[us32_1]);

  us32_1:=255;
  should_throw(us8_1:=a8_1_10_1[us32_1]);



  -- V. INDEXOVANI RETEZCE
  us8_1:=0;
  should_throw(us8_1:=str8_10_1[us8_1]);

  us8_1:=1;
  should_not_throw(us8_1:=str8_10_1[us8_1]);

  us8_1:=10;
  should_not_throw(us8_1:=str8_10_1[us8_1]);

  us8_1:=255;
  should_throw(us8_1:=str8_10_1[us8_1]);

  
  us32_1:=0;
  should_throw(us8_1:=str8_10_1[us32_1]);

  us32_1:=1;
  should_not_throw(us8_1:=str8_10_1[us32_1]);

  us32_1:=10;
  should_not_throw(us8_1:=str8_10_1[us32_1]);

  us32_1:=255;
  should_throw(us8_1:=str8_10_1[us32_1]);
  
  
  end main;