----------------------------------------------------------------------------------------------------
program etest3 =
----------------------------------------------------------------------------------------------------

with
    testlib,
    standard,console;

message
  e1 : exception;
  e2 : exception;
  e3 : exception;

class c_class =
entry = begin write_line('c_class: entry') end entry;
exit = begin write_line('c_class: exit') end exit;
rollback = begin write_line('c_class: rollback') end rollback;
commit = begin write_line('c_class: commit') end commit;
end c_class;

procedure p1 =
var c : c_class;
begin
  write_line('p1: body');
leave
  write_line('p1: leave');
  end p1;

procedure p2 =
var c : c_class;
begin
  write_line('p2: body');
commit
  write_line('p2: commit');
leave
  write_line('p2: leave');
  end p2;

procedure p3 =
var c : c_class;
begin
  write_line('p3: body');
rollback
  write_line('p3: rollback');
commit
  write_line('p3: commit');
leave
  write_line('p3: leave');
  end p3;

procedure p4 =
var c : c_class;
begin
  write_line('p4: body');
catch
  when e1     do write_line('p4: catch e1');
  when others do write_line('p4: catch others');
rollback
  write_line('p4: rollback');
commit
  write_line('p4: commit');
leave
  write_line('p4: leave');
  end p4;

procedure p5 =
var c : c_class;
begin
  write_line('p5: body');
  raise e1;
catch
  when e1     do write_line('p5: catch e1');
  when others do write_line('p5: catch others');
rollback
  write_line('p5: rollback');
commit
  write_line('p5: commit');
leave
  write_line('p5: leave');
  end p5;

procedure p6 =
var c : c_class;
begin
  write_line('p6: body');
  raise e2;
catch
  when e1     do write_line('p6: catch e1');
  when others do write_line('p6: catch others');
rollback
  write_line('p6: rollback');
commit
  write_line('p6: commit');
leave
  write_line('p6: leave');
  end p6;

procedure p7 =
var c : c_class;
begin
  write_line('p7: body');
  raise e3;
catch
  when e1 do write_line('p7: catch e1');
  when e2 do write_line('p7: catch e2');
rollback
  write_line('p7: rollback');
commit
  write_line('p7: commit');
leave
  write_line('p7: leave');
  end p7;

procedure p8 =
var c : c_class;
begin
  write_line('p8: body');
  raise e1;
catch
  when e1 do write_line('p9: catch e1 & re-raise'); raise;
  when e2 do write_line('p9: catch e2 & re-raise'); raise;
rollback
  write_line('p8: rollback');
commit
  write_line('p8: commit');
leave
  write_line('p8: leave');
  end p8;

procedure p9 =
var c : c_class;
begin
  write_line('p9: body');
  raise e2;
catch
  when e1 do write_line('p9: catch e1 & raise e3'); raise e3;
  when e2 do write_line('p9: catch e2 & raise e3'); raise e3;
rollback
  write_line('p9: rollback');
commit
  write_line('p9: commit');
leave
  write_line('p9: leave');
  end p9;

procedure p10 =
var c : c_class;
begin
  write_line('p10: body');
  raise e2;
catch
  when e1 do write_line('p10: catch e1 & return'); return;
  when e2 do write_line('p10: catch e2 & return'); return;
rollback
  write_line('p10: rollback');
commit
  write_line('p10: commit');
leave
  write_line('p10: leave');
  end p10;

begin 
  write_line('-----------------------------');
  p1;
  write_line('-----------------------------');
  p2;
  write_line('-----------------------------');
  p3;
  write_line('-----------------------------');
  p4;
  write_line('-----------------------------');
  p5;
  write_line('-----------------------------');
  p6;
  write_line('-----------------------------');
  begin
    p7;
  catch
    when e1     do write_line('after p7: catch e1');
    when e2     do write_line('after p7: catch e2');
    when e3     do write_line('after p7: catch e3');
    when others do write_line('after p7: catch others');
    end;
  write_line('-----------------------------');
  begin
    p8;
  catch
    when e1     do write_line('after p8: catch e1');
    when e2     do write_line('after p8: catch e2');
    when e3     do write_line('after p8: catch e3');
    when others do write_line('after p8: catch others');
    end;
  write_line('-----------------------------');
  begin
    p9;
  catch
    when e1     do write_line('after p9: catch e1');
    when e2     do write_line('after p9: catch e2');
    when e3     do write_line('after p9: catch e3');
    when others do write_line('after p9: catch others');
    end;
  write_line('-----------------------------');
  p10;
  write_line('-----------------------------');
  end etest3;