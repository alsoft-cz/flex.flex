----------------------------------------------------------------------------------------------------
program etest2 =
----------------------------------------------------------------------------------------------------
with
    testlib;
var
    ts             : t_testlib_session;
    ts2            : t_testlib_session;

  ----------------------------------------------------------------------------------------------------
  procedure etest2_1 = 
  ----------------------------------------------------------------------------------------------------
  begin
    testlib_assert_reset_order(ts,1,{ASR=}000000,'Pred vyjimkou');
    raise memory_error;
    testlib_report_err(ts,{ASR=}000000,'Po vyjimce, chyba.');
  catch
    when memory_error do
      testlib_assert_strict_order(ts,2,{ASR=}000000,'Uvnitr catch vyjimky');
    when program_error do
      testlib_report_err(ts,{ASR=}000000,'Ma byt jiz obslouzeno, chyba.');
    when others do
      testlib_report_err(ts,{ASR=}000000,'Ma byt jiz obslouzeno, chyba.');
    end etest2_1;


  ----------------------------------------------------------------------------------------------------
  procedure etest2_2 = 
  ----------------------------------------------------------------------------------------------------
  begin
    begin
      testlib_assert_reset_order(ts,1,{ASR=}000000,'Pred vyjimkou');
      raise memory_error;
      testlib_report_err(ts,{ASR=}000000,'Po vyjimce, chyba.');
    leave
      testlib_assert_strict_order(ts,2,{ASR=}000000,'Uvnitr leave');
      end;
  catch
    when memory_error do
      testlib_assert_strict_order(ts,3,{ASR=}000000,'Uvnitr catch vyjimky');
    when program_error do
      testlib_report_err(ts,{ASR=}000000,'Ma byt jiz obslouzeno, chyba.');
    when others do
      testlib_report_err(ts,{ASR=}000000,'Ma byt jiz obslouzeno, chyba.');
    end etest2_2;

  ----------------------------------------------------------------------------------------------------
  procedure etest2_3 = 
  ----------------------------------------------------------------------------------------------------
  begin
    begin
      testlib_assert_reset_order(ts,1,{ASR=}000000,'Pred vyjimkou');
      raise memory_error;
      testlib_report_err(ts,{ASR=}000000,'Po vyjimce, chyba.');
    catch
      when memory_error do
        testlib_assert_strict_order(ts,2,{ASR=}000000,'Uvnitr catch vyjimky');
        raise;
        testlib_report_err(ts,{ASR=}000000,'Po vyjimce, chyba.');
      when program_error do
        testlib_report_err(ts,{ASR=}000000,'Ma byt jiz obslouzeno, chyba.');
      when others do
        testlib_report_err(ts,{ASR=}000000,'Ma byt jiz obslouzeno, chyba.');
      end;
  catch 
    when memory_error do
      testlib_assert_strict_order(ts,3,{ASR=}000000,'Uvnitr catch vyjimky');
    when others do
      testlib_report_err(ts,{ASR=}000000,'Ma byt jiz obslouzeno, chyba.');
  leave
    testlib_assert_strict_order(ts,4,{ASR=}000000,'Leave');
    end etest2_3;

  ----------------------------------------------------------------------------------------------------
  procedure etest2_4 = 
  ----------------------------------------------------------------------------------------------------
  begin
    begin
      testlib_assert_reset_order(ts,1,{ASR=}000000,'Pred vyjimkou');
      raise memory_error;
    catch
      when program_error do
        testlib_assert_strict_order(ts,2,{ASR=}000000,'Uvnitr catch nadrazene tridy vyjimky');
      when others do
        testlib_report_err(ts,{ASR=}000000,'Ma byt jiz obslouzeno, chyba.');
      end;
  catch 
    when memory_error do
      testlib_report_err(ts,{ASR=}000000,'Ma byt jiz obslouzeno, chyba.');
    when others do
      testlib_report_err(ts,{ASR=}000000,'Ma byt jiz obslouzeno, chyba.');
  leave
    testlib_assert_strict_order(ts,3,{ASR=}000000,'Leave');
    end etest2_4;

begin
  testlib_create_session(ts2,'etest2','Jednoduchy test hazeni vyjimky');

  testlib_assert_reset_order(ts2,1,{ASR=}000000,'Zacatek');
  testlib_create_session(ts,'etest2.1','');
  etest2_1;
  testlib_discard_session(ts);
  testlib_assert_strict_order(ts2,2,{ASR=}000000,'Konec');

  testlib_assert_reset_order(ts2,1,{ASR=}000000,'Zacatek');
  testlib_create_session(ts,'etest2.2','');
  etest2_2;
  testlib_discard_session(ts);
  testlib_assert_strict_order(ts2,2,{ASR=}000000,'Konec');
  
  testlib_assert_reset_order(ts2,1,{ASR=}000000,'Zacatek');
  testlib_create_session(ts,'etest2.3','');
  etest2_3;
  testlib_discard_session(ts);
  testlib_assert_strict_order(ts2,2,{ASR=}000000,'Konec');
  
  testlib_assert_reset_order(ts2,1,{ASR=}000000,'Zacatek');
  testlib_create_session(ts,'etest2.4','');
  etest2_4;
  testlib_discard_session(ts);
  testlib_assert_strict_order(ts2,2,{ASR=}000000,'Konec');

leave
  testlib_assert_strict_order(ts2,3,{ASR=}000000,'Leave');
  testlib_discard_session(ts2);
  end etest2;
