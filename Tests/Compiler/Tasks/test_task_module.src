module test_tasks_module =

with
  standard,
  standard.console,
  standard.conversions,
  system.windows.winbase,
  flex.synchronization;

var
  vypis_cs: t_rtl_critical;

type
  t_cislo = t_unsigned32;

{
class t_cislo =
  var
    hodnota: t_unsigned32;

  procedure vypis (
    info  : t_char32ustr) =
  begin
    rtl_critical_lock(vypis_cs);
    begin
      write(unsigned_to_string(GetCurrentThreadID, c_integer_format_hexadecimal));
      write(': ');
      write(info);
      write_line(unsigned_to_string(hodnota));
    leave
      rtl_critical_unlock(vypis_cs);
      end;
    end vypis;

  procedure zvysit (
    cislo : in out t_cislo) =
  begin
    succ cislo.hodnota;
    end zvysit;

  entry =
  begin
    vypis('entry ');
    end entry;

  exit =
  begin
    vypis('exiting ');
    end exit;
  end t_cislo;

overload
  succ : t_cislo.zvysit;
}

procedure vypis (
  info  : t_char32ustr;
  cislo : t_cislo) =
begin
  --cislo.vypis(info);
  rtl_critical_lock(vypis_cs);
  begin
    write(unsigned_to_string(GetCurrentThreadID, c_integer_format_hexadecimal));
    write(': ');
    write(info);
    write_line(unsigned_to_string(cislo));
  leave
    rtl_critical_unlock(vypis_cs);
    end;
  end vypis;


class c_trida =

  var
    v_c_trida: task t_cislo := 987;

  procedure proc =
  begin
    vypis('c_trida.proc, v_c_trida=',v_c_trida);
    succ v_c_trida;
    vypis('c_trida.proc, ted v_c_trida=',v_c_trida);
    end proc;
  
  entry =
  begin
    vypis('c_trida.entry, v_c_trida=',v_c_trida);
    end entry;

  exit =
  begin
    vypis('c_trida.exit, v_c_trida=',v_c_trida);
    end exit;
  end c_trida;


var
  v_modulu: task t_cislo {:= 123};
  trida_v_modulu: task c_trida;

procedure modul_proc =
var
  lokalni_v_modulu: task t_cislo {:= 345};

begin
  vypis('modul_proc: ',lokalni_v_modulu);
  succ lokalni_v_modulu;
  vypis('a ted: ',lokalni_v_modulu);
  trida_v_modulu.proc;
  end modul_proc;


entry =
begin
  rtl_critical_new(vypis_cs);
  end entry;

exit = 
begin
  rtl_critical_discard(vypis_cs);
  end exit;

end test_tasks_module;
