program new_test =

with
  standard,
  standard.conversions,
  standard.console;

class c_trida =

  entry =
  begin
    write_line('c_trida.entry');
    end entry;


  exit =
  begin
    write_line('c_trida.exit');
    end exit;

  end c_trida;

class c_potomek = extend c_trida;
  entry =
  begin
    write_line('c_potomek.entry');
    end entry;


  exit =
  begin
    write_line('c_potomek.exit');
    end exit;
  end c_potomek;


type
  --t_unsigned32 = unsigned 32;
  t_unsigned32_iv = t_unsigned32 := 123;

  t_record = record
    i  : t_unsigned32;
    iit: t_unsigned32_iv;
    iiv: t_unsigned32 := 345;
    end record;

  t_record_ext = t_record with record
    j  : t_unsigned32;
    jit: t_unsigned32_iv;
    jiv: t_unsigned32 := 345;
    --cls: c_trida;
    cls: c_potomek;
    end record;

  t_record_child = t_record;

  t_array_rec = array 1..10 of t_record;
  t_array_rec_ext = array 1..10 of t_record_ext;
  t_unchecked_array_rec = array of t_record;
  t_ranged_array_rec = t_unchecked_array_rec range 1..5;
  t_array_rec_subtyped = t_array_rec;
  t_unchecked_array_rec_ext = array of t_record_ext;
  t_ranged_array_rec_ext = t_unchecked_array_rec_ext range 1..6;

  t_array_class = array 1..10 of c_trida;
  t_array_class_subtyped = t_array_class;
  t_unchecked_array_class = array of c_trida;
  t_ranged_array_class = t_unchecked_array_class range 1..11;

  t_string_rec = string 10 of t_record;
  t_unchecked_string_rec = string of t_record;
  t_ranged_string_rec = string of t_record;
  t_string_rec_ext = string 10 of t_record_ext;
  t_unchecked_string_rec_ext = string of t_record_ext;
  t_ranged_string_rec_ext = t_unchecked_string_rec_ext range 5;

  t_string_class = string 10 of c_trida;
  t_unchecked_string_class = string of c_trida;
  t_ranged_string_class = t_unchecked_string_class range 5;

  p_record = ^class t_record;
  p_record_ext = ^class t_record_ext;

  p_array_rec = ^class t_array_rec;
  p_array_rec_ext = ^t_array_rec_ext;
  p_unchecked_array_rec = ^class t_unchecked_array_rec;
  p_ranged_array_rec = ^t_ranged_array_rec;
  p_array_rec_subtyped = ^t_array_rec_subtyped;
  p_unchecked_array_rec_ext = ^t_unchecked_array_rec_ext;
  p_ranged_array_rec_ext = ^t_ranged_array_rec_ext;

  p_trida = ^class c_trida;
  p_potomek = ^class c_potomek;

  p_array_class = ^class t_array_class;
  p_array_class_subtyped = ^class t_array_class_subtyped;
  p_unchecked_array_class = ^class t_unchecked_array_class;
  p_ranged_array_class = ^class t_ranged_array_class;

  p_string_class = ^t_string_class;
  p_unchecked_string_class = ^class t_unchecked_string_class;
  p_ranged_string_class = ^t_ranged_string_class;

  p_string_rec = ^t_string_rec;
  p_unchecked_string_rec = ^t_unchecked_string_rec;
  p_string_rec_ext = ^t_string_rec_ext;
  p_unchecked_string_rec_ext = ^t_unchecked_string_rec_ext;

procedure check_record (
    r : in class t_record) =
begin
  if r.iit<>123 or r.iiv<>345 then
    write_line('check_record: failed');
    end if;
  end check_record;


procedure check_record_ext (
    r : in class t_record_ext) =
begin
  check_record(r);
  if r.jit<>123 or r.jiv<>345 then
    write_line('check_record_ext: failed');
    end if;
  end check_record_ext;

var
  p: p_record;
  pe: p_record_ext;
  pc: p_trida;
  pp: p_potomek;
  pac: p_array_class;
  pacs: p_array_class_subtyped;
  puac: p_unchecked_array_class;
  prac: p_ranged_array_class;
  par: p_array_rec;
  pae: p_array_rec_ext;
  puar: p_unchecked_array_rec;
  prar: p_ranged_array_rec;
  pars: p_array_rec_subtyped;
  puae: p_unchecked_array_rec_ext;
  prae: p_ranged_array_rec_ext;
  psc: p_string_class;
  pusc: p_unchecked_string_class;
  prsc: p_ranged_string_class;
  psr: p_string_rec;
  pse: p_string_rec_ext;
  pur: p_unchecked_string_rec;
  pue: p_unchecked_string_rec_ext;
  t: tag;

begin
  {-t := t_record_ext:tag;
  write_line('creating...');
  new p tag t_record_ext:tag;
  write_line('done.');}

  {new pc;
  discard pc;

  new pp;
  discard pp;

  new p_potomek(pc);
  discard pc;

  new pc tag c_potomek:tag;
  discard pc;

  t:=c_potomek:tag;
  new pc tag t;
  discard pc;}

  {new p;
  check_record(p^);
  discard p;

  new pe;
  check_record_ext(pe^);
  discard pe;

  new p_record_ext(p);
  check_record_ext(p^);
  discard p;

  new p tag t_record_ext:tag;
  check_record_ext(p^);
  discard p;

  t:=t_record_ext:tag;
  new p tag t;
  check_record_ext(p^);
  discard p;}

  {new pacs;
  discard pacs;}

  {new puac range 5;
  discard puac;}

  {new prac;
  discard prac;}

  {new prac;
  puac:=prac;
  discard puac;}

  {new p;
  check_record(p^);
  discard p;

  new par;
  for i in 1..10 loop
    check_record(par^[i]);
    end loop;
  discard par;

  new pae;
  for i in 1..10 loop
    check_record_ext(pae^[i]);
    end loop;
  discard pae;

  new puar range 10;
  for i in 0..9 loop
    check_record(puar^[i]);
    end loop;
  discard puar;

  new prar;
  for i in 1..5 loop
    check_record(prar^[i]);
    end loop;
  discard prar;}

  {new pars;
  for i in 1..10 loop
    check_record(pars^[i]);
    end loop;
  discard pars;

  new puae range 10;
  for i in puae^:range loop
    check_record_ext(puae^[i]);
    end loop;
  discard puae;}

  {new prae;
  for i in prae^:range loop
    check_record_ext(prae^[i]);
    end loop;
  discard prae;

  new puar tag t_unchecked_array_rec:tag range 10;
  for i in puar^:range loop
    check_record(puar^[i]);
    end loop;
  discard puar;

  t:=t_unchecked_array_rec:tag;
  new puar tag t range 10;
  for i in puar^:range loop
    check_record(puar^[i]);
    end loop;
  discard puar;}

  {new psc;
  new pc;
  psc^ & pc^;
  discard psc;

  new pusc range 5;
  new pc;
  pusc^ & pc^;
  new pc;
  pusc^ & pc^;
  discard pusc;}

  {new prsc;
  new pc;
  prsc^ & pc^;
  discard prsc;

  new pusc range 5;
  new pc;
  pusc^ & pc^;
  discard pusc;

  new pusc tag t_unchecked_string_class:tag range 10;
  new pc;
  pusc^ & pc^;
  discard pusc;}

  {new prsc;
  new pc;
  prsc^ & pc^;
  discard prsc;

  new psr;
  new p;
  psr^ & p^;
  for i in psr^:range loop
    check_record(psr^[i]);
    end loop;
  discard psr;}

  {new pse;
  new pe;
  pse^ & pe^;
  for i in pse^:range loop
    check_record_ext(pse^[i]);
    end loop;
  discard pse;

  new pur range 10;
  new p;
  pur^ & p^;
  for i in pur^:range loop
    check_record(pur^[i]);
    end loop;
  discard pur;

  new pue range 10;
  new pe;
  pue^ & pe^;
  for i in pue^:range loop
    check_record_ext(pue^[i]);
    end loop;
  discard pue;}
  end new_test;
