#option warning(all,false);
#option hint(all,false);
----------------------------------------------------------------------------------------------------
program squeue =
-- Rtl library only
-- Programming Language Flex Samples.
-- Copyright (C) 2003 A && L soft, s.r.o.
----------------------------------------------------------------------------------------------------
with
     flex
    ,flex.tasks
    ,flex.synchronization
    ,flex.hw_api
    --,testlib
    ,standard
    ,standard.console
    ,standard.conversions
    ;

const
    maxcount       = $40_0000;

var
    wr1            : aliased t_rtl_task_ref_local;
    wr2            : aliased t_rtl_task_ref_local;
    re1            : aliased t_rtl_task_ref_local;
    re2            : aliased t_rtl_task_ref_local;
    wa1            : aliased t_rtl_task_ref_local;

    s              : aliased t_rtl_squeue;
    wrcounter      : aliased t_rtl_native_signed;
    recounter      : aliased t_rtl_native_signed;
    aproxlen       : aliased t_rtl_native_signed;


----------------------------------------------------------------------------------------------------
procedure simple = 
----------------------------------------------------------------------------------------------------
var
    item           : p_rtl_native_signed;
    len            : t_rtl_native_signed;
    relast         : t_rtl_native_signed;

begin
  {
  -- dlouhe cteni z prazdne fronty
  len:=$1_0000;
  while (len>0) loop
    rtl_squeue_draw_out(s,t_rtl_pointer(item));
    len - 1;
    end loop;
    }

  {
  new item;
  rtl_interlocked_inc_out(^aproxlen,len);
  rtl_interlocked_inc_out(^wrcounter,item^);
  rtl_squeue_append(s,item);

  rtl_interlocked_dec_out(^aproxlen,len);
  rtl_squeue_draw_out(s,t_rtl_pointer(item));
  discard item;

  -- test cteni za poslednim prvkem
  rtl_interlocked_dec_out(^aproxlen,len);
  rtl_squeue_draw_out(s,t_rtl_pointer(item));
  discard item;
  }
  
  
  --push
  new item;
  rtl_interlocked_inc_out(^aproxlen,len);
  rtl_interlocked_inc_out(^wrcounter,item^);
  rtl_squeue_append(s,item);

  new item;
  rtl_interlocked_inc_out(^aproxlen,len);
  rtl_interlocked_inc_out(^wrcounter,item^);
  rtl_squeue_append(s,item);
  
  new item;
  rtl_interlocked_inc_out(^aproxlen,len);
  rtl_interlocked_inc_out(^wrcounter,item^);
  rtl_squeue_append(s,item);
  
  new item;
  rtl_interlocked_inc_out(^aproxlen,len);
  rtl_interlocked_inc_out(^wrcounter,item^);
  rtl_squeue_append(s,item);
  
  new item;
  rtl_interlocked_inc_out(^aproxlen,len);
  rtl_interlocked_inc_out(^wrcounter,item^);
  rtl_squeue_append(s,item);

  --pop
  rtl_interlocked_dec_out(^aproxlen,len);
  rtl_interlocked_inc_out(^recounter,relast);
  rtl_squeue_draw_out(s,t_rtl_pointer(item));
  discard item;

  rtl_interlocked_dec_out(^aproxlen,len);
  rtl_interlocked_inc_out(^recounter,relast);
  rtl_squeue_draw_out(s,t_rtl_pointer(item));
  discard item;

  rtl_interlocked_dec_out(^aproxlen,len);
  rtl_interlocked_inc_out(^recounter,relast);
  rtl_squeue_draw_out(s,t_rtl_pointer(item));
  discard item;

  rtl_interlocked_dec_out(^aproxlen,len);
  rtl_interlocked_inc_out(^recounter,relast);
  rtl_squeue_draw_out(s,t_rtl_pointer(item));
  discard item;

  rtl_interlocked_dec_out(^aproxlen,len);
  rtl_interlocked_inc_out(^recounter,relast);
  rtl_squeue_draw_out(s,t_rtl_pointer(item));
  discard item;

  recounter:=0;
  wrcounter:=0;
  end simple;

----------------------------------------------------------------------------------------------------
procedure writet:t_rtl_task_entry =
----------------------------------------------------------------------------------------------------
var
    oldcounter     : t_rtl_native_signed;
    item           : p_rtl_native_signed;
    len            : t_rtl_native_signed;
    lastitem       : t_rtl_native_signed;

begin
  write_line('write begin');
  loop
    rtl_interlocked_inc_out(^aproxlen,len);
    rtl_interlocked_inc_out(^wrcounter,lastitem);
    if lastitem+1=maxcount then
      rtl_interlocked_dec_out(^aproxlen,len);
      rtl_interlocked_dec_out(^wrcounter,lastitem);
      break;
      end if;
    new item;
    item^:=lastitem;
    rtl_squeue_append(s,item);

    -- chytracky zpomalovac
    while aproxlen>$1_0000 loop
      rtl_sleep(0);
      end loop;
    end loop;
catch 
  when others do
  write_line('write exception pending');
  raise;
leave
  write_line('write end');
  end writet;

----------------------------------------------------------------------------------------------------
procedure readt:t_rtl_task_entry =
----------------------------------------------------------------------------------------------------
var
    item           : p_rtl_native_signed;
    len            : t_rtl_native_signed;
    lastitem       : t_rtl_native_signed;

begin
  write_line('read begin');
  loop
    if rtl_squeue_try_draw_out(s,t_rtl_pointer(item),1000) then
      rtl_interlocked_dec_out(^aproxlen,len);
      rtl_interlocked_inc_out(^recounter,lastitem);
      discard item;
      if lastitem+1=maxcount then
        break;
        end if;
    else
      if recounter+1=maxcount then
        break;
        end if;
      rtl_sleep(0);

      end if;

    end loop;
catch 
  when others do
  write_line('read exception pending');
  raise;
leave
  write('read end ');
  write_line(signed_to_string(lastitem));
  end readt;


----------------------------------------------------------------------------------------------------
procedure watcht:t_rtl_task_entry =
----------------------------------------------------------------------------------------------------
begin
  loop
    write(signed_to_string(wrcounter));
    write(' ');
    write(signed_to_string(recounter));
    write(' ');
    write_line(signed_to_string(aproxlen));
    rtl_sleep(1000);
    end loop;
leave
  write('watch end ');
    write(signed_to_string(wrcounter));
    write(' ');
    write(signed_to_string(recounter));
    write(' ');
  write_line(signed_to_string(aproxlen));
  end watcht;



----------------------------------------------------------------------------------------------------
-- main
----------------------------------------------------------------------------------------------------
var
    item           : p_rtl_native_signed;
    len            : t_rtl_native_signed;
    lastitem       : t_rtl_native_signed;

begin
  rtl_squeue_new(s,rtl_cst_nonblocking);
  --rtl_squeue_new(s,rtl_cst_critical);
  recounter:=0;
  wrcounter:=0;
  simple;

  rtl_start_task(^watcht,^wa1,false,task_priority_normal,nil);
  rtl_start_task(^readt,^re1,false,task_priority_normal,nil);
  --rtl_start_task(^readt,^re2,false,task_priority_normal,nil);
  rtl_start_task(^writet,^wr1,false,task_priority_normal,nil);
  rtl_start_task(^writet,^wr2,false,task_priority_normal,nil);

  {
  new item;
  rtl_interlocked_inc_out(^aproxlen,len);
  rtl_interlocked_inc_out(^counter,lastitem);
  item^:=lastitem;
  rtl_squeue_append(s,item);
  }

  rtl_wait_and_finish_task(wr1);
  rtl_wait_and_finish_task(wr2);
  --rtl_wait_and_finish_task(wr3);
  rtl_wait_and_finish_task(re1);
  --rtl_wait_and_finish_task(re2);

  if recounter<>wrcounter then
    write_line('divne nesedi pocet');
  else
    write_line('pocet sedi :-)');
    end if;
  
  rtl_kill_when_need_and_finish_task(wa1);

  
  rtl_squeue_discard(s);
  end squeue;
