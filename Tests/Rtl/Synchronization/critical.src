#option warning(all,false);
#option hint(all,false);
----------------------------------------------------------------------------------------------------
program critical =
-- Rtl library only
-- Programming Language Flex Samples.
-- Copyright (C) 2003 A && L soft, s.r.o.
----------------------------------------------------------------------------------------------------
with
    flex,
    flex.tasks,
    flex.hw_api,
    flex.synchronization
    --,testlib
    ,standard
    ,standard.console
    ,standard.conversions
    ;

const
    maxcount       = $40_0000;

var

    wr1            : aliased t_rtl_task_ref_local;
    wr2            : aliased t_rtl_task_ref_local;
    re1            : aliased t_rtl_task_ref_local;
    re2            : aliased t_rtl_task_ref_local;
    wa1            : aliased t_rtl_task_ref_local;

    m1             : aliased t_rtl_critical;
    wrcounter      : aliased t_rtl_native_signed;
    recounter      : aliased t_rtl_native_signed;
    aproxlen       : aliased t_rtl_native_signed;



----------------------------------------------------------------------------------------------------
procedure writet:t_rtl_task_entry =
----------------------------------------------------------------------------------------------------
var
    oldcounter     : t_rtl_native_signed;
    item           : p_rtl_native_signed;
    item2          : p_rtl_native_signed;
    len            : t_rtl_native_signed;
    lastcount      : t_rtl_native_signed;

begin
  write_line('write begin');
  loop
    new item;
    new item2;
    rtl_interlocked_inc_out(^aproxlen,len);
    rtl_interlocked_inc_out(^wrcounter,lastcount);
    if aproxlen>$1_0000 then
      rtl_sleep(10);
      end if;
    item^:=lastcount;
    rtl_critical_lock(m1);
    -- nop
    len + 5;
    len + 5;
    len + 5;
    len + 5;
    len + 5;
    len + 5;
    len + 5;
    rtl_critical_unlock(m1);
    discard item;
    discard item2;
    if lastcount>=maxcount then
      break;
      end if;
    end loop;
catch 
  when others do
  write_line('write exception pending');
leave
  write_line('write end');
  end writet;

----------------------------------------------------------------------------------------------------
procedure readt:t_rtl_task_entry =
----------------------------------------------------------------------------------------------------
var
    oldcounter     : t_rtl_native_signed;
    item           : p_rtl_native_signed;
    item2          : p_rtl_native_signed;
    len            : t_rtl_native_signed;
    lastcount      : t_rtl_native_signed;

begin
  write_line('read begin');
  loop
    if aproxlen>0 then
      new item;
      rtl_interlocked_dec_out(^aproxlen,len);
      rtl_interlocked_inc_out(^recounter,lastcount);
      item^:=lastcount;
      rtl_critical_lock(m1);
      -- nop
      len + 5;
      len + 5;
      len + 5;
      len + 5;
      len + 5;
      len + 5;
      len + 5;
      rtl_critical_unlock(m1);
      discard item;
      if lastcount>=maxcount then
        break;
        end if;
    else
      rtl_sleep(10);
      end if;
    end loop;
catch 
  when others do
  write_line('read exception pending');
leave
  write_line('read end');
  end readt;


----------------------------------------------------------------------------------------------------
procedure watcht:t_rtl_task_entry =
----------------------------------------------------------------------------------------------------
begin
  loop
    write(signed_to_string(wrcounter));
    write(' ');
    write(signed_to_string(recounter));
    write(' ');
    write_line(signed_to_string(aproxlen));
    rtl_sleep(1000);
    end loop;
leave
  write('watch end ');
  write(signed_to_string(wrcounter));
  write(' ');
  write(signed_to_string(recounter));
  write(' ');
  write_line(signed_to_string(aproxlen));
  end watcht;


begin
  rtl_critical_new(m1);

  rtl_start_task(^watcht,^wa1,false,task_priority_normal,nil);
  rtl_start_task(^readt,^re1,false,task_priority_normal,nil);
  --rtl_start_task(^readt,^re2,false,task_priority_normal,nil);
  rtl_start_task(^writet,^wr1,false,task_priority_normal,nil);
  rtl_start_task(^writet,^wr2,false,task_priority_normal,nil);
  --run
  rtl_sleep(1000);
  rtl_wait_and_finish_task(wr1);
  rtl_wait_and_finish_task(wr2);
  rtl_wait_and_finish_task(re1);
  rtl_kill_when_need_and_finish_task(wa1);

  
  rtl_critical_discard(m1);
  end critical;