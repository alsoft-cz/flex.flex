----------------------------------------------------------------------------------------------------
class public c_operand =
-- P©eklada‡ Flexu.
-- Operand strojov‚ instrukce.
----------------------------------------------------------------------------------------------------
-- Ondra : 14.04.2003 : Vytvo©il.
----------------------------------------------------------------------------------------------------

use
  cc_def.cc_lexsym,
  cx_expr,cx_expr.cx_def;

var
  -- z kladn¡ informace o operandu
  optype           : protected t_operand_type;   -- typ oprandu
  edtype           : protected t_elementary_data_type; -- element rn¡ datov˜ typ operandu
  size             : protected t_unsigned;       -- velikost operandu

  -- relokace
  rtype            : protected irelotype;        -- typ relokace
  rentity          : protected pentity{pflexrecord}; -- souvisej¡c¡ entita
  rexpr            : protected cx_expr.cx_def.pexpnode{pflexclass}; -- souvisej¡c¡ v˜raz

  -- zp–sob v˜po‡tu run-time atribut–
  rta_info         : protected array rtattrib of record
      mode         : t_rtattrib_mode;            -- re‘im v˜po‡tu run-time atributu
      offset       : t_unsigned;                 -- offset run-time atributu v objektu
      end record;

  -- p©¡m  hodnota
  imm              : protected timm32;           -- p©¡m  konstantn¡ hodnota

  -- informace o pou‘it‚m registru
  reg              : protected ioperreg;         -- registr

  -- informace o adrese [base+index*scale+displacement]
  base             : protected ioperreg;         -- b zov˜ registr
  index            : protected ioperreg;         -- index
  scale            : protected t_unsigned32;     -- mˆ©¡tko (1,2,4,8)
  disp             : protected timm32;           -- konstantn¡ posunut¡

  -- relativn¡ adresa
  rel              : protected timm32;           -- p©¡m  relativn¡ adresa

  -- c¡l 
  disp_target      : protected itarget;          -- logick˜ c¡l skoku pro operand typu [io_rel] nebo
                                                 -- absolutn¡ adresy coby hodnoty operandu [io_imm]

  -- c¡l skoku
  target           : protected itarget;          -- fyzick˜ c¡l skoku, nelze-li rovnou ur‡it adresu

  -- podm¡nka
  cc               : protected icond;            -- podm¡nka

  -- p©¡davn‚ £daje inline assembleru
  spos             : protected cc_def.cc_lexsym.lexposblock; -- pozice operandu v inline assembleru

----------------------------------------------------------------------------------------------------
-- Metody pro vytv ©en¡ a ru¨en¡ r–zn˜ch druh– operand–.
----------------------------------------------------------------------------------------------------
static create_imm (
    _edtype        : in t_elementary_data_type;  -- element rn¡ datov˜ typ operandu
    _size          : in t_unsigned;              -- velikost p©¡m‚ hodnoty (0=univerz ln¡ velikost)
    _imm           : in timm32);                 -- p©¡m  hodnota
-- Vytvo©¡ nov˜ operand typu [io_imm].
----------------------------------------------------------------------------------------------------
static create_new_register (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    _edtype        : in t_elementary_data_type;  -- element rn¡ datov˜ typ operandu
    _size          : in t_unsigned);             -- po‘adovan  velikost registru
-- Vytvo©¡ nov˜ operand typu [io_reg] a alokuje pro nˆj nov˜ registr.
----------------------------------------------------------------------------------------------------
static create_new_register_from_operand (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    _edtype        : in t_elementary_data_type;  -- element rn¡ datov˜ typ operandu
    _size          : in t_unsigned;              -- po‘adovan  velikost registru
    _old_operand   : in c_operand);              -- p–vodn¡ operand, ze kter‚ho lze pou‘¡t registr
-- Vytvo©¡ nov˜ operand typu [io_reg]. P©ednostnˆ pou‘ije registr z dodan‚ho dal¨¡ho operandu.
-- Pokud ‘ dn˜ vhodn˜ nenajde, alokuje nov˜.
----------------------------------------------------------------------------------------------------
static create_use_register (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    _edtype        : in t_elementary_data_type;  -- element rn¡ datov˜ typ operandu
    _reg           : in ireg);                   -- registr
-- Vytvo©¡ nov˜ operand typu [io_reg] a pou‘ije dodan˜ registr.
----------------------------------------------------------------------------------------------------
static create_memory_address (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    _edtype        : in t_elementary_data_type;  -- element rn¡ datov˜ typ operandu
    _size          : in t_unsigned;              -- po‘adovan  velikost registru
    _base          : in ireg;                    -- b zov˜ registr
    _disp          : in timm32);                 -- posunut¡
-- Vytvo©¡ operand typu [io_mem].
----------------------------------------------------------------------------------------------------
static create_memory_address_on_stack (
    inst           : in out icodeinst;           -- instance
    _edtype        : in t_elementary_data_type;  -- element rn¡ datov˜ typ operandu
    _size          : in t_unsigned;              -- po‘adovan  velikost registru
    _disp          : in timm32);                 -- posunut¡
-- Vytvo©¡ operand typu [io_mem] b zovan˜ k frame pointeru.
----------------------------------------------------------------------------------------------------
static create_memory_address_from_operand (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    _edtype        : in t_elementary_data_type;  -- element rn¡ datov˜ typ operandu
    _size          : in t_unsigned;              -- po‘adovan  velikost registru
    _old_operand   : in c_operand);              -- p–vodn¡ operand, ze kter‚ho lze pou‘¡t registr
-- Vytvo©¡ operand typu [io_mem] podle dodan‚ho p–vodn¡ho operandu typu [io_reg]. P–vodn¡ operand
-- neuvol¤uje.
----------------------------------------------------------------------------------------------------
static create_temporary (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    _edtype        : in t_elementary_data_type;  -- element rn¡ datov˜ typ operandu
    _size          : in t_unsigned);             -- po‘adovan  velikost registru
-- Vytvo©¡ operand typu [io_mem] a alokuje pro nˆj pracovn¡ prostor na stacku.
----------------------------------------------------------------------------------------------------
static create_relative_address (
    _size          : in t_unsigned);             -- velikost adresy (0=automaticky)
-- Vytvo©¡ operand typu [io_rel]. Typ operandu automaticky nastav¡ na [edt_offset].
-- Relativn¡ adresa je implicitnˆ pr zdn . Pro nastaven¡ adresy na relokabiln¡ symbol se mus¡
-- pou‘¡t [set_target] nebo [set_relo_*].
----------------------------------------------------------------------------------------------------
static create_condition (      
    _cc            : in icond);                  -- podm¡nka
-- Vytvo©¡ operand typu [io_cc]. Typ operandu automaticky nastav¡ na [edt_none].
----------------------------------------------------------------------------------------------------
static create_on_stack (
    _edtype        : in t_elementary_data_type;  -- element rn¡ datov˜ typ operandu
    _size          : in t_unsigned);             -- po‘adovan  velikost registru
-- Vytvo©¡ operand typu [io_stack] reprezentuj¡c¡ hodnotu ulo‘enou na vrcholu stacku.
----------------------------------------------------------------------------------------------------
static clone (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    _old_operand   : in c_operand);              -- p–vodn¡ operand
-- Naklonuje dodan˜ operand do tohoto operandu. V¨echny dr‘en‚ registry a dal¨¡ zdroje jsou od t‚to
-- chv¡le dr‘eny nez visle obˆma operandy, tak‘e je nutn‚ oba uvolnit.
----------------------------------------------------------------------------------------------------
static transfer (
    _old_operand   : in out c_operand);
-- P©evede p–vodn¡ operand [old_operand] do tohoto operandu. P–vodn¡ operand pot‚ zneplatn¡, 
-- neuvoln¡ v¨ak dr‘en‚ registry a dal¨¡ zdroje, proto‘e ty p©ech zej¡ do vlastnictv¡ tohoto 
-- operandu. P–vodn¡ operand tedy ji‘ nen¡ t©eba uvol¤ovat, nen¡ to v¨ak na z vadu.
----------------------------------------------------------------------------------------------------
static replace (
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    _old_operand   : in out c_operand);
-- Zru¨¡ p–vodn¡ operand a nahrad¡ ho dodan˜m operandem [old_operand]. Funguje jako kombinace [free]
-- a [transfer] s t¡m rozd¡lem, ‘e je povoleno stejn˜ operand pou‘¡t dvakr t.
----------------------------------------------------------------------------------------------------
static free (
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext);       -- kontext generov n¡ v˜razu
-- Zru¨¡ operand. Pokud pou‘¡val nˆjak‚ registry, uvoln¡ je.
-- Jestli‘e nen¡ [free] explicitnˆ zavol no, zavol  se automaticky p©i proveden‚ [exit] operandu.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
-- Obecn‚ £pravy a transformace operand–.
----------------------------------------------------------------------------------------------------
-- %%TECH Operace p©eveden¡ nastaven¡ subcontextu do supercontextu je sice operac¡ nad kontexty, ale
-- mus¡ b˜t implementov na zde. Bli‘n¡ popis cirkul rn¡ reference, kter  by jinak vznikla, viz
-- [ci_context].
--
static retrieve (
    inst           : in out icodeinst;           -- instance
    info           : in igeninfo;                -- informace o p©ekladu
    subcontext     : in iexprcontext;            -- kontext podv˜razu
    context        : in out iexprcontext);       -- aktu ln¡ kontext v˜razu
-- P©evede operand z pod©¡zen‚ho kontextu do nad©azen‚ho.
----------------------------------------------------------------------------------------------------
static refresh (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext);       -- aktu ln¡ kontext v˜razu
-- Aktualizuje jm‚na registr– v operandu.
----------------------------------------------------------------------------------------------------
static adjust_size (
    _size          : in t_unsigned);             -- nov  velikost operandu
-- Uprav¡ velikost operandu. Je-li operand typu [io_reg], tak vybere i p©¡slu¨nou velikost registru.
-- Pokud registr nem  tak velkou sub‡ st, zp–sob¡ intern¡ chybu.
----------------------------------------------------------------------------------------------------
static adjust_edtype (
    _edtype        : in t_elementary_data_type); -- nov˜ element rn¡ datov˜ typ operandu
-- Uprav¡ element rn¡ datov˜ typ operandu.
----------------------------------------------------------------------------------------------------
static get_register return ireg;
-- Z operandu typu [io_reg] nebo [io_mem] p©ed  ven registr. Pro [io_mem] vrac¡ p©ednostˆ b zi.
----------------------------------------------------------------------------------------------------
static get_all_uni_registers return iuniregset;
-- Vr t¡ mno‘inu univerz ln¡ch registr– pou‘it˜ch operandem.
----------------------------------------------------------------------------------------------------
static transform_imm_to_rel;
-- Transformuje operand typu [io_imm] na operand typu [io_rel].
----------------------------------------------------------------------------------------------------
static transform_imm_to_mem (
    _edtype        : in t_elementary_data_type;  -- nov˜ element rn¡ datov˜ typ operandu
    _size          : in t_unsigned);             -- nov  velikost operandu
-- Transformuje operand typu [io_imm] na operand typu [io_mem].
----------------------------------------------------------------------------------------------------
static transform_reg_to_mem (
    _edtype        : in t_elementary_data_type;  -- nov˜ element rn¡ datov˜ typ operandu
    _size          : in t_unsigned);             -- nov  velikost operandu
-- Transformuje operand typu [io_reg] na operand typu [io_mem]. Registr pou‘ije jako b zi.
----------------------------------------------------------------------------------------------------
static transform_imm_or_reg_to_mem (
    _edtype        : in t_elementary_data_type;  -- nov˜ element rn¡ datov˜ typ operandu
    _size          : in t_unsigned);             -- nov  velikost operandu
-- Transformuje operand typu [io_reg] na operand typu [io_mem]. Registr pou‘ije jako b zi.
----------------------------------------------------------------------------------------------------
static transform_mem_to_imm;
-- Transformuje operand typu [io_mem], kter˜ obsahuje pouze displacement a ‘ dn‚ registry, na 
-- operand typu [io_imm]. Velikost v˜sledn‚ho operandu je 4 a typ edt_address, m -li p©i©azen 
-- relokabiln¡ objekt, nebo edt_offset v ostatn¡ch p©¡padech. Z toho plyne, ‘e p©¡padn‚ relokace 
-- z–stanou zachov ny.
----------------------------------------------------------------------------------------------------
                            


----------------------------------------------------------------------------------------------------
-- Manipulace s operandy typu [io_imm].
----------------------------------------------------------------------------------------------------
static set_imm (
    _imm           : in timm32);                 -- p©¡m  hodnota
-- Nastav¡ p©¡mou hodnotu operandu.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
-- Manipulace s operandy typu [io_cc].
----------------------------------------------------------------------------------------------------
static set_cc (
    _cc            : in icond);                  -- podm¡nka
-- Nastav¡ hotnodu podm¡nky operandu.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
-- Manipulace s operandy typu [io_rel].
----------------------------------------------------------------------------------------------------
static set_target (
    _target        : itarget);                   -- c¡l
-- Operandu p©i©ad¡ n vˆ¨t¡ c¡le.
----------------------------------------------------------------------------------------------------
static adjust_relative_address_size (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    _cc            : in icond);                  -- podm¡nka skoku      
-- Uprav¡ velikost adresn¡ho pole podle vzd lenosti k c¡li.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
-- Manipulace s operandy typu [io_mem].
----------------------------------------------------------------------------------------------------
static shift_displacement (
    _disp          : t_signed);                  -- posunut¡
-- P©i‡te k operandu zadan˜ posuv [disp].
----------------------------------------------------------------------------------------------------
static unshift_displacement (
    _disp          : t_signed);                  -- posunut¡
-- Ode‡te od operandu zadan˜ posuv [disp].
----------------------------------------------------------------------------------------------------
static shift_by_index (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    _index         : in ireg;                    -- 32bitov˜ registr
    _scale         : in t_unsigned);             -- mˆ©¡tko
-- P©i‡te k adresn¡mu operandu zadan˜ posuv [_index]*[_scale].
----------------------------------------------------------------------------------------------------
static shift_by_base (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    _base          : in ireg);                   -- 32bitov˜ registr
-- Nastav¡ b zi operandu na registr [_base].
----------------------------------------------------------------------------------------------------
static shift_by_base_or_index (
    inst           : in out icodeinst;           -- instance
    info           : in out igeninfo;            -- informace o pr–bˆhu generov n¡
    context        : in out iexprcontext;        -- kontext generov n¡ v˜razu
    _index         : in ireg);                   -- 32bitov˜ registr
-- P©i‡te k adresn¡mu operandu zadan˜ posuv [_index], a to ve formˆ indexn¡ho nebo b zov‚ho registru
-- podle toho, kter˜ je voln˜. Preferuje b zov˜ registr.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
-- Relokabiln¡ objekty.
----------------------------------------------------------------------------------------------------
static set_relo_entity (
    _entity        : in pentity);                -- relokabiln¡ entita
-- P©i©ad¡ k operandu relokabiln¡ entitu.
----------------------------------------------------------------------------------------------------
static set_relo_imm (
    _expr          : in cx_expr.cx_def.pexpimm); -- relokabiln¡ p©¡m  hodnota
-- P©i©ad¡ k operandu relokabiln¡ p©¡mou hodnotu (v podobˆ odpov¡daj¡c¡ho uzlu stromu).
----------------------------------------------------------------------------------------------------
static copy_relo (
    _old_operand   : in c_operand);
-- Zkop¡ruje informace o relokabiln¡m objektu z dodan‚ho operandu [_old_operand].
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
-- Pr ce s run-time atributy.
----------------------------------------------------------------------------------------------------
static set_rta_mode (
    _rta           : in rtattrib;                -- nastavovan˜ run-time atribut
    _rta_mode      : in t_rtattrib_mode);        -- zp–sob zji¨tˆn¡ run-time atributu
-- Nastav¡ zp–sob zji¨tˆn¡ zadan‚ho run-time atributu tohoto operandu.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
-- Pomocn‚ low-level operace. Standardnˆ nepou‘¡vat!
----------------------------------------------------------------------------------------------------
static create_imm_low_level (
    _edtype        : in t_elementary_data_type;  -- element rn¡ datov˜ typ operandu
    _size          : in t_unsigned;              -- velikost p©¡m‚ hodnoty (0=univerz ln¡ velikost)
    _imm           : in timm32);                 -- p©¡m  hodnota
-- Vytvo©¡ nov˜ operand typu [io_imm].
----------------------------------------------------------------------------------------------------
static create_use_register_low_level (
    _edtype        : in t_elementary_data_type;  -- element rn¡ datov˜ typ operandu
    _reg           : in ireg);                   -- registr
-- Vytvo©¡ nov˜ operand typu [io_reg] a pou‘ije dodan˜ registr, ale nezv˜¨¡ mu po‡et pou‘it¡.
----------------------------------------------------------------------------------------------------
static create_memory_address_low_level (
    _edtype        : in t_elementary_data_type;  -- element rn¡ datov˜ typ operandu
    _size          : in t_unsigned);             -- velikost
-- Vytvo©¡ nov˜ operand typu [io_mem] s pr zdnou b z¡, indexem i posunut¡m.
----------------------------------------------------------------------------------------------------
static create_relative_address_low_level (
    _size          : in t_unsigned);             -- velikost adresy (0=automaticky)
-- Vytvo©¡ operand typu [io_rel]. Typ operandu automaticky nastav¡ na [edt_offset].
-- Relativn¡ adresa je implicitnˆ pr zdn . Pro nastaven¡ adresy na relokabiln¡ symbol se mus¡
-- pou‘¡t [set_target] nebo [set_relo_*].
----------------------------------------------------------------------------------------------------
static shift_by_base_low_level (
    _base          : in ireg);                   -- registr
-- P©i‡te k adresn¡mu operandu zadanou b zi [_base].
----------------------------------------------------------------------------------------------------
static shift_by_index_low_level (
    _index         : in ireg;                    -- registr
    _scale         : in t_unsigned);             -- mˆ©¡tko
-- P©i‡te k adresn¡mu operandu zadan˜ posuv [_index]*[_scale].
----------------------------------------------------------------------------------------------------
static base_on_stack_low_level (
    inst           : in out icodeinst);          -- instance
-- B zuje operand vzhledem k frame pointeru.
----------------------------------------------------------------------------------------------------
static clear_relo_low_level;
-- Zru¨¡ relokaci.
----------------------------------------------------------------------------------------------------

end c_operand;