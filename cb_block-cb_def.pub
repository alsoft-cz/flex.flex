----------------------------------------------------------------------------------------------------
module public cb_def =
-- P©eklada‡ Flexu.
-- Definice stromov‚ho tvaru bloku p©¡kaz–.
----------------------------------------------------------------------------------------------------
-- Ondra : 25.09.2001 : Vytvo©il
----------------------------------------------------------------------------------------------------

-- dop©edn‚ deklarace
class blnode;          type pblnode          = ^class blnode;
-- jednoduch‚ p©¡kazy
class blsimple;        type pblsimple        = ^class blsimple;
class blcmd;           type pblcmd           = ^class blcmd;
class blbreak;         type pblbreak         = ^class blbreak;
class blreturn;        type pblreturn        = ^class blreturn;
class blraise;         type pblraise         = ^class blraise;
class blsend;          type pblsend          = ^class blsend;
class blgoto;          type pblgoto          = ^class blgoto;
class blnew;           type pblnew           = ^class blnew;
class bldiscard;       type pbldiscard       = ^class bldiscard;
class bldelay;         type pbldelay         = ^class bldelay;
-- slo‘en‚ p©¡kazy
class blcompound;      type pblcompound      = ^class blcompound;
class blif;            type pblif            = ^class blif;
class blloop;          type pblloop          = ^class blloop;
class blfor;           type pblfor           = ^class blfor;
class blwhile;         type pblwhile         = ^class blwhile;
class blcase;          type pblcase          = ^class blcase;
class blaccept;        type pblaccept        = ^class blaccept;
class blblock;         type pblblock         = ^class blblock;
class blasm;           type pblasm           = ^class blasm;
-- pomocn‚ uzly
class bllabel;         type pbllabel         = ^class bllabel;
class blwhen_m;        type pblwhen_m        = ^class blwhen_m;
class blwhen_c;        type pblwhen_c        = ^class blwhen_c;
class blif_cond;       type pblif_cond       = ^class blif_cond;
class blloop1;         type pblloop1         = ^class blloop1;

type
  -- f ze p©ekladu bloku p©¡kaz–
  blphase          = enum
      bp_syntax;                                 -- syntaktick  anal˜za
      bp_form;                                   -- form ln¡ kontrola
      bp_opt;                                    -- optimalizace
      end enum;

----------------------------------------------------------------------------------------------------
class public blinfo = extend tflexclass;
-- Informace o pr–bˆhu anal˜zy
----------------------------------------------------------------------------------------------------
    var
      phase        : blphase;                    -- f ze p©ekladu
    --pass2        : t_logical;                  -- T-druh˜ pr–chod anal˜zy
      eval         : tentityeval;                -- vyhodnocen¡
    --generic      : boolean;                    -- T-nalezeny extern¡ odkazy
      final        : t_logical;                  -- T-po‘adov no £pln‚ vyhodnocen¡
    
    ------------------------------------------------------------------------------------------------
    static init (
      --pass2      : in t_logical;               -- T-druh˜ pr–chod anal˜zou
        final      : in t_logical);              -- T-po‘ad. pln‚ vyhodnocen¡
    -- Inicializace.
    ------------------------------------------------------------------------------------------------
    end blinfo;

  ----- %%TECH -------------------------------------------------------------------------------------
  -- Postup p©i p©id v n¡ nov˜ch uzl–:
  --   1. do BLOCKTYPE p©idat identifik tor (d le odkazovan˜ jako xxx)
  --   2. vytvo©it objekt BLxxx jako (nep©¡m˜) potomek BLNODE
  --       a pointer PBLxxx
  --   3. v objektu implementovat alespo¤ metodu DUMP
  --   4. do procedur CB_FORM.B_FORM a CB_OPT.B_OPT doplnit
  --      obsluhu nov‚ho typu uzlu
  --------------------------------------------------------------------------------------------------

type
  -- typy uzl–
  blocktype        = enum
      bt_none;                                   -- nezn m˜ uzel
      --- uzly pou‘it‚ poprv‚ p©i syntaktick‚ anal˜ze ---
      -- jednoduch‚ p©¡kazy
      bt_cmd;                                    -- p©i©azovac¡ p©¡kaz
      bt_break;                                  -- p©¡kaz BREAK
      bt_return;                                 -- p©¡kaz RETURN
      bt_raise;                                  -- p©¡kaz RAISE
      bt_send;                                   -- p©¡kaz SEND
      bt_goto;                                   -- p©¡kaz GOTO
      bt_new;                                    -- p©¡kaz NEW
      bt_discard;                                -- p©¡kaz DISCARD
      bt_delay;                                  -- p©¡kaz DELAY
      -- slo‘en‚ p©¡kazy
      bt_if;                                     -- p©¡kaz IF
      bt_loop;                                   -- p©¡kaz LOOP
      bt_for;                                    -- p©¡kaz FOR
      bt_while;                                  -- p©¡kaz WHILE
      bt_case;                                   -- p©¡kaz CASE
      bt_accept;                                 -- p©¡kaz ACCEPT
      bt_block;                                  -- blok p©¡kazu
      bt_asm;                                    -- kod v assembleru
      -- pomocn‚ uzly
      bt_label;                                  -- n vˆ¨t¡
      bt_when_m;                                 -- vˆtev obsluhy zpr vy
      bt_when_c;                                 -- vˆtev CASE
      bt_if_cond;                                -- vˆtev IF
      --- uzly pou‘it‚ poprv‚ p©i optimalizaci ---
      bt_loop1;                                  -- jednopr–chodov˜ cyklus
      end enum;
  blocktypeset     = set of blocktype {%%TODO(UNION)}for size use 4;

  -- pozice uzlu
  blposition       = enum
      bp_begin;                                  -- za‡ tek
      bp_end;                                    -- konec
      end enum;
  blpositions      = array blposition of lexposblock;

  -- seznam uzl–
  bllist           = record
      first        : pblnode;                    -- prvn¡ uzel v seznamu
      last         : pblnode;                    -- posledn¡ uzel v seznamu
      end record;

----------------------------------------------------------------------------------------------------
class public blnode = extend tflexclass;
-- Uzel
----------------------------------------------------------------------------------------------------

    var
      btype        : blocktype;                  -- typ uzlu
      org          : blphase;                    -- f ze vzniku tohoto uzlu
      zprac        : blphase;                    -- f ze zpracov n¡ tohoto uzlu
      next         : pblnode;                    -- n sleduj¡c¡ uzel
      pos          : blpositions;                -- za‡ tek a konec uzlu ve zdrojov‚m textu

      ---- informace p©idan‚ glob ln¡ anal˜zou ----
      blevel       : t_unsigned;                 -- £rove¤ vno©en¡ vzhledem k begin..end blok–m
      loc_cmd      : blocktypeset;               -- lok lnˆ vno©en‚ typy p©¡kaz–
      tra_cmd      : blocktypeset;               -- glob lnˆ vno©en‚ typy p©¡kaz–
      loc_outer    : t_logical;                  -- lok lnˆ vno©en‚ skoky mimo aktu ln¡ blok
      tra_outer    : t_logical;                  -- glob lnˆ vno©en‚ skoky mimo aktu ln¡ blok

    ------------------------------------------------------------------------------------------------
    static setpos (
       blpos       : in blposition;              -- form ln¡ pozice
       pos         : in lexposblock);            -- pozice ve zdroj ku
    -- Nastav¡ pozici uzlu.
    ------------------------------------------------------------------------------------------------
    static errpos (
       blpos       : in blposition);             -- form ln¡ pozice
    -- Dosad¡ pozici uzlu do posledn¡ho chybov‚ho hl ¨en¡.
    ------------------------------------------------------------------------------------------------
    virtual dump return t_char32ustr;
    -- Dump uzlu.
    ------------------------------------------------------------------------------------------------
    end blnode;



----------------------------------------------------------------------------------------------------
#separate public cb_choice;
-- Optimalizovan˜ seznam v˜bˆr–.
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
class public blcompound = extend blnode; 
-- slo‘en˜ p©¡kaz
----------------------------------------------------------------------------------------------------

    var
      sub          : bllist;                     -- seznam p©¡kaz–

    end blcompound;



----------------------------------------------------------------------------------------------------
class public blsimple = extend blnode; 
-- jednoduch˜ p©¡kaz
----------------------------------------------------------------------------------------------------

    var
      bprolog      : bllist;                     -- prolog p©¡kazu - prov‚st p©ed proveden¡m
      bepilog      : bllist;                     -- epilog p©¡kazu - prov‚st po proveden¡

    end blsimple;



----------------------------------------------------------------------------------------------------
class public blcond = extend blcompound; 
-- uzel s podm¡nkou
----------------------------------------------------------------------------------------------------

    var
      cond         : pexpnode;                   -- podm¡nka

    end blcond;



----------------------------------------------------------------------------------------------------
class public blcmd = extend blsimple; 
-- p©i©azovac¡ p©¡kaz
----------------------------------------------------------------------------------------------------

    var
      expr         : pexpnode;                   -- p©¡kaz

    end blcmd;



----------------------------------------------------------------------------------------------------
class public blbreak = extend blsimple; 
-- p©¡kaz BREAK
----------------------------------------------------------------------------------------------------
    end blbreak;



----------------------------------------------------------------------------------------------------
class public blreturn = extend blsimple; 
-- p©¡kaz RETURN
----------------------------------------------------------------------------------------------------
    end blreturn;



----------------------------------------------------------------------------------------------------
class public blmessage = extend blsimple; 
-- zasl n¡ zpr vy
----------------------------------------------------------------------------------------------------

    var
      msg          : pexpnode;                   -- zpr va
      dest         : pexpnode;                   -- c¡lov˜ task

    end blmessage;



----------------------------------------------------------------------------------------------------
class public blraise = extend blmessage; 
-- p©¡kaz RAISE
----------------------------------------------------------------------------------------------------
    end blraise;



type
  -- ‡ sti p©¡kazu SEND
  blsendpart       = enum
      bsp_do;                                    -- ‡ st DO
      bsp_accept;                                -- ‡ st WHEN ACCEPT DO
      bsp_delay;                                 -- ‡ st WHEN DELAY DO
      end enum;
  blsendpartset    = set of blsendpart;

  -- ‘ivotnost zas¡lan‚ zpr vy
  bllifetime       = enum
      blt_infinite;                              -- neomezeno
      blt_blocking;                              -- neomezeno, ‡ekat na p©ijet¡
      blt_timeout;                               -- timeout
      blt_sequence;                              -- sekvence p©¡kaz–
      end enum;

----------------------------------------------------------------------------------------------------
class public blsend = extend blmessage; 
-- p©¡kaz SEND
----------------------------------------------------------------------------------------------------

    var
      lifetime     : bllifetime;                 -- ‘ivotnost zpr vy
      parts        : blsendpartset;              -- kter‚ ‡ sti p©¡kazy byly uvedeny ve zdroj ku
      time         : pexpnode;                   -- ‘ivotnost zpr vy
      xdo          : bllist;                     -- blok DO
      xaccept      : bllist;                     -- blok WHEN ACCEPT DO
      xdelay       : bllist;                     -- blok WHEN DELAY DO

    end blsend;



----------------------------------------------------------------------------------------------------
class public blgoto = extend blsimple; 
-- p©¡kaz GOTO
----------------------------------------------------------------------------------------------------

    var
      plabel       : pentity_label;              -- n vˆ¨t¡

    end blgoto;



----------------------------------------------------------------------------------------------------
class public blalloc = extend blsimple; 
-- alig tor
----------------------------------------------------------------------------------------------------

    var  
      xvar         : pexpnode;                   -- alokovan  promˆnn 

    end blalloc;



----------------------------------------------------------------------------------------------------
class public blnew = extend blalloc; 
-- p©¡kaz NEW
----------------------------------------------------------------------------------------------------

    var  
      xrange       : pexpnode;                   -- rozsah
      xtag         : pexpnode;                   -- typov  informace

    end blnew;



----------------------------------------------------------------------------------------------------
class public bldiscard = extend blalloc; 
-- p©¡kaz DISCARD
----------------------------------------------------------------------------------------------------
    end bldiscard;



----------------------------------------------------------------------------------------------------
class public bldelay = extend blsimple; 
-- p©¡kaz DELAY
----------------------------------------------------------------------------------------------------

    var  
      expr         : pexpnode;                   -- v˜raz

    end bldelay;



----------------------------------------------------------------------------------------------------
class public blif = extend blcompound; 
-- p©¡kaz IF
----------------------------------------------------------------------------------------------------
    end blif;



----------------------------------------------------------------------------------------------------
class public blloop = extend blcond; 
-- p©¡kaz LOOP
----------------------------------------------------------------------------------------------------
    end blloop;



type
  -- po©ad¡ proveden¡ iterac¡ FOR cyklu
  blfororder       = enum
      bfo_normal;                                -- norm ln¡
      bfo_reverse;                               -- obr cen‚
      bfo_concurrent;                            -- paralelnˆ (obecn‚ po©ad¡)
      end enum;

----------------------------------------------------------------------------------------------------
class public blfor = extend blcompound; 
-- p©¡kaz FOR
----------------------------------------------------------------------------------------------------

    var  
      for_region   : pregion;                    -- region FOR cyklu
      for_var      : pentity_var;                -- ©¡d¡c¡ promˆnn  cyklu
    --xvar         : pexpnode;                   -- promˆnn 
      order        : blfororder;                 -- determinace po©ad¡
      xrange       : pexpnode;                   -- rozsah

    end blfor;



----------------------------------------------------------------------------------------------------
class public blwhile = extend blcond; 
-- p©¡kaz WHILE
----------------------------------------------------------------------------------------------------
    end blwhile;



----------------------------------------------------------------------------------------------------
class public blcase = extend blcompound; 
-- p©¡kaz CASE
----------------------------------------------------------------------------------------------------

    var  
      expr         : pexpnode;                   -- v˜raz

    end blcase;



type
  -- re‘im ‡ek n¡ na zpr vu
  blacceptmode     = enum
      bam_check;                                 -- jednor zov‚ ‡ten¡ zpr vy
      bam_delay;                                 -- ‡ek n¡ na zpr vu
      bam_infinite;                              -- nekone‡n‚ ‡ek n¡ na zpr vu
      end enum;

----------------------------------------------------------------------------------------------------
class public blaccept = extend blcompound; 
-- p©¡kaz ACCEPT
----------------------------------------------------------------------------------------------------

    var  
      mode         : blacceptmode;               -- re‘im ‡ten¡ zpr vy
      expr         : pexpnode;                   -- v˜raz

    end blaccept;



----------------------------------------------------------------------------------------------------
class public blblock = extend blcompound; 
-- blok p©¡kaz–
----------------------------------------------------------------------------------------------------

    var  
      binit        : bllist;                     -- kompil torem generovan  ‡ st <INIT>
      bentry       : bllist;                     -- kompil torem generovan  ‡ st <ENTRY>
      bcatch       : bllist;                     -- ‡ st CATCH
      bcatch_pos   : lexposblock;                -- pozice ‡ sti CATCH
      bleave       : bllist;                     -- ‡ st LEAVE
      bleave_pos   : lexposblock;                -- pozice ‡ sti LEAVE
      bexit        : bllist;                     -- kompil torem generovan  ‡ st <EXIT>

    end blblock;



----------------------------------------------------------------------------------------------------
class public blasm            = extend blnode; 
-- kod v assembleru
----------------------------------------------------------------------------------------------------

    var  
      asm_region   : pregion;                    -- region bloku p©¡kaz– v assembleru
      ifirst       : pflexrecord{piasmnodelist};
      ilast        : pflexrecord{piasmnodelist};
    --lfirst       : pflexrecord{piasmlabellist};

    end blasm;



----------------------------------------------------------------------------------------------------
class public bllabel          = extend blnode; 
-- n vˆ¨t¡
----------------------------------------------------------------------------------------------------

    var
      plabel       : pentity_label;              -- n vˆ¨t¡

    end bllabel;



type  
  -- typ v˜bˆru
  blchoicetype     = enum
      bct_choice;                                -- norm ln¡ v˜bˆr
      bct_others;                                -- OTHERS
      end enum;

----------------------------------------------------------------------------------------------------
class public blchoicelist = extend blcompound; 
-- uzel s v˜bˆry
----------------------------------------------------------------------------------------------------

    var  
      ctype        : blchoicetype;               -- typ v˜bˆru
      list         : texprlist;                  -- seznam v˜raz– definuj¡c¡ch v˜razy

    end blchoicelist;



----------------------------------------------------------------------------------------------------
class public blwhen_m = extend blchoicelist; 
-- obsluha zpr vy
----------------------------------------------------------------------------------------------------
    end blwhen_m;



----------------------------------------------------------------------------------------------------
class public blwhen_c = 
-- vˆtev CASE
----------------------------------------------------------------------------------------------------
    with 
      cb_choice;

    extend 
      blchoicelist; 

    var  
      clist        : tchoicelist;                -- optimalizovan˜ seznam v˜bˆr–

    end blwhen_c;



----------------------------------------------------------------------------------------------------
class public blif_cond = extend blcond; 
-- vˆtev IF
----------------------------------------------------------------------------------------------------
    end blif_cond;



----------------------------------------------------------------------------------------------------
class public blloop1 = extend blcompound; 
-- jednopr–chodov˜ cyklus
----------------------------------------------------------------------------------------------------
    end blloop1;



----------------------------------------------------------------------------------------------------
procedure newnode (
    node           : out pblnode;                -- uzel stromu
    info           : in blinfo;                  -- informace o pr–bˆhu anal˜zy
    btype          : in blocktype);              -- typ uzlu
-- Vytvo©en¡ nov‚ho uzlu stromu.
----------------------------------------------------------------------------------------------------
#if debug then;
----------------------------------------------------------------------------------------------------
procedure dumptree (
    bl_            : in pblnode);                -- strom
-- Dump stromu na obrazovku.
----------------------------------------------------------------------------------------------------
#end if;

end cb_def;